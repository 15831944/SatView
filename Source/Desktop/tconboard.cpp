// TCONBOARD.CPP : Telecommand On-Board Software Related Interface Definition.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the telecommand
// on-board software related interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 2008/04/22 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#include "SatView.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


static UINT BASED_CODE nTCOnBoardBufferQueuesStatusBarIndicators[] =
{
	ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE,
	ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE,
	ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE
};


static UINT BASED_CODE nTCOnBoardMemoryImagesMenuImageIDs[] =
{
	IDM_TCONBOARDMEMORYIMAGESTRANSACT,
	IDM_TCONBOARDMEMORYIMAGESDELETE,
	IDM_TCONBOARDMEMORYIMAGESIMPORT,
	IDM_TCONBOARDMEMORYIMAGESEXPORT,
	IDM_TCONBOARDMEMORYIMAGESPRINT,
	IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWABOVE,
	IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWBELOW,
	IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNBEFORE,
	IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNAFTER,
	IDM_TCONBOARDMEMORYIMAGESCLEARTABLEROW,
	IDM_TCONBOARDMEMORYIMAGESDELETETABLEROW,
	IDM_TCONBOARDMEMORYIMAGESDELETETABLECOLUMN,
	IDM_TCONBOARDMEMORYIMAGESCOPYTABLEROW,
	IDM_TCONBOARDMEMORYIMAGESPASTETABLEROW
};

static UINT BASED_CODE nTCOnBoardMemoryImagesStatusBarIndicators[] =
{
	ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE,
	ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE,
	ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE
};



/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItem

CTCOnBoardBufferQueuesItem::CTCOnBoardBufferQueuesItem() : CTCItem()
{
	m_nSourceType = TCITEM_SOURCETYPE_NONE;
	m_bSelected = FALSE;
}

BOOL CTCOnBoardBufferQueuesItem::SetAlerts(CONST CByteArray &nAlertsInfo)
{
	INT  cbData;
	INT  cbMessage;
	INT  cbMessages;
	CByteArray  nMessagesData;
	PROPERTIESDATA  sData;

	for (CopyMemory(&sData, nAlertsInfo.GetData(), (nAlertsInfo.GetSize() >= sizeof(PROPERTIESDATA)) ? sizeof(PROPERTIESDATA) : 0); nAlertsInfo.GetSize() >= sizeof(PROPERTIESDATA) && nAlertsInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(PROPERTIESDATA) + sData.cbAlertTypes + sData.cbAlertMessages[0] + sData.cbAlertMessages[1] && sData.cbAlertTypes >= 0 && sData.cbAlertMessages[0] >= 0 && sData.cbAlertMessages[1] >= 0; )
	{
		for (m_nAlertTypes.SetSize(sData.cbAlertTypes / sizeof(UINT)), m_nAlertMessages.SetSize(sData.cbAlertMessages[0] / sizeof(UINT)), nMessagesData.SetSize(sData.cbAlertMessages[1]), CopyMemory(m_nAlertTypes.GetData(), nAlertsInfo.GetData() + (cbData = sizeof(PROPERTIESDATA)), sData.cbAlertTypes), CopyMemory(m_nAlertMessages.GetData(), nAlertsInfo.GetData() + (cbData = cbData + sData.cbAlertTypes), sData.cbAlertMessages[0]), CopyMemory(nMessagesData.GetData(), nAlertsInfo.GetData() + (cbData = cbData + sData.cbAlertMessages[0]), sData.cbAlertMessages[1]), m_szAlertMessages.RemoveAll(), cbMessages = 0; cbMessages < sData.cbAlertMessages[1]; cbMessages += (cbMessage = (m_szAlertMessages.GetAt(m_szAlertMessages.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szAlertMessages.Add((LPCTSTR)(nMessagesData.GetData() + cbMessages));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesItem::GetAlerts(CByteArray &nAlertsInfo) CONST
{
	INT  cbData;
	INT  nMessage;
	INT  nMessages;
	CByteArray  nMessagesData;
	PROPERTIESDATA  sData;

	for (nMessage = 0, nMessages = (INT)m_szAlertMessages.GetSize(), sData.cbAlertTypes = (INT)(m_nAlertTypes.GetSize()*sizeof(UINT)), sData.cbAlertMessages[0] = (INT)(m_nAlertMessages.GetSize()*sizeof(UINT)), sData.cbAlertMessages[1] = 0; nMessage < nMessages; nMessage++, sData.cbAlertMessages[1] += cbData)
	{
		nMessagesData.SetSize(sData.cbAlertMessages[1] + (cbData = (m_szAlertMessages.GetAt(nMessage).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nMessagesData.GetData() + sData.cbAlertMessages[1], (LPCTSTR)m_szAlertMessages.GetAt(nMessage), cbData);
	}
	for (nAlertsInfo.SetSize((sData.cbSize = sizeof(PROPERTIESDATA) + sData.cbAlertTypes + sData.cbAlertMessages[0] + sData.cbAlertMessages[1])); nAlertsInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nAlertsInfo.GetData(), &sData, sizeof(PROPERTIESDATA));
		CopyMemory(nAlertsInfo.GetData() + (cbData = sizeof(PROPERTIESDATA)), m_nAlertTypes.GetData(), sData.cbAlertTypes);
		CopyMemory(nAlertsInfo.GetData() + (cbData = cbData + sData.cbAlertTypes), m_nAlertMessages.GetData(), sData.cbAlertMessages[0]);
		CopyMemory(nAlertsInfo.GetData() + (cbData = cbData + sData.cbAlertMessages[0]), nMessagesData.GetData(), sData.cbAlertMessages[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesItem::Alert(UINT nType, UINT nMessage, LPCTSTR pszMessage, BOOL bOverwrite)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = (!bOverwrite) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if (nMessage == m_nAlertMessages.GetAt(nIndex)) break;
		continue;
	}
	if (nType >= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION  &&  nType <= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, pszMessage);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesItem::Alert(UINT nType, UINT nMessage, BOOL bEnable)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = ((nType != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ANY && !bEnable) || nMessage == (UINT)-1) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if ((bEnable  &&  nMessage == m_nAlertMessages.GetAt(nIndex)) || (!bEnable  &&  nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))) break;
		continue;
	}
	if (nType >= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION  &&  nType <= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR  &&  nMessage != (UINT)-1 && bEnable)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, EMPTYSTRING);
		return TRUE;
	}
	if (!bEnable)
	{
		if (nMessage != (UINT)-1)
		{
			if (nType == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ANY  &&  nIndex < nCount)
			{
				m_nAlertTypes.RemoveAt(nCount - nIndex - 1);
				m_nAlertMessages.RemoveAt(nCount - nIndex - 1);
				m_szAlertMessages.RemoveAt(nCount - nIndex - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = ((nType >= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION && nType <= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR) || nType == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if ((nType == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE || m_nAlertTypes.GetAt(nIndex) == nType) && m_nAlertMessages.GetAt(nIndex) == nMessage)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
		if (nMessage == (UINT)-1)
		{
			if (nType == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ANY  &&  nCount > 0)
			{
				m_nAlertTypes.RemoveAt(nCount - 1);
				m_nAlertMessages.RemoveAt(nCount - 1);
				m_szAlertMessages.RemoveAt(nCount - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = (nType >= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION && nType <= TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if (m_nAlertTypes.GetAt(nIndex) == nType)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			if (nType == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE)
			{
				m_nAlertTypes.RemoveAll();
				m_nAlertMessages.RemoveAll();
				m_szAlertMessages.RemoveAll();
				return TRUE;
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

UINT CTCOnBoardBufferQueuesItem::IsAlerted(UINT nMessage, CString &szMessage) CONST
{
	INT  nIndex;
	INT  nCount;
	UINT  nType;

	for (nIndex = 0, nCount = (INT)m_nAlertMessages.GetSize(), nType = TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE, szMessage.Empty(); nIndex < nCount; nIndex++)
	{
		if (nMessage != (UINT)-1 && nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			break;
		}
		if (nMessage == (UINT)-1 && nType < m_nAlertTypes.GetAt(nCount - nIndex - 1))
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			nType = m_nAlertTypes.GetAt(nCount - nIndex - 1);
		}
	}
	return((nIndex < nCount) ? m_nAlertTypes.GetAt(nCount - nIndex - 1) : nType);
}
UINT CTCOnBoardBufferQueuesItem::IsAlerted(UINT nMessage) CONST
{
	CString  szMessage;

	return IsAlerted(nMessage, szMessage);
}

INT CTCOnBoardBufferQueuesItem::GetAlertCount(UINT nType) CONST
{
	INT  nIndex;
	INT  nCount[2];

	for (nIndex = 0, nCount[0] = (INT)m_nAlertTypes.GetSize(), nCount[1] = 0; nIndex < nCount[0]; nIndex++)
	{
		if (m_nAlertTypes.GetAt(nIndex) == nType || nType == TCMANUALSTACKITEM_ALERTTYPE_ANY)
		{
			nCount[1]++;
			continue;
		}
	}
	return nCount[1];
}

VOID CTCOnBoardBufferQueuesItem::Select(BOOL bSelect)
{
	m_bSelected = bSelect;
}

BOOL CTCOnBoardBufferQueuesItem::IsSelected() CONST
{
	return m_bSelected;
}

BOOL CTCOnBoardBufferQueuesItem::Copy(CONST CTCOnBoardBufferQueuesItem *pItem)
{
	m_bSelected = pItem->m_bSelected;
	m_nAlertTypes.Copy(pItem->m_nAlertTypes);
	m_nAlertMessages.Copy(pItem->m_nAlertMessages);
	m_szAlertMessages.Copy(pItem->m_szAlertMessages);
	return CTCItem::Copy(pItem);
}

BOOL CTCOnBoardBufferQueuesItem::Compare(CONST CTCOnBoardBufferQueuesItem *pItem) CONST
{
	INT  nMessage;
	INT  nMessages;

	for (nMessage = 0, nMessages = (pItem->m_nAlertTypes.GetSize() == m_nAlertTypes.GetSize() && pItem->m_nAlertMessages.GetSize() == m_nAlertMessages.GetSize() && !memcmp(pItem->m_nAlertTypes.GetData(), m_nAlertTypes.GetData(), m_nAlertTypes.GetSize()*sizeof(UINT)) && !memcmp(pItem->m_nAlertMessages.GetData(), m_nAlertMessages.GetData(), m_nAlertMessages.GetSize()*sizeof(UINT)) && pItem->m_szAlertMessages.GetSize() == m_szAlertMessages.GetSize() && pItem->m_bSelected == m_bSelected) ? (INT)m_szAlertMessages.GetSize() : -1; nMessage < nMessages; nMessage++)
	{
		if (pItem->m_szAlertMessages.GetAt(nMessage) != m_szAlertMessages.GetAt(nMessage)) break;
		continue;
	}
	return((nMessage == nMessages) ? CTCItem::Compare(pItem) : FALSE);
}

BOOL CTCOnBoardBufferQueuesItem::Map(CByteArray &nInfo) CONST
{
	return CTCItem::Map(nInfo);
}

BOOL CTCOnBoardBufferQueuesItem::Unmap(CONST CByteArray &nInfo)
{
	return CTCItem::Unmap(nInfo);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItems

CTCOnBoardBufferQueuesItems::CTCOnBoardBufferQueuesItems() : CTCItems()
{
	return;
}

CTCOnBoardBufferQueuesItems::~CTCOnBoardBufferQueuesItems()
{
	RemoveAll();
}

INT CTCOnBoardBufferQueuesItems::Add(CTCOnBoardBufferQueuesItem *pItem)
{
	return CTCItems::Add(pItem);
}

INT CTCOnBoardBufferQueuesItems::Collect(INT nIndex, CTCOnBoardBufferQueuesItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CUIntArray  nItemIDs;
	CTCOnBoardBufferQueuesItem  *pItem[2];

	for (nItem = 0, nItems = Collect(nIndex, nItemIDs), pItems.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = GetAt(nItemIDs.GetAt(nItem)))) ? new CTCOnBoardBufferQueuesItem : (CTCOnBoardBufferQueuesItem *)NULL))
		{
			if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0) continue;
			delete pItem[1];
		}
		pItems.RemoveAll();
		break;
	}
	return((INT)pItems.GetSize());
}
INT CTCOnBoardBufferQueuesItems::Collect(INT nIndex, CUIntArray &nItemIDs) CONST
{
	return CTCItems::Collect(nIndex, nItemIDs);
}
INT CTCOnBoardBufferQueuesItems::Collect(INT nIndex, CPtrArray &pItems) CONST
{
	return CTCItems::Collect(nIndex, pItems);
}

CTCOnBoardBufferQueuesItem *CTCOnBoardBufferQueuesItems::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardBufferQueuesItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardBufferQueuesItem *)NULL);
}

CTCOnBoardBufferQueuesItem *CTCOnBoardBufferQueuesItems::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardBufferQueuesItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardBufferQueuesItem *)NULL);
}

VOID CTCOnBoardBufferQueuesItems::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCOnBoardBufferQueuesItems::Copy(CONST CTCOnBoardBufferQueuesItems *pItems)
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardBufferQueuesItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems->GetSize(), RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CTCOnBoardBufferQueuesItem))
		{
			pItem->Copy(pItems->GetAt(nItem));
			InsertAt(nItem, pItem, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesItems::Compare(CONST CTCOnBoardBufferQueuesItems *pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardBufferQueuesItem  *pItem;

	for (nItem = 0, nItems = (pItems->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = pItems->GetAt(nItem)) && pItem->Compare(GetAt(nItem))) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesItems::Map(CByteArray &nInfo) CONST
{
	INT  nItem;
	INT  nItems;
	CByteArray  nItemData;
	CTCOnBoardBufferQueuesItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(), nInfo.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->Map(nItemData) && nInfo.Append(nItemData) >= 0) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesItems::Unmap(CONST CByteArray &nInfo)
{
	INT  cbItem;
	INT  cbItems;
	CByteArray  nItemData;
	CTCOnBoardBufferQueuesItem  *pItem;

	for (cbItems = 0, RemoveAll(); cbItems < nInfo.GetSize(); cbItems += cbItem)
	{
		for (CopyMemory(&cbItem, nInfo.GetData() + cbItems, sizeof(cbItem)), nItemData.SetSize(max(min(cbItem, nInfo.GetSize() - cbItems), 0)); nItemData.GetSize() >= 0; )
		{
			CopyMemory(nItemData.GetData(), nInfo.GetData() + cbItems, nItemData.GetSize());
			break;
		}
		if ((pItem = new CTCOnBoardBufferQueuesItem))
		{
			if (pItem->Unmap(nItemData) && Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	return((cbItems == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPrintJobInfo

CTCOnBoardBufferQueuesPrintJobInfo::CTCOnBoardBufferQueuesPrintJobInfo() : CObject()
{
	m_nPrintMode = 0;
	m_nPrintQueueID = (UINT)-1;
	m_nPrintRange[0] = 0;
	m_nPrintRange[1] = 0;
	m_tPrintRange[0] = 0;
	m_tPrintRange[1] = 0;
}

VOID CTCOnBoardBufferQueuesPrintJobInfo::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCOnBoardBufferQueuesPrintJobInfo::GetName() CONST
{
	return m_szName;
}

VOID CTCOnBoardBufferQueuesPrintJobInfo::SetProfile(LPCTSTR pszProfile)
{
	m_szProfile = pszProfile;
}

CString CTCOnBoardBufferQueuesPrintJobInfo::GetProfile() CONST
{
	return m_szProfile;
}

VOID CTCOnBoardBufferQueuesPrintJobInfo::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CTCOnBoardBufferQueuesPrintJobInfo::GetComments() CONST
{
	return m_szComments;
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintMode(UINT nMode)
{
	m_nPrintMode = nMode;
	return TRUE;
}

UINT CTCOnBoardBufferQueuesPrintJobInfo::GetPrintMode() CONST
{
	return m_nPrintMode;
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintBuffer(LPCTSTR pszBuffer)
{
	m_szPrintBuffer = pszBuffer;
	return TRUE;
}

CString CTCOnBoardBufferQueuesPrintJobInfo::GetPrintBuffer() CONST
{
	return m_szPrintBuffer;
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintQueue(LPCTSTR pszQueue)
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE)
	{
		m_szPrintQueue = pszQueue;
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardBufferQueuesPrintJobInfo::GetPrintQueue() CONST
{
	return((m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) ? m_szPrintQueue : EMPTYSTRING);
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintQueueID(UINT nID)
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE)
	{
		m_nPrintQueueID = nID;
		return TRUE;
	}
	return FALSE;
}

UINT CTCOnBoardBufferQueuesPrintJobInfo::GetPrintQueueID() CONST
{
	return((m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) ? m_nPrintQueueID : -1);
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintRange(UINT nMin, UINT nMax)
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE)
	{
		m_nPrintRange[0] = nMin;
		m_nPrintRange[1] = nMax;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesPrintJobInfo::SetPrintRange(CONST CTimeKey &tMin, CONST CTimeKey &tMax)
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE)
	{
		m_tPrintRange[0] = tMin;
		m_tPrintRange[1] = tMax;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::GetPrintRange(UINT &nMin, UINT &nMax) CONST
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE)
	{
		nMin = m_nPrintRange[0];
		nMax = m_nPrintRange[1];
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesPrintJobInfo::GetPrintRange(CTimeKey &tMin, CTimeKey &tMax) CONST
{
	if (m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE)
	{
		tMin = m_tPrintRange[0];
		tMax = m_tPrintRange[1];
		return TRUE;
	}
	return FALSE;
}

VOID CTCOnBoardBufferQueuesPrintJobInfo::Copy(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo)
{
	m_szName = pJobInfo->m_szName;
	m_szProfile = pJobInfo->m_szProfile;
	m_szComments = pJobInfo->m_szComments;
	m_nPrintMode = pJobInfo->m_nPrintMode;
	m_szPrintBuffer = pJobInfo->m_szPrintBuffer;
	m_szPrintQueue = pJobInfo->m_szPrintQueue;
	m_nPrintQueueID = pJobInfo->m_nPrintQueueID;
	m_nPrintRange[0] = pJobInfo->m_nPrintRange[0];
	m_nPrintRange[1] = pJobInfo->m_nPrintRange[1];
	m_tPrintRange[0] = pJobInfo->m_tPrintRange[0];
	m_tPrintRange[1] = pJobInfo->m_tPrintRange[1];
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::Compare(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo) CONST
{
	return((pJobInfo->m_szName == m_szName  &&  pJobInfo->m_szProfile == m_szProfile  &&  pJobInfo->m_szComments == m_szComments  &&  pJobInfo->m_nPrintMode == m_nPrintMode  &&  pJobInfo->m_szPrintBuffer == m_szPrintBuffer && ((m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) != TCONBOARDBUFFERQUEUES_PRINT_QUEUE || (pJobInfo->m_szPrintQueue == m_szPrintQueue  &&  pJobInfo->m_nPrintQueueID == m_nPrintQueueID)) && ((m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE) != TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE || (pJobInfo->m_nPrintRange[0] == m_nPrintRange[0] && pJobInfo->m_nPrintRange[1] == m_nPrintRange[1])) && ((m_nPrintMode & TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE) != TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE || (pJobInfo->m_tPrintRange[0] == m_tPrintRange[0] && pJobInfo->m_tPrintRange[1] == m_tPrintRange[1]))) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProfile = (m_szProfile.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPrintBuffer = (m_szPrintBuffer.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPrintQueue = (m_szPrintQueue.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments + sData.cbPrintBuffer + sData.cbPrintQueue)), sData.nPrintMode = m_nPrintMode, sData.nPrintQueueID = m_nPrintQueueID, sData.nPrintRange[0] = m_nPrintRange[0], sData.nPrintRange[1] = m_nPrintRange[1], sData.tPrintRange[0] = m_tPrintRange[0].GetTime(), sData.tPrintRange[1] = m_tPrintRange[1].GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szProfile, sData.cbProfile);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbProfile), (LPCTSTR)m_szComments, sData.cbComments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComments), (LPCTSTR)m_szPrintBuffer, sData.cbPrintBuffer);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPrintBuffer), (LPCTSTR)m_szPrintQueue, sData.cbPrintQueue);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPrintJobInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments + sData.cbPrintBuffer + sData.cbPrintQueue && sData.cbName > 0 && sData.cbProfile > 0 && sData.cbComments > 0 && sData.cbPrintBuffer > 0 && sData.cbPrintQueue > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szProfile.GetBufferSetLength(STRINGCHARS(sData.cbProfile)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbProfile));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbProfile), STRINGBYTES(sData.cbComments));
		CopyMemory(m_szPrintBuffer.GetBufferSetLength(STRINGCHARS(sData.cbPrintBuffer)), nInfo.GetData() + (cbData = cbData + sData.cbComments), sData.cbPrintBuffer);
		CopyMemory(m_szPrintQueue.GetBufferSetLength(STRINGCHARS(sData.cbPrintQueue)), nInfo.GetData() + (cbData = cbData + sData.cbPrintBuffer), sData.cbPrintQueue);
		m_nPrintMode = sData.nPrintMode;
		m_nPrintQueueID = sData.nPrintQueueID;
		m_nPrintRange[0] = sData.nPrintRange[0];
		m_nPrintRange[1] = sData.nPrintRange[1];
		m_tPrintRange[0] = sData.tPrintRange[0];
		m_tPrintRange[1] = sData.tPrintRange[1];
		m_szName.ReleaseBuffer();
		m_szProfile.ReleaseBuffer();
		m_szComments.ReleaseBuffer();
		m_szPrintBuffer.ReleaseBuffer();
		m_szPrintQueue.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPrintJobs

CTCOnBoardBufferQueuesPrintJobs::CTCOnBoardBufferQueuesPrintJobs() : CPtrArray()
{
	return;
}

CTCOnBoardBufferQueuesPrintJobs::~CTCOnBoardBufferQueuesPrintJobs()
{
	RemoveAll();
}

INT CTCOnBoardBufferQueuesPrintJobs::Add(CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo)
{
	return((INT)CPtrArray::Add(pJobInfo));
}

INT CTCOnBoardBufferQueuesPrintJobs::Find(LPCTSTR pszName) CONST
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->GetName() == pszName) break;
		continue;
	}
	return((nJob < nJobs) ? nJob : -1);
}

CTCOnBoardBufferQueuesPrintJobInfo *CTCOnBoardBufferQueuesPrintJobs::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardBufferQueuesPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCOnBoardBufferQueuesPrintJobInfo *)NULL);
}

CTCOnBoardBufferQueuesPrintJobInfo *CTCOnBoardBufferQueuesPrintJobs::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardBufferQueuesPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCOnBoardBufferQueuesPrintJobInfo *)NULL);
}

VOID CTCOnBoardBufferQueuesPrintJobs::RemoveAll()
{
	INT  nJob;
	INT  nJobs;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		delete GetAt(nJob);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCOnBoardBufferQueuesPrintJobs::Copy(CONST CTCOnBoardBufferQueuesPrintJobs *pPrintJobs)
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)pPrintJobs->GetSize(), RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = new CTCOnBoardBufferQueuesPrintJobInfo))
		{
			pJobInfo->Copy(pPrintJobs->GetAt(nJob));
			InsertAt(nJob, pJobInfo, 1);
			continue;
		}
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPrintJobs::Compare(CONST CTCOnBoardBufferQueuesPrintJobs *pPrintJobs) CONST
{
	INT  nJob[2];
	INT  nJobs[2];

	for (nJob[0] = 0, nJobs[0] = (INT)GetSize(), nJobs[1] = (INT)pPrintJobs->GetSize(); nJob[0] < nJobs[0]; nJob[0]++)
	{
		for (nJob[1] = (nJobs[0] != nJobs[1]) ? nJobs[1] : 0; nJob[1] < nJobs[1]; nJob[1]++)
		{
			if (pPrintJobs->GetAt(nJob[0])->Compare(GetAt(nJob[1]))) break;
			continue;
		}
		if (nJob[1] == nJobs[1]) break;
	}
	return((nJob[0] == nJobs[0] && nJobs[0] == nJobs[1]) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPrintJobs::Map(CByteArray &nInfo) CONST
{
	INT  nJob;
	INT  nJobs;
	CByteArray  nJobData;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(), nInfo.RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->Map(nJobData) && nInfo.Append(nJobData) >= 0) continue;
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPrintJobs::Unmap(CONST CByteArray &nInfo)
{
	INT  cbJob;
	INT  cbJobs;
	CByteArray  nJobData;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (cbJobs = 0, RemoveAll(); cbJobs < nInfo.GetSize(); cbJobs += cbJob)
	{
		for (CopyMemory(&cbJob, nInfo.GetData() + cbJobs, sizeof(cbJob)), nJobData.SetSize(max(min(cbJob, nInfo.GetSize() - cbJobs), 0)); nJobData.GetSize() >= 0; )
		{
			CopyMemory(nJobData.GetData(), nInfo.GetData() + cbJobs, nJobData.GetSize());
			break;
		}
		if ((pJobInfo = new CTCOnBoardBufferQueuesPrintJobInfo))
		{
			if (pJobInfo->Unmap(nJobData) && Add(pJobInfo) >= 0) continue;
			delete pJobInfo;
		}
		break;
	}
	if ((pJobInfo = (!GetSize()) ? new CTCOnBoardBufferQueuesPrintJobInfo : (CTCOnBoardBufferQueuesPrintJobInfo *)NULL))
	{
		for (pJobInfo->SetName(STRING(IDS_PRINTJOB_DEFAULTNAME)), pJobInfo->SetProfile(STRING(IDS_PRINTPROFILE_DEFAULTNAME)), pJobInfo->SetPrintMode(TCONBOARDBUFFERQUEUES_PRINT_SUMMARY); Add(pJobInfo) >= 0; ) return TRUE;
		delete pJobInfo;
		return FALSE;
	}
	return((cbJobs == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsLayoutPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSettingsLayoutPage, CLocalePropertyPage)

CTCOnBoardBufferQueuesSettingsLayoutPage::CTCOnBoardBufferQueuesSettingsLayoutPage() : CLocalePropertyPage(CTCOnBoardBufferQueuesSettingsLayoutPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSettingsLayoutPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::Initialize()
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	LOGFONT  *plfTitle[2];
	LOGFONT  *plfItems[2];
	COLORREF  nGridColor[2];
	CUIntArray  *pColumns[2];

	for (nPage = 0, nPages = GetParentDisplay()->EnumQueuePages(m_szPages); nPage < nPages; nPage++)
	{
		for (nPane = 0, nPanes = TCONBOARDBUFFERQUEUES_PANES; nPane < nPanes; nPane++)
		{
			if ((pColumns[0] = new CUIntArray) != (CUIntArray *)NULL)
			{
				if ((pColumns[1] = new CUIntArray) != (CUIntArray *)NULL)
				{
					if ((plfTitle[0] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
					{
						if ((plfTitle[1] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
						{
							if ((plfItems[0] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
							{
								if ((plfItems[1] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
								{
									if (GetParentDisplay()->GetLayout(m_szPages.GetAt(nPage), (!nPane) ? TCONBOARDBUFFERQUEUES_PANE_SUMMARY : TCONBOARDBUFFERQUEUES_PANE_DETAILS, *pColumns[0]) && GetParentDisplay()->GetListTitleFont(m_szPages.GetAt(nPage), (!nPane) ? TCONBOARDBUFFERQUEUES_PANE_SUMMARY : TCONBOARDBUFFERQUEUES_PANE_DETAILS, plfTitle[0]) && GetParentDisplay()->GetListItemsFont(m_szPages.GetAt(nPage), (!nPane) ? TCONBOARDBUFFERQUEUES_PANE_SUMMARY : TCONBOARDBUFFERQUEUES_PANE_DETAILS, plfItems[0]) && GetParentDisplay()->GetGridBackgroundColor(m_szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, nGridColor[0]))
									{
										pColumns[1]->Copy(*pColumns[0]);
										CopyMemory(plfTitle[1], plfTitle[0], sizeof(LOGFONT));
										CopyMemory(plfItems[1], plfItems[0], sizeof(LOGFONT));
										m_pColumns[nPane][0].Add(pColumns[0]);
										m_pColumns[nPane][1].Add(pColumns[1]);
										m_plfTitle[nPane][0].Add(plfTitle[0]);
										m_plfTitle[nPane][1].Add(plfTitle[1]);
										m_plfItems[nPane][0].Add(plfItems[0]);
										m_plfItems[nPane][1].Add(plfItems[1]);
										m_nGridBackgroundColor[nPane][0].Add(nGridColor[0]);
										m_nGridBackgroundColor[nPane][1].Add(nGridColor[0]);
										continue;
									}
									GlobalFree(plfItems[1]);
								}
								GlobalFree(plfItems[0]);
							}
							GlobalFree(plfTitle[1]);
						}
						GlobalFree(plfTitle[0]);
					}
					delete pColumns[1];
				}
				delete pColumns[0];
			}
			break;
		}
		if (nPane != nPanes) break;
	}
	m_bToolTips[0] = m_bToolTips[1] = GetParentDisplay()->IsToolTipModeEnabled();
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::GetColumns(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns) CONST
{
	INT  nIndex[2];
	CUIntArray  *pColumns;

	for (nIndex[0] = FindPageIndex(pszPage), nIndex[1] = FindPaneIndex(nPane); nIndex[0] >= 0 && nIndex[1] >= 0; )
	{
		if ((pColumns = (CUIntArray *)m_pColumns[nIndex[1]][0].GetAt(nIndex[0])) && pColumns->GetSize() > 0)
		{
			nColumns.Copy(*pColumns);
			return Check(FALSE);
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::GetTitleFont(LPCTSTR pszPage, UINT nPane, LPLOGFONT pTitleFont) CONST
{
	INT  nIndex[2];
	LOGFONT  *plfFont;

	for (nIndex[0] = FindPageIndex(pszPage), nIndex[1] = FindPaneIndex(nPane); nIndex[0] >= 0 && nIndex[1] >= 0; )
	{
		if ((plfFont = (LPLOGFONT)m_plfTitle[nIndex[1]][0].GetAt(nIndex[0])))
		{
			CopyMemory(pTitleFont, plfFont, sizeof(LOGFONT));
			return Check(FALSE);
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::GetItemsFont(LPCTSTR pszPage, UINT nPane, LPLOGFONT pItemsFont) CONST
{
	INT  nIndex[2];
	LOGFONT  *plfFont;

	for (nIndex[0] = FindPageIndex(pszPage), nIndex[1] = FindPaneIndex(nPane); nIndex[0] >= 0 && nIndex[1] >= 0; )
	{
		if ((plfFont = (LPLOGFONT)m_plfItems[nIndex[1]][0].GetAt(nIndex[0])))
		{
			CopyMemory(pItemsFont, plfFont, sizeof(LOGFONT));
			return Check(FALSE);
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::GetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF &nColor) CONST
{
	INT  nIndex[2];

	for (nIndex[0] = FindPageIndex(pszPage), nIndex[1] = FindPaneIndex(nPane); nIndex[0] >= 0 && nIndex[1] >= 0; )
	{
		nColor = m_nGridBackgroundColor[nIndex[1]][0].GetAt(nIndex[0]);
		return Check(FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::GetToolTipMode(BOOL &bEnable) CONST
{
	bEnable = m_bToolTips[0];
	return Check(FALSE);
}

CTCOnBoardBufferQueuesSettingsDialog *CTCOnBoardBufferQueuesSettingsLayoutPage::GetParentDialog() CONST
{
	return((CTCOnBoardBufferQueuesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesSettingsLayoutPage::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::EnumLayoutPanes()
{
	INT  nPage;
	INT  nPages;
	CString  szPane[2];

	for (nPage = 0, nPages = (INT)m_szPages.GetSize(); nPage < nPages; nPage++)
	{
		szPane[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_SUMMARYPANE), (LPCTSTR)m_szPages.GetAt(nPage));
		szPane[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_DETAILSPANE), (LPCTSTR)m_szPages.GetAt(nPage));
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPane[0]);
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPane[1]);
	}
	return((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE, CB_GETCOUNT) == 2 * nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::EnumLayoutColumns()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CStringArray  szColumns;

	if ((nIndex = FindPaneIndex()) == 0)
	{
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS));
	}
	else
	{
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT));
		szColumns.Add(LookupColumnName(nIndex, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS));
	}
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_RESETCONTENT); nColumn < nColumns; nColumn++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szColumns.GetAt(nColumn));
		continue;
	}
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_SETCURSEL);
	return((nColumn == nColumns) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::ShowLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;
	CUIntArray  *pColumns;

	for (nColumn = 0, nColumns = ((pColumns = (CUIntArray *)m_pColumns[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (INT)pColumns->GetSize() : -1, SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW, LVM_DELETEALLITEMS), m_nColumnIndex = 0; nColumn < nColumns; nColumn++)
	{
		if ((nColumn >= m_szColumns.GetSize() && InsertLayoutColumn(nColumn, LookupColumnName(FindPaneIndex(), pColumns->GetAt(nColumn)))) || (nColumn < m_szColumns.GetSize() && ModifyLayoutColumn(nColumn, LookupColumnName(FindPaneIndex(), pColumns->GetAt(nColumn))))) continue;
		break;
	}
	while (nColumn < m_szColumns.GetSize())
	{
		if (!RemoveLayoutColumn(nColumn)) break;
		continue;
	}
	for (nColumn = (nColumn != nColumns) ? (nColumns + 1) : 0; nColumn < nColumns; nColumn++)
	{
		if ((!nColumn  &&  !Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, EMPTYSTRING)) || (nColumn > 0 && !Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, nColumn, EMPTYSTRING))) break;
		continue;
	}
	return((nColumn == nColumns) ? SetCurLayoutColumn() : FALSE);
}

VOID CTCOnBoardBufferQueuesSettingsLayoutPage::ShowLayoutBackground()
{
	COLORREF  nColor;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID, ((nColor = (FindPaneIndex() % 2) ? m_nGridBackgroundColor[FindPaneIndex()][0].GetAt(FindPageIndex()) : GetSysColor(COLOR_WINDOW)) != GetSysColor(COLOR_WINDOW)) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)nColor);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID)->EnableWindow((FindPaneIndex() % 2) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID));
}

VOID CTCOnBoardBufferQueuesSettingsLayoutPage::ShowLayoutFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	LOGFONT  *plfTitle;
	LOGFONT  *plfItems;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (((plfTitle = (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? plfTitle->lfFaceName : EMPTYSTRING) : (((plfItems = (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? plfItems->lfFaceName : EMPTYSTRING)))); (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE) && ((plfTitle = (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()))) && cFontTools.EnumerateFont(plfTitle->lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS) && ((plfItems = (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()))) && cFontTools.EnumerateFont(plfItems->lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfTitle = (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontStyle(plfTitle) : EMPTYSTRING)), 0));
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfTitle = (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontSize(plfTitle) : EMPTYSTRING)), max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfTitle = (LOGFONT *)m_plfTitle[FindPaneIndex()][1].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontSize(plfTitle) : EMPTYSTRING)), 0)));
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfItems = (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontStyle(plfItems) : EMPTYSTRING)), 0));
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfItems = (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontSize(plfItems) : EMPTYSTRING)), max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((plfItems = (LOGFONT *)m_plfItems[FindPaneIndex()][1].GetAt(FindPageIndex()))) ? (LPCTSTR)cFontTools.TranslateFontSize(plfItems) : EMPTYSTRING)), 0)));
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesSettingsLayoutPage::ShowLayoutFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::InsertLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.InsertAt(nIndex, pszColumn);
	m_nColumnIndex = (nIndex <= m_nColumnIndex) ? (INT)min(m_nColumnIndex + 1, m_szColumns.GetSize() - 1) : m_nColumnIndex;
	return Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(FindPaneIndex(), pszColumn));
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::ModifyLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.SetAt(nIndex, pszColumn);
	return Listview_SetColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(FindPaneIndex(), pszColumn));
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::RemoveLayoutColumn(INT nIndex)
{
	if (Listview_DeleteColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex))
	{
		m_nColumnIndex = (nIndex >= m_nColumnIndex) ? ((nIndex > m_nColumnIndex) ? m_nColumnIndex : 0) : max(m_nColumnIndex - 1, 0);
		m_szColumns.RemoveAt(nIndex);
		return SetCurLayoutColumn(m_nColumnIndex);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::SetCurLayoutColumn(INT nIndex)
{
	CUIntArray  *pColumns;

	if ((pColumns = (CUIntArray *)m_pColumns[FindPaneIndex()][0].GetAt(FindPageIndex())) && pColumns->GetSize() > nIndex)
	{
		for (m_szColumns.SetAt(m_nColumnIndex, (m_szColumns.GetAt(m_nColumnIndex).Right(lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_COLUMNMARKER))) == STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_COLUMNMARKER)) ? (m_szColumns.GetAt(m_nColumnIndex).Left(m_szColumns.GetAt(m_nColumnIndex).GetLength() - lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_COLUMNMARKER)))) : m_szColumns.GetAt(m_nColumnIndex)), m_szColumns.SetAt(nIndex, m_szColumns.GetAt(nIndex) + STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_COLUMNMARKER)); TRUE; )
		{
			Listview_SetColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), m_nColumnIndex, m_szColumns.GetAt(m_nColumnIndex), CalcColumnWidth(FindPaneIndex(), m_szColumns.GetAt(m_nColumnIndex)));
			Listview_SetColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(FindPaneIndex(), m_szColumns.GetAt((m_nColumnIndex = nIndex))));
			break;
		}
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		return TRUE;
	}
	return FALSE;
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::GetCurLayoutColumn() CONST
{
	return m_nColumnIndex;
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::CheckLayoutColumn() CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;
	CUIntArray  *pColumns;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn);
	for (nColumn = 0, nColumns = ((pColumns = (CUIntArray *)m_pColumns[FindPaneIndex()][0].GetAt(FindPageIndex()))) ? (INT)pColumns->GetSize() : -1; nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName(FindPaneIndex(), pColumns->GetAt(nColumn)) == szColumn) break;
		continue;
	}
	return((nColumn == nColumns) ? TRUE : FALSE);
}

CString CTCOnBoardBufferQueuesSettingsLayoutPage::LookupColumnName(INT nIndex, UINT nColumn) CONST
{
	if (!nIndex)
	{
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME);
		if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS);
		return EMPTYSTRING;
	}
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCOnBoardBufferQueuesSettingsLayoutPage::LookupColumnName(INT nIndex, LPCTSTR pszColumn) CONST
{
	if (!nIndex)
	{
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME;
		if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS)))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS;
		return 0;
	}
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS), lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS)))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS;
	return 0;
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::CalcColumnsWidth(INT nIndex, CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nColumnItem;
	INT  nColumnItems;

	for (nColumnItem = 0, nColumnItems = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nColumnItem < nColumnItems; nColumnItem++)
	{
		nWidths.Add((nColumnItem > 0) ? (nWidths.GetAt(nColumnItem - 1) + CalcColumnWidth(nIndex, LookupColumnName(nIndex, nColumns.GetAt(nColumnItem)))) : CalcColumnWidth(nIndex, LookupColumnName(nIndex, nColumns.GetAt(nColumnItem))));
		continue;
	}
	return((nWidths.GetSize() == nColumnItems) ? nColumnItems : 0);
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::CalcColumnWidth(INT nIndex, LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	UINT  nColumn;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			if (pDC->GetTextMetrics(&tmFont) && tmFont.tmAveCharWidth > 0)
			{
				nWidth = (!nIndex) ? (((nColumn = LookupColumnName(nIndex, pszColumn)) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryNameColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : 0) : (((nColumn = LookupColumnName(nIndex, pszColumn)) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsNumberColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : 0);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryAPIDColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsNameColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsComputerColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryLimitColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsCommandSourceColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryCountColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsDescriptionColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsCategoryColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (!nIndex) ? ((nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesSummaryStatusColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsSubSystemColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth);
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsArgumentsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsFlagsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPSCColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsExecutionTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsExecutionTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsAuthorizationColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (nIndex > 0) ? ((nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardBufferQueuesDetailsStatusColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth) : nWidth;
				nWidth = (!nWidth) ? (2 * CalcColumnIndent() + pDC->GetTextExtent(pszColumn).cx) : nWidth;
				pDC->SelectObject(pOldFont);
				ReleaseDC(pDC);
				return nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
	return 0;
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::CalcColumnIndent() CONST
{
	return 3 * GetSystemMetrics(SM_CXEDGE);
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::FindPageIndex() CONST
{
	return((INT)min(max(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE)->SendMessage(CB_GETCURSEL), 0) / 2, max(m_pColumns[0][0].GetSize() - 1, 0)));
}
INT CTCOnBoardBufferQueuesSettingsLayoutPage::FindPageIndex(LPCTSTR pszPage) CONST
{
	INT  nPage;
	INT  nPages;

	for (nPage = 0, nPages = (INT)m_szPages.GetSize(); nPage < nPages; nPage++)
	{
		if (!m_szPages.GetAt(nPage).Compare(pszPage)) break;
		continue;
	}
	return((nPage < nPages) ? nPage : 0);
}

INT CTCOnBoardBufferQueuesSettingsLayoutPage::FindPaneIndex() CONST
{
	return((INT)max(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE)->SendMessage(CB_GETCURSEL), 0) % 2);
}
INT CTCOnBoardBufferQueuesSettingsLayoutPage::FindPaneIndex(UINT nPane) CONST
{
	return((nPane == TCONBOARDBUFFERQUEUES_PANE_SUMMARY || nPane == TCONBOARDBUFFERQUEUES_PANE_DETAILS) ? ((nPane + 1) % 2) : 0);
}

VOID CTCOnBoardBufferQueuesSettingsLayoutPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_TOOLTIPS, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME, bCheck);
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID, bCheck);
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, bCheck);
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, bCheck);
	AccessControl(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, bCheck);
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::IsModified(BOOL bAll) CONST
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	INT  nColumn;
	INT  nColumns;
	LOGFONT  *plfTitle[2];
	LOGFONT  *plfItems[2];
	CUIntArray  *pColumns[2];
	CFontTools  cFontTools;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nPane = 0, nPanes = TCONBOARDBUFFERQUEUES_PANES; nPane < nPanes; nPane++)
		{
			for (nPage = 0, nPages = (m_pColumns[nPane][0].GetSize() == m_pColumns[nPane][1].GetSize() && m_pColumns[nPane][0].GetSize() == m_plfTitle[nPane][0].GetSize() && m_plfTitle[nPane][0].GetSize() == m_plfTitle[nPane][1].GetSize() && m_pColumns[nPane][0].GetSize() == m_plfItems[nPane][0].GetSize() && m_plfItems[nPane][0].GetSize() == m_plfItems[nPane][1].GetSize() && m_pColumns[nPane][0].GetSize() == m_nGridBackgroundColor[nPane][0].GetSize() && m_nGridBackgroundColor[nPane][0].GetSize() == m_nGridBackgroundColor[nPane][1].GetSize()) ? (INT)m_pColumns[nPane][0].GetSize() : -1; nPage < nPages; nPage++)
			{
				if ((pColumns[0] = (CUIntArray *)m_pColumns[nPane][0].GetAt(nPage)))
				{
					if ((pColumns[1] = (CUIntArray *)m_pColumns[nPane][1].GetAt(nPage)))
					{
						if ((plfTitle[0] = (LOGFONT *)m_plfTitle[nPane][0].GetAt(nPage)))
						{
							if ((plfTitle[1] = (LOGFONT *)m_plfTitle[nPane][1].GetAt(nPage)))
							{
								if ((plfItems[0] = (LOGFONT *)m_plfItems[nPane][0].GetAt(nPage)))
								{
									if ((plfItems[1] = (LOGFONT *)m_plfItems[nPane][1].GetAt(nPage)))
									{
										for (nColumn = 0, nColumns = (pColumns[0]->GetSize() == pColumns[1]->GetSize() && !lstrcmp(plfTitle[0]->lfFaceName, plfTitle[1]->lfFaceName) && (plfTitle[0]->lfHeight == plfTitle[1]->lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(plfTitle[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(plfTitle[1]))) && plfTitle[0]->lfWeight == plfTitle[1]->lfWeight && plfTitle[0]->lfItalic == plfTitle[1]->lfItalic && !lstrcmp(plfItems[0]->lfFaceName, plfItems[1]->lfFaceName) && (plfItems[0]->lfHeight == plfItems[1]->lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(plfItems[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(plfItems[1]))) && plfItems[0]->lfWeight == plfItems[1]->lfWeight && plfItems[0]->lfItalic == plfItems[1]->lfItalic && m_nGridBackgroundColor[nPane][0].GetAt(nPage) == m_nGridBackgroundColor[nPane][1].GetAt(nPage) && m_bToolTips[0] == m_bToolTips[1]) ? (INT)pColumns[0]->GetSize() : -1; nColumn < nColumns; nColumn++)
										{
											if (pColumns[0]->GetAt(nColumn) != pColumns[1]->GetAt(nColumn)) break;
											continue;
										}
										if (nColumn == nColumns) continue;
									}
								}
							}
						}
					}
				}
				break;
			}
			if (nPage < nPages) break;
		}
		return((nPane != nPanes) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::Check(BOOL bAll) CONST
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	CUIntArray  *pColumns;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nPane = 0, nPanes = TCONBOARDBUFFERQUEUES_PANES; nPane < nPanes; nPane++)
		{
			for (nPage = 0, nPages = (INT)m_pColumns[nPane][0].GetSize(); nPage < nPages; nPage++)
			{
				if ((pColumns = (CUIntArray *)m_pColumns[nPane][0].GetAt(nPage)) && (!pColumns->GetSize() || (((1 << nPane) == TCONBOARDBUFFERQUEUES_PANE_SUMMARY  &&  pColumns->GetAt(0) != TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) || ((1 << nPane) == TCONBOARDBUFFERQUEUES_PANE_DETAILS  &&  pColumns->GetAt(0) != TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)))) break;
				continue;
			}
			if (nPage < nPages) break;
		}
		return((GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowTextLength() > 0 && (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID) || GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->SendMessage(CB_GETCURSEL) >= 0) && nPane == nPanes) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSettingsLayoutPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::PostNcDestroy()
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	LOGFONT  *plfTitle;
	LOGFONT  *plfItems;
	CUIntArray  *pColumns;

	for (nPane = 0, nPanes = TCONBOARDBUFFERQUEUES_PANES; nPane < nPanes; nPane++)
	{
		for (nPage = 0, nPages = (INT)m_pColumns[nPane][0].GetSize(); nPage < nPages; nPage++)
		{
			if ((pColumns = (CUIntArray *)m_pColumns[nPane][0].GetAt(nPage))) delete pColumns;
			if ((pColumns = (CUIntArray *)m_pColumns[nPane][1].GetAt(nPage))) delete pColumns;
		}
		for (nPage = 0, nPages = (INT)m_plfTitle[nPane][0].GetSize(); nPage < nPages; nPage++)
		{
			if ((plfTitle = (LOGFONT *)m_plfTitle[nPane][0].GetAt(nPage))) GlobalFree(plfTitle);
			if ((plfTitle = (LOGFONT *)m_plfTitle[nPane][1].GetAt(nPage))) GlobalFree(plfTitle);
		}
		for (nPage = 0, nPages = (INT)m_plfItems[nPane][0].GetSize(); nPage < nPages; nPage++)
		{
			if ((plfItems = (LOGFONT *)m_plfItems[nPane][0].GetAt(nPage))) GlobalFree(plfItems);
			if ((plfItems = (LOGFONT *)m_plfItems[nPane][1].GetAt(nPage))) GlobalFree(plfItems);
		}
		m_pColumns[nPane][0].RemoveAll();
		m_pColumns[nPane][1].RemoveAll();
		m_plfTitle[nPane][0].RemoveAll();
		m_plfTitle[nPane][1].RemoveAll();
		m_plfItems[nPane][0].RemoveAll();
		m_plfItems[nPane][1].RemoveAll();
		m_nGridBackgroundColor[nPane][0].RemoveAll();
		m_nGridBackgroundColor[nPane][1].RemoveAll();
	}
	m_szPages.RemoveAll();
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSettingsLayoutPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSettingsLayoutPage)
	ON_WM_PAINT()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_TOOLTIPS, OnToolTips)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER, OnInsertColumnAfter)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE, OnRemoveColumn)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID, OnGridBackground)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, OnTitleFont)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, OnItemsFont)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE, OnSelchangePane)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME, OnSelchangeColumnName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, OnSelchangeGridBackgroundColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsLayoutPage message handlers

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::OnInitDialog()
{
	LOGFONT  *plfFont;
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); EnumLayoutPanes() && EnumLayoutColumns(); )
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE, CB_SETCURSEL);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_TOOLTIPS, m_bToolTips[0]);
	CheckRadioButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_PANE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_TOOLTIPS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_CHARACTERISTICS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES)->EnableWindow();
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((((plfFont = (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex())))) ? plfFont->lfFaceName : EMPTYSTRING)));
	ShowLayoutColumns();
	ShowLayoutBackground();
	ShowLayoutFontDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex())); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? GetSysColor(COLOR_WINDOWTEXT) : GetSysColor(COLOR_GRAYTEXT));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

BOOL CTCOnBoardBufferQueuesSettingsLayoutPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMLISTVIEW  *pNotifyInfo = (NMLISTVIEW *)lParam;

	if (pNotifyInfo->hdr.idFrom == IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_VIEW)
	{
		if (pNotifyInfo->hdr.code == LVN_COLUMNCLICK) SetCurLayoutColumn(pNotifyInfo->iSubItem);
		if (pNotifyInfo->hdr.code == LVN_ITEMCHANGING  &&  !(pNotifyInfo->uChanged & LVIF_TEXT))
		{
			*pResult = TRUE;
			return TRUE;
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnInsertColumnAfter()
{
	INT  nIndex;
	CString  szColumn;
	CUIntArray  *pColumns;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); (pColumns = (InsertLayoutColumn((nIndex = m_nColumnIndex + 1), szColumn)) ? (CUIntArray *)m_pColumns[FindPaneIndex()][0].GetAt(FindPageIndex()) : (CUIntArray *)NULL); )
	{
		pColumns->InsertAt(nIndex, LookupColumnName(FindPaneIndex(), szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnRemoveColumn()
{
	INT  nIndex;
	CUIntArray  *pColumns;
	CHourglassCursor  cCursor;

	if ((pColumns = (RemoveLayoutColumn((nIndex = m_nColumnIndex))) ? (CUIntArray *)m_pColumns[FindPaneIndex()][0].GetAt(FindPageIndex()) : (CUIntArray *)NULL))
	{
		pColumns->RemoveAt(nIndex);
		SetCurLayoutColumn();
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnGridBackground()
{
	COLORREF  nColor;

	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (nColor = VGA_COLOR_GRAY));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID));
	m_nGridBackgroundColor[FindPaneIndex()][0].SetAt(FindPageIndex(), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRID)) ? nColor : GetSysColor(COLOR_WINDOW));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnToolTips()
{
	m_bToolTips[0] = IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_TOOLTIPS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnTitleFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnItemsFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangePane()
{
	EnumLayoutColumns();
	ShowLayoutColumns();
	ShowLayoutBackground();
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangeColumnName()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	LOGFONT  *plfTitle;
	LOGFONT  *plfItems;
	CFontTools  cFontTools;

	if ((plfTitle = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		_tcscpy_s(plfTitle->lfFaceName, sizeof(plfTitle->lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if ((plfItems = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)) ? (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		_tcscpy_s(plfItems->lfFaceName, sizeof(plfItems->lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if ((plfTitle = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, plfTitle->lfWeight, plfTitle->lfItalic);
		cFontTools.TranslateFontSize(szSize, plfTitle->lfHeight);
		cFontTools.EnumerateFontCharacteristics(plfTitle);
	}
	if ((plfItems = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)) ? (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, plfItems->lfWeight, plfItems->lfItalic);
		cFontTools.TranslateFontSize(szSize, plfItems->lfHeight);
		cFontTools.EnumerateFontCharacteristics(plfItems);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangeFontStyle()
{
	CString  szStyle;
	LOGFONT  *plfTitle;
	LOGFONT  *plfItems;
	CFontTools  cFontTools;

	if ((plfTitle = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, plfTitle->lfWeight, plfTitle->lfItalic);
	}
	if ((plfItems = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)) ? (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, plfItems->lfWeight, plfItems->lfItalic);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangeFontSize()
{
	CString  szSize;
	LOGFONT  *plfTitle;
	LOGFONT  *plfItems;
	CFontTools  cFontTools;

	if ((plfTitle = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? (LOGFONT *)m_plfTitle[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, plfTitle->lfHeight);
	}
	if ((plfItems = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)) ? (LOGFONT *)m_plfItems[FindPaneIndex()][0].GetAt(FindPageIndex()) : (LOGFONT *)NULL))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, plfItems->lfHeight);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsLayoutPage::OnSelchangeGridBackgroundColor()
{
	m_nGridBackgroundColor[FindPaneIndex()][0].SetAt(FindPageIndex(), (UINT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsPrintingComments

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSettingsPrintingComments, CEdit)

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSettingsPrintingComments, CEdit)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSettingsPrintingComments)
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsPrintingComments message handlers

void CTCOnBoardBufferQueuesSettingsPrintingComments::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_TAB)
	{
		if (!HIBYTE(GetKeyState(VK_SHIFT)))
		{
			GetParent()->GetParent()->GetNextDlgTabItem(GetParent())->SetFocus();
			return;
		}
	}
	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsPrintingPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSettingsPrintingPage, CLocalePropertyPage)

CTCOnBoardBufferQueuesSettingsPrintingPage::CTCOnBoardBufferQueuesSettingsPrintingPage() : CLocalePropertyPage(CTCOnBoardBufferQueuesSettingsPrintingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSettingsPrintingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSettingsPrintingPage::Initialize()
{
	return((GetParentDisplay()->GetPrintJobs(m_pJobs[0]) && GetParentDisplay()->GetQueues(m_pQueues)) ? m_pJobs[1].Copy(&m_pJobs[0]) : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsPrintingPage::GetJobs(CTCOnBoardBufferQueuesPrintJobs &pJobs) CONST
{
	return((pJobs.Copy(&m_pJobs[0])) ? Check(FALSE) : FALSE);
}

CTCOnBoardBufferQueuesSettingsDialog *CTCOnBoardBufferQueuesSettingsPrintingPage::GetParentDialog() CONST
{
	return((CTCOnBoardBufferQueuesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesSettingsPrintingPage::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesSettingsPrintingPage::ShowJobInfo()
{
	INT  nQueue;
	INT  nQueues;
	UINT  nMode;
	UINT  nRange[2];
	CString  szQueue[2];
	CTimeKey  tRange[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetPrintBuffer()), 0)), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_RESETCONTENT); nQueue < nQueues; nQueue++)
		{
			if ((pQueue = m_pQueues.GetAt(nQueue)) && pQueue->GetType() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_GETCURSEL)))
			{
				for (szQueue[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_QUEUEFORMAT), (LPCTSTR)pQueue->GetName(), pQueue->GetSubScheduleID()); pQueue->GetSubScheduleID() == (UINT)-1; )
				{
					szQueue[0] = pQueue->GetName();
					break;
				}
				szQueue[1] = (pJobInfo->GetPrintBuffer() == pQueue->GetType() && pJobInfo->GetPrintQueue() == pQueue->GetName() && pJobInfo->GetPrintQueueID() == pQueue->GetSubScheduleID()) ? szQueue[0] : szQueue[1];
				SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szQueue[0]);
			}
		}
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY, ((nMode = pJobInfo->GetPrintMode()) & TCONBOARDBUFFERQUEUES_PRINT_SUMMARY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE, ((nMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) == TCONBOARDBUFFERQUEUES_PRINT_QUEUE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER, ((nMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) && (nMode & TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME, ((nMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) && (nMode & TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (nMode & TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetProfile()));
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_SETCURSEL, (nMode & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szQueue[1]) : (WPARAM)-1);
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[0] : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[1] : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[0] : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[1] : 0);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(pJobInfo->GetComments());
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!pJobInfo->GetComments().IsEmpty());
		return;
	}
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_RESETCONTENT);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(FALSE);
}

CTCOnBoardBufferQueuesPrintJobInfo *CTCOnBoardBufferQueuesSettingsPrintingPage::FindJobInfo() CONST
{
	return m_pJobs[0].GetAt(m_pJobs[0].Find(STRING(IDS_PRINTJOB_DEFAULTNAME)));
}

BOOL CTCOnBoardBufferQueuesSettingsPrintingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pJobs[0].Compare(&m_pJobs[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCOnBoardBufferQueuesSettingsPrintingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE)->SendMessage(CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER)->SendMessage(CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE)) && (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE) || GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER) || Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH))) && (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME) || Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)))) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSettingsPrintingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::PostNcDestroy()
{
	m_pQueues.RemoveAll();
	m_pJobs[0].RemoveAll();
	m_pJobs[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSettingsPrintingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSettingsPrintingPage)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY, OnPrintSummary)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE, OnPrintBufferQueue)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER, OnPrintItemRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME, OnPrintTimeRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, OnResetComments)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE, OnSelchangeProfile)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, OnSelchangeBuffer)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, OnSelchangeBufferQueue)
	ON_EN_CHANGE(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT, OnEditchangeComments)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW, OnSpinchangeLowItemRange)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH, OnSpinchangeHighItemRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START, OnSpinchangeStartTimeRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP, OnSpinchangeStopTimeRange)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsPrintingPage message handlers

BOOL CTCOnBoardBufferQueuesSettingsPrintingPage::OnInitDialog()
{
	INT  nJob;
	INT  nJobs;
	INT  nQueue;
	INT  nQueues;
	INT  nProfile;
	INT  nProfiles;
	CString  szBuffer;
	CStringArray  szProfiles;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo[2];
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	for (nProfile = 0, nProfiles = (EnumPrintProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0, Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW), TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH), TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), m_wndComments.SubclassWindow(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetSafeHwnd()); nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(); nQueue < nQueues; nQueue++)
	{
		if ((pQueue = m_pQueues.GetAt(nQueue)) && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pQueue->GetType()) < 0)
		{
			SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pQueue->GetType());
			continue;
		}
	}
	for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo[1] = ((pJobInfo[0] = m_pJobs[0].GetAt(nJob)) && pJobInfo[0]->GetPrintBuffer().IsEmpty()) ? m_pJobs[1].GetAt(nJob) : (CTCOnBoardBufferQueuesPrintJobInfo *)NULL))
		{
			pJobInfo[0]->SetPrintBuffer((szBuffer = Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER), 0)));
			pJobInfo[1]->SetPrintBuffer(szBuffer);
		}
	}
	ShowJobInfo();
	return TRUE;
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnPrintSummary()
{
	UINT  nMode;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_SUMMARY)) ? (pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_SUMMARY) : (pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_SUMMARY);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnPrintBufferQueue()
{
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		pJobInfo->SetPrintRange(0, 0);
		pJobInfo->SetPrintRange(CTimeKey(0), CTimeKey(0));
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~(TCONBOARDBUFFERQUEUES_PRINT_QUEUE | TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE | TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE));
		pJobInfo->SetPrintQueue(EMPTYSTRING);
		pJobInfo->SetPrintQueueID(-1);
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnPrintItemRange()
{
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE);
			pJobInfo->SetPrintRange(TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
		}
		else
		{
			pJobInfo->SetPrintRange(0, 0);
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE);
		}
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW), TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH), TCONBOARDBUFFERQUEUESSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnPrintTimeRange()
{
	CTimeKey  tTime;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE);
			pJobInfo->SetPrintRange(tTime, tTime.GetTime() + SECONDSPERHOUR);
		}
		else
		{
			pJobInfo->SetPrintRange(CTimeKey(0), CTimeKey(0));
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE);
		}
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP), CTimeKey(tTime.GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSelchangeProfile()
{
	CString  szProfile;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_PROFILE)->GetWindowText(szProfile);
		pJobInfo->SetProfile(szProfile);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSelchangeBuffer()
{
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		pJobInfo->SetPrintRange(0, 0);
		pJobInfo->SetPrintRange(CTimeKey(0), CTimeKey(0));
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~(TCONBOARDBUFFERQUEUES_PRINT_QUEUE | TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE | TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE));
		pJobInfo->SetPrintBuffer(Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_BUFFER, CB_GETCURSEL)));
		pJobInfo->SetPrintQueue(EMPTYSTRING);
		pJobInfo->SetPrintQueueID(-1);
	}
	ShowJobInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSelchangeBufferQueue()
{
	INT  nQueue;
	INT  nQueues;
	CString  szQueue[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(), szQueue[0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_QUEUE_NAME, CB_GETCURSEL)); nQueue < nQueues; nQueue++)
		{
			if ((pQueue = m_pQueues.GetAt(nQueue)) != (CTCOnBoardBufferQueue *)NULL  &&  pQueue->GetType() == pJobInfo->GetPrintBuffer())
			{
				for (szQueue[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_QUEUEFORMAT), (LPCTSTR)pQueue->GetName(), pQueue->GetSubScheduleID()); pQueue->GetSubScheduleID() == (UINT)-1; )
				{
					szQueue[1] = pQueue->GetName();
					break;
				}
				if (szQueue[0] == szQueue[1])
				{
					pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_QUEUE);
					pJobInfo->SetPrintQueue(pQueue->GetName());
					pJobInfo->SetPrintQueueID(pQueue->GetSubScheduleID());
					break;
				}
			}
		}
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSpinchangeLowItemRange()
{
	INT  nRange[2];
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (nRange[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)), nRange[1] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)); (pJobInfo = FindJobInfo()) && nRange[0] > 0; )
	{
		pJobInfo->SetPrintRange(nRange[0], max(nRange[0], nRange[1]));
		break;
	}
	if (nRange[0] > nRange[1] && nRange[0] > 0) Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH), nRange[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSpinchangeHighItemRange()
{
	INT  nRange[2];
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	for (nRange[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW)), nRange[1] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_HIGH)); (pJobInfo = FindJobInfo()) && nRange[1] > 0; )
	{
		pJobInfo->SetPrintRange(min(nRange[0], nRange[1]), nRange[1]);
		break;
	}
	if (nRange[0] > nRange[1] && nRange[1] > 0) Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_NUMBER_LOW), nRange[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSpinchangeStartTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]); (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START))) > tRange[1]; )
		{
			tRange[1] = tTime[0];
			break;
		}
		pJobInfo->SetPrintRange(tTime[0], tRange[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP), tTime[0]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnSpinchangeStopTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]); (tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP))) < tRange[0]; )
		{
			tRange[0] = tTime[1];
			break;
		}
		pJobInfo->SetPrintRange(tRange[0], tTime[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_OPTIONS_CONTENTS_EXECUTIONTIME_START), tTime[1]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnEditchangeComments()
{
	CString  szComments;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetWindowText(szComments);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!szComments.IsEmpty());
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (!szComments.IsEmpty()) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS) : FALSE);
		pJobInfo->SetPrintMode((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS));
		pJobInfo->SetComments(szComments);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesSettingsPrintingPage::OnResetComments()
{
	UINT  nMode;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUESSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsTabCtrl

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSettingsTabCtrl, CTabCtrl)

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSettingsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSettingsTabCtrl)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsTabCtrl message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsDialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSettingsDialog, CDisplayPropertySheetDialog)

CTCOnBoardBufferQueuesSettingsDialog::CTCOnBoardBufferQueuesSettingsDialog() : CDisplayPropertySheetDialog()
{
	AddPage(&m_pageLayout);
	AddPage(&m_pagePrinting);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetColumns(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns) CONST
{
	return m_pageLayout.GetColumns(pszPage, nPane, nColumns);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetTitleFont(LPCTSTR pszPage, UINT nPane, LPLOGFONT pTitleFont) CONST
{
	return m_pageLayout.GetTitleFont(pszPage, nPane, pTitleFont);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetItemsFont(LPCTSTR pszPage, UINT nPane, LPLOGFONT pItemsFont) CONST
{
	return m_pageLayout.GetItemsFont(pszPage, nPane, pItemsFont);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF &nColor) CONST
{
	return m_pageLayout.GetGridBackgroundColor(pszPage, nPane, nColor);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetToolTipMode(BOOL &bEnable) CONST
{
	return m_pageLayout.GetToolTipMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::IsLayoutModified() CONST
{
	return m_pageLayout.IsModified();
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::GetPrintJobs(CTCOnBoardBufferQueuesPrintJobs &pPrintJobs) CONST
{
	return m_pagePrinting.GetJobs(pPrintJobs);
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::IsPrintingModified() CONST
{
	return m_pagePrinting.IsModified();
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesSettingsDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayPropertySheetDialog::GetParentDisplay());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSettingsDialog, CDisplayPropertySheetDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSettingsDialog message handlers

BOOL CTCOnBoardBufferQueuesSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayPropertySheetDialog::OnInitDialog();
	SetTitle(STRING(IDS_TCONBOARDBUFFERQUEUESSETTINGSDIALOG_TITLE));
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTCOnBoardBufferQueuesSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	ReportEvent((!GetParentDisplay()->OnCloseSettingsDialog(IDOK)) ? SYSTEM_WARNING_TCONBOARDBUFFERQUEUES_SETUP_FAILURE : SYSTEM_NOERROR);
	CDisplayPropertySheetDialog::OnOK();
}

void CTCOnBoardBufferQueuesSettingsDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->OnCloseSettingsDialog(IDCANCEL);
	CDisplayPropertySheetDialog::OnCancel();
}

BOOL CTCOnBoardBufferQueuesSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage, CLocalePropertyPage)

CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage() : CLocalePropertyPage(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nIndex;
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_nCalTableIDs.RemoveAll(); pDatabaseTCParameter != (CONST CDatabaseTCParameter *) NULL; )
	{
		if ((m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))) != (CDatabaseTCNumCalTable *)NULL)
			{
				for (szName.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))))
			{
				for (szName.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesItemPropertiesParametersFolder *CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesItemPropertiesParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage message handlers

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardBufferQueuesItemPropertiesParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl, CTabCtrl)

CTCOnBoardBufferQueuesItemPropertiesParametersFolder *CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesItemPropertiesParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl message handlers

UINT CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCOnBoardBufferQueuesItemPropertiesParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersFolder

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesItemPropertiesParametersFolder, CLocalePropertySheetDialog)

CTCOnBoardBufferQueuesItemPropertiesParametersFolder::CTCOnBoardBufferQueuesItemPropertiesParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCOnBoardBufferQueuesItemPropertiesParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pDatabaseTCParameter);
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersFolder::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szX, szY);
}

CTCOnBoardBufferQueuesItemPropertiesParametersDialog *CTCOnBoardBufferQueuesItemPropertiesParametersFolder::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesItemPropertiesParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersFolder message handlers

void CTCOnBoardBufferQueuesItemPropertiesParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesItemPropertiesParametersDialog, CDisplayDialog)

CTCOnBoardBufferQueuesItemPropertiesParametersDialog::CTCOnBoardBufferQueuesItemPropertiesParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesItemPropertiesParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszParameter)
{
	CString  szX;
	CString  szY;

	m_szParameter = pszParameter;
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesItemPropertiesParametersDialog::IDD);
}

VOID CTCOnBoardBufferQueuesItemPropertiesParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersDialog::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CDisplayDialog *CTCOnBoardBufferQueuesItemPropertiesParametersDialog::GetParent() CONST
{
	return((CDisplayDialog *)CDisplayDialog::GetParent());
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTCParameter  *pParameter;

	if ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(m_szParameter))))
	{
		if (pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
			SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_szParameter, EMPTYSTRING);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesItemPropertiesParametersDialog::ShowParameterInfo()
{
	CString  szParameter[2];
	CDatabaseTCParameter  *pParameter;

	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM)->GetWindowText(szParameter[0]), szParameter[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERSDIALOG_FORMAT), EMPTYSTRING, EMPTYSTRING), szParameter[0] = (szParameter[0].Find(szParameter[1]) >= 0) ? szParameter[0].Left(szParameter[0].Find(szParameter[1])) : szParameter[0]; (pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter[0]))); )
	{
		m_wndFolderCtrl.ShowParameterInfo(pParameter);
		return;
	}
	m_wndFolderCtrl.ShowParameterInfo();
}

CRect CTCOnBoardBufferQueuesItemPropertiesParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCOnBoardBufferQueuesItemPropertiesParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesItemPropertiesParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesParametersDialog message handlers

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CDisplayDialog::OnInitDialog(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIESPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	return TRUE;
}

void CTCOnBoardBufferQueuesItemPropertiesParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCOnBoardBufferQueuesItemPropertiesParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesItemPropertiesParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesItemPropertiesParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesItemPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesItemPropertiesDialog::CTCOnBoardBufferQueuesItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesItemPropertiesDialog::Create(CWnd *pParentWnd, CONST CTCOnBoardBufferQueuesItem *pItem)
{
	INT  nResult;

	return(((nResult = (m_cItem.Copy(pItem)) ? CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesItemPropertiesDialog::IDD) : -1) == IDOK) ? IDOK : nResult);
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesItemPropertiesDialog::ShowProperties()
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseDelay;
	CString  szExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_NAME)->SetWindowText(m_cItem.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_cItem.GetDescription());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText((m_cItem.GetReleaseTime() > 0) ? m_cItem.GetReleaseTime().FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_RELEASETIME_NONE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText((!m_cItem.GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? ((m_cItem.GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0) ? CTimeTag(tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : ((m_cItem.GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0) ? tReleaseTime[1].FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_RELEASETIME_NONE))) : ((m_cItem.GetReleaseTime() > 0 && tReleaseInterval > 0) ? CTimeTag(m_cItem.GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_RELEASETIME_NONE)));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText((m_cItem.GetTransmissionTime() > 0) ? m_cItem.GetTransmissionTime().FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_TRANSMISSIONTIME_NONE));
	for (szReleaseDelay.Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_TRANSMISSIONDELAY_FORMAT), max((double)(m_cItem.GetTransmissionTime().GetTime() - m_cItem.GetReleaseTime().GetTime()) / 1000000.0, 0.0)); m_cItem.GetReleaseTime() <= 0 || m_cItem.GetTransmissionTime() <= 0; )
	{
		szReleaseDelay.Empty();
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(szReleaseDelay);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), (m_cItem.GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_TIMETAGGED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_1STSTEP)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP, (m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (m_cItem.GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_2NDSTEP)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow((!GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow((!GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow(m_cItem.GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG));
	ShowParameters();
	ShowRawData();
}

VOID CTCOnBoardBufferQueuesItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nBlockItem;
	INT  nBlockItems;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = 0, nParameters = (m_cItem.GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
		{
			for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pPacketParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pPacketParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					szItem = pPacketParameter->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nCount, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nCount, nColumn, szItem);
				nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
			}
		}
	}
	for (nBlockItem = -1, nBlockItems = m_cItem.GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
	{
		for (nElement = 0, nElements = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)m_cItem.GetSize(); nElement < nElements; nElement++)
		{
			if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nElement) : m_cItem.GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
				{
					if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
					continue;
				}
				for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								break;
							}
							szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nItem, nColumn, szItem);
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE); SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow(FALSE);
}

VOID CTCOnBoardBufferQueuesItemPropertiesDialog::ShowRawData()
{
	INT  nByte;
	INT  nBytes;
	CString  szRawData[2];
	CByteArray  nRawData[2];
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCPacket  cTCPacket;

	if (m_cItem.GetTCPacket(&cPacket))
	{
		szRawData[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_RAWDATA_FORMAT), (LPCTSTR)cPacket.GetDescription(), (LPCTSTR)cPacket.GetTag());
		szRawData[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_RAWDATA_SIMPLEFORMAT), (LPCTSTR)cPacket.GetTag());
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_RAWDATA)->SetWindowText((!cPacket.GetDescription().IsEmpty()) ? szRawData[0] : szRawData[1]);
	}
	for (nByte = 0, nBytes = (m_cItem.GetTCPacket(nRawData[0]) > 0 && cTCPacket.Unmap(nRawData[0])) ? cTCPacket.GetData(nRawData[1]) : 0, szRawData[0].Empty(); nByte < nBytes; nByte++)
	{
		szRawData[0] += (nByte > 0 && nByte % 2 == 0) ? CString(SPACE) : CString(EMPTYSTRING);
		szRawData[0] += cStringTools.ConvertIntToPaddedString(nRawData[1].GetAt(nByte), 2, 16);
	}
	for (; !szRawData[0].IsEmpty(); )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_RAWDATA_AREA)->SetWindowText(szRawData[0]);
		break;
	}
}

INT CTCOnBoardBufferQueuesItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCOnBoardBufferQueuesItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesItemPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CFont  cFont;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST)->GetClientRect(rColumns); cFont.CreateStockObject(ANSI_FIXED_FONT); )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_RAWDATA_AREA)->SetFont(&cFont);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_RAWDATA)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_RAWDATA_AREA)->EnableWindow();
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP, FALSE);
	ShowProperties();
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CTCOnBoardBufferQueuesItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow((Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))));
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardBufferQueuesItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCOnBoardBufferQueuesItemPropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesComposedItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesComposedItemPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesComposedItemPropertiesDialog::CTCOnBoardBufferQueuesComposedItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesComposedItemPropertiesDialog::Create(CWnd *pParentWnd, CONST CTCOnBoardBufferQueuesItems &pItems)
{
	INT  nItem[2];
	INT  nItems[2];
	CTCOnBoardBufferQueuesItem  *pItem[3];

	for (nItem[0] = 0, nItems[0] = (INT)pItems.GetSize(), m_pItems.RemoveAll(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pItems.GetAt(nItem[0])))
		{
			if ((pItem[1] = new CTCOnBoardBufferQueuesItem))
			{
				if (pItem[1]->Copy(pItem[0]))
				{
					for (nItem[1] = 0, nItems[1] = (INT)m_pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
					{
						if ((pItem[2] = m_pItems.GetAt(nItem[1])) && pItem[1]->GetMembershipID() < pItem[2]->GetMembershipID()) break;
						continue;
					}
					m_pItems.InsertAt(nItem[1], pItem[1], 1);
					continue;
				}
				delete pItem[1];
			}
		}
	}
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesComposedItemPropertiesDialog::IDD);
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesComposedItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCOnBoardBufferQueuesComposedItemPropertiesDialog::EnumEntries()
{
	INT  nEntry;
	INT  nEntries;
	INT  nDigits;
	CString  szEntry[2];
	CStringTools  cStringTools;
	CTCOnBoardBufferQueuesItem  *pItem;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY)->GetWindowText(szEntry[0]);
	for (nEntry = 0, nEntries = (INT)m_pItems.GetSize(), m_szName.Empty(), m_szDescription.Empty(), m_pParameters.RemoveAll(), nDigits = cStringTools.ConvertIntToString(nEntries).GetLength(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = (CTCOnBoardBufferQueuesItem *)m_pItems.GetAt(nEntry)) != (CTCOnBoardBufferQueuesItem *)NULL)
		{
			for (szEntry[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_ENTRY_FORMAT), (LPCTSTR)cStringTools.ConvertIntToPaddedString(nEntry + 1, nDigits), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetDescription()); SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[1]) < 0; )
			{
				SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_INSERTSTRING, nEntry, (LPARAM)(LPCTSTR)szEntry[1]);
				break;
			}
			if (!nEntry)
			{
				m_szName = pItem->GetMembership();
				m_szDescription = pItem->GetMembershipDescription();
				pItem->GetMembershipParameters(m_pParameters);
			}
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_DELETESTRING, nEntries);
		continue;
	}
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[0]), 0));
	return((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesComposedItemPropertiesDialog::ShowProperties()
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseDelay;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CTCOnBoardBufferQueuesItem  *pItem;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_NAME)->SetWindowText(m_szName);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_szDescription);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)->EnableWindow((m_pParameters.GetSize() > 0) ? TRUE : FALSE);
	for (CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, FALSE); (pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))); )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText((pItem->GetReleaseTime() > 0) ? pItem->GetReleaseTime().FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText((!pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0) ? CTimeTag(tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0) ? tReleaseTime[1].FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE))) : ((pItem->GetReleaseTime() > 0 && tReleaseInterval > 0) ? CTimeTag(pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE)));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText((pItem->GetTransmissionTime() > 0) ? pItem->GetTransmissionTime().FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_TRANSMISSIONTIME_NONE));
		for (szReleaseDelay.Format(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_TRANSMISSIONDELAY_FORMAT), max((double)(pItem->GetTransmissionTime().GetTime() - pItem->GetReleaseTime().GetTime()) / 1000000.0, 0.0)); pItem->GetReleaseTime() <= 0 || pItem->GetTransmissionTime() <= 0; )
		{
			szReleaseDelay.Empty();
			break;
		}
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(szReleaseDelay);
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), (pItem->GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_TIMETAGGED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_1STSTEP)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_2NDSTEP)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow((!GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow((!GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->ShowWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_EXECUTIONTIME_STATIC)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_EXECUTIONTIME_STATIC)->ShowWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->ShowWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG));
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow((pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		break;
	}
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL) < 0)
	{
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
		CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow(FALSE);
	}
	ShowParameters();
	ShowRawData();
}

VOID CTCOnBoardBufferQueuesComposedItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nBlockItem;
	INT  nBlockItems;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CTCOnBoardBufferQueuesItem  *pItem;

	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = nParameters = 0, nElement = nElements = 0; IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST); )
	{
		for (nParameter = 0, nParameters = (INT)m_pParameters.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = m_pParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = EMPTYSTRING;
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pParameter->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) ? ((pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pParameter->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								break;
							}
							szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, nColumn, szItem);
				}
			}
		}
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		if ((pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))))
		{
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
				{
					for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pPacketParameter->GetTag();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pPacketParameter->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							szItem = pPacketParameter->GetConstValueAsText();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, nColumn, szItem);
						nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
					}
				}
			}
			for (nBlockItem = -1, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
			{
				for (nElement = 0, nElements = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)pItem->GetSize(); nElement < nElements; nElement++)
				{
					if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nElement) : pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
					{
						for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
						{
							if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
							continue;
						}
						for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
						{
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
							{
								szItem = pFunctionElement->GetName();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
							{
								szItem = pFunctionElement->GetDescription();
								break;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
							{
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
							{
								szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
							{
								szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
								break;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
							{
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
								szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
							{
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
							{
								szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
							{
								szItem = pFunctionElement->GetConstValueAsText();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
							{
								if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
								{
									if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
									{
										szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
									{
										szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
									{
										szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
									{
										szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
									{
										szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
										break;
									}
									szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
									break;
								}
								szItem = STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, szItem);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, nColumn, szItem);
						}
					}
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE); SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow(FALSE);
}

VOID CTCOnBoardBufferQueuesComposedItemPropertiesDialog::ShowRawData()
{
	INT  nByte;
	INT  nBytes;
	CString  szRawData[2];
	CByteArray  nRawData[2];
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTCPacket  cTCPacket;

	if ((pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_FUNCTION)
	{
		for (pItem->GetTCPacket(&cPacket), szRawData[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_RAWDATA_FORMAT), (LPCTSTR)cPacket.GetDescription(), (LPCTSTR)cPacket.GetTag()), szRawData[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_RAWDATA_SIMPLEFORMAT), (LPCTSTR)cPacket.GetTag()); !cPacket.GetTag().IsEmpty() || !cPacket.GetDescription().IsEmpty(); )
		{
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->SetWindowText((!cPacket.GetDescription().IsEmpty()) ? szRawData[0] : szRawData[1]);
			break;
		}
		for (nByte = 0, nBytes = (pItem->GetTCPacket(nRawData[0]) > 0 && cTCPacket.Unmap(nRawData[0])) ? cTCPacket.GetData(nRawData[1]) : 0, szRawData[0].Empty(); nByte < nBytes; nByte++)
		{
			szRawData[0] += (nByte > 0 && nByte % 2 == 0) ? CString(SPACE) : CString(EMPTYSTRING);
			szRawData[0] += cStringTools.ConvertIntToPaddedString(nRawData[1].GetAt(nByte), 2, 16);
		}
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetWindowText((szRawData[0].IsEmpty()) ? m_szRawData[1] : szRawData[0]);
		return;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->SetWindowText(m_szRawData[0]);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetWindowText(m_szRawData[1]);
}

INT CTCOnBoardBufferQueuesComposedItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::PostNcDestroy()
{
	m_pItems.RemoveAll();
	m_szColumns.RemoveAll();
	m_pParameters.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesComposedItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesComposedItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, OnShowFormalParameters)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY, OnSelchangeEntry)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesComposedItemPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CFont  cFont;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->GetWindowText(m_szRawData[0]), GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->GetWindowText(m_szRawData[1]), EnumEntries(); cFont.CreateStockObject(ANSI_FIXED_FONT); )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetFont(&cFont);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->EnableWindow();
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
	AccessControl(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, FALSE);
	ShowProperties();
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CTCOnBoardBufferQueuesItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow((Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCONBOARDBUFFERQUEUESITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))));
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnSelchangeEntry()
{
	ShowProperties();
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnShowFormalParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesComposedItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStartPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesStartPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesStartPropertiesDialog::CTCOnBoardBufferQueuesStartPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesStartPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesStartPropertiesDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesStartPropertiesDialog::IDD);
}

BOOL CTCOnBoardBufferQueuesStartPropertiesDialog::Initialize()
{
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueues  pQueues;

	if ((pQueue = (GetParentDisplay()->GetQueues(pQueues)) ? pQueues.GetAt(GetParentDisplay()->GetCurQueue()) : (CTCOnBoardBufferQueue *)NULL))
	{
		m_szType = pQueue->GetType();
		m_szName = pQueue->GetName();
		m_bFunction = FALSE;
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesStartPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesStartPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesStartPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesStartPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesStartPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesStartPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStartPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesStartPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (rColumns.Width() / 3)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 0, TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 0, TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 1000000 * tExecutionTime.GetTime(), TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)).GetTime(), TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_START_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				GetTCService()->LoadTelecommands(pItems);
				break;
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesStartPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesStartPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSTARTPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStopPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesStopPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesStopPropertiesDialog::CTCOnBoardBufferQueuesStopPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesStopPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesStopPropertiesDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesStopPropertiesDialog::IDD);
}

BOOL CTCOnBoardBufferQueuesStopPropertiesDialog::Initialize()
{
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueues  pQueues;

	if ((pQueue = (GetParentDisplay()->GetQueues(pQueues)) ? pQueues.GetAt(GetParentDisplay()->GetCurQueue()) : (CTCOnBoardBufferQueue *)NULL))
	{
		m_szType = pQueue->GetType();
		m_szName = pQueue->GetName();
		m_bFunction = FALSE;
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesStopPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesStopPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesStopPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesStopPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesStopPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesStopPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStopPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesStopPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (rColumns.Width() / 3)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 1000000 * tExecutionTime.GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueStatus(m_szType, m_szName, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)).GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_STOP_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				GetTCService()->LoadTelecommands(pItems);
				break;
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesStopPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesStopPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSTOPPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesDumpDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesDumpDialog, CDisplayDialog)

CTCOnBoardBufferQueuesDumpDialog::CTCOnBoardBufferQueuesDumpDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesDumpDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesDumpDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesDumpDialog::IDD);
}

BOOL CTCOnBoardBufferQueuesDumpDialog::Initialize()
{
	CString  szQueuePage;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueues  pQueues;

	if ((pQueue = (GetParentDisplay()->GetQueues((szQueuePage = GetParentDisplay()->GetQueuePage()), pQueues)) ? pQueues.GetAt(GetParentDisplay()->GetCurQueue(szQueuePage)) : (CTCOnBoardBufferQueue *)NULL) && m_cQueue.Copy(pQueue))
	{
		m_bTelecommand = FALSE;
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesDumpDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCOnBoardBufferQueuesDumpDialog::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

VOID CTCOnBoardBufferQueuesDumpDialog::ShowQueueOptions()
{
	INT  nDigits;
	INT  nSubSystem;
	INT  nSubSystems;
	CTCPacket  cTCPacket;
	CByteArray  nPacketData;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;

	for (nSubSystem = 0, nSubSystems = (m_cQueue.GetAPID() != (UINT)-1) ? GetTCService()->EnumTCSubSystems(szSubSystems, FALSE) : 0, nPacketData.InsertAt(0, 0xFF, TMPACKET_HEADER_SIZE + GetDatabase()->GetTMPacketDataFieldHeaderSize()), cTCPacket.SetData(nPacketData), nDigits = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		nDigits = max(cStringTools.ConvertUIntToString(GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)), 16).GetLength(), nDigits);
		continue;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_NAME)->SetWindowText(m_cQueue.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_APID)->SetWindowText((m_cQueue.GetAPID() != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(m_cQueue.GetAPID(), max(nDigits, 3), 16) : STRING(IDS_TCONBOARDBUFFERQUEUESDUMPDIALOG_APID_ALL));
	for (Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY), 1, m_cQueue.GetLimit()), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY), 1, m_cQueue.GetLimit()), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER), 0, cTCPacket.GetSequenceCount()); m_cQueue.GetSubScheduleID() != (UINT)-1; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SUBSCHEDULEID)->SetWindowText(cStringTools.ConvertUIntToString(m_cQueue.GetSubScheduleID()));
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_STATIC)->EnableWindow((m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow((m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_CLEARDOWNLOADSTATUS)->EnableWindow((m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER)) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesDumpDialog::Check(BOOL bModified) CONST
{
	return((((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE) && Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) && GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->SendMessage(CB_GETCURSEL) >= 0) || (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) && IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER))) && (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) && m_bTelecommand)) || (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) && !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER) && IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_CLEARDOWNLOADSTATUS))) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesDumpDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesDumpDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesDumpDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesDumpDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, OnDownloadAllEntries)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, OnDownloadByRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, OnDownloadByTimeRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM, OnDownloadBySubSystem)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER, OnDownloadBySequenceCounter)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, OnUpdateByDownload)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_CLEARDOWNLOADSTATUS, OnClearDownloadStatus)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND, OnTelecommands)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, OnSelchangeSubSystem)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY, OnSpinchangeLowEntry)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY, OnSpinchangeHighEntry)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER, OnSpinchangeSequenceCounter)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesDumpDialog message handlers

BOOL CTCOnBoardBufferQueuesDumpDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_APID_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_APID)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SUBSCHEDULEID_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SUBSCHEDULEID)->EnableWindow();
	EnumSubSystems();
	ShowQueueOptions();
	return TRUE;
}

void CTCOnBoardBufferQueuesDumpDialog::OnDownloadAllEntries()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL));
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) : FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnDownloadByRange()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE));
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) : FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE) && Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnDownloadByTimeRange()
{
	CTimeKey  tTime[2];

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE));
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME), (tTime[0] = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR - 1) / SECONDSPERHOUR)));
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME), (tTime[1] = tTime[0]));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE) && tTime[0] < tTime[1]) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnDownloadBySubSystem()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM, !IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM));
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) : FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER) && (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) || m_cQueue.GetAPID() != (UINT)-1)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnDownloadBySequenceCounter()
{
	LONGLONG  nRange[2];
	CStringTools  cStringTools;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD) : FALSE);
	Spinbox_GetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER), nRange[0], nRange[1]);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER), 0);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? cStringTools.ConvertLongUIntToPaddedString(Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)), cStringTools.ConvertLongUIntToString(nRange[1], 16).GetLength(), 16) : EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnUpdateByDownload()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnClearDownloadStatus()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSelchangeSubSystem()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSpinchangeLowEntry()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSpinchangeHighEntry()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSpinchangeStartTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSpinchangeStopTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow((Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnSpinchangeSequenceCounter()
{
	LONGLONG  nRange[2];
	CStringTools  cStringTools;

	Spinbox_GetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER), nRange[0], nRange[1]);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(cStringTools.ConvertLongUIntToPaddedString(Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)), cStringTools.ConvertLongUIntToString(nRange[1], 16).GetLength(), 16));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_SEND)->EnableWindow(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE) && Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM) && SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnTelecommands()
{
	CTCOnBoardBufferQueuesDumpPropertiesDialog  cDumpPropertiesDialog;
	CHourglassCursor  cCursor;

	m_bTelecommand |= (cDumpPropertiesDialog.Create(this, m_cQueue.GetType(), m_cQueue.GetName(), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADALL)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER : TCONBOARDBUFFERQUEUE_FLAG_NONE)))), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM)) ? GetTCService()->TranslateTCSubSystemToID(Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSUBSYSTEM_NAME, CB_GETCURSEL))) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYSEQUENCECOUNTER_NUMBER)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_LOWENTRY)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYRANGE_HIGHENTRY)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE)) ? Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STARTTIME)) : 0, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE)) ? Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_ACTION_DOWNLOADBYTIMERANGE_STOPTIME)) : 0) == IDOK) ? TRUE : FALSE;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_UPDATEBYDOWNLOAD)) ? TCONBOARDBUFFERQUEUE_FLAG_SYNCHRONIZEBYDOWNLOAD : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_CLEARDOWNLOADSTATUS)) ? TCONBOARDBUFFERQUEUE_FLAG_CLEARDOWNLOADSTATUS : 0));
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesDumpDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESDUMPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesDumpDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESDUMPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesDumpPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesDumpPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesDumpPropertiesDialog::CTCOnBoardBufferQueuesDumpPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesDumpPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesDumpPropertiesDialog::Create(CWnd *pParentWnd, LPCTSTR pszType, LPCTSTR pszName, UINT nFlags, UINT nAPID, UINT nPSC, INT nLowEntry, INT nHighEntry, CONST CTimeKey &tStartTime, CONST CTimeKey &tStopTime)
{
	INT  nResult;

	for (m_szType = pszType, m_szName = pszName, m_nFlags = nFlags, m_nAPID = nAPID, m_nPSC = nPSC, m_nRange[0] = nLowEntry, m_nRange[1] = nHighEntry, m_tRange[0] = tStartTime, m_tRange[1] = tStopTime; (nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesDumpPropertiesDialog::IDD)) == IDOK; ) return IDOK;
	return nResult;
}

BOOL CTCOnBoardBufferQueuesDumpPropertiesDialog::Initialize()
{
	m_bFunction = FALSE;
	return TRUE;
}

CTCOnBoardBufferQueuesDumpDialog *CTCOnBoardBufferQueuesDumpPropertiesDialog::GetParentDialog() CONST
{
	return((CTCOnBoardBufferQueuesDumpDialog *)CDisplayDialog::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesDumpPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesDumpPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesDumpPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesDumpPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesDumpPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesDumpPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesDumpPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesDumpPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (rColumns.Width() / 3)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueDump(m_szType, m_szName, 0, m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueDump(m_szType, m_szName, 0, m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueDump(m_szType, m_szName, 1000000 * tExecutionTime.GetTime(), m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueDump(m_szType, m_szName, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)).GetTime(), m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_DUMP_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				GetTCService()->LoadTelecommands(pItems);
				break;
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesDumpPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesDumpPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESDUMPPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesResetDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesResetDialog, CDisplayDialog)

CTCOnBoardBufferQueuesResetDialog::CTCOnBoardBufferQueuesResetDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesResetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesResetDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesResetDialog::IDD);
}

BOOL CTCOnBoardBufferQueuesResetDialog::Initialize()
{
	CString  szQueuePage;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueues  pQueues;

	if ((pQueue = (GetParentDisplay()->GetQueues((szQueuePage = GetParentDisplay()->GetQueuePage()), pQueues)) ? pQueues.GetAt(GetParentDisplay()->GetCurQueue(szQueuePage)) : (CTCOnBoardBufferQueue *)NULL) && m_cQueue.Copy(pQueue))
	{
		m_bTelecommand = FALSE;
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesResetDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCOnBoardBufferQueuesResetDialog::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

VOID CTCOnBoardBufferQueuesResetDialog::ShowQueueOptions()
{
	INT  nDigits;
	INT  nSubSystem;
	INT  nSubSystems;
	CTCPacket  cTCPacket;
	CByteArray  nPacketData;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;

	for (nSubSystem = 0, nSubSystems = (m_cQueue.GetAPID() != (UINT)-1) ? GetTCService()->EnumTCSubSystems(szSubSystems, FALSE) : 0, nPacketData.InsertAt(0, 0xFF, TMPACKET_HEADER_SIZE + GetDatabase()->GetTMPacketDataFieldHeaderSize()), cTCPacket.SetData(nPacketData), nDigits = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		nDigits = max(cStringTools.ConvertUIntToString(GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)), 16).GetLength(), nDigits);
		continue;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_NAME)->SetWindowText(m_cQueue.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_APID)->SetWindowText((m_cQueue.GetAPID() != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(m_cQueue.GetAPID(), max(nDigits, 3), 16) : STRING(IDS_TCONBOARDBUFFERQUEUESRESETDIALOG_APID_ALL));
	for (Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY), 1, m_cQueue.GetLimit()), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY), 1, m_cQueue.GetLimit()), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER), 0, cTCPacket.GetSequenceCount()); m_cQueue.GetSubScheduleID() != (UINT)-1; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SUBSCHEDULEID)->SetWindowText(cStringTools.ConvertUIntToString(m_cQueue.GetSubScheduleID()));
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_STATIC)->EnableWindow((m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM)->EnableWindow((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_UPDATEIMMEDIATELY)->EnableWindow((m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_UPDATEIMMEDIATELY, (m_cQueue.GetFlags() & (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER)) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesResetDialog::Check(BOOL bModified) CONST
{
	return(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE) && Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME))) || (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM) && GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->SendMessage(CB_GETCURSEL) >= 0) || (!IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM) && IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER))) && (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_UPDATEIMMEDIATELY) || m_bTelecommand)) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesResetDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesResetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesResetDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesResetDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, OnDeleteAllEntries)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, OnDeleteByRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, OnDeleteByTimeRange)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM, OnDeleteBySubSystem)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER, OnDeleteBySequenceCounter)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_UPDATEIMMEDIATELY, OnUpdateImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND, OnTelecommands)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, OnSelchangeSubSystem)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY, OnSpinchangeLowEntry)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY, OnSpinchangeHighEntry)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER, OnSpinchangeSequenceCounter)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesResetDialog message handlers

BOOL CTCOnBoardBufferQueuesResetDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_APID_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_APID)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SUBSCHEDULEID_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SUBSCHEDULEID)->EnableWindow();
	EnumSubSystems();
	ShowQueueOptions();
	return TRUE;
}

void CTCOnBoardBufferQueuesResetDialog::OnDeleteAllEntries()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnDeleteByRange()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_TO_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnDeleteByTimeRange()
{
	CTimeKey  tTime[2];

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME), (tTime[0] = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR - 1) / SECONDSPERHOUR)));
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME), (tTime[1] = tTime[0]));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_TO_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM) && m_cQueue.GetAPID() != (UINT)-1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((tTime[0] < tTime[1]) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnDeleteBySubSystem()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)->EnableWindow(((m_cQueue.GetFlags() & TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER) && (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM) || m_cQueue.GetAPID() != (UINT)-1)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnDeleteBySequenceCounter()
{
	LONGLONG  nRange[2];
	CStringTools  cStringTools;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE, FALSE);
	Spinbox_GetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER), nRange[0], nRange[1]);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER), 0);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? cStringTools.ConvertLongUIntToPaddedString(Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)), cStringTools.ConvertLongUIntToString(nRange[1], 16).GetLength(), 16) : EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->ShowWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnUpdateImmediately()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSelchangeSubSystem()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSpinchangeLowEntry()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSpinchangeHighEntry()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)) <= Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSpinchangeStartTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSpinchangeStopTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow((Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnSpinchangeSequenceCounter()
{
	LONGLONG  nRange[2];
	CStringTools  cStringTools;

	Spinbox_GetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER), nRange[0], nRange[1]);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_HEXNUMBER)->SetWindowText(cStringTools.ConvertLongUIntToPaddedString(Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)), cStringTools.ConvertLongUIntToString(nRange[1], 16).GetLength(), 16));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_SEND)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnTelecommands()
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CTCPacket  cTCPacket;
	CByteArray  nPacketData;
	CTCOnBoardBufferQueuesResetPropertiesDialog  cResetPropertiesDialog;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? (INT)m_cQueue.GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_cQueue.GetAt(nItem)) && pItem->GetTCPacket(nPacketData) > 0 && cTCPacket.Unmap(nPacketData) && cTCPacket.GetSequenceCount() == Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER))) break;
		continue;
	}
	m_bTelecommand |= (cResetPropertiesDialog.Create(this, m_cQueue.GetType(), m_cQueue.GetName(), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM : ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER : TCONBOARDBUFFERQUEUE_FLAG_NONE)))), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM)) ? GetTCService()->TranslateTCSubSystemToID(Combobox_GetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME, CB_GETCURSEL))) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)) : -1, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE)) ? Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)) : 0, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE)) ? Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)) : 0, (nItem < nItems) ? &cTCPacket : (CTCPacket *)NULL) == IDOK) ? TRUE : FALSE;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetDialog::OnOK()
{
	CString  szSubSystem;
	CHourglassCursor  cCursor;

	for (; IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_UPDATEIMMEDIATELY); )
	{
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEALL))
		{
			GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL);
			break;
		}
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE))
		{
			GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE, -1, -1, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_LOWENTRY)), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYRANGE_HIGHENTRY)));
			break;
		}
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE))
		{
			GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE, -1, -1, -1, -1, Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STARTTIME)), Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYTIMERANGE_STOPTIME)));
			break;
		}
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM))
		{
			GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSUBSYSTEM_NAME)->GetWindowText(szSubSystem);
			GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? (TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER) : TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM, GetTCService()->TranslateTCSubSystemToID(szSubSystem), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)) : -1);
			break;
		}
		if (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER))
		{
			GetTCService()->UpdateTCOnBoardBufferQueue(m_cQueue.GetType(), m_cQueue.GetName(), m_cQueue.GetSubScheduleID(), TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER, -1, (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_ACTION_DELETEBYSEQUENCECOUNTER_NUMBER)));
			break;
		}
		break;
	}
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesResetDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESRESETDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesResetDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESRESETDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesResetPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesResetPropertiesDialog, CDisplayDialog)

CTCOnBoardBufferQueuesResetPropertiesDialog::CTCOnBoardBufferQueuesResetPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesResetPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardBufferQueuesResetPropertiesDialog::Create(CWnd *pParentWnd, LPCTSTR pszType, LPCTSTR pszName, UINT nFlags, UINT nAPID, UINT nPSC, INT nLowEntry, INT nHighEntry, CONST CTimeKey &tStartTime, CONST CTimeKey &tStopTime, CONST CTCPacket *pTCPacket)
{
	for (m_szType = pszType, m_szName = pszName, m_nFlags = nFlags, m_nAPID = nAPID, m_nPSC = nPSC, m_nRange[0] = nLowEntry, m_nRange[1] = nHighEntry, m_tRange[0] = tStartTime, m_tRange[1] = tStopTime, m_cTCPacket.Reset(); pTCPacket != (CONST CTCPacket *) NULL; )
	{
		m_cTCPacket.Copy(pTCPacket);
		break;
	}
	return CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesResetPropertiesDialog::IDD);
}

BOOL CTCOnBoardBufferQueuesResetPropertiesDialog::Initialize()
{
	m_bFunction = FALSE;
	return TRUE;
}

CTCOnBoardBufferQueuesResetDialog *CTCOnBoardBufferQueuesResetPropertiesDialog::GetParentDialog() CONST
{
	return((CTCOnBoardBufferQueuesResetDialog *)CDisplayDialog::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesResetPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardBufferQueuesResetPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesResetPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesResetPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesResetPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesResetPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesResetPropertiesDialog message handlers

BOOL CTCOnBoardBufferQueuesResetPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (rColumns.Width() / 3)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueReset(m_szType, m_szName, 0, m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], (m_cTCPacket.IsValid()) ? &m_cTCPacket : (CONST CTCPacket *) NULL, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueReset(m_szType, m_szName, 0, m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], (m_cTCPacket.IsValid()) ? &m_cTCPacket : (CONST CTCPacket *) NULL, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueReset(m_szType, m_szName, 1000000 * tExecutionTime.GetTime(), m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], (m_cTCPacket.IsValid()) ? &m_cTCPacket : (CONST CTCPacket *) NULL, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardBufferQueueReset(m_szType, m_szName, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)).GetTime(), m_nAPID, m_nPSC, m_nRange[0], m_nRange[1], m_tRange[0], m_tRange[1], (m_cTCPacket.IsValid()) ? &m_cTCPacket : (CONST CTCPacket *) NULL, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_RESET_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				GetTCService()->LoadTelecommands(pItems);
				break;
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardBufferQueuesResetPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesResetPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESRESETPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchNumberDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchNumberDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchNumberDialog::CTCOnBoardBufferQueuesSearchNumberDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchNumberDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchNumberDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchNumberDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchNumberDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchNumberDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchNumberDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchNumberDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchNumberDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_GOTO, OnGotoNumber)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_CLOSE, OnClose)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchNumberDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchNumberDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_NUMBER), 1, INT_MAX);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_NUMBER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_GOTO)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_COMMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_COMMENT)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchNumberDialog::OnGotoNumber()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByNumber((INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNUMBER_NUMBER))))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_NUMBER_NOTHING);
		return;
	}
}

void CTCOnBoardBufferQueuesSearchNumberDialog::OnClose()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

void CTCOnBoardBufferQueuesSearchNumberDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchNumberDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchNumberDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchNameDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchNameDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchNameDialog::CTCOnBoardBufferQueuesSearchNameDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchNameDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchNameDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchNameDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchNameDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchNameDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchNameDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchNameDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchNameDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, OnSelchangeName)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchNameDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchNameDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szNames.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szNames.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_ALL)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchNameDialog::OnFindTelecommand()
{
	CString  szName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME)->GetWindowText(szName);
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName);
		m_szNames.Add(szName);
	}
	if (!GetParent()->SearchTelecommandByName(szName, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_NAME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchNameDialog::OnSelchangeName()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchNameDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_FIND)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHNAME_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchNameDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchNameDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchNameDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchComputerDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchComputerDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchComputerDialog::CTCOnBoardBufferQueuesSearchComputerDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchComputerDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchComputerDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchComputerDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchComputerDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchComputerDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchComputerDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchComputerDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchComputerDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, OnSelchangeComputer)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, OnEditchangeComputer)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchComputerDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchComputerDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szComputers.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szComputers.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_ALL)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchComputerDialog::OnFindTelecommand()
{
	CString  szComputer;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME)->GetWindowText(szComputer);
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputer);
		m_szComputers.Add(szComputer);
	}
	if (!GetParent()->SearchTelecommandByComputer(szComputer, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_COMPUTER_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchComputerDialog::OnSelchangeComputer()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchComputerDialog::OnEditchangeComputer()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_FIND)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchComputerDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchComputerDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchComputerDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCommandSourceDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchCommandSourceDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchCommandSourceDialog::CTCOnBoardBufferQueuesSearchCommandSourceDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchCommandSourceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchCommandSourceDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchCommandSourceDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchCommandSourceDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchCommandSourceDialog::EnumCommandSources()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_MANUALSTACK));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_AUTOMATICSTACK));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_PROCEDURESMONITOR));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMPUTER_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchCommandSourceDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchCommandSourceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchCommandSourceDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchCommandSourceDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCommandSourceDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchCommandSourceDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_ALL)->EnableWindow();
	EnumCommandSources();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCommandSourceDialog::OnFindTelecommand()
{
	CString  szCommandSource;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_TYPE)->GetWindowText(szCommandSource);
	if (!GetParent()->SearchTelecommandByCommandSource((szCommandSource == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : ((szCommandSource == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_AUTOMATICSTACK)) ? TCITEM_SOURCETYPE_AUTOMATICSTACK : ((szCommandSource == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_COMMANDSOURCE_PROCEDURESMONITOR)) ? TCITEM_SOURCETYPE_PROCEDURESMONITOR : TCITEM_SOURCETYPE_NONE)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_COMMANDSOURCE_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCOMMANDSOURCE_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchCommandSourceDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchCommandSourceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCommandSourceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchDescriptionDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchDescriptionDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchDescriptionDialog::CTCOnBoardBufferQueuesSearchDescriptionDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchDescriptionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchDescriptionDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchDescriptionDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchDescriptionDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchDescriptionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchDescriptionDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchDescriptionDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, OnSelchangeDescription)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, OnEditchangeDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchDescriptionDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchDescriptionDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szDescriptions.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szDescriptions.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_CASE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_WORD)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::OnSelchangeDescription()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::OnEditchangeDescription()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_FIND)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::OnFindTelecommand()
{
	CString  szDescription;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT)->GetWindowText(szDescription);
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDescription) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDescription);
		m_szDescriptions.Add(szDescription);
	}
	if (!GetParent()->SearchTelecommandByDescription(szDescription, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_CASE), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_WORD)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_DESCRIPTION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDESCRIPTION_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchDescriptionDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchDescriptionDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCategoryDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchCategoryDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchCategoryDialog::CTCOnBoardBufferQueuesSearchCategoryDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchCategoryDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchCategoryDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchCategoryDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchCategoryDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchCategoryDialog::EnumCategories()
{
	INT  nCategory;
	INT  nCategories;
	CStringArray  szCategories;
	CLongUIntArray  nCategoryIDs;

	for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nCategoryIDs), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY, CB_RESETCONTENT); nCategory < nCategories; nCategory++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szCategories.GetAt(nCategory));
		continue;
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchCategoryDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchCategoryDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchCategoryDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchCategoryDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCategoryDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchCategoryDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_ALL)->EnableWindow();
	EnumCategories();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCategoryDialog::OnFindTelecommand()
{
	CString  szCategory;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_CATEGORY)->GetWindowText(szCategory);
	if (!GetParent()->SearchTelecommandByCategory(szCategory, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_CATEGORY_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCATEGORY_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchCategoryDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchCategoryDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCategoryDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchSubSystemDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchSubSystemDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchSubSystemDialog::CTCOnBoardBufferQueuesSearchSubSystemDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchSubSystemDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchSubSystemDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchSubSystemDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchSubSystemDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchSubSystemDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchSubSystemDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchSubSystemDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, OnSelchangeSubSystem)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, OnEditchangeSubSystem)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchSubSystemDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchSubSystemDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szSubSystems.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szSubSystems.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_CASE)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::OnSelchangeSubSystem()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::OnEditchangeSubSystem()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_FIND)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::OnFindTelecommand()
{
	CString  szSubSystem;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME)->GetWindowText(szSubSystem);
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSubSystem);
		m_szSubSystems.Add(szSubSystem);
	}
	if (!GetParent()->SearchTelecommandBySubSystem(szSubSystem, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_CASE)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_SUBSYSTEM_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSUBSYSTEM_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchSubSystemDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchSubSystemDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchArgumentsDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchArgumentsDialog::CTCOnBoardBufferQueuesSearchArgumentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchArgumentsDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchArgumentsDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchArgumentsDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchArgumentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchArgumentsDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, OnSelchangeArgument)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, OnEditchangeArgument)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchArgumentsDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchArgumentsDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szArguments.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szArguments.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ALL)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::OnSelchangeArgument()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::OnEditchangeArgument()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_FIND)->EnableWindow((GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::OnFindTelecommand()
{
	CString  szArgument;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT)->GetWindowText(szArgument);
	if (SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szArgument) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ARGUMENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szArgument);
		m_szArguments.Add(szArgument);
	}
	if (!GetParent()->SearchTelecommandByArgument(szArgument, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_ARGUMENT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHARGUMENTS_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchArgumentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchArgumentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchFlagsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchFlagsDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchFlagsDialog::CTCOnBoardBufferQueuesSearchFlagsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchFlagsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchFlagsDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchFlagsDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchFlagsDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchFlagsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchFlagsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchFlagsDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING, OnInterlockingFlag)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED, OnInterlockedFlag)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED, OnGroupedFlag)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED, OnBlockedFlag)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchFlagsDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchFlagsDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_ALL)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnInterlockingFlag()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnInterlockedFlag()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnGroupedFlag()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnBlockedFlag()
{
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByFlags(IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKING), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_INTERLOCKED), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_GROUPED), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_FLAG_BLOCKED)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_FLAGS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHFLAGS_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchFlagsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchFlagsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchTCPacketDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchTCPacketDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchTCPacketDialog::CTCOnBoardBufferQueuesSearchTCPacketDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchTCPacketDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchTCPacketDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchTCPacketDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchTCPacketDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchTCPacketDialog::EnumTCPackets()
{
	INT  nPacket;
	INT  nPackets;
	CString  szPacket;
	CDatabaseTCPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTCPackets()->GetSize(), SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG, CB_RESETCONTENT); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = (CDatabaseTCPacket *)GetDatabase()->GetTCPackets()->GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
		{
			szPacket.Format(STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TCPACKET_FORMAT), (LPCTSTR)pPacket->GetTag(), (LPCTSTR)pPacket->GetDescription());
			SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPacket);
		}
	}
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchTCPacketDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchTCPacketDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchTCPacketDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchTCPacketDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchTCPacketDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchTCPacketDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_ALL)->EnableWindow();
	EnumTCPackets();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchTCPacketDialog::OnFindTelecommand()
{
	INT  nPos;
	CString  szPacket;
	CString  szFormat;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_TAG)->GetWindowText(szPacket), szFormat.Format(STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TCPACKET_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szPacket.Find(szFormat)) >= 0; )
	{
		szPacket = szPacket.Left(nPos);
		break;
	}
	if (!GetParent()->SearchTelecommandByTCPacket(szPacket, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_TCPACKET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTCPACKET_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchTCPacketDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchTCPacketDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchTCPacketDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPSCDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPSCDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPSCDialog::CTCOnBoardBufferQueuesSearchPSCDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPSCDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPSCDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPSCDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPSCDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchPSCDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPSCDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPSCDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPSCDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPSCDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPSCDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER), TCONBOARDBUFFERQUEUESSEARCHPSC_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHPSC_MAXIMUMINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER), TCONBOARDBUFFERQUEUESSEARCHPSC_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPSCDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByPSC((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_NUMBER)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PSC_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPSC_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPSCDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPSCDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPSCDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchDispatchTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchDispatchTimeDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchDispatchTimeDialog::CTCOnBoardBufferQueuesSearchDispatchTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchDispatchTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchDispatchTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchDispatchTimeDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchDispatchTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchDispatchTimeDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchDispatchTimeDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHDISPATCHTIME_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHDISPATCHTIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHDISPATCHTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByDispatchTime(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_TIME)), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_DISPATCHTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHDISPATCHTIME_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchDispatchTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchReleaseTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchReleaseTimeDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchReleaseTimeDialog::CTCOnBoardBufferQueuesSearchReleaseTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchReleaseTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchReleaseTimeDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchReleaseTimeDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHRELEASETIME_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHRELEASETIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHRELEASETIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTime(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_TIME)), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_RELEASETIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIME_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchReleaseTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH, OnMatchTimeOffset)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL, OnIntervalTimeOffset)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_OFFSET), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)));
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHRELEASETIMEOFFSET_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHRELEASETIMEOFFSET_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_OFFSET_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_OFFSET)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnMatchTimeOffset()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnIntervalTimeOffset()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHRELEASETIMEOFFSET_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTimeOffset((DWORD)(1000 * (Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_OFFSET)).GetTime() % SECONDSPERDAY)), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_RELEASETIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHRELEASETIMEOFFSET_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchReleaseTimeOffsetDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchTransmissionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchTransmissionTimeDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::CTCOnBoardBufferQueuesSearchTransmissionTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchTransmissionTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchTransmissionTimeDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchTransmissionTimeDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHTRANSMISSIONTIME_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHRELEASETIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHTRANSMISSIONTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByTransmissionTime(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_TIME)), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_TRANSMISSIONTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHTRANSMISSIONTIME_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchTransmissionTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchExecutionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchExecutionTimeDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchExecutionTimeDialog::CTCOnBoardBufferQueuesSearchExecutionTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchExecutionTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchExecutionTimeDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchExecutionTimeDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIME_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTime(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_TIME)), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_EXECUTIONTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIME_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchExecutionTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH, OnMatchTimeOffset)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, OnIntervalTimeOffset)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, TRUE);
	Timespinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_OFFSET), CTimeKey(TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_MINIMUMOFFSET), CTimeKey(TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_MAXIMUMOFFSET));
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_OFFSET), CTimeKey(TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_DEFAULTOFFSET));
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_MINIMUMINTERVAL, TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_OFFSET_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_OFFSET)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, TRUE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnMatchTimeOffset()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnIntervalTimeOffset()
{
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH, FALSE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME), TCONBOARDBUFFERQUEUESSEARCHEXECUTIONTIMEOFFSET_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->SetFocus();
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTimeOffset(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_OFFSET)).GetTime(), (IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_EXECUTIONTIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHEXECUTIONTIMEOFFSET_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchExecutionTimeOffsetDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchAuthorizationDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchAuthorizationDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchAuthorizationDialog::CTCOnBoardBufferQueuesSearchAuthorizationDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchAuthorizationDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchAuthorizationDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchAuthorizationDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchAuthorizationDialog::EnumAuthorizations()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_AUTHORIZATION_MANUAL));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_AUTHORIZATION_AUTOMATIC));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchAuthorizationDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchAuthorizationDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchAuthorizationDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchAuthorizationDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchAuthorizationDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_ALL)->EnableWindow();
	EnumAuthorizations();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchAuthorizationDialog::OnFindTelecommand()
{
	CString  szAuthorization;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_TYPE)->GetWindowText(szAuthorization);
	if (!GetParent()->SearchTelecommandByAuthorization((szAuthorization == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_AUTHORIZATION_AUTOMATIC)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED : 0, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_AUTHORIZATION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHAUTHORIZATION_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchAuthorizationDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchAuthorizationDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchAuthorizationDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByPTVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PTVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVTIMEWINDOW_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVTimeWindowDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPTVCheckDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPTVCheckDialog::CTCOnBoardBufferQueuesSearchPTVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPTVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPTVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPTVCheckDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchPTVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVCHECK_ON));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVCHECK_OFF));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVCHECK_DISABLED));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchPTVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPTVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPTVCheckDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVCheckDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPTVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPTVCheck((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVCHECK_OFF)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV : ((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVCHECK_DISABLED)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV : 0), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PTVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVCHECK_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPTVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPTVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPTVResultDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPTVResultDialog::CTCOnBoardBufferQueuesSearchPTVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPTVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPTVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPTVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPTVResultDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchPTVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_GO));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_WAIT));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_FAIL));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchPTVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPTVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPTVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPTVResultDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPTVResultDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPTVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPTVResult((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_GO)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_GO : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_WAIT)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_WAIT : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PTVRESULT_FAIL)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL : 0)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PTVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPTVRESULT_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPTVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPTVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPTVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPEVCheckDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPEVCheckDialog::CTCOnBoardBufferQueuesSearchPEVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPEVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPEVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPEVCheckDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchPEVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_NONE));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_ON));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_OFF));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_DISABLED));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchPEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPEVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPEVCheckDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPEVCheckDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPEVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPEVCheck((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_NONE)) ? ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV) : ((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_OFF)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV : ((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVCHECK_DISABLED)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV : 0)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVCHECK_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPEVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPEVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchPEVResultDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchPEVResultDialog::CTCOnBoardBufferQueuesSearchPEVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchPEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchPEVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchPEVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchPEVResultDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchPEVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVRESULT_GO));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVRESULT_NOGO));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchPEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchPEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchPEVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchPEVResultDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchPEVResultDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchPEVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPEVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPEVResult((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVRESULT_GO)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_PEVRESULT_NOGO)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO : 0), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_PEVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHPEVRESULT_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchPEVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchPEVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchPEVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

void CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_ALL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_FIND)->EnableWindow();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByCEVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_CEVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVTIMEWINDOW_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVTimeWindowDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchCEVCheckDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchCEVCheckDialog::CTCOnBoardBufferQueuesSearchCEVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchCEVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchCEVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchCEVCheckDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchCEVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_NONE));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_ON));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_OFF));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_DISABLED));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchCEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchCEVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchCEVCheckDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVCheckDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchCEVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByCEVCheck((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_NONE)) ? ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV) : ((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_OFF)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV : ((szCheck == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVCHECK_DISABLED)) ? TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV : 0)), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_CEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVCHECK_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchCEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchCEVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchCEVResultDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchCEVResultDialog::CTCOnBoardBufferQueuesSearchCEVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchCEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchCEVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchCEVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchCEVResultDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchCEVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_IDLE));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_PENDING));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_PASSED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_FAILED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_UNKNOWN));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_UNVERIFIED));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_PASSED))) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchCEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchCEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchCEVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchCEVResultDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchCEVResultDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchCEVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByCEVResult((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_IDLE)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_PENDING)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_PASSED)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_FAILED)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_UNKNOWN)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN : ((szResult == STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_CEVRESULT_UNVERIFIED)) ? TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED : 0))))), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_CEVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHCEVRESULT_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchCEVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchCEVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchCEVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchStatusDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesSearchStatusDialog, CDisplayDialog)

CTCOnBoardBufferQueuesSearchStatusDialog::CTCOnBoardBufferQueuesSearchStatusDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardBufferQueuesSearchStatusDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardBufferQueuesSearchStatusDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardBufferQueuesSearchStatusDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCOnBoardBufferQueuesPageDetailsTextView *CTCOnBoardBufferQueuesSearchStatusDialog::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsTextView *)CDisplayDialog::GetParent());
}

VOID CTCOnBoardBufferQueuesSearchStatusDialog::EnumStatus()
{
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_RELEASED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_NOTRELEASED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_FAILEDRELEASE));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_SENT));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_FAILEDSEND));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_UPLINKED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_FAILEDUPLINK));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_EXECUTED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_NOTEXECUTED));
	SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDBUFFERQUEUESSEARCHDIALOG_STATUS_FAILEDEXECUTION));
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesSearchStatusDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardBufferQueuesSearchStatusDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesSearchStatusDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesSearchStatusDialog)
	ON_WM_HELPINFO()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_FIND, OnFindTelecommand)
	ON_BN_CLICKED(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesSearchStatusDialog message handlers

BOOL CTCOnBoardBufferQueuesSearchStatusDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_ALL, TRUE);
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_ALL)->EnableWindow();
	EnumStatus();
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchStatusDialog::OnFindTelecommand()
{
	CString  szStatus;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_STATUS)->GetWindowText(szStatus); !GetParent()->SearchTelecommandByStatus(szStatus, IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_ALL)); )
	{
		ReportEvent(USER_INFORMATIONAL_TCONBOARDBUFFERQUEUES_SEARCH_STATUS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDBUFFERQUEUES_SEARCHSTATUS_ALL, FALSE);
}

void CTCOnBoardBufferQueuesSearchStatusDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CDisplayDialog::OnDestroy();
}

BOOL CTCOnBoardBufferQueuesSearchStatusDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardBufferQueuesSearchStatusDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDBUFFERQUEUESSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesToolBar

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesToolBar, CDisplayToolBar)

CTCOnBoardBufferQueuesToolBar::CTCOnBoardBufferQueuesToolBar() : CDisplayToolBar()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesToolBar, CDisplayToolBar)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesToolBar)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesToolBar message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStatusBar

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesStatusBar, CDisplayStatusBar)

CTCOnBoardBufferQueuesStatusBar::CTCOnBoardBufferQueuesStatusBar() : CDisplayStatusBar()
{
	return;
}

BOOL CTCOnBoardBufferQueuesStatusBar::SetIndicators(CONST UINT *pPanesID, INT nCount)
{
	INT  nIndex;
	CRect  rPane;
	CString  szPane;
	CToolInfo  cToolInfo;
	CDisplayLock  cLock(this);

	if (CDisplayStatusBar::SetIndicators(pPanesID, nCount))
	{
		if (CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE) >= 0)
		{
			szPane.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_DATAMESSAGE), (UINT)-1);
			SetPaneInfo(CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE), ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE, SBPS_NOBORDERS | SBPS_STRETCH, CalcPaneWidth(szPane));
		}
		if (!IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			m_wndToolTip.Create(this, TTS_ALWAYSTIP | TTS_NOPREFIX | TTS_BALLOON);
			SetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE, GetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE) | CS_DROPSHADOW);
		}
		if (IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			if ((nIndex = CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE);
					break;
				}
			}
			m_wndToolTip.SetMaxTipWidth(GetSystemMetrics(SM_CXSCREEN));
			m_wndToolTip.Activate(TRUE);
		}
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesStatusBar::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CDisplayStatusBar::GetParent());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesStatusBar, CDisplayStatusBar)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesStatusBar)
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipNotify)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesStatusBar message handlers

void CTCOnBoardBufferQueuesStatusBar::OnPaint()
{
	INT  nIndex;
	RECT  rPane;
	CToolInfo  cToolInfo;

	for (CDisplayStatusBar::OnPaint(); IsWindow(m_wndToolTip.GetSafeHwnd()); )
	{
		if ((nIndex = CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		break;
	}
}

void CTCOnBoardBufferQueuesStatusBar::OnMouseMove(UINT nFlags, CPoint point)
{
	MSG  sMsg;

	if (IsWindow(m_wndToolTip.GetSafeHwnd()))
	{
		CopyMemory(&sMsg, GetCurrentMessage(), sizeof(MSG));
		m_wndToolTip.RelayEvent(&sMsg);
	}
	CDisplayStatusBar::OnMouseMove(nFlags, point);
}

BOOL CTCOnBoardBufferQueuesStatusBar::OnToolTipNotify(UINT nID, NMHDR *pNotifyInfo, LRESULT *pResult)
{
	TOOLTIPTEXT  *pToolTipInfo = (TOOLTIPTEXT *)pNotifyInfo;

	switch (pNotifyInfo->idFrom)
	{
	case ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE);
	return TRUE;
	}
	case ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE);
	return TRUE;
	}
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesToolTip

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesToolTip, CDisplayToolTip)

CTCOnBoardBufferQueuesToolTip::CTCOnBoardBufferQueuesToolTip() : CDisplayToolTip()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesToolTip, CDisplayToolTip)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesToolTip)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesToolTip message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesDocument

IMPLEMENT_DYNAMIC(CTCOnBoardBufferQueuesDocument, CDocument)

CTCOnBoardBufferQueuesDocument::CTCOnBoardBufferQueuesDocument() : CDocument()
{
	return;
}

CTCOnBoardBufferQueuesDocument::~CTCOnBoardBufferQueuesDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageSummaryTextView

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesPageSummaryTextView, CTextView)

CTCOnBoardBufferQueuesPageSummaryTextView::CTCOnBoardBufferQueuesPageSummaryTextView() : CTextView()
{
	m_sizeAlertSymbols.cx = 0;
	m_sizeAlertSymbols.cy = 0;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::Create(CWnd *pParentWnd, CONST RECT &rect, DWORD dwStyle)
{
	if (CTextView::Create(pParentWnd, rect, dwStyle))
	{
		SetTextSpacings(1, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetLayout(UINT nColumns)
{
	CUIntArray  nTitleItems;

	nTitleItems.RemoveAll();
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME);
	if (nColumns & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS);
	return SetLayout(nTitleItems);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetLayout(CONST CUIntArray &nColumns)
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nWidths;
	CUIntArray  nTitleItems;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nTitleItems.Copy(nColumns); !nTitleItems.GetSize(); )
	{
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME);
		if (TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS);
		break;
	}
	for (nIndex = 0, nCount = (LookupColumnsName(nTitleItems, szColumns) && CalcColumnsWidth(nTitleItems, nWidths) && SetColumns(szColumns, nWidths)) ? (INT)nTitleItems.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nTitleItems.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (LookupColumnsName(nColumns, szColumns) && SetColumns(szColumns, nWidths)) ? (INT)nColumns.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nColumns.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetLayout(UINT &nColumns) CONST
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nTitleItems;

	for (nIndex = 0, nCount = (GetLayout(nTitleItems)) ? (INT)nTitleItems.GetSize() : -1, nColumns = 0; nIndex < nCount; nIndex++)
	{
		nColumns |= nTitleItems.GetAt(nIndex);
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetLayout(CUIntArray &nColumns) CONST
{
	CUIntArray  nWidths;

	return GetLayout(nColumns, nWidths);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (GetColumns(szColumns, nWidths)) ? (INT)szColumns.GetSize() : -1, nColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nColumns.Add(LookupColumnName(szColumns.GetAt(nIndex)));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetListTitleFont(CFont *pFont)
{
	return CTextView::SetTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return CTextView::SetTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetListTitleFont(CFont *pFont) CONST
{
	return CTextView::GetTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetListItemsFont(CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListItemsFont(&lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	CTextViewLock  cLock(this);

	if (CTextView::SetTextFont(plfFont))
	{
		SetTextSpacings(max(LOWORD(GetTextSpacings()), 1), max(HIWORD(GetTextSpacings()), 1));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetListItemsFont(CFont *pFont) CONST
{
	return CTextView::GetTextFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTextFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	CTextViewLock  cLock(this);

	if (m_pQueues.Copy(&pQueues))
	{
		UpdateContent();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	CTextViewLock  cLock(this);

	if (m_pQueues.Copy(&pQueues))
	{
		UpdateContent();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	CTextViewLock  cLock(this);

	return pQueues.Copy(&m_pQueues);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetCurQueue(INT nIndex)
{
	CTextViewLock  cLock(this);

	if (nIndex != GetCurText() && SetCurText(nIndex))
	{
		GetParentDisplay()->SetCurQueue(nIndex);
		return TRUE;
	}
	return((nIndex == GetCurText()) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::CheckCurQueue(UINT nFlags) CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	return(((pQueue = m_pQueues.GetAt(GetCurQueue())) && (pQueue->GetFlags() & nFlags)) ? TRUE : FALSE);
}

INT CTCOnBoardBufferQueuesPageSummaryTextView::GetCurQueue() CONST
{
	return GetCurText();
}

UINT CTCOnBoardBufferQueuesPageSummaryTextView::GetQueueCount() CONST
{
	CTextViewLock  cLock(this);

	return((UINT)m_pQueues.GetSize());
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::DoAcknowledgeQueue()
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(GetCurQueue())) && pQueue->IsAlerted())
	{
		GetTCService()->AcknowledgeTCOnBoardBufferQueue(pQueue->GetType(), pQueue->GetName(), pQueue->GetSubScheduleID());
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::CanAcknowledgeQueue() CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	return(((pQueue = m_pQueues.GetAt(GetCurQueue())) && pQueue->IsAlerted()) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::SetLayoutInfo(INT nQueue, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	CTextViewLock  cLock(this);

	SetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	SetCurQueue(nQueue);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetLayoutInfo(INT &nQueue, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	CTextViewLock  cLock(this);

	nQueue = GetCurQueue();
	GetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::GetPrintProperties(CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	CTextViewLock  cLock(this);

	pSymbols.RemoveAll();
	nSymbolIDs.RemoveAll();
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINFORMATION);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESWARNING);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESERROR);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_WARNING]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_ERROR]);
	return(GetColumns(szColumns) && GetContent(szContents, pAttributes) && GetListTitleFont(pTitleFont) && GetListItemsFont(pItemsFont));
}

VOID CTCOnBoardBufferQueuesPageSummaryTextView::UpdateContent(BOOL bRedraw)
{
	INT  nCount;
	INT  nQueue;
	INT  nQueues;
	CTextViewAttribute  cAttribute;
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(), nCount = GetTextCount(); nQueue < nQueues; nQueue++)
	{
		if ((pQueue = m_pQueues.GetAt(nQueue)) != (CTCOnBoardBufferQueue *)NULL  &&  TranslateQueue(pQueue, &cAttribute))
		{
			if (nQueue >= nCount  &&  InsertText(nQueue, TranslateQueue(pQueue), &cAttribute, (nQueue == nQueues - 1) ? bRedraw : FALSE)) continue;
			if (nQueue < nCount  &&  SetText(nQueue, TranslateQueue(pQueue), &cAttribute, (nQueue == nQueues - 1) ? bRedraw : FALSE)) continue;
		}
	}
	while (nQueue < nCount)
	{
		DeleteText(nQueue, (nQueue == nCount - 1) ? bRedraw : FALSE);
		nCount--;
	}
}

VOID CTCOnBoardBufferQueuesPageSummaryTextView::RefreshContent()
{
	INT  nIndex;
	INT  nCount;
	CString  szColumn;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex < nCount; nIndex++)
	{
		for (SetColumnColor(nIndex, LookupColumnColor(LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex))))); LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME; )
		{
			SetColumnFormat(nIndex, GetColumnFormat(nIndex) | DT_SINGLELINE);
			break;
		}
	}
	UpdateContent();
}

VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawContent()
{
	CTextView::DrawContent();
}
VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawContent(CDC *pDC)
{
	CTextView::DrawContent(pDC);
}

VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawText(INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, pszText);
}
VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawText(CDC *pDC, INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(pDC, nItem, pszText);
}
VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawText(INT nItem, INT nColumn, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, nColumn, pszText);
}
VOID CTCOnBoardBufferQueuesPageSummaryTextView::DrawText(CDC *pDC, INT nItem, INT nColumn, LPCTSTR pszText)
{
	CDC  cDC;
	INT  nPos;
	BOOL  bState;
	UINT  nFormat;
	UINT  nSymbol;
	CRect  rText[3];
	CFont  cTextFont;
	CFont  *pOldFont;
	CSize  sizeSymbol;
	CSize  sizeBitmap;
	CPoint  ptBitmap;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	COLORREF  nColor[2];
	CTextViewAttribute  *pAttribute;

	for (m_wndContentCtrl.GetClientRect(rText[0]), rText[1] = m_wndContentCtrl.CalcTextRect(nItem, nColumn), sizeBitmap.cx = m_wndContentCtrl.m_wTextIndent[0] + rText[1].Width() + m_wndContentCtrl.m_wTextIndent[1], sizeBitmap.cy = m_wndContentCtrl.m_wTextSpacing[0] + rText[1].Height() + m_wndContentCtrl.m_wTextSpacing[1]; rText[2].IntersectRect(rText[0], CRect(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[1].right + m_wndContentCtrl.m_wTextIndent[1], rText[1].bottom + m_wndContentCtrl.m_wTextSpacing[1])); )
	{
		for (nFormat = GetColumnFormat(nItem, nColumn), nColor[0] = GetColumnColor(nItem, nColumn), bState = TRUE; (pAttribute = m_wndContentCtrl.m_pContentTextAttributes.GetAt(nItem)); )
		{
			bState = (pAttribute->GetColumnBlinkingState(nColumn, bState) || pAttribute->GetColumnBlinkingState(-1, bState)) ? bState : TRUE;
			break;
		}
		if (cDC.CreateCompatibleDC(pDC))
		{
			if (cBitmap.CreateCompatibleBitmap(pDC, sizeBitmap.cx, sizeBitmap.cy))
			{
				if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
				{
					for (cDC.SetBkMode(TRANSPARENT), cDC.SetTextColor(nColor[0]), DrawBackground(&cDC, nItem, nColumn, CRect(m_wndContentCtrl.m_wTextIndent[0] - rText[1].left, 0, sizeBitmap.cx, sizeBitmap.cy)); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
					{
						cDC.DrawText(((nPos = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME))) ? (INT)_tcscspn(pszText, CString(GetSymbolDelimiter())) : -1) >= 0) ? CString(pszText).Left(nPos) : pszText, CRect(m_wndContentCtrl.m_wTextIndent[0], m_wndContentCtrl.m_wTextSpacing[0], sizeBitmap.cx - m_wndContentCtrl.m_wTextIndent[0], sizeBitmap.cy - m_wndContentCtrl.m_wTextSpacing[0]), nFormat);
						cDC.SelectObject(pOldFont);
						break;
					}
					if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)))
					{
						for (sizeSymbol.cx = sizeSymbol.cy = 0, nColor[1] = cDC.GetNearestColor(VGA_COLOR_WHITE), cTextFont.DeleteObject(); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
						{
							sizeSymbol.cx = sizeSymbol.cy = cDC.GetTextExtent(SPACE).cy;
							m_sizeAlertSymbols = sizeSymbol;
							cDC.SelectObject(pOldFont);
							cTextFont.DeleteObject();
							break;
						}
						for (nSymbol = (!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION))) ? ((!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR))) ? TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_ERROR : -1) : TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_WARNING) : TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION; nSymbol != (UINT)-1; )
						{
							if (bState) m_pAlertSymbols[nSymbol]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, pszText).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
							break;
						}
					}
					ptBitmap.x = max(rText[2].left - rText[1].left + m_wndContentCtrl.m_wTextIndent[0], 0);
					ptBitmap.y = max(rText[2].top - rText[1].top + m_wndContentCtrl.m_wTextSpacing[0], 0);
					pDC->BitBlt(max(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[2].left), max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[2].top), min(sizeBitmap.cx - ptBitmap.x, rText[2].Width()), min(sizeBitmap.cy - ptBitmap.y, rText[2].Height()), &cDC, ptBitmap.x, ptBitmap.y, SRCCOPY);
					cDC.SelectObject(pOldBitmap);
				}
				cBitmap.DeleteObject();
			}
			cDC.DeleteDC();
		}
		break;
	}
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::DrawBackground(CDC *pDC, INT nItem, INT nColumn, CONST RECT &rItem)
{
	if (nColumn < 0)
	{
		pDC->FillSolidRect(&rItem, GetSysColor(COLOR_WINDOW));
		return TRUE;
	}
	return CTextView::DrawBackground(pDC, nItem, nColumn, rItem);
}

CTCOnBoardBufferQueuesPageSummaryView *CTCOnBoardBufferQueuesPageSummaryTextView::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageSummaryView *)CTextView::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesPageSummaryTextView::GetParentDisplay() CONST
{
	CTCOnBoardBufferQueuesPageSummaryView  *pView;

	return(((pView = GetParent())) ? pView->GetParentDisplay() : (CTCOnBoardBufferQueuesWnd *)NULL);
}

CString CTCOnBoardBufferQueuesPageSummaryTextView::TranslateQueue(CONST CTCOnBoardBufferQueue *pQueue) CONST
{
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nSubSystem;
	INT  nSubSystems;
	CString  szName;
	CString  szItem;
	CString  szAlert;
	CString  szLimit;
	CString  szCount;
	CString  szColumn;
	CString  szStatus[2];
	CString  szUpdateTime;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)
		{
			szAlert = (pQueue->IsAlerted() == TCONBOARDBUFFERQUEUE_ALERTTYPE_INFORMATION || pQueue->IsAlerted(0) == TCONBOARDBUFFERQUEUE_ALERTTYPE_INFORMATION) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION)) : EMPTYSTRING;
			szAlert = (pQueue->IsAlerted() == TCONBOARDBUFFERQUEUE_ALERTTYPE_WARNING || pQueue->IsAlerted(0) == TCONBOARDBUFFERQUEUE_ALERTTYPE_WARNING) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING)) : szAlert;
			szAlert = (pQueue->IsAlerted() == TCONBOARDBUFFERQUEUE_ALERTTYPE_ERROR || pQueue->IsAlerted(0) == TCONBOARDBUFFERQUEUE_ALERTTYPE_ERROR) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR)) : szAlert;
			szName = (!szAlert.IsEmpty()) ? (pQueue->GetName() + szAlert) : pQueue->GetName();
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szName) : szName;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID)
		{
			for (nSubSystem = 0, nSubSystems = (pQueue->GetAPID() != (UINT)-1) ? GetTCService()->EnumTCSubSystems(szSubSystems, FALSE) : 0, nDigits = 0; nSubSystem < nSubSystems; nSubSystem++)
			{
				nDigits = max(cStringTools.ConvertUIntToString(GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)), 16).GetLength(), nDigits);
				continue;
			}
			if (pQueue->GetAPID() != (UINT)-1)
			{
				szItem += (nColumn > 0) ? (GetColumnDelimiter() + cStringTools.ConvertUIntToPaddedString(pQueue->GetAPID(), max(nDigits, 3), 16)) : cStringTools.ConvertUIntToPaddedString(pQueue->GetAPID(), max(nDigits, 3), 16);
				continue;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + CString(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_APID_ALL))) : STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_APID_ALL);
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID)
		{
			szItem += (nColumn > 0) ? ((pQueue->GetSubScheduleID() != (UINT)-1) ? (GetColumnDelimiter() + cStringTools.ConvertUIntToString(pQueue->GetSubScheduleID())) : (GetColumnDelimiter() + CString(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_SUBSCHEDULEID_NONE)))) : ((pQueue->GetSubScheduleID() != (UINT)-1) ? cStringTools.ConvertUIntToString(pQueue->GetSubScheduleID()) : STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_SUBSCHEDULEID_NONE));
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT)
		{
			szLimit.Format(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_LIMIT_FORMAT), pQueue->GetLimit(), (LPCTSTR)pQueue->GetUnit());
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szLimit) : szLimit;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT)
		{
			szCount.Format(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_COUNT_FORMAT), min(pQueue->GetCount(), pQueue->GetLimit()), (LPCTSTR)pQueue->GetUnit());
			szCount = (pQueue->GetCount() > pQueue->GetLimit() || pQueue->GetCount() == (UINT)-1) ? STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_COUNT_UNKNOWN) : szCount;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szCount) : szCount;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME)
		{
			szUpdateTime = (pQueue->GetUpdateTime() > 0) ? pQueue->GetUpdateTime().FormatGmt() : STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_UPDATETIME_UNKNOWN);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szUpdateTime) : szUpdateTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS)
		{
			szStatus[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_STATUS_USEDSPACE), (pQueue->GetLimit() > 0) ? (UINT)((100 * (double)min(pQueue->GetCount(), pQueue->GetLimit())) / (double)pQueue->GetLimit()) : 0);
			szStatus[1] = (pQueue->GetStatus() & TCONBOARDBUFFERQUEUE_STATUS_ENABLED) ? STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_STATUS_ENABLED) : STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_STATUS_UNKNOWN);
			szStatus[1] = (pQueue->GetStatus() & TCONBOARDBUFFERQUEUE_STATUS_DISABLED) ? STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_STATUS_DISABLED) : szStatus[1];
			szStatus[1] = (szStatus[1] != STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_STATUS_UNKNOWN) && pQueue->GetCount() <= pQueue->GetLimit() && pQueue->GetCount() != (UINT)-1) ? (szStatus[1] + szStatus[0]) : szStatus[1];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szStatus[1]) : szStatus[1];
			continue;
		}
	}
	return szItem;
}
BOOL CTCOnBoardBufferQueuesPageSummaryTextView::TranslateQueue(CONST CTCOnBoardBufferQueue *pQueue, CTextViewAttribute *pAttribute) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nColumnID;
	BOOL  bAlertFlag;
	CString  szColumn;
	CTextViewAttribute  cAttribute;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), pAttribute->Copy(&cAttribute); nColumn < nColumns; nColumn++)
	{
		pAttribute->SetColumnFormat(nColumn, (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) ? DT_RIGHT : DT_LEFT);
		pAttribute->SetColumnColor(nColumn, LookupColumnColor(nColumn));
	}
	for (nColumnID = (pQueue->IsAlerted() != TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE); nColumnID & TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_ALL; nColumnID <<= 1)
	{
		if (pQueue->IsAlerted(nColumnID) != TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE  &&  FindColumnIndex(LookupColumnName(nColumnID)) < 0)
		{
			pAttribute->SetColumnBlinking(-1, TRUE);
			return TRUE;
		}
	}
	for (nColumn = 0, nColumns = (pQueue->IsAlerted() != TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE) ? (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize() : 0, bAlertFlag = FALSE; nColumn < nColumns; nColumn++)
	{
		if (pQueue->IsAlerted(LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) != TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE)
		{
			pAttribute->SetColumnBlinking(nColumn, TRUE);
			bAlertFlag = TRUE;
			continue;
		}
		pAttribute->SetColumnBlinking(nColumn, FALSE);
	}
	if (pQueue->IsAlerted() != TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE  &&  pQueue->IsAlerted(0) == TCONBOARDBUFFERQUEUE_ALERTTYPE_NONE  &&  !bAlertFlag) pAttribute->SetColumnBlinking(-1, TRUE);
	return TRUE;
}

CString CTCOnBoardBufferQueuesPageSummaryTextView::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME);
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) return STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCOnBoardBufferQueuesPageSummaryTextView::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS))) return TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS;
	return 0;
}

INT CTCOnBoardBufferQueuesPageSummaryTextView::LookupColumnsName(CONST CUIntArray &nColumns, CStringArray &szColumns) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), szColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		szColumns.Add(LookupColumnName(nColumns.GetAt(nIndex)));
		continue;
	}
	return((nCount == (INT)szColumns.GetSize()) ? (INT)szColumns.GetSize() : 0);
}

COLORREF CTCOnBoardBufferQueuesPageSummaryTextView::LookupColumnColor(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryNameColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryAPIDColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) return GetDatabase()->GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryLimitColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryCountColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) return GetDatabase()->GetTCOnBoardBufferQueuesSummaryStatusColumnColor();
	return GetSysColor(COLOR_WINDOWTEXT);
}

INT CTCOnBoardBufferQueuesPageSummaryTextView::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn).Compare(pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCOnBoardBufferQueuesPageSummaryTextView::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	INT  nDxChar;
	UINT  nColumn;
	CFont  cFont[2];
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((nColumn = LookupColumnName(pszColumn)) == 0)
		{
			for (GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[1])); )
			{
				nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
				pDC->SelectObject(pOldFont);
				break;
			}
			ReleaseDC(pDC);
			return nWidth;
		}
		for (GetTitleFont(&cFont[0]), GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[0])); )
		{
			nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
			pDC->SelectObject(pOldFont);
			break;
		}
		if ((pOldFont = pDC->SelectObject(&cFont[1])))
		{
			if ((nDxChar = (pDC->GetTextMetrics(&tmFont) > 0) ? (4 * tmFont.tmAveCharWidth / 3) : 0) > 0)
			{
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryNameColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_APID) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryAPIDColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_SUBSCHEDULEID) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_LIMIT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryLimitColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_COUNT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryCountColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_UPDATETIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_STATUS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesSummaryStatusColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		return nWidth;
	}
	return 0;
}

INT CTCOnBoardBufferQueuesPageSummaryTextView::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nWidth;
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (nColumns.GetAt(nIndex[0]) == LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex[1])))
			{
				nWidth = (nIndex[1] > 0) ? (m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]) - m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1] - 1)) : m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]);
				nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + nWidth) : nWidth);
				break;
			}
		}
		if (nIndex[1] == nCount[1])
		{
			nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0])))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0]))));
			continue;
		}
	}
	return((nCount[0] == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

CRect CTCOnBoardBufferQueuesPageSummaryTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, LPCTSTR pszText) CONST
{
	INT  nPos;
	CRect  rText;
	CRect  rSymbol;
	CFont  *pOldFont;
	CString  szText;
	CClientDC  cDC(NULL);

	for (szText = ((nPos = (szText = pszText).Find(GetSymbolDelimiter())) >= 0) ? szText.Left(nPos) : szText, rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), rSymbol.SetRectEmpty(); (pOldFont = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)) && !rText.IsRectEmpty()) ? cDC.SelectObject((CFont *)&m_wndContentCtrl.m_cFont) : (CFont *)NULL); )
	{
		rSymbol.SetRect(rText.left + cDC.GetTextExtent(szText + SPACE).cx, rText.top, rText.left + cDC.GetTextExtent(szText + SPACE).cx + m_sizeAlertSymbols.cx, rText.top + m_sizeAlertSymbols.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		cDC.SelectObject(pOldFont);
		break;
	}
	return rSymbol;
}

TCHAR CTCOnBoardBufferQueuesPageSummaryTextView::GetSymbolDelimiter()
{
	return TAB;
}

CString CTCOnBoardBufferQueuesPageSummaryTextView::ConstructToolTipTitle(CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	CString  szTitle;

	switch (nTip)
	{
	case TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TOOLTIP_ALERTINFORMATION);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TOOLTIP_ALERTWARNING);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TOOLTIP_ALERTERROR);
		break;
	}
	break;
	}
	}
	return szTitle;
}

CString CTCOnBoardBufferQueuesPageSummaryTextView::ConstructToolTipText(CONST CTCOnBoardBufferQueue *pQueue, CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nCount;
	CString  szText;
	CString  szAlert;

	switch (nTip)
	{
	case TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR)))
	{
		for (pQueue->IsAlerted(-1, szText); (nCount = pQueue->GetAlertCount(TCONBOARDBUFFERQUEUE_ALERTTYPE_ERROR)) > 1; )
		{
			szAlert.Format(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TOOLTIP_ALERTCOUNT), nCount);
			szText += CString(EOL) + szAlert;
			break;
		}
	}
	break;
	}
	default: break;
	}
	return szText;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::LoadTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol == TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINFORMATION) : ((nSymbol == TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOL_WARNING) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESWARNING) : MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESERROR)), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pAlertSymbols[nSymbol] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pAlertSymbols[nSymbol]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pAlertSymbols[nSymbol];
									m_pAlertSymbols[nSymbol] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol > 0)
		{
			delete m_pAlertSymbols[--nSymbol];
			m_pAlertSymbols[nSymbol] = (CImage *)NULL;
		}
		break;
	}
	return((nSymbol == nSymbols) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesPageSummaryTextView::FreeTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;

	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGESUMMARYTEXTVIEW_COMMANDALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pAlertSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pAlertSymbols[nSymbol]->Destroy();
			delete m_pAlertSymbols[nSymbol];
		}
	}
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCOnBoardBufferQueuesPageSummaryTextView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::Lock()
{
	CTCOnBoardBufferQueuesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (pParentWnd->Lock() && CTextView::Lock()) : CTextView::Lock());
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::Unlock()
{
	CTCOnBoardBufferQueuesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (CTextView::Unlock() && pParentWnd->Unlock()) : CTextView::Unlock());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesPageSummaryTextView, CTextView)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesPageSummaryTextView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageSummaryTextView message handlers

int CTCOnBoardBufferQueuesPageSummaryTextView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CTextViewLock  cLock(this);

	return((CTextView::OnCreate(lpCreateStruct) != -1 && LoadTelecommandSymbols() && LoadToolTipCursor()) ? 0 : -1);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	INT  nRow;
	INT  nColumn;
	CPoint  ptCursor;
	CString  szText;
	CTextViewLock  cLock(this);

	for (GetCursorPos(&ptCursor), m_wndContentCtrl.ScreenToClient(&ptCursor); IsToolTipModeEnabled() && FindTextFromPoint(ptCursor, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szText); )
	{
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)) && (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR))))
		{
			if (CalcTelecommandSymbolPosition(nRow, nColumn, szText).PtInRect(ptCursor))
			{
				SetCursor(GetToolTipCursor());
				return TRUE;
			}
		}
		break;
	}
	return CTextView::OnSetCursor(pWnd, nHitTest, message);
}

BOOL CTCOnBoardBufferQueuesPageSummaryTextView::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nRow;
	INT  nIndex;
	INT  nQueue;
	INT  nQueues;
	INT  nColumn;
	INT  nHeight;
	CRect  rContent;
	CFont  cFont[2];
	CPoint  ptToolTip;
	LOGFONT  lfFont[2];
	CString  szColumn;
	CString  szToolTip[3];
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	if (message == WM_KEYDOWN)
	{
		if (wParam == VK_UP || wParam == VK_DOWN)
		{
			for (nIndex = GetCurQueue(); wParam == VK_UP && (nIndex > 0 || (nIndex < 0 && GetQueueCount() > 0)); )
			{
				SetCurQueue((nIndex = (nIndex < 0) ? (GetQueueCount() - 1) : (nIndex - 1)));
				ScrollTo(nIndex);
				return TRUE;
			}
			if (wParam == VK_DOWN && (nIndex < (INT)GetQueueCount() - 1 || (nIndex < 0 && GetQueueCount() > 0)))
			{
				SetCurQueue((nIndex = (nIndex >= 0) ? (nIndex + 1) : 0));
				ScrollTo(nIndex);
				return TRUE;
			}
		}
		if (wParam == VK_PRIOR || wParam == VK_NEXT)
		{
			for (nQueue = nIndex = GetCurQueue(), nQueues = GetQueueCount(), m_wndContentCtrl.GetClientRect(rContent), nHeight = (nQueues > 0) ? ((nQueue > 0) ? (m_wndContentCtrl.m_nContentTextPos.GetAt(nQueue) - m_wndContentCtrl.m_nContentTextPos.GetAt(nQueue - 1)) : m_wndContentCtrl.m_nContentTextPos.GetAt(0)) : 0; nQueue >= 0 && nQueue < nQueues; nQueue = (wParam == VK_NEXT) ? (nQueue + 1) : (nQueue - 1))
			{
				if (abs((INT)(m_wndContentCtrl.m_nContentTextPos.GetAt(nIndex) - m_wndContentCtrl.m_nContentTextPos.GetAt(nQueue))) >= rContent.Height() - nHeight) break;
				continue;
			}
			if ((nQueue = (nIndex >= 0) ? max(min(nQueue, nQueues - 1), 0) : ((wParam == VK_PRIOR) ? (nQueues - 1) : 0)) != nIndex)
			{
				SetCurQueue(nQueue);
				ScrollTo(nQueue);
			}
			return TRUE;
		}
		if (wParam == VK_TAB) GetParent()->SetFocus();
		return FALSE;
	}
	if (message == WM_LBUTTONDOWN)
	{
		if ((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)), FALSE)) >= 0) SetCurQueue(nIndex);
		m_wndContentCtrl.SetFocus();
		return FALSE;
	}
	if (message == WM_RBUTTONDOWN)
	{
		if ((pQueue = (GetCursor() == GetToolTipCursor() && FindTextFromPoint((ptToolTip = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))), nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pQueues.GetAt(nRow) : (CTCOnBoardBufferQueue *)NULL))
		{
			for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pQueue, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
			{
				for (GetTextFont(&lfFont[0]), GetTextFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
				{
					m_wndToolTip.SetTitleFont(&cFont[0]);
					m_wndToolTip.SetTextFont(&cFont[1]);
					break;
				}
				m_wndToolTip.Create(&m_wndContentCtrl, ptToolTip, szToolTip[0], szToolTip[1]);
				break;
			}
		}
		return FALSE;
	}
	if (message == WM_RBUTTONUP)
	{
		m_wndToolTip.Destroy();
		return FALSE;
	}
	return FALSE;
}

void CTCOnBoardBufferQueuesPageSummaryTextView::OnDestroy()
{
	CTextViewLock  cLock(this);

	FreeToolTipCursor();
	FreeTelecommandSymbols();
	CTextView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageSummaryView view

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesPageSummaryView, CView)

CTCOnBoardBufferQueuesPageSummaryView::CTCOnBoardBufferQueuesPageSummaryView() : CView()
{
	m_pwndList = new CTCOnBoardBufferQueuesPageSummaryTextView;
	m_pParentWnd = (CWnd *)NULL;
}

CTCOnBoardBufferQueuesPageSummaryView::~CTCOnBoardBufferQueuesPageSummaryView()
{
	delete m_pwndList;
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetLayout(UINT nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::SetLayout(CONST CUIntArray &nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_pwndList->SetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetLayout(UINT &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::GetLayout(CUIntArray &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_pwndList->GetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetListTitleFont(CFont *pFont)
{
	return m_pwndList->SetListTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetListTitleFont(CFont *pFont) CONST
{
	return m_pwndList->GetListTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetListItemsFont(CFont *pFont)
{
	return m_pwndList->SetListItemsFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListItemsFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetListItemsFont(CFont *pFont) CONST
{
	return m_pwndList->GetListItemsFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageSummaryView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListItemsFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::EnableToolTipMode(BOOL bEnable)
{
	return m_pwndList->EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::IsToolTipModeEnabled() CONST
{
	return m_pwndList->IsToolTipModeEnabled();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::StartMonitoring()
{
	return m_pwndList->StartMonitoring();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_pwndList->UpdateMonitoring(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::StopMonitoring()
{
	return m_pwndList->StopMonitoring();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_pwndList->SetQueues(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	return m_pwndList->GetQueues(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetCurQueue(INT nIndex)
{
	return m_pwndList->SetCurQueue(nIndex);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::CheckCurQueue(UINT nFlags) CONST
{
	return m_pwndList->CheckCurQueue(nFlags);
}

INT CTCOnBoardBufferQueuesPageSummaryView::GetCurQueue() CONST
{
	return m_pwndList->GetCurQueue();
}

UINT CTCOnBoardBufferQueuesPageSummaryView::GetQueueCount() CONST
{
	return m_pwndList->GetQueueCount();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::DoAcknowledgeQueue()
{
	return m_pwndList->DoAcknowledgeQueue();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::CanAcknowledgeQueue() CONST
{
	return m_pwndList->CanAcknowledgeQueue();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::SetLayoutInfo(INT nQueue, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return m_pwndList->SetLayoutInfo(nQueue, pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetLayoutInfo(INT &nQueue, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return m_pwndList->GetLayoutInfo(nQueue, pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::GetPrintProperties(CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_pwndList->GetPrintProperties(szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}

VOID CTCOnBoardBufferQueuesPageSummaryView::UpdateContent(BOOL bRedraw)
{
	return m_pwndList->UpdateContent(bRedraw);
}

VOID CTCOnBoardBufferQueuesPageSummaryView::SetTrackSize(CONST SIZE &size)
{
	m_pwndList->SetTrackSize(size);
}

CSize CTCOnBoardBufferQueuesPageSummaryView::GetTrackSize() CONST
{
	return m_pwndList->GetTrackSize();
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesPageSummaryView::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)m_pParentWnd);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::Lock()
{
	return m_pwndList->Lock();
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::Unlock()
{
	return m_pwndList->Unlock();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesPageSummaryView, CView)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesPageSummaryView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageSummaryView drawing

void CTCOnBoardBufferQueuesPageSummaryView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageSummaryView message handlers

int CTCOnBoardBufferQueuesPageSummaryView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) != -1 && m_pwndList->Create(this, CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy), TVS_HEADER | TVS_TOP | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		m_pParentWnd = CView::GetParent()->GetParent()->GetParent();
		return 0;
	}
	return -1;
}

void CTCOnBoardBufferQueuesPageSummaryView::OnSize(UINT nType, int cx, int cy)
{
	m_pwndList->MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardBufferQueuesPageSummaryView::OnEraseBkgnd(CDC *pDC)
{
	return TRUE;
}

void CTCOnBoardBufferQueuesPageSummaryView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsChild(pOldWnd)) GetParent()->SetFocus();
		else  m_pwndList->SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageDetailsTextView

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesPageDetailsTextView, CTextView)

CTCOnBoardBufferQueuesPageDetailsTextView::CTCOnBoardBufferQueuesPageDetailsTextView() : CTextView()
{
	m_nIndex = -1;
	m_nSearchIndex = -1;
	m_nClipboardFormat = 0;
	m_bProperties = FALSE;
	m_bFullViewMode = FALSE;
	m_sizeFlagSymbols.cx = 0;
	m_sizeFlagSymbols.cy = 0;
	m_sizeResultSymbols.cx = 0;
	m_sizeResultSymbols.cy = 0;
	m_sizeCheckFlagSymbols.cx = 0;
	m_sizeCheckFlagSymbols.cy = 0;
	m_nBackgroundColor[0] = VGA_COLOR_GRAY;
	m_nBackgroundColor[1] = GetSysColor(COLOR_WINDOW);
	m_nStatusColors.SetAtGrow(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NONE, GetSysColor(COLOR_WINDOW));
	m_nStatusColors.SetAtGrow(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_IDLE, RGB(0, 64, 255));
	m_nStatusColors.SetAtGrow(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_PASSED, VGA_COLOR_GREEN);
	m_nStatusColors.SetAtGrow(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_PENDING, VGA_COLOR_YELLOW);
	m_nStatusColors.SetAtGrow(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NOTPASSED, VGA_COLOR_RED);
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::Create(CWnd *pParentWnd, CONST RECT &rect, DWORD dwStyle)
{
	if (CTextView::Create(pParentWnd, rect, dwStyle))
	{
		SetTextSpacings(1, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetLayout(UINT nColumns)
{
	CUIntArray  nTitleItems;

	nTitleItems.RemoveAll();
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT);
	if (nColumns & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS);
	return SetLayout(nTitleItems);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetLayout(CONST CUIntArray &nColumns)
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nWidths;
	CUIntArray  nTitleItems;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nTitleItems.Copy(nColumns); !nTitleItems.GetSize(); )
	{
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT);
		if (TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS);
		break;
	}
	for (nIndex = 0, nCount = (LookupColumnsName(nTitleItems, szColumns) && CalcColumnsWidth(nTitleItems, nWidths) && SetColumns(szColumns, nWidths)) ? (INT)nTitleItems.GetSize() : -1, EnableFullViewMode(m_bFullViewMode); nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nTitleItems.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	UpdateContent();
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (LookupColumnsName(nColumns, szColumns) && SetColumns(szColumns, nWidths)) ? (INT)nColumns.GetSize() : -1, EnableFullViewMode(m_bFullViewMode); nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nColumns.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	UpdateContent();
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetLayout(UINT &nColumns) CONST
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nTitleItems;

	for (nIndex = 0, nCount = (GetLayout(nTitleItems)) ? (INT)nTitleItems.GetSize() : -1, nColumns = 0; nIndex < nCount; nIndex++)
	{
		nColumns |= nTitleItems.GetAt(nIndex);
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetLayout(CUIntArray &nColumns) CONST
{
	CUIntArray  nWidths;

	return GetLayout(nColumns, nWidths);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (GetColumns(szColumns, nWidths)) ? (INT)szColumns.GetSize() : -1, nColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nColumns.Add(LookupColumnName(szColumns.GetAt(nIndex)));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetListTitleFont(CFont *pFont)
{
	return CTextView::SetTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return CTextView::SetTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetListTitleFont(CFont *pFont) CONST
{
	return CTextView::GetTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetListItemsFont(CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListItemsFont(&lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	CTextViewLock  cLock(this);

	if (CTextView::SetTextFont(plfFont))
	{
		SetTextSpacings(max(LOWORD(GetTextSpacings()), 1), max(HIWORD(GetTextSpacings()), 1));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetListItemsFont(CFont *pFont) CONST
{
	return CTextView::GetTextFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTextFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetGridBackgroundColor(COLORREF nColor)
{
	m_nBackgroundColor[0] = nColor;
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	nColor = m_nBackgroundColor[0];
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::EnableFullViewMode(BOOL bEnable)
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;
	CTextViewLock  cLock(this);

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), m_bFullViewMode = bEnable; nColumn < nColumns; nColumn++)
	{
		m_wndContentCtrl.m_nColumnsFormat.SetAtGrow(nColumn, (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS || LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT || !bEnable) ? (GetColumnFormat(nColumn) | DT_SINGLELINE | DT_END_ELLIPSIS) : (GetColumnFormat(nColumn) & ~(DT_SINGLELINE | DT_END_ELLIPSIS)));
		m_wndContentCtrl.m_bColumnsFormat.SetAtGrow(nColumn, TRUE);
	}
	RecalcContent();
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::IsFullViewModeEnabled() CONST
{
	return m_bFullViewMode;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	INT  nItem;
	INT  nItems;
	INT  nQueue;
	INT  nQueues;
	BOOL  bQueues;
	CTCItem  *pItem;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueuesItem  *pQueueItem;
	CTextViewLock  cLock(this);

	for (nQueue = 0, nQueues = (INT)pQueues.GetSize(), bQueues = FALSE; nQueue < nQueues; nQueue++)
	{
		if ((pQueue[1] = ((pQueue[0] = pQueues.GetAt(nQueue))) ? m_pQueues.GetAt(m_pQueues.Find(pQueue[0]->GetType(), pQueue[0]->GetName(), pQueue[0]->GetSubScheduleID())) : (CTCOnBoardBufferQueue *)NULL) && !pQueue[1]->Compare(pQueue[0]))
		{
			if (pQueue[0]->CTCItems::Compare(pQueue[1]))
			{
				pQueue[1]->SetCount(pQueue[0]->GetCount());
				pQueue[1]->SetUpdateTime(pQueue[0]->GetUpdateTime());
				pQueue[1]->SetStatus(pQueue[0]->GetStatus());
				continue;
			}
			for (nItem = 0, nItems = (INT)pQueue[0]->GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem = (CTCItem *)pQueue[0]->GetAt(nItem)) != (CTCItem *)NULL)
				{
					if ((pQueueItem = (CTCOnBoardBufferQueuesItem *)pQueue[1]->GetAt(pQueue[1]->Find(pItem))))
					{
						AdjustTelecommandAlerts(pItem, pQueueItem);
						continue;
					}
					if ((pQueueItem = new CTCOnBoardBufferQueuesItem))
					{
						AdjustTelecommandAlerts(pItem, pQueueItem);
						pQueue[1]->InsertAt(nItem, pQueueItem, 1);
					}
				}
			}
			for (nItem = 0, nItems = (INT)pQueue[1]->GetSize(); nItem < nItems; nItem++)
			{
				if ((pQueueItem = (CTCOnBoardBufferQueuesItem *)pQueue[1]->GetAt(nItem)))
				{
					if (pQueue[0]->Find(pQueueItem) < 0)
					{
						pQueue[1]->RemoveAt(nItem);
						delete pQueueItem;
						nItems--;
						nItem--;
					}
				}
			}
			pQueue[1]->SetCount(pQueue[0]->GetCount());
			pQueue[1]->SetUpdateTime(pQueue[0]->GetUpdateTime());
			pQueue[1]->SetStatus(pQueue[0]->GetStatus());
			bQueues = TRUE;
		}
	}
	if (bQueues) UpdateContent();
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	INT  nItem;
	INT  nItems;
	INT  nQueue;
	INT  nQueues;
	CByteArray  nAlertsInfo;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	for (nQueue = 0, nQueues = (INT)pQueues.GetSize(); nQueue < nQueues; nQueue++)
	{
		if ((pQueue[0] = new CTCOnBoardBufferQueue) != (CTCOnBoardBufferQueue *)NULL)
		{
			if ((pQueue[1] = pQueues.GetAt(nQueue)) && pQueue[0]->Copy(pQueue[1]))
			{
				for (nItem = 0, nItems = (INT)pQueue[1]->GetSize(), pQueue[0]->RemoveAll(); nItem < nItems; nItem++)
				{
					if ((pItem = (pQueue[1]->GetAt(nItem)->GetProperties(nAlertsInfo) >= 0) ? new CTCOnBoardBufferQueuesItem : (CTCOnBoardBufferQueuesItem *)NULL))
					{
						if (pItem->CTCItem::Copy(pQueue[1]->GetAt(nItem)) && pItem->SetAlerts(nAlertsInfo) >= 0 && pQueue[0]->Add(pItem) >= 0) continue;
						delete pItem;
					}
					pQueue[0]->RemoveAll();
					break;
				}
				if (m_pQueues.Add(pQueue[0]) >= 0) continue;
			}
			delete pQueue[0];
		}
		break;
	}
	return((nQueue == nQueues) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nQueue;
	INT  nQueues;
	CTCItem  *pItem;
	CByteArray  nAlertsInfo;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueuesItem  *pQueueItem;
	CTextViewLock  cLock(this);

	for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(), pQueues.RemoveAll(); nQueue < nQueues; nQueue++)
	{
		if ((pQueue[0] = m_pQueues.GetAt(nQueue)) != (CTCOnBoardBufferQueue *)NULL)
		{
			if ((pQueue[1] = new CTCOnBoardBufferQueue) != (CTCOnBoardBufferQueue *)NULL)
			{
				for (nItem = 0, nItems = (pQueue[1]->Copy(pQueue[0])) ? (INT)pQueue[0]->GetSize() : -1, pQueue[1]->RemoveAll(); nItem < nItems; nItem++)
				{
					if ((pQueueItem = (CTCOnBoardBufferQueuesItem *)pQueue[0]->GetAt(nItem)) && pQueueItem->GetAlerts(nAlertsInfo))
					{
						if ((pItem = new CTCItem) != (CTCItem *)NULL)
						{
							pItem->SetProperties(nAlertsInfo);
							if (pQueue[1]->Add(pItem) < 0)
							{
								pQueue[1]->RemoveAll();
								delete pItem;
								break;
							}
							continue;
						}
					}
					pQueue[1]->RemoveAll();
					break;
				}
				if (pQueues.Add(pQueue[1]) >= 0) continue;
				delete pQueue[1];
			}
		}
		break;
	}
	return((nQueue == nQueues) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetCurQueue(INT nIndex)
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(nIndex)))
	{
		m_nSearchIndex = -1;
		m_nIndex = nIndex;
		UpdateContent();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::CheckCurQueue(UINT nFlags) CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	return(((pQueue = m_pQueues.GetAt(GetCurQueue())) && (pQueue->GetFlags() & nFlags)) ? TRUE : FALSE);
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::GetCurQueue() CONST
{
	return m_nIndex;
}

UINT CTCOnBoardBufferQueuesPageDetailsTextView::GetQueueCount() CONST
{
	CTextViewLock  cLock(this);

	return((UINT)m_pQueues.GetSize());
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetCurTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	return ActivateTelecommand(nIndex);
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::GetCurTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && pItem->IsSelected()) break;
			continue;
		}
		return((nItem < nItems) ? nItem : -1);
	}
	return -1;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SelectTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	if (m_nSearchIndex != nIndex)
	{
		ScrollTo((m_nSearchIndex = nIndex));
		UpdateContent(FALSE);
		RecalcLayout();
	}
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::HasSelectedTelecommands() CONST
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && pItem->IsSelected()) break;
			continue;
		}
		return((nItem < nItems) ? TRUE : FALSE);
	}
	return FALSE;
}

UINT CTCOnBoardBufferQueuesPageDetailsTextView::GetTelecommandCount() CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	return(((pQueue = m_pQueues.GetAt(m_nIndex))) ? (UINT)pQueue->GetSize() : 0);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::DoCopyTelecommand()
{
	CTextViewLock  cLock(this);

	return CopyToClipboard();
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::CanCopyTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(GetClipboardFormat() != 0 && HasSelectedTelecommands());
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::DoDeleteTelecommand()
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CTCItems  pItems;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pQueueItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
		{
			if ((pQueueItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && pQueueItem->IsSelected())
			{
				if ((pItem = new CTCItem) && pItem->Copy(pQueueItem) && pItems.Add(pItem) >= 0) continue;
				delete pItem;
			}
		}
		return GetTCService()->UpdateTCOnBoardBufferQueue(pQueue->GetType(), pQueue->GetName(), pQueue->GetSubScheduleID(), pItems);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::CanDeleteTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	INT  nCount[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = (HasSelectedTelecommands()) ? m_pQueues.GetAt(m_nIndex) : (CTCOnBoardBufferQueue *)NULL))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(), nCount[0] = (INT)pQueue->GetCount(), nCount[1] = 0; nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)))
			{
				nCount[1] += pItem->GetQueuedSize();
				continue;
			}
		}
		return((nCount[0] != nCount[1]) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::ShowTelecommandProperties()
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && pItem->IsSelected()) break;
			continue;
		}
		cLock.Release();
		return((nItem < nItems) ? ShowTelecommandProperties(nItem) : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::CanShowTelecommandProperties() CONST
{
	INT  nItem;
	INT  nItems;
	BOOL  bSelected;
	CString  szMembership;
	CTimeTag  tMembership;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(), bSelected = FALSE; nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) != (CTCOnBoardBufferQueuesItem *)NULL  &&  pItem->IsSelected())
			{
				if ((((pItem->GetMembership().IsEmpty() && !bSelected) || pItem->GetLoadTime() == tMembership) && pItem->GetMembership() == szMembership) || !bSelected)
				{
					szMembership = (!bSelected) ? pItem->GetMembership() : szMembership;
					tMembership = (!bSelected) ? pItem->GetLoadTime() : tMembership;
					bSelected = TRUE;
					continue;
				}
				break;
			}
		}
		return((nItem == nItems) ? bSelected : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::IsShowingTelecommandProperties() CONST
{
	return m_bProperties;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByNumber(INT nNumber)
{
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		if (nNumber <= pQueue->GetSize())
		{
			SelectTelecommand(nNumber - 1);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByName(LPCTSTR pszName, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetName() == pszName)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByComputer(LPCTSTR pszComputer, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && !pItem->GetComputerName().CompareNoCase(pszComputer))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByCommandSource(UINT nSourceType, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetSourceType() == nSourceType)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByDescription(LPCTSTR pszDescription, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	INT  nIndex;
	INT  nCount;
	CString  szInfo[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szInfo[0] = pszDescription; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)))
			{
				for (szInfo[1] = pItem->GetDescription(); !bCase; )
				{
					szInfo[0].MakeUpper();
					szInfo[1].MakeUpper();
					break;
				}
				if ((!bWord  &&  szInfo[1].Find(szInfo[0]) >= 0) || (bWord && (!szInfo[1].Find(szInfo[0] + SPACE) || szInfo[1].Find(SPACE + szInfo[0] + SPACE) > 0)))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByCategory(LPCTSTR pszCategory, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	ULONGLONG  nCategory;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, nCategory = GetDatabase()->TranslateTCFunctionHazardousFlag(pszCategory, FALSE); (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && (pItem->GetAttributes() & nCategory))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandBySubSystem(LPCTSTR pszSubSystem, BOOL bDown, BOOL bAll, BOOL bCase)
{
	INT  nIndex;
	INT  nCount;
	CString  szSubSystem[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szSubSystem[0] = pszSubSystem; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)))
			{
				for (szSubSystem[1] = pItem->GetDestinationSubSystem(); !bCase; )
				{
					szSubSystem[0].MakeUpper();
					szSubSystem[1].MakeUpper();
					break;
				}
				if (szSubSystem[0] == szSubSystem[1])
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByArgument(LPCTSTR pszArgument, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacket  cPacket;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)))
			{
				for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
				{
					if ((pFunctionElement = pItem->GetAt(nElement)) && pFunctionElement->GetName() == pszArgument) break;
					continue;
				}
				for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0; nParameter < nParameters; nParameter++)
				{
					if ((pPacketParameter = cPacket.GetAt(nParameter)) && pPacketParameter->GetTag() == pszArgument) break;
					continue;
				}
				if (nElement < nElements || nParameter < nParameters)
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByFlags(BOOL bDown, BOOL bAll, BOOL bInterlocking, BOOL bInterlocked, BOOL bGrouped, BOOL bBlocked)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && ((bInterlocking  &&  !pItem->GetInterlock().IsEmpty()) || (!bInterlocking  &&  pItem->GetInterlock().IsEmpty())) && ((bInterlocked  &&  pItem->GetReleaseInterlock(szInterlock, bInterlock)) || (!bInterlocked  &&  !pItem->GetReleaseInterlock(szInterlock, bInterlock))) && ((bGrouped && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_GROUPED)) || (!bGrouped && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_GROUPED) != TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_GROUPED)) && ((bBlocked && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED)) || (!bBlocked && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED) != TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByTCPacket(LPCTSTR pszPacket, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CDatabaseTCPacket  *pPacket;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pPacket = ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex))) ? GetDatabase()->GetTCPackets()->GetAt(pItem->GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pPacket->GetTag() == pszPacket)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPSC(UINT nPSC, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCPacket  cPacket;
	CByteArray  nPacketData;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetTCPacket(nPacketData) > 0 && cPacket.Unmap(nPacketData) && cPacket.GetSequenceCount() == (INT)nPSC)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByDispatchTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetDispatchTime() > 0)
			{
				if (bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() == tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
				if (!bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetDispatchTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByReleaseTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetReleaseTime() > 0)
			{
				if (bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() == tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
				if (!bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetReleaseTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByReleaseTimeOffset(DWORD dwOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeSpan  tReleaseInterval;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && ((bMatch  &&  dwReleaseOffset == dwOffset) || (!bMatch  &&  max(1000 * (TIMETAG)dwReleaseOffset - 1000000 * (TIMETAG)tInterval.GetTotalSeconds(), 0) <= 1000 * (TIMETAG)dwOffset  &&  dwReleaseOffset + 1000 * (DWORD)tInterval.GetTotalSeconds() >= dwOffset)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByTransmissionTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  pItem->GetTransmissionTime() > 0)
			{
				if (bMatch  &&  pItem->GetTransmissionTime().GetTimeInSeconds() == tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
				if (!bMatch  &&  pItem->GetTransmissionTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetTransmissionTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByExecutionTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	UINT  nExecutionOBRT;
	CTimeTag  tExecutionTime;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && (pItem->GetExecutionTime(tExecutionTime) || (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime))))
			{
				if (bMatch  &&  tExecutionTime.GetTimeInSeconds() == tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
				if (!bMatch  &&  tExecutionTime.GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && tExecutionTime.GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByExecutionTimeOffset(CONST CTimeSpan &tOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && ((bMatch  &&  dwExecutionOffset / 1000 == abs(tOffset.GetTotalSeconds()) && ((!bEarlierExecution  &&  tOffset >= 0) || (bEarlierExecution  &&  tOffset < 0))) || (!bMatch  &&  dwExecutionOffset / 1000 - tInterval.GetTotalSeconds() <= tOffset.GetTotalSeconds() && dwExecutionOffset / 1000 + tInterval.GetTotalSeconds() >= tOffset.GetTotalSeconds())))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByAuthorization(UINT nAuthorization, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED) == (nAuthorization & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPTVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)))
			{
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
				{
					if ((tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPTVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && (pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV)) == (nCheck & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPTVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && (pItem->GetResult() & (TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_GO | TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_WAIT | TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL)) == (nResult & (TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_GO | TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_WAIT | TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && ((nCheck != ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() >= 0 && ((pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV)) == (nCheck & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV)))) || (nCheck == ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() < 0)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByPEVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE && (pItem->GetResult() & (TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO | TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO)) == (nResult & (TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO | TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByCEVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	CTimeTag  tExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow[3];
	CTCOnBoardBufferQueuesItem  *pItem;
	CTCOnBoardBufferQueue  *pQueue;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)))
			{
				if (pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE)
				{
					for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) || pItem->GetExecutionTime(tExecutionTime); )
					{
						if (tTime.GetTime() >= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds())
						{
							SelectTelecommand(nIndex);
							return TRUE;
						}
						break;
					}
					if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
					{
						if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
						{
							SelectTelecommand(nIndex);
							return TRUE;
						}
					}
					if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
					{
						if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
						{
							SelectTelecommand(nIndex);
							return TRUE;
						}
					}
					if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
					{
						if ((pItem->GetReleaseTime() > 0 && tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
						{
							SelectTelecommand(nIndex);
							return TRUE;
						}
					}
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByCEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && ((nCheck != ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() >= 0 && ((pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)) == (nCheck & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)))) || (nCheck == ~(TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() < 0)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByCEVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE && (pItem->GetResult() & (TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED)) == (nResult & (TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN | TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SearchTelecommandByStatus(LPCTSTR pszStatus, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && ((pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_RELEASED))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTRELEASED  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_NOTRELEASED))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDRELEASE  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDRELEASE))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SENT))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDSEND  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDSEND))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_UPLINKED))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDUPLINK  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDUPLINK))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_EXECUTED  &&  pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_EXECUTED))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTEXECUTED  &&  pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_NOTEXECUTED))) || (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDEXECUTION  &&  pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDEXECUTION)))))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetPrintProperties(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nRange[2];
	CString  szItem;
	CTimeKey  tRange[2];
	CTimeTag  tExecutionTime;
	CTextViewAttribute  *pAttribute;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_GROUPED]);
	pSymbols.Add(m_pFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_BLOCKED]);
	pSymbols.Add(m_pCheckFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE]);
	pSymbols.Add(m_pCheckFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON]);
	pSymbols.Add(m_pCheckFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF]);
	pSymbols.Add(m_pCheckFlagSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN]);
	pSymbols.Add(m_pResultSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_WARNING]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_ERROR]);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINTERLOCK);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINTERLOCKIDLE);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINTERLOCKPENDING);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINTERLOCKSUCCESS);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINTERLOCKFAILURE);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESGROUPED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESBLOCKED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCHECKSNONE);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCHECKSON);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCHECKSOFF);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCHECKSDISABLED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESPTVGO);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESPTVWAIT);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESPTVFAIL);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESPEVGO);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESPEVNOGO);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVIDLE);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVPENDING);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVPASSED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVFAILED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVUNKNOWN);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESCEVUNVERIFIED);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESINFORMATION);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESWARNING);
	nSymbolIDs.Add(IDP_TCONBOARDBUFFERQUEUESERROR);
	if ((pQueue = (GetColumns(szColumns) && GetTitleFont(pTitleFont) && GetTextFont(pItemsFont)) ? m_pQueues.GetAt(m_pQueues.Find(pJobInfo->GetPrintBuffer(), pJobInfo->GetPrintQueue(), pJobInfo->GetPrintQueueID())) : (CTCOnBoardBufferQueue *)NULL))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(), szContents.RemoveAll(), pAttributes.RemoveAll(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) != (CTCOnBoardBufferQueuesItem *)NULL)
			{
				if ((!pJobInfo->GetPrintRange(nRange[0], nRange[1]) || (nItem + 1 >= (INT)nRange[0] && nItem + 1 <= (INT)nRange[1])) && (!pJobInfo->GetPrintRange(tRange[0], tRange[1]) || (pItem->GetExecutionTime(tExecutionTime) && tExecutionTime.GetTimeInSeconds() >= tRange[0].GetTime() && tExecutionTime.GetTimeInSeconds() <= tRange[1].GetTime())))
				{
					if ((pAttribute = new CTextViewAttribute))
					{
						if (GetText(nItem, szItem, pAttribute))
						{
							pAttributes.Add(pAttribute);
							szContents.Add(szItem);
							continue;
						}
						delete pAttribute;
					}
					break;
				}
			}
		}
		return((nItem == nItems) ? TRUE : FALSE);
	}
	return(((pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) != TCONBOARDBUFFERQUEUES_PRINT_QUEUE) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesPageDetailsTextView::UpdateContent(BOOL bRedraw)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	INT  nDigits;
	UINT  nFormat;
	CPoint  ptToolTip;
	CString  szItem;
	CString  szNumber;
	CString  szColumn;
	CString  szToolTip[3];
	CStringTools  cStringTools;
	CTextViewAttribute  cAttribute;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CDatabaseTCFunctions  pBlockedItems;
	CTextViewLock  cLock(this);

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem = 0, nItems = (INT)pQueue->GetSize(), nCount = GetTextCount(), nColumn = FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)), nDigits = cStringTools.ConvertLongIntToString(pQueue->GetSize()).GetLength(), nDigits = max(nDigits, 3); nItem < nItems; nItem++)
		{
			for (szNumber = cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits), szNumber += (m_nSearchIndex == nItem) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FIND_SYMBOL) : EMPTYSTRING; (pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && TranslateTelecommand(pItem, &cAttribute); )
			{
				for (nFormat = GetColumnFormat((nIndex = FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION)))); pItem->GetReleaseBlockedItems(pBlockedItems) > 0 && (nFormat & DT_SINGLELINE) && !m_bFullViewMode; )
				{
					cAttribute.SetColumnFormat(nIndex, nFormat & ~DT_SINGLELINE);
					break;
				}
				for (szItem = szNumber + TranslateTelecommand(pItem); nItem >= nCount; )
				{
					InsertText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE);
					break;
				}
				if (nItem < nCount)
				{
					SetText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE);
					break;
				}
				break;
			}
		}
		for (nItem = (INT)pQueue->GetSize(), nItems = nCount; nItem < nItems; nItem++)
		{
			DeleteText(nItem, (nItem == nItems - 1) ? bRedraw : FALSE);
			nItems--;
			nItem--;
		}
		if (bRedraw)
		{
			if (m_wndToolTip.IsVisibleAtPoint(ptToolTip))
			{
				if ((pItem = (FindTextFromPoint(ptToolTip, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nRow) : (CTCOnBoardBufferQueuesItem *)NULL))
				{
					for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
					{
						m_wndToolTip.Update(szToolTip[0], szToolTip[1]);
						break;
					}
				}
			}
			DrawContent();
		}
	}
}

VOID CTCOnBoardBufferQueuesPageDetailsTextView::RefreshContent()
{
	CTextViewLock  cLock(this);

	EnableFullViewMode(m_bFullViewMode);
	UpdateContent();
}

VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawContent()
{
	CTextView::DrawContent();
}
VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawContent(CDC *pDC)
{
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nHeight;
	CRect  rArea;
	CRect  rText[2];
	CRect  rContent;

	for (nItem = FindFirstVisibleText(), nItems = FindLastVisibleText() + 1, nItems = min(GetTextCount() - 1, nItems), m_wndContentCtrl.GetClientRect(rContent), rText[0] = m_wndContentCtrl.CalcTextRect(GetTextCount() - 1), nWidth = rContent.Width(), nHeight = m_wndContentCtrl.CalcTextLines(SPACE); nItem >= 0 && nItem <= nItems; nItem++)
	{
		DrawBackground(pDC, GetTextCount() + GetTextCount() % 2 + nItem % 2, -1, (rText[0].right < rContent.right) ? CRect(rText[0].right + m_wndContentCtrl.m_wTextIndent[1], max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rContent.top), rContent.right, (rText[1] = m_wndContentCtrl.CalcTextRect(nItem)).bottom + m_wndContentCtrl.m_wTextSpacing[1]) : CRect(0, 0, 0, 0));
		DrawText(pDC, nItem, m_wndContentCtrl.m_szContentText.GetAt(nItem));
	}
	for (rArea.SetRect(rContent.left, (GetTextCount() > 0) ? min(max(rText[0].bottom + m_wndContentCtrl.m_wTextSpacing[1], rContent.top), rContent.bottom) : rContent.top, rContent.right, rContent.bottom), nItem = GetTextCount(); rArea.top < rContent.bottom; rArea.DeflateRect(0, nHeight, 0, 0), nItem++)
	{
		DrawBackground(pDC, nItem, -1, CRect(rArea.left, rArea.top, rArea.right, rArea.top + nHeight));
		continue;
	}
}

VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawText(INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, pszText);
}
VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawText(CDC *pDC, INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(pDC, nItem, pszText);
}
VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawText(INT nItem, INT nColumn, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, nColumn, pszText);
}
VOID CTCOnBoardBufferQueuesPageDetailsTextView::DrawText(CDC *pDC, INT nItem, INT nColumn, LPCTSTR pszText)
{
	CDC  cDC;
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	BOOL  bText;
	BOOL  bState;
	UINT  nFormat;
	UINT  nSymbol[4];
	CRect  rText[3];
	CFont  cTextFont;
	CFont  *pOldFont;
	CSize  sizeSymbol;
	CSize  sizeBitmap;
	CPoint  ptBitmap;
	CString  szStage;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	COLORREF  nColor[2];
	CStringArray  szStages;
	CTextViewAttribute  *pAttribute;

	for (m_wndContentCtrl.GetClientRect(rText[0]), rText[1] = m_wndContentCtrl.CalcTextRect(nItem, nColumn), sizeBitmap.cx = m_wndContentCtrl.m_wTextIndent[0] + rText[1].Width() + m_wndContentCtrl.m_wTextIndent[1], sizeBitmap.cy = m_wndContentCtrl.m_wTextSpacing[0] + rText[1].Height() + m_wndContentCtrl.m_wTextSpacing[1]; rText[2].IntersectRect(rText[0], CRect(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[1].right + m_wndContentCtrl.m_wTextIndent[1], rText[1].bottom + m_wndContentCtrl.m_wTextSpacing[1])); )
	{
		for (nFormat = GetColumnFormat(nItem, nColumn), nColor[0] = GetColumnColor(nItem, nColumn), bState = TRUE; (pAttribute = m_wndContentCtrl.m_pContentTextAttributes.GetAt(nItem)); )
		{
			bState = (pAttribute->GetColumnBlinkingState(nColumn, bState) || pAttribute->GetColumnBlinkingState(-1, bState)) ? bState : TRUE;
			break;
		}
		if (cDC.CreateCompatibleDC(pDC))
		{
			if (cBitmap.CreateCompatibleBitmap(pDC, sizeBitmap.cx, sizeBitmap.cy))
			{
				if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
				{
					for (cDC.SetBkMode(TRANSPARENT), cDC.SetTextColor(nColor[0]), DrawBackground(&cDC, nItem, nColumn, CRect(m_wndContentCtrl.m_wTextIndent[0] - rText[1].left, 0, sizeBitmap.cx, sizeBitmap.cy)), bText = FALSE; (pOldFont = (nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT))) ? ((GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)) : (CFont *)NULL); )
					{
						cDC.DrawText(((nPos = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER))) ? (INT)_tcscspn(pszText, CString(GetSymbolDelimiter())) : -1) >= 0) ? CString(pszText).Left(nPos) : pszText, CRect(m_wndContentCtrl.m_wTextIndent[0], m_wndContentCtrl.m_wTextSpacing[0], sizeBitmap.cx - m_wndContentCtrl.m_wTextIndent[0], sizeBitmap.cy - m_wndContentCtrl.m_wTextSpacing[0]), nFormat);
						cDC.SelectObject(pOldFont);
						bText = TRUE;
						break;
					}
					if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)) || !bText)
					{
						for (sizeSymbol.cx = sizeSymbol.cy = 0, nColor[1] = cDC.GetNearestColor(VGA_COLOR_WHITE), cTextFont.DeleteObject(); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
						{
							sizeSymbol.cx = sizeSymbol.cy = cDC.GetTextExtent(SPACE).cy;
							m_sizeCheckFlagSymbols = sizeSymbol;
							m_sizeResultSymbols = sizeSymbol;
							m_sizeAlertSymbols = sizeSymbol;
							m_sizeFlagSymbols = sizeSymbol;
							cDC.SelectObject(pOldFont);
							cTextFont.DeleteObject();
							break;
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)))
						{
							for (nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION))) ? ((!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_ERROR : -1) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_WARNING) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pAlertSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, pszText).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS)))
						{
							for (nIndex = 0, nCount = sizeof(nSymbol) / sizeof(UINT), nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK : -1, nSymbol[1] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE : ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING : ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS : ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE : -1))), nSymbol[2] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_GROUPED : -1, nSymbol[3] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_BLOCKED : -1; nIndex < nCount; nIndex++)
							{
								if (bState  &&  nSymbol[nIndex] != (UINT)-1) m_pFlagSymbols[nSymbol[nIndex]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, nCount, nIndex).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								continue;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT : nSymbol[0], nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT)))
						{
							for (nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE : -1, nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED))) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
							for (szStage = pszText, szStages.RemoveAll(); !szStage.IsEmpty() && nSymbol[0] == (UINT)-1; szStage = (nPos >= 0) ? (szStage.Mid(nPos + lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
							{
								if ((nPos = szStage.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR))) >= 0)
								{
									szStages.Add(szStage.Left(nPos));
									continue;
								}
								szStages.Add(szStage);
							}
							for (nIndex = 0, nCount = (INT)szStages.GetSize(); nIndex < nCount; nIndex++)
							{
								for (nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE : -1, nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED : nSymbol[0]; nSymbol[0] != (UINT)-1; )
								{
									if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, nCount, nIndex).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
									break;
								}
							}
						}
					}
					ptBitmap.x = max(rText[2].left - rText[1].left + m_wndContentCtrl.m_wTextIndent[0], 0);
					ptBitmap.y = max(rText[2].top - rText[1].top + m_wndContentCtrl.m_wTextSpacing[0], 0);
					pDC->BitBlt(max(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[2].left), max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[2].top), min(sizeBitmap.cx - ptBitmap.x, rText[2].Width()), min(sizeBitmap.cy - ptBitmap.y, rText[2].Height()), &cDC, ptBitmap.x, ptBitmap.y, SRCCOPY);
					cDC.SelectObject(pOldBitmap);
				}
				cBitmap.DeleteObject();
			}
			cDC.DeleteDC();
		}
		break;
	}
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::DrawBackground(CDC *pDC, INT nItem, INT nColumn, CONST RECT &rItem)
{
	CDC  cDC[2];
	INT  nWidth;
	INT  nHeight;
	BOOL  bBackground;
	CBitmap  cBitmap[2];
	CBitmap  *pOldBitmap[2];
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	BLENDFUNCTION  sBlend;

	if (cDC[0].CreateCompatibleDC(pDC))
	{
		if (cDC[1].CreateCompatibleDC(pDC))
		{
			if (cBitmap[0].CreateCompatibleBitmap(pDC, (nWidth = rItem.right - rItem.left), (nHeight = rItem.bottom - rItem.top)))
			{
				if (cBitmap[1].CreateCompatibleBitmap(pDC, nWidth, nHeight))
				{
					if ((pOldBitmap[0] = cDC[0].SelectObject(&cBitmap[0])))
					{
						if ((pOldBitmap[1] = cDC[1].SelectObject(&cBitmap[1])))
						{
							for (sBlend.BlendFlags = 0, sBlend.BlendOp = AC_SRC_OVER, sBlend.AlphaFormat = 0, sBlend.SourceConstantAlpha = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COLUMNTRANSPARENCY; nWidth > 0 && nHeight > 0; )
							{
								for (cDC[0].FillSolidRect(0, 0, nWidth, nHeight, m_nBackgroundColor[nItem % 2]), cDC[1].FillSolidRect(0, 0, nWidth, nHeight, VGA_COLOR_WHITE), cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend); (pItem = ((pQueue = m_pQueues.GetAt(m_nIndex))) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem) : (CTCOnBoardBufferQueuesItem *)NULL) && (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDRELEASE || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDSEND || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDUPLINK); )
								{
									cDC[0].FillSolidRect(0, 0, nWidth, nHeight, LookupStatusColor(pItem->GetResult(), pItem->GetStatus()));
									cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
									break;
								}
								for (sBlend.SourceConstantAlpha = 0xFF - 2 * sBlend.SourceConstantAlpha; (pItem = ((pQueue = m_pQueues.GetAt(m_nIndex))) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem) : (CTCOnBoardBufferQueuesItem *)NULL) && pItem->IsSelected(); )
								{
									for (cDC[0].SetTextColor(pDC->GetTextColor()); (bBackground = CTextView::DrawBackground(&cDC[0], -(nItem + 1), nColumn, CRect(0, 0, nWidth, nHeight))); )
									{
										cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
										break;
									}
									for (pDC->SetTextColor(cDC[0].GetTextColor()); !bBackground; )
									{
										cDC[1].BitBlt(0, 0, nWidth, nHeight, &cDC[0], 0, 0, SRCCOPY);
										break;
									}
									break;
								}
								pDC->BitBlt(rItem.left, rItem.top, nWidth, nHeight, &cDC[1], 0, 0, SRCCOPY);
								break;
							}
							cDC[0].SelectObject(pOldBitmap[0]);
							cDC[1].SelectObject(pOldBitmap[1]);
							cBitmap[0].DeleteObject();
							cBitmap[1].DeleteObject();
							cDC[0].DeleteDC();
							cDC[1].DeleteDC();
							return TRUE;
						}
						cDC[0].SelectObject(pOldBitmap[0]);
					}
					cBitmap[1].DeleteObject();
				}
				cBitmap[0].DeleteObject();
			}
			cDC[1].DeleteDC();
		}
		cDC[0].DeleteDC();
	}
	return FALSE;
}

CTCOnBoardBufferQueuesPageDetailsView *CTCOnBoardBufferQueuesPageDetailsTextView::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesPageDetailsView *)CTextView::GetParent());
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesPageDetailsTextView::GetParentDisplay() CONST
{
	CTCOnBoardBufferQueuesPageDetailsView  *pView;

	return(((pView = GetParent())) ? pView->GetParentDisplay() : (CTCOnBoardBufferQueuesWnd *)NULL);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::ShowTelecommandProperties(INT nIndex)
{
	INT  nItem;
	INT  nItems;
	CUIntArray  nItemIDs;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTCOnBoardBufferQueuesItems  pItems;
	CTCOnBoardBufferQueuesItemPropertiesDialog  cTCFunctionPropertiesDialog;
	CTCOnBoardBufferQueuesComposedItemPropertiesDialog  cTCSequencePropertiesDialog;

	if (Lock())
	{
		if ((pQueue = m_pQueues.GetAt(m_nIndex)))
		{
			if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex)) && pQueue->Collect(nIndex, nItemIDs) > 0)
			{
				for (m_bProperties = TRUE, Unlock(); nItemIDs.GetSize() == 1; )
				{
					cTCFunctionPropertiesDialog.Create(GetParentDisplay(), pItem);
					break;
				}
				if (nItemIDs.GetSize() > 1)
				{
					for (nItem = 0, nItems = (INT)nItemIDs.GetSize(); nItem < nItems; nItem++)
					{
						pItems.SetAtGrow(nItem, pQueue->GetAt(nItemIDs.GetAt(nItem)));
						continue;
					}
					cTCSequencePropertiesDialog.Create(GetParentDisplay(), pItems);
					pItems.CPtrArray::RemoveAll();
				}
				m_bProperties = FALSE;
				return TRUE;
			}
		}
		Unlock();
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::ActivateTelecommand(INT nIndex, BOOL bActivate, BOOL bRedraw)
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bKeys;
	BOOL  bSelected;
	CPtrArray  pItems;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem[2];

	if ((pItem[0] = ((pQueue = m_pQueues.GetAt(m_nIndex))) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex) : (CTCOnBoardBufferQueuesItem *)NULL) || nIndex < 0)
	{
		for (nItem[1] = 0, nItems[1] = ((bKeys = (!HIBYTE(GetKeyState(VK_SHIFT)) && !HIBYTE(GetKeyState(VK_CONTROL)))) || nIndex < 0) ? (INT)pQueue->GetSize() : 0, bSelected = (nIndex >= 0) ? pItem[0]->IsSelected() : FALSE; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem[1])))
			{
				if (nIndex < 0 || bKeys)
				{
					pItem[1]->Select(FALSE);
					continue;
				}
			}
		}
		for (nItem[1] = 0, nItems[1] = (HIBYTE(GetKeyState(VK_SHIFT))) ? (INT)pQueue->GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem[1])) && pItem[1]->IsSelected()) break;
			continue;
		}
		for (nItem[0] = min(nIndex, (nItem[1] = (nItem[1] == nItems[1] || nItems[1] < 0) ? nIndex : nItem[1])), nItems[0] = max(nIndex, nItem[1]); nItem[0] <= nItems[0] && nItem[0] < pQueue->GetSize() && nIndex >= 0; nItem[0]++)
		{
			for (nItem[1] = 0, nItems[1] = ((pItem[0] = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem[0]))) ? pQueue->Collect(nItem[0], pItems) : 0; nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pItem[1] = (CTCOnBoardBufferQueuesItem *)pItems.GetAt(nItem[1])))
				{
					pItem[1]->Select((bActivate) ? !bSelected : FALSE);
					continue;
				}
			}
		}
		if (bRedraw) DrawContent();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::IsActivatedTelecommand(INT nIndex) CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;

	return(((pItem = ((pQueue = m_pQueues.GetAt(m_nIndex))) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nIndex) : (CTCOnBoardBufferQueuesItem *)NULL) && pItem->IsSelected()) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::UpdateTelecommand(CTCOnBoardBufferQueuesItem *pItem)
{
	UINT  nResult;
	CTimeTag  tTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tTimeWindow[3];
	CStringArray  szParameters;

	for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED) && pItem->GetExecutionTime(tExecutionTime) && tExecutionTime.GetTime() + 1000000 * (tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) >= tTime.GetTime(); )
	{
		for (nResult = pItem->GetResult(); (pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV)) == 0; )
		{
			for (pItem->SetResult(pItem->GetResult() & ~(TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_TELEMETRY | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_2NDSTEP | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_PARAMETERS)); (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_2NDSTEP) && !GetTCService()->CheckTCOnBoardBufferQueue(pItem); )
			{
				pItem->SetResult(pItem->GetResult() | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_2NDSTEP);
				break;
			}
			if (pItem->GetPreExeGroupRef() >= 0)
			{
				if (!GetTCService()->CheckTCFunctionPreexecutionParameterGroup(pItem->GetPreExeGroupRef(), szParameters))
				{
					pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
					pItem->SetResult(pItem->GetResult() | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_PARAMETERS);
				}
				for (; GetTMService()->CheckTMStreamInterruption(); )
				{
					pItem->SetResult(pItem->GetResult() | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_TELEMETRY);
					break;
				}
			}
			if (pItem->GetResult() & (TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_TELEMETRY | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_CORRELATION | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_2NDSTEP | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_PARAMETERS))
			{
				pItem->SetResult((pItem->GetResult() & ~TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO) | TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO);
				return((pItem->GetResult() != nResult) ? TRUE : FALSE);
			}
			break;
		}
		pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
		pItem->SetResult((pItem->GetResult() & ~(TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_TELEMETRY | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_CORRELATION | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_2NDSTEP | TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_PARAMETERS)) | TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO);
		return((pItem->GetResult() != nResult) ? TRUE : FALSE);
	}
	return FALSE;
}

CString CTCOnBoardBufferQueuesPageDetailsTextView::TranslateTelecommand(CONST CTCOnBoardBufferQueuesItem *pItem) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nCategory;
	INT  nCategories;
	INT  nSubSystem;
	INT  nSubSystems;
	INT  nBlockItem;
	INT  nBlockItems;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	BOOL  bBlockItemPrefix;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	UINT  nVerificationState;
	UINT  nVerificationReason;
	DWORD  dwExecutionOffset;
	DWORD  dwReleaseOffset;
	CString  szItem;
	CString  szName;
	CString  szFlags;
	CString  szAlert;
	CString  szStatus;
	CString  szColumn;
	CString  szCategory;
	CString  szArgument;
	CString  szTCPacket;
	CString  szSubSystem;
	CString  szChecks[3];
	CString  szResult[3];
	CString  szSourceType;
	CString  szSequenceCount;
	CString  szAuthorization;
	CString  szDispatchTime;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CString  szTransmissionTime;
	CString  szVerificationTime;
	CString  szVerificationState;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tTransmissionTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow;
	CTCPacket  cTCPacket;
	CByteArray  nPacketData;
	CTCInterlock  cInterlock[2];
	CStringArray  szCategories;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;
	CLongUIntArray  nCategoryIDs;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)
		{
			szAlert = (pItem->IsAlerted() == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION)) : EMPTYSTRING;
			szAlert = (pItem->IsAlerted() == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_WARNING) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING)) : szAlert;
			szAlert = (pItem->IsAlerted() == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR)) : szAlert;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAlert) : szAlert;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME)
		{
			szName.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_NAME_FORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership());
			szName = (pItem->GetMembership().IsEmpty()) ? pItem->GetName() : szName;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szName) : szName;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER)
		{
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetComputerName()) : pItem->GetComputerName();
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE)
		{
			szSourceType = (pItem->GetSourceType() == TCITEM_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_COMMANDSOURCE_MANUALSTACK) : EMPTYSTRING;
			szSourceType = (pItem->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_COMMANDSOURCE_AUTOMATICSTACK) : szSourceType;
			szSourceType = (pItem->GetSourceType() == TCITEM_SOURCETYPE_PROCEDURESMONITOR) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_COMMANDSOURCE_PROCEDURESMONITOR) : szSourceType;
			szSourceType = (pItem->GetSourceType() == TCITEM_SOURCETYPE_ALLSOURCES) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_COMMANDSOURCE_ALLSOURCES) : szSourceType;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szSourceType) : szSourceType;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION)
		{
			for (nBlockItem = 0, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems), bBlockItemPrefix = TRUE; nBlockItem < nBlockItems; nBlockItem++)
			{
				if ((pFunction = pBlockedItems.GetAt(nBlockItem)) && !pFunction->GetDescription().IsEmpty())
				{
					if (_istspace(pFunction->GetDescription().GetAt(0)))
					{
						bBlockItemPrefix = FALSE;
						break;
					}
				}
			}
			for (nBlockItem = 0, szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDescription()) : pItem->GetDescription(); nBlockItem < nBlockItems; nBlockItem++)
			{
				if ((pFunction = pBlockedItems.GetAt(nBlockItem)) != (CDatabaseTCFunction *)NULL  &&  !pFunction->GetDescription().IsEmpty())
				{
					for (szItem += (!nBlockItem) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_DESCRIPTION_BLOCKTITLESIGN) : EMPTYSTRING; !bBlockItemPrefix; )
					{
						szItem += EOL + pFunction->GetDescription();
						break;
					}
					szItem += (bBlockItemPrefix) ? (EOL + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_DESCRIPTION_BLOCKITEMPREFIX)) + pFunction->GetDescription()) : EMPTYSTRING;
				}
			}
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY)
		{
			for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nCategoryIDs), szCategory.Empty(); nCategory < nCategories; nCategory++)
			{
				if (pItem->GetAttributes() & nCategoryIDs.GetAt(nCategory))
				{
					szCategory = szCategories.GetAt(nCategory);
					break;
				}
			}
			szItem += (nColumn > 0) ? (CString(GetColumnDelimiter()) + szCategory) : szCategory;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM)
		{
			for (szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDestinationSubSystem()) : pItem->GetDestinationSubSystem(); pItem->GetTCPacket(&cPacket); )
			{
				for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
				{
					if (GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)) == cPacket.GetAPID()) break;
					continue;
				}
				for (szSubSystem.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_SUBSYSTEM_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(cPacket.GetAPID(), max(cStringTools.ConvertUIntToString((szSubSystems.GetSize() > 0) ? GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(szSubSystems.GetUpperBound())) : 0, 16).GetLength(), 3), 16)); nSubSystem < nSubSystems; )
				{
					szItem += szSubSystem;
					break;
				}
				break;
			}
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS)
		{
			for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED) != TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
			{
				if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
				{
					szArgument.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
					szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
					nArgumentsCount++;
				}
			}
			for (nBlockItem = -1, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
			{
				for (nArgument[0] = 0, nArguments[0] = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
				{
					if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nArgument[0]) : pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
					{
						szArgument.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText());
						szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
						nArgumentsCount++;
					}
				}
			}
			szItem += (nColumn > 0) ? ((!nArgumentsCount) ? ((nArguments[0] + nArguments[1] == 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_NONE)) : CString(GetColumnDelimiter())) : EMPTYSTRING) : ((nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ARGUMENTS_NONE) : EMPTYSTRING);
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS)
		{
			szFlags.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_FORMAT), (pItem->GetInterlock(&cInterlock[0])) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK) : EMPTYSTRING, (pItem->GetReleaseInterlock(&cInterlock[1])) ? ((cInterlock[1].GetState() == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE) : ((cInterlock[1].GetState() == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING) : ((cInterlock[1].GetState() == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE)))) : EMPTYSTRING, (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_GROUPED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED) : EMPTYSTRING, (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED) : EMPTYSTRING);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szFlags) : szFlags;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET)
		{
			szTCPacket = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetTag() : EMPTYSTRING;
			szItem += (nColumn > 0) ? (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_TCPACKET_BLOCKED)) : (GetColumnDelimiter() + szTCPacket)) : (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_TCPACKET_BLOCKED) : szTCPacket);
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC)
		{
			szSequenceCount = (pItem->GetTCPacket(nPacketData) > 0 && cTCPacket.Unmap(nPacketData)) ? cStringTools.ConvertIntToPaddedString(cTCPacket.GetSequenceCount(), 4, 16) : EMPTYSTRING;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szSequenceCount) : szSequenceCount;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME)
		{
			szDispatchTime = (pItem->GetDispatchTime() > 0) ? pItem->GetDispatchTime().FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_DISPATCHTIME_FORMAT)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_DISPATCHTIME_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDispatchTime) : szDispatchTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME)
		{
			for (szReleaseTime[0] = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FAILEDFORMAT); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				szReleaseTime[0] = tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT));
				break;
			}
			if (!tReleaseTime[0].GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_TIMETAGGED) != TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_WITHPREVIOUS);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET)
		{
			for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
			{
				szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_OFFSETFORMAT));
				szReleaseTime[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[2].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[3].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID()) ? szReleaseTime[0] : szReleaseTime[2]) : ((!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID()) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME)
		{
			for (szTransmissionTime.Empty(); (tTransmissionTime = (pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? pItem->GetTransmissionTime() : 0) > 0; )
			{
				szTransmissionTime = tTransmissionTime.FormatGmt((pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_TRANSMISSIONTIME_FORMAT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_TRANSMISSIONTIME_FAILEDFORMAT));
				break;
			}
			szTransmissionTime = (pItem->GetStatus() != TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED || tTransmissionTime <= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_TRANSMISSIONTIME_NONE) : szTransmissionTime;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szTransmissionTime) : szTransmissionTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME)
		{
			szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
			szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
			szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET)
		{
			for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
			{
				szExecutionTime[0] = CTimeSpan((bEarlierExecution) ? -(TIMEKEY)(dwExecutionOffset / 1000) : (TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_OFFSETFORMAT));
				szExecutionTime[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[2].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[3].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID()) ? szExecutionTime[0] : szExecutionTime[2]) : ((!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID()) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION)
		{
			szAuthorization = (pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_PREAUTHORIZED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_AUTHORIZATION_AUTOMATIC) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_AUTHORIZATION_MANUAL);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAuthorization) : szAuthorization;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW)
		{
			for (szReleaseTime[0].Empty(); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					szReleaseTime[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
					szReleaseTime[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)));
					szReleaseTime[0] = (tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[1];
				}
				break;
			}
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
			{
				szReleaseTime[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseTime[1].GetTimeInSeconds() - tReleaseTime[0].GetTimeInSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_IMMEDIATETIMEFORMAT), (LPCTSTR)tReleaseTime[1].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[2].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseTime[1] > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			else if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
			{
				szReleaseTime[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_IMMEDIATEOFFSETFORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[2].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			for (; !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval); )
			{
				szReleaseTime[0] = (pItem->GetDispatchTime() > 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_UNLIMITEDFORMAT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVTIMEWINDOW_NONE);
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)
		{
			szChecks[0] = ((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV) != TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPTV) ? ((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPTV) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[0]) : szChecks[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)
		{
			szResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_GO) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO) : EMPTYSTRING;
			szResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_WAIT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT) : szResult[0];
			szResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL) : szResult[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[0]) : szResult[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)
		{
			szChecks[1] = (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE || pItem->GetPreExeGroupRef() >= 0) ? (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV) != TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLEPEV) ? ((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDEPEV) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[1]) : szChecks[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)
		{
			szResult[1] = (pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_GO)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO) : EMPTYSTRING;
			szResult[1] = (pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO) : szResult[1];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[1]) : szResult[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW)
		{
			for (szVerificationTime.Empty(); (pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)) == 0 && pItem->GetVerificationTime() > 0; )
			{
				szVerificationTime.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVTIMEWINDOW_FORMAT), (LPCTSTR)pItem->GetVerificationTime().FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_VERIFICATIONTIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow)) ? tTimeWindow : 0).GetTotalSeconds()));
				break;
			}
			szVerificationTime = (pItem->GetDispatchTime() == 0 && szVerificationTime.IsEmpty()) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVTIMEWINDOW_NONE) : szVerificationTime;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szVerificationTime) : szVerificationTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS)
		{
			szChecks[2] = (pItem->GetType() == TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE || pItem->GetExeVerGroupRef() >= 0) ? (((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV) != TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV) ? ((pItem->GetFlags() & TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[2]) : szChecks[2];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT)
		{
			for (szResult[2].Empty(); pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE; )
			{
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE), (nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START), (nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS), (nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION), (nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (szResult[2].IsEmpty())
				{
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) : EMPTYSTRING;
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED) : szResult[2];
				}
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[2]) : szResult[2];
			continue;
		}
		if (LookupColumnName(szColumn) == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS)
		{
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_RELEASED) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_EXECUTED)) : EMPTYSTRING;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTRELEASED) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_NOTRELEASED) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_NOTEXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDRELEASE) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDRELEASE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SENT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDSEND) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDSEND) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_UPLINKED) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDUPLINK) ? ((pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDUPLINK) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			if ((pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT || pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED) && pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE && (pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_OVERRIDECEV | TCONBOARDBUFFERQUEUESITEM_CHECKFLAG_DISABLECEV)) == 0 && pItem->GetExeVerGroupRef() >= 0)
			{
				szStatus += (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? (CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_VERIFYING))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? (CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SUCCESSFUL))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? (CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_FAILED))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? (CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_UNKNOWN))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? (CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_UNVERIFIED))) : EMPTYSTRING;
			}
			szStatus += (pItem->GetStatus() == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTRELEASED  &&  pItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE  &&  pItem->GetAuthorizationStatus() == TCONBOARDBUFFERQUEUESITEM_AUTHORIZATIONSTATUS_DENIED) ? (CString(SPACE) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_STATUS_DENIED)) : EMPTYSTRING;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szStatus) : szStatus;
			continue;
		}
	}
	return szItem;
}
BOOL CTCOnBoardBufferQueuesPageDetailsTextView::TranslateTelecommand(CONST CTCOnBoardBufferQueuesItem *pItem, CTextViewAttribute *pAttribute) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nColumnID;
	BOOL  bAlertFlag;
	CTextViewAttribute  cAttribute;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), pAttribute->Copy(&cAttribute); nColumn < nColumns; nColumn++)
	{
		pAttribute->SetColumnColor(nColumn, LookupColumnColor(nColumn));
		continue;
	}
	for (nColumnID = (pItem->IsAlerted() != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE); nColumnID & TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_ALL; nColumnID <<= 1)
	{
		if (pItem->IsAlerted(nColumnID) != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE  &&  FindColumnIndex(LookupColumnName(nColumnID)) < 0)
		{
			pAttribute->SetColumnBlinking(-1, TRUE);
			return TRUE;
		}
	}
	for (nColumn = 0, nColumns = (pItem->IsAlerted() != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE) ? (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize() : 0, bAlertFlag = FALSE; nColumn < nColumns; nColumn++)
	{
		if (pItem->IsAlerted(LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE)
		{
			pAttribute->SetColumnBlinking(nColumn, TRUE);
			bAlertFlag = TRUE;
			continue;
		}
		pAttribute->SetColumnBlinking(nColumn, FALSE);
	}
	if (pItem->IsAlerted() != TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE  &&  pItem->IsAlerted(0) == TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_NONE  &&  !bAlertFlag) pAttribute->SetColumnBlinking(-1, TRUE);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::AdjustTelecommandAlerts(CONST CTCItem *pAlertItem, CTCOnBoardBufferQueuesItem *pItem) CONST
{
	UINT  nFlags[2];
	UINT  nResult[2];
	CString  szAlert;
	CTimeTag  tTime;
	CTimeTag  tAcknowledgeTime;

	if (pAlertItem->GetFlags() & TCITEM_ACKNOWLEDGEFLAG_ALL)
	{
		for (tAcknowledgeTime = pItem->GetAcknowledgeTime(); pItem->CTCItem::Copy(pAlertItem); )
		{
			for (pItem->SetFlags(pItem->GetFlags() & ~TCONBOARDBUFFERQUEUESITEM_ACKNOWLEDGEFLAG_ALL); pItem->GetAcknowledgeTime() != tAcknowledgeTime || tAcknowledgeTime == 0; )
			{
				pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ANY);
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	if (pAlertItem->GetStatus() != TCITEM_STATUS_RELEASED  &&  pAlertItem->GetStatus() != TCITEM_STATUS_SENT  &&  pAlertItem->GetStatus() != TCITEM_STATUS_UPLINKED  &&  pAlertItem->GetStatus() != TCITEM_STATUS_EXECUTED)
	{
		if (((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PTV_FAIL)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL))) || ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PEV_NOGO)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO)))) pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME, (pAlertItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_EXECUTION_FAILURE));
		if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PTV_FAIL)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PTV_FAIL))) pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT, (pAlertItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_EXECUTION_FAILURE));
		if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PEV_NOGO)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_PEV_NOGO))) pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT, (pAlertItem->GetType() != TCONBOARDBUFFERQUEUESITEM_TYPE_PROCEDURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_EXECUTION_FAILURE));
	}
	if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_FAILED)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED))) pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_VERIFICATION_FAILURE), FALSE);
	if (((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_UNKNOWN)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN))) || ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_UNVERIFIED)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED)))) pItem->Alert(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR, TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_VERIFICATION_ILLEGAL), FALSE);
	for (nFlags[0] = (pAlertItem->GetFlags() & (TCITEM_DUMPFLAG_SYNCHRONIZED | TCITEM_DUMPFLAG_NOTSYNCHRONIZED)), nFlags[1] = (pItem->GetFlags() & (TCONBOARDBUFFERQUEUESITEM_DUMPFLAG_SYNCHRONIZED | TCONBOARDBUFFERQUEUESITEM_DUMPFLAG_NOTSYNCHRONIZED)); nFlags[0] && nFlags[0] != nFlags[1]; )
	{
		szAlert.Format((nFlags[0] & TCITEM_DUMPFLAG_SYNCHRONIZED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_SYNCHRONIZATION_CORRECT) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_MESSAGE_SYNCHRONIZATION_INCORRECT), (LPCTSTR)tTime.FormatGmt());
		pItem->Alert((nFlags[0] & TCITEM_DUMPFLAG_SYNCHRONIZED) ? TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION : TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_WARNING, 0, szAlert);
		break;
	}
	if (!nFlags[0] && nFlags[1]) pItem->Alert((nFlags[1] & TCONBOARDBUFFERQUEUESITEM_DUMPFLAG_SYNCHRONIZED) ? TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_INFORMATION : TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_WARNING, 0);
	return pItem->CTCItem::Copy(pAlertItem);
}

CString CTCOnBoardBufferQueuesPageDetailsTextView::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT);
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) return STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCOnBoardBufferQueuesPageDetailsTextView::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS))) return TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS;
	return 0;
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::LookupColumnsName(CONST CUIntArray &nColumns, CStringArray &szColumns) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), szColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		szColumns.Add(LookupColumnName(nColumns.GetAt(nIndex)));
		continue;
	}
	return((nCount == szColumns.GetSize()) ? (INT)szColumns.GetSize() : 0);
}

COLORREF CTCOnBoardBufferQueuesPageDetailsTextView::LookupColumnColor(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsNumberColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsNameColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsComputerColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsCommandSourceColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsDescriptionColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsCategoryColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsSubSystemColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsArgumentsColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsFlagsColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsTCPacketColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPSCColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsExcutionTimeColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsExcutionTimeOffsetColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsAuthorizationColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVChecksColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVResultColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVChecksColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVResultColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVChecksColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVResultColumnColor();
	if (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) return GetDatabase()->GetTCOnBoardBufferQueuesDetailsStatusColumnColor();
	return GetSysColor(COLOR_WINDOWTEXT);
}

COLORREF CTCOnBoardBufferQueuesPageDetailsTextView::LookupStatusColor(UINT nResult, UINT nStatus) CONST
{
	return(((nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_NOTRELEASED || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDRELEASE || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDSEND || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_FAILEDUPLINK)) ? ((nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_RELEASED || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_SENT || nStatus == TCONBOARDBUFFERQUEUESITEM_STATUS_UPLINKED) ? ((nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_PASSED) : ((nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_PENDING) : ((nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_IDLE) : (((nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) || (nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) || (nResult & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED)) ? m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NOTPASSED) : m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NONE))))) : m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NOTPASSED)) : m_nStatusColors.GetAt(TCONBOARDBUFFERQUEUESITEM_STATUSCOLOR_NONE));
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn).Compare(pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	INT  nDxChar;
	UINT  nColumn;
	CFont  cFont[2];
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((nColumn = LookupColumnName(pszColumn)) == 0)
		{
			for (GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[1])); )
			{
				nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
				pDC->SelectObject(pOldFont);
				break;
			}
			ReleaseDC(pDC);
			return nWidth;
		}
		for (GetTitleFont(&cFont[0]), GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[0])); )
		{
			nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
			pDC->SelectObject(pOldFont);
			break;
		}
		if ((pOldFont = pDC->SelectObject(&cFont[1])))
		{
			if ((nDxChar = (pDC->GetTextMetrics(&tmFont) > 0) ? (4 * tmFont.tmAveCharWidth / 3) : 0) > 0)
			{
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsNumberColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsNameColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsComputerColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsCommandSourceColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsDescriptionColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsCategoryColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsSubSystemColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsArgumentsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsFlagsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsExecutionTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsExecutionTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsAuthorizationColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsPTVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsPEVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsCEVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardBufferQueuesDetailsStatusColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		return nWidth;
	}
	return 0;
}

INT CTCOnBoardBufferQueuesPageDetailsTextView::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nWidth;
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (nColumns.GetAt(nIndex[0]) == LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex[1])))
			{
				nWidth = (nIndex[1] > 0) ? (m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]) - m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1] - 1)) : m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]);
				nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + nWidth) : nWidth);
				break;
			}
		}
		if (nIndex[1] == nCount[1])
		{
			nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0])))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0]))));
			continue;
		}
	}
	return((nCount[0] == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

CRect CTCOnBoardBufferQueuesPageDetailsTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, LPCTSTR pszText) CONST
{
	INT  nPos;
	CRect  rText;
	CRect  rSymbol;
	CFont  *pOldFont;
	CString  szText;
	CClientDC  cDC(NULL);

	for (szText = ((nPos = (szText = pszText).Find(GetSymbolDelimiter())) >= 0) ? szText.Left(nPos) : szText, rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), rSymbol.SetRectEmpty(); (pOldFont = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)) && !rText.IsRectEmpty()) ? cDC.SelectObject((CFont *)&m_wndContentCtrl.m_cFont) : (CFont *)NULL); )
	{
		rSymbol.SetRect(rText.left + cDC.GetTextExtent(szText + SPACE).cx, rText.top, rText.left + cDC.GetTextExtent(szText + SPACE).cx + m_sizeAlertSymbols.cx, rText.top + m_sizeAlertSymbols.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		cDC.SelectObject(pOldFont);
		break;
	}
	return rSymbol;
}
CRect CTCOnBoardBufferQueuesPageDetailsTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, INT nCount, INT nIndex) CONST
{
	CRect  rText;
	CRect  rSymbol;
	CSize  sizeSymbol;

	for (rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS))) ? m_sizeFlagSymbols : CSize(0, 0), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS))) ? m_sizeCheckFlagSymbols : sizeSymbol, sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)) || nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)) || nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT))) ? m_sizeResultSymbols : sizeSymbol, rSymbol.SetRectEmpty(); sizeSymbol.cx > 0 && sizeSymbol.cy > 0 && !rText.IsRectEmpty(); )
	{
		rSymbol.SetRect(rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx), rText.top, rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx) + sizeSymbol.cx, rText.top + sizeSymbol.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		break;
	}
	return rSymbol;
}

TCHAR CTCOnBoardBufferQueuesPageDetailsTextView::GetSymbolDelimiter()
{
	return SPACE[0];
}

CString CTCOnBoardBufferQueuesPageDetailsTextView::ConstructToolTipTitle(CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nRow;
	INT  nColumn;
	CString  szTitle;

	switch (nTip)
	{
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_ALERTINFORMATION);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_ALERTWARNING);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_ALERTERROR);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_GROUPEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_BLOCKEDTITLE);
			break;
		}
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVRESULTTITLE);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVRESULTTITLE);
		break;
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED)))
	{
		szTitle = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTTITLE);
		break;
	}
	break;
	}
	}
	return szTitle;
}

CString CTCOnBoardBufferQueuesPageDetailsTextView::ConstructToolTipText(CONST CTCOnBoardBufferQueuesItem *pItem, CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nPos;
	INT  nRow;
	INT  nColumn;
	INT  nIndex;
	INT  nCount;
	INT  nParameter;
	INT  nParameters;
	UINT  nStageID;
	UINT  nStage;
	UINT  nScope;
	UINT  nState;
	UINT  nReason;
	BOOL  bSuccess;
	CString  szText;
	CString  szAlert;
	CString  szStages;
	CString  szCheckState[2];
	CString  szCheckResult[6];
	CString  szCheckReason[2];
	CString  szInterlockName;
	CString  szInterlockStage;
	CString  szInterlockState;
	CString  szInterlockScope[2];
	CTimeSpan  tTimeWindow;
	CStringArray  szStageIDs;
	CStringArray  szParameters;
	CStringTools  cStringTools;
	CTCInterlock  cInterlock[2];
	CDatabaseTCPreExeGroup  *pTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pTCExeVerGroup;
	CDatabaseTCPreExeGroupParameter  *pTCPreExeGroupParameter;
	CDatabaseTCExeVerGroupParameter  *pTCExeVerGroupParameter;

	switch (nTip)
	{
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR)))
	{
		for (pItem->IsAlerted(-1, szText); (nCount = pItem->GetAlertCount(TCONBOARDBUFFERQUEUESITEM_ALERTTYPE_ERROR)) > 1; )
		{
			szAlert.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_ALERTCOUNT), nCount);
			szText += CString(EOL) + szAlert;
			break;
		}
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			if (pItem->GetInterlock(&cInterlock[0]) && !pItem->GetInterlock().Compare(cInterlock[0].GetName()))
			{
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE((nScope = cInterlock[0].GetScope())) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = ((nStage = cInterlock[0].GetStage()) == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKTEXT), (LPCTSTR)pItem->GetInterlock(), (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			if (pItem->GetReleaseInterlock(&cInterlock[1]) && pItem->GetReleaseInterlock(szInterlockName, bSuccess) && szInterlockName == cInterlock[1].GetName())
			{
				szInterlockState = ((nState = cInterlock[1].GetState()) == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTATEIDLE) : EMPTYSTRING;
				szInterlockState = (nState == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTATEPENDING) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTATESUCCESS) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTATEFAILURE) : szInterlockState;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE((nScope = cInterlock[1].GetScope())) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = ((nStage = cInterlock[1].GetStage()) == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKEDTEXT), (LPCTSTR)szInterlockName, (bSuccess) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKWAITSTATESUCCESS) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_INTERLOCKWAITSTATEFAILURE), (LPCTSTR)szInterlockState, (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_GROUPEDTEXT);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_BLOCKEDTEXT);
			break;
		}
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVCHECKSSTATEOFF) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVCHECKSSTATEDISABLED) : szCheckState[0];
		szCheckState[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVCHECKSTEXT), (LPCTSTR)szCheckState[0]);
		szText = szCheckState[1];
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSSTATENONE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCPreExeGroup = GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSSTATENONE) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCExeVerGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCExeVerGroup->GetName());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL)))
	{
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVRESULTSTATEGO) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVRESULTSTATEFAIL);
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVRESULTSTATEWAIT) : szCheckResult[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_UPLINK) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONUPLINK) : EMPTYSTRING;
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_RELEASETIMEWINDOW) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONRELEASETIMEWINDOW)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONRELEASETIMEWINDOW)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_EXECUTIONTIME) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONEXECUTIONTIME)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONEXECUTIONTIME)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_INTERLOCK) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONINTERLOCK)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONINTERLOCK)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_SUBSYSTEM) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSUBSYSTEM)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSUBSYSTEM)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_ONBOARDBUFFER) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONONBOARDBUFFER)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONONBOARDBUFFER)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PTV_ENCODING) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONENCODING)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONENCODING)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetAuthorizationStatus() == TCONBOARDBUFFERQUEUESITEM_AUTHORIZATIONSTATUS_DENIED) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONAUTHORIZATION)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONAUTHORIZATION)) : szCheckReason[0];
		szCheckResult[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVRESULTTEXT), (LPCTSTR)szCheckResult[0]);
		szCheckReason[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PTVREASONTEXT), (LPCTSTR)szCheckReason[0]);
		szText = (!szCheckReason[0].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO)))
	{
		for (szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVRESULTSTATENOGO) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVRESULTSTATEGO), szCheckResult[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVRESULTTEXT), (LPCTSTR)szCheckResult[0]), szCheckReason[0].Empty(); (pTCPreExeGroup = ((pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_PARAMETERS) && pItem->GetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters) > 0) ? GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef()) : (CDatabaseTCPreExeGroup *)NULL); )
		{
			for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pTCPreExeGroupParameter = pTCPreExeGroup->GetAt(pTCPreExeGroup->Find(szParameters.GetAt(nParameter)))))
				{
					szCheckReason[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETERFORMAT), (LPCTSTR)pTCPreExeGroupParameter->GetTag());
					szCheckReason[0] += (!szCheckReason[0].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETERSEPARATOR) + szCheckReason[1]) : szCheckReason[1];
					if (szCheckReason[0].GetLength() > lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETERS)))
					{
						szCheckReason[0] += STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETERELLIPSIS);
						break;
					}
					continue;
				}
				szParameters.RemoveAt(nParameter);
				nParameters--;
				nParameter--;
			}
			szCheckReason[1].Format((szParameters.GetSize() > 0) ? ((szParameters.GetSize() > 1) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETERS) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONPARAMETER)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONEXPRESSION), (LPCTSTR)szCheckReason[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		szCheckReason[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_2NDSTEP) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONEXTRA2NDSTEP)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASON2NDSTEP)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_TELEMETRY) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONEXTRATELEMETRY)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONTELEMETRY)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_FAILURE_PEV_CORRELATION) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONEXTRACORRELATION)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_PEVREASONCORRELATION)) : szCheckReason[1];
		szText = (!szCheckReason[1].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	case TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT:
	{ if (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPENDING)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPASSED)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEFAILED)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNKNOWN)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNVERIFIED)))
	{
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPENDING))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPASSED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEFAILED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNKNOWN))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNVERIFIED))) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[0];
		szCheckResult[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTVERIFICATIONTIME), (LPCTSTR)pItem->GetVerificationTime().FormatGmt(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTTIMEFORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow)) ? tTimeWindow : 0).GetTotalSeconds()));
		for (szCheckResult[2].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTOVERALLSTATE), (LPCTSTR)szCheckResult[0]); !lstrcmp(pszTip, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE)); )
		{
			szCheckResult[2] += CString(EOL) + szCheckResult[1];
			break;
		}
		szText = szCheckResult[2];
		break;
	}
	for (szStages = (FindTextFromPoint(ptTip, nRow, nColumn)) ? pszTip : EMPTYSTRING, szStageIDs.RemoveAll(); !szStages.IsEmpty(); szStages = (nPos >= 0) ? (szStages.Mid(nPos + lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
	{
		if ((nPos = szStages.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR))) >= 0)
		{
			szStageIDs.Add(szStages.Left(nPos));
			continue;
		}
		szStageIDs.Add(szStages);
	}
	for (nIndex = 0, nCount = (INT)szStageIDs.GetSize(); nIndex < nCount; nIndex++)
	{
		if (CalcTelecommandSymbolPosition(nRow, nColumn, nCount, nIndex).PtInRect(ptTip))
		{
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCONBOARDBUFFERQUEUESITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[0];
			szCheckResult[1] = ((nStageID = (UINT)_ttoi(szStageIDs.GetAt(nIndex))) == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTAGEACCEPTANCE) : EMPTYSTRING;
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTAGESTART) : szCheckResult[1];
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTAGEPROGRESS) : szCheckResult[1];
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION)) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTAGECOMPLETION) : szCheckResult[1];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[2];
			for (szCheckResult[3].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTOVERALLSTATE), (LPCTSTR)szCheckResult[0]), szCheckResult[4].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTAGE), (LPCTSTR)szCheckResult[1]), szCheckResult[5].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVRESULTSTATE), (LPCTSTR)szCheckResult[2]), szCheckReason[0].Empty(); (pTCExeVerGroup = (pItem->GetVerificationStageState(nStageID, nState, nReason) && (nReason & TCHISTORYITEM_FAILURE_CEV_PARAMETERS) && pItem->GetVerificationStageParameters(nStageID, szParameters) > 0) ? GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef()) : (CDatabaseTCExeVerGroup *)NULL); )
			{
				for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pTCExeVerGroupParameter = pTCExeVerGroup->GetAt(pTCExeVerGroup->Find(szParameters.GetAt(nParameter), MAKETCEXEVERSTAGEFROMID(nStageID)))))
					{
						szCheckReason[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETERFORMAT), (LPCTSTR)pTCExeVerGroupParameter->GetTag());
						szCheckReason[0] += (!szCheckReason[0].IsEmpty()) ? (STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETERSEPARATOR) + szCheckReason[1]) : szCheckReason[1];
						if (szCheckReason[0].GetLength() > lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETERS)))
						{
							szCheckReason[0] += STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETERELLIPSIS);
							break;
						}
						continue;
					}
					szParameters.RemoveAt(nParameter);
					nParameters--;
					nParameter--;
				}
				szCheckReason[1].Format((szParameters.GetSize() > 0) ? ((szParameters.GetSize() > 1) ? STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETERS) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONPARAMETER)) : STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TOOLTIP_CEVREASONEXPRESSION), (LPCTSTR)szCheckReason[0], (LPCTSTR)pTCExeVerGroup->GetID());
				break;
			}
			szText = (!szCheckReason[1].IsEmpty()) ? (szCheckResult[3] + EOL + szCheckResult[4] + EOL + szCheckResult[5] + EOL + szCheckReason[1]) : (szCheckResult[3] + EOL + szCheckResult[4] + EOL + szCheckResult[5]);
			break;
		}
	}
	break;
	}
	default: break;
	}
	return szText;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetClipboardFormat(UINT nFormat)
{
	return(((m_nClipboardFormat = nFormat) > 0) ? TRUE : FALSE);
}

UINT CTCOnBoardBufferQueuesPageDetailsTextView::GetClipboardFormat() CONST
{
	return m_nClipboardFormat;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::CopyToClipboard()
{
	INT  nItem[2];
	INT  nItems[2];
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItems  pItems;
	CByteArray  nItemsData;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem[2];

	if ((pQueue = m_pQueues.GetAt(m_nIndex)))
	{
		for (nItem[0] = 0, nItems[0] = (INT)pQueue->GetSize(); nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pItem[0] = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem[0])) && pItem[0]->IsSelected())
			{
				if ((pItem[1] = new CTCOnBoardBufferQueuesItem))
				{
					if (pItem[1]->Copy(pItem[0]))
					{
						for (nItem[1] = 0, nItems[1] = (INT)pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
						{
							if (pItems.GetAt(nItem[1])->GetReleaseTime() >= pItem[1]->GetReleaseTime()) break;
							continue;
						}
						pItems.InsertAt(nItem[1], pItem[1], 1);
						continue;
					}
					delete pItem[1];
				}
				break;
			}
		}
		if (OpenClipboard())
		{
			if (EmptyClipboard())
			{
				if (pItems.GetSize() > 0 && pItems.Map(nItemsData))
				{
					if ((hData = GlobalAlloc(GHND, nItemsData.GetSize())) != (HGLOBAL)NULL)
					{
						if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
						{
							CopyMemory(pData, nItemsData.GetData(), nItemsData.GetSize());
							SetClipboardData(GetClipboardFormat(), hData);
							GlobalUnlock(hData);
							CloseClipboard();
							return TRUE;
						}
						GlobalFree(hData);
					}
				}
			}
			CloseClipboard();
		}
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::LoadTelecommandSymbols()
{
	INT  nSymbol[4];
	INT  nSymbols[4];
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (nSymbol[0] = 0, nSymbols[0] = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOLS; nSymbol[0] < nSymbols[0]; nSymbol[0]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINTERLOCK) : ((nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINTERLOCKIDLE) : ((nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINTERLOCKPENDING) : ((nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINTERLOCKSUCCESS) : ((nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINTERLOCKFAILURE) : ((nSymbol[0] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOL_GROUPED) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESGROUPED) : MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESBLOCKED)))))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pFlagSymbols[nSymbol[0]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pFlagSymbols[nSymbol[0]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pFlagSymbols[nSymbol[0]];
									m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[0] > 0)
		{
			delete m_pFlagSymbols[--nSymbol[0]];
			m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[1] = 0, nSymbols[1] = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol[1] < nSymbols[1]; nSymbol[1]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[1] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCHECKSNONE) : ((nSymbol[1] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCHECKSON) : ((nSymbol[1] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCHECKSOFF) : MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCHECKSDISABLED))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pCheckFlagSymbols[nSymbol[1]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pCheckFlagSymbols[nSymbol[1]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pCheckFlagSymbols[nSymbol[1]];
									m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[1] > 0)
		{
			delete m_pCheckFlagSymbols[--nSymbol[1]];
			m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[2] = 0, nSymbols[2] = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOLS; nSymbol[2] < nSymbols[2]; nSymbol[2]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESPTVGO) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESPTVWAIT) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESPTVFAIL) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESPEVGO) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESPEVNOGO) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVIDLE) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVPENDING) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVPASSED) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVFAILED) : ((nSymbol[2] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVUNKNOWN) : MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESCEVUNVERIFIED)))))))))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pResultSymbols[nSymbol[2]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pResultSymbols[nSymbol[2]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pResultSymbols[nSymbol[2]];
									m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[2] > 0)
		{
			delete m_pResultSymbols[--nSymbol[2]];
			m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[3] = 0, nSymbols[3] = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOLS; nSymbol[3] < nSymbols[3]; nSymbol[3]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[3] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_INFORMATION) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESINFORMATION) : ((nSymbol[3] == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOL_WARNING) ? MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESWARNING) : MAKEINTRESOURCE(IDP_TCONBOARDBUFFERQUEUESERROR)), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pAlertSymbols[nSymbol[3]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pAlertSymbols[nSymbol[3]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pAlertSymbols[nSymbol[3]];
									m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[3] > 0)
		{
			delete m_pAlertSymbols[--nSymbol[3]];
			m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
		}
		break;
	}
	return((nSymbol[0] == nSymbols[0] && nSymbol[1] == nSymbols[1] && nSymbol[2] == nSymbols[2] && nSymbol[3] == nSymbols[3]) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesPageDetailsTextView::FreeTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;

	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pFlagSymbols[nSymbol]->Destroy();
			delete m_pFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pCheckFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pCheckFlagSymbols[nSymbol]->Destroy();
			delete m_pCheckFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDRESULTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pResultSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pResultSymbols[nSymbol]->Destroy();
			delete m_pResultSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pAlertSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pAlertSymbols[nSymbol]->Destroy();
			delete m_pAlertSymbols[nSymbol];
		}
	}
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCOnBoardBufferQueuesPageDetailsTextView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::SetLayoutInfo(CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	SetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::GetLayoutInfo(SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	GetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::Lock()
{
	CTCOnBoardBufferQueuesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (pParentWnd->Lock() && CTextView::Lock()) : CTextView::Lock());
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::Unlock()
{
	CTCOnBoardBufferQueuesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (CTextView::Unlock() && pParentWnd->Unlock()) : CTextView::Unlock());
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesPageDetailsTextView, CTextView)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesPageDetailsTextView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageDetailsTextView message handlers

int CTCOnBoardBufferQueuesPageDetailsTextView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CTextViewLock  cLock(this);

	if (CTextView::OnCreate(lpCreateStruct) != -1 && LoadTelecommandSymbols() && LoadToolTipCursor())
	{
		SetTimer(TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDUPDATE_TIMERID, TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDUPDATE_TIMEOUT, NULL);
		SetClipboardFormat(RegisterClipboardFormat(STRING(IDS_TELECOMMAND_CLIPBOARD_FORMAT)));
		return 0;
	}
	return -1;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	INT  nPos;
	INT  nRow;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	CPoint  ptCursor;
	CString  szText;
	CString  szStage;
	CStringArray  szStages;
	CTextViewLock  cLock(this);

	for (GetCursorPos(&ptCursor), m_wndContentCtrl.ScreenToClient(&ptCursor); IsToolTipModeEnabled() && FindTextFromPoint(ptCursor, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szText); )
	{
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, szText).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT)))
		{
			if (szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE) || szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING) || szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED) || szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED) || szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN) || szText == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
				break;
			}
			for (szStage = szText, szStages.RemoveAll(); !szStage.IsEmpty(); szStage = (nPos >= 0) ? (szStage.Mid(nPos + lstrlen(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
			{
				if ((nPos = szStage.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_SEPARATOR))) >= 0)
				{
					szStages.Add(szStage.Left(nPos));
					continue;
				}
				szStages.Add(szStage);
			}
			for (nIndex = 0, nCount = (INT)szStages.GetSize(); nIndex < nCount; nIndex++)
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, nCount, nIndex).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
		}
		break;
	}
	return CTextView::OnSetCursor(pWnd, nHitTest, message);
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nHeight;
	CRect  rContent;
	CFont  cFont[2];
	CPoint  ptMenu;
	CPoint  ptToolTip;
	LOGFONT  lfFont[2];
	CString  szColumn;
	CString  szToolTip[3];
	CLocaleMenu  cMenu;
	CMFCPopupMenu  *pFloatingMenu;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if (message == WM_KEYDOWN)
	{
		if ((pQueue = m_pQueues.GetAt(m_nIndex)))
		{
			if (wParam == VK_UP || wParam == VK_DOWN)
			{
				for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
				{
					if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)) && pItem->IsSelected()) break;
					continue;
				}
				if (wParam == VK_UP  &&  nItem > 0)
				{
					ActivateTelecommand((nItem = nItem - 1));
					ScrollTo(nItem);
					return TRUE;
				}
				if (wParam == VK_DOWN && (nItem < nItems - 1 || nItem == nItems))
				{
					ActivateTelecommand((nItem = (nItem < nItems - 1) ? (nItem + 1) : 0));
					ScrollTo(nItem);
					return TRUE;
				}
			}
			if (wParam == VK_PRIOR || wParam == VK_NEXT)
			{
				for (nItem = nIndex = GetCurTelecommand(), nItems = GetTelecommandCount(), m_wndContentCtrl.GetClientRect(rContent), nHeight = (nItems > 0) ? ((nItem > 0) ? (m_wndContentCtrl.m_nContentTextPos.GetAt(nItem) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem - 1)) : m_wndContentCtrl.m_nContentTextPos.GetAt(0)) : 0; nItem >= 0 && nItem < nItems; nItem = (wParam == VK_NEXT) ? (nItem + 1) : (nItem - 1))
				{
					if (abs((INT)(m_wndContentCtrl.m_nContentTextPos.GetAt(nIndex) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem))) >= rContent.Height() - nHeight) break;
					continue;
				}
				if ((nItem = (nIndex >= 0) ? max(min(nItem, nItems - 1), 0) : ((wParam == VK_PRIOR) ? (nItems - 1) : 0)) != nIndex)
				{
					ActivateTelecommand(nItem);
					ScrollTo(nItem);
				}
			}
			if (wParam == VK_RETURN)
			{
				for (cLock.Release(); GetCurTelecommand() >= 0; )
				{
					ShowTelecommandProperties();
					break;
				}
				return FALSE;
			}
			if (wParam == VK_ESCAPE)
			{
				ActivateTelecommand(-1);
				return FALSE;
			}
			if (wParam == VK_TAB) GetParent()->SetFocus();
		}
		return FALSE;
	}
	if (message == WM_LBUTTONDOWN)
	{
		if (ActivateTelecommand(FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))
		{
			m_wndContentCtrl.SetFocus();
			return TRUE;
		}
		return FALSE;
	}
	if (message == WM_LBUTTONDBLCLK)
	{
		for (cLock.Release(); IsActivatedTelecommand((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) || ActivateTelecommand(nIndex); )
		{
			ShowTelecommandProperties();
			break;
		}
		return FALSE;
	}
	if (message == WM_RBUTTONDOWN)
	{
		if ((pQueue = m_pQueues.GetAt(m_nIndex)))
		{
			if (GetCursor() != GetToolTipCursor() && (((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))) && pItem->IsSelected()) || ((nIndex = FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) >= 0 && ActivateTelecommand(nIndex))))
			{
				for (m_wndContentCtrl.ClientToScreen(&ptMenu), cLock.Release(); (pFloatingMenu = (cMenu.LoadMenu(IDR_TCONBOARDBUFFERQUEUESFLOATINGMENU)) ? new CMFCPopupMenu : (CMFCPopupMenu *)NULL); )
				{
					pFloatingMenu->Create(GetParentFrame(), ptMenu.x, ptMenu.y, cMenu.Detach());
					return FALSE;
				}
			}
			if ((pItem = (GetCursor() == GetToolTipCursor() && FindTextFromPoint((ptToolTip = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))), nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nRow) : (CTCOnBoardBufferQueuesItem *)NULL))
			{
				for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
				{
					for (GetTextFont(&lfFont[0]), GetTextFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
					{
						m_wndToolTip.SetTitleFont(&cFont[0]);
						m_wndToolTip.SetTextFont(&cFont[1]);
						break;
					}
					m_wndToolTip.Create(&m_wndContentCtrl, ptToolTip, szToolTip[0], szToolTip[1]);
					break;
				}
			}
		}
		return FALSE;
	}
	if (message == WM_RBUTTONUP) m_wndToolTip.Destroy();
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPageDetailsTextView::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szColumn;
	CStringArray  szColumns;
	NMHEADER  *pNotifyInfo = (NMHEADER *)lParam;

	if (pNotifyInfo->hdr.code == HDN_ITEMCLICK)
	{
		for (szColumn = (GetColumns(szColumns) && pNotifyInfo->iItem < szColumns.GetSize()) ? szColumns.GetAt(pNotifyInfo->iItem) : EMPTYSTRING; !szColumn.IsEmpty(); )
		{
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER))
			{
				ReportEvent((!m_dlgSearchNumber.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NAME))
			{
				ReportEvent((!m_dlgSearchName.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMPUTER))
			{
				ReportEvent((!m_dlgSearchComputer.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_COMMANDSOURCE))
			{
				ReportEvent((!m_dlgSearchCommandSource.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DESCRIPTION))
			{
				ReportEvent((!m_dlgSearchDescription.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CATEGORY))
			{
				ReportEvent((!m_dlgSearchCategory.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_SUBSYSTEM))
			{
				ReportEvent((!m_dlgSearchSubSystem.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS))
			{
				ReportEvent((!m_dlgSearchArguments.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS))
			{
				ReportEvent((!m_dlgSearchFlags.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TCPACKET))
			{
				ReportEvent((!m_dlgSearchTCPacket.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PSC))
			{
				ReportEvent((!m_dlgSearchPSC.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_DISPATCHTIME))
			{
				ReportEvent((!m_dlgSearchDispatchTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIME))
			{
				ReportEvent((!m_dlgSearchReleaseTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_RELEASETIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchReleaseTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_TRANSMISSIONTIME))
			{
				ReportEvent((!m_dlgSearchTransmissionTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIME))
			{
				ReportEvent((!m_dlgSearchExecutionTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_EXECUTIONTIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchExecutionTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_AUTHORIZATION))
			{
				ReportEvent((!m_dlgSearchAuthorization.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchPTVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS))
			{
				ReportEvent((!m_dlgSearchPTVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT))
			{
				ReportEvent((!m_dlgSearchPTVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS))
			{
				ReportEvent((!m_dlgSearchPEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT))
			{
				ReportEvent((!m_dlgSearchPEVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchCEVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS))
			{
				ReportEvent((!m_dlgSearchCEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT))
			{
				ReportEvent((!m_dlgSearchCEVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_STATUS))
			{
				ReportEvent((!m_dlgSearchStatus.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			break;
		}
	}
	return CTextView::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardBufferQueuesPageDetailsTextView::OnTimer(UINT_PTR nEventID)
{
	INT  nItem;
	INT  nItems;
	INT  nQueue;
	INT  nQueues;
	BOOL  bUpdate;
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueuesItem  *pItem;
	CTextViewLock  cLock(this);

	if (nEventID == TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDUPDATE_TIMERID)
	{
		for (nQueue = 0, nQueues = (INT)m_pQueues.GetSize(), bUpdate = FALSE; nQueue < nQueues; nQueue++)
		{
			if ((pQueue = m_pQueues.GetAt(nQueue)) != (CTCOnBoardBufferQueue *)NULL)
			{
				for (nItem = 0, nItems = (INT)pQueue->GetSize(); nItem < nItems; nItem++)
				{
					if ((pItem = (CTCOnBoardBufferQueuesItem *)pQueue->GetAt(nItem)))
					{
						bUpdate |= UpdateTelecommand(pItem);
						continue;
					}
				}
			}
		}
		if (bUpdate) UpdateContent();
		return;
	}
	CTextView::OnTimer(nEventID);
}

void CTCOnBoardBufferQueuesPageDetailsTextView::OnDestroy()
{
	CTextViewLock  cLock(this);

	FreeToolTipCursor();
	FreeTelecommandSymbols();
	KillTimer(TCONBOARDBUFFERQUEUESPAGEDETAILSTEXTVIEW_COMMANDUPDATE_TIMERID);
	CTextView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageDetailsView view

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesPageDetailsView, CView)

CTCOnBoardBufferQueuesPageDetailsView::CTCOnBoardBufferQueuesPageDetailsView() : CView()
{
	m_pwndList = new CTCOnBoardBufferQueuesPageDetailsTextView;
	m_pParentWnd = (CWnd *)NULL;
}

CTCOnBoardBufferQueuesPageDetailsView::~CTCOnBoardBufferQueuesPageDetailsView()
{
	delete m_pwndList;
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetLayout(UINT nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::SetLayout(CONST CUIntArray &nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_pwndList->SetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetLayout(UINT &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::GetLayout(CUIntArray &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_pwndList->GetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetListTitleFont(CFont *pFont)
{
	return m_pwndList->SetListTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetListTitleFont(CFont *pFont) CONST
{
	return m_pwndList->GetListTitleFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListTitleFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetListItemsFont(CFont *pFont)
{
	return m_pwndList->SetListItemsFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListItemsFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetListItemsFont(CFont *pFont) CONST
{
	return m_pwndList->GetListItemsFont(pFont);
}
BOOL CTCOnBoardBufferQueuesPageDetailsView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListItemsFont(plfFont);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetGridBackgroundColor(COLORREF nColor)
{
	return m_pwndList->SetGridBackgroundColor(nColor);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	return m_pwndList->GetGridBackgroundColor(nColor);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::EnableFullViewMode(BOOL bEnable)
{
	return m_pwndList->EnableFullViewMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::IsFullViewModeEnabled() CONST
{
	return m_pwndList->IsFullViewModeEnabled();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::EnableToolTipMode(BOOL bEnable)
{
	return m_pwndList->EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::IsToolTipModeEnabled() CONST
{
	return m_pwndList->IsToolTipModeEnabled();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::StartMonitoring()
{
	return m_pwndList->StartMonitoring();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_pwndList->UpdateMonitoring(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::StopMonitoring()
{
	return m_pwndList->StopMonitoring();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_pwndList->SetQueues(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	return m_pwndList->GetQueues(pQueues);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetCurQueue(INT nIndex)
{
	return m_pwndList->SetCurQueue(nIndex);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::CheckCurQueue(UINT nFlags) CONST
{
	return m_pwndList->CheckCurQueue(nFlags);
}

INT CTCOnBoardBufferQueuesPageDetailsView::GetCurQueue() CONST
{
	return m_pwndList->GetCurQueue();
}

UINT CTCOnBoardBufferQueuesPageDetailsView::GetQueueCount() CONST
{
	return m_pwndList->GetQueueCount();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetCurTelecommand(INT nIndex)
{
	return m_pwndList->SetCurTelecommand(nIndex);
}

INT CTCOnBoardBufferQueuesPageDetailsView::GetCurTelecommand() CONST
{
	return m_pwndList->GetCurTelecommand();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SelectTelecommand(INT nIndex)
{
	return m_pwndList->SelectTelecommand(nIndex);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::HasSelectedTelecommands() CONST
{
	return m_pwndList->HasSelectedTelecommands();
}

UINT CTCOnBoardBufferQueuesPageDetailsView::GetTelecommandCount() CONST
{
	return m_pwndList->GetTelecommandCount();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::DoCopyTelecommand()
{
	return m_pwndList->DoCopyTelecommand();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::CanCopyTelecommand() CONST
{
	return m_pwndList->CanCopyTelecommand();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::DoDeleteTelecommand()
{
	return m_pwndList->DoDeleteTelecommand();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::CanDeleteTelecommand() CONST
{
	return m_pwndList->CanDeleteTelecommand();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::ShowTelecommandProperties()
{
	return m_pwndList->ShowTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::CanShowTelecommandProperties() CONST
{
	return m_pwndList->CanShowTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::IsShowingTelecommandProperties() CONST
{
	return m_pwndList->IsShowingTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::SetLayoutInfo(CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return m_pwndList->SetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetLayoutInfo(SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return m_pwndList->GetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::GetPrintProperties(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_pwndList->GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}

VOID CTCOnBoardBufferQueuesPageDetailsView::UpdateContent(BOOL bRedraw)
{
	m_pwndList->UpdateContent(bRedraw);
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesPageDetailsView::GetParentDisplay() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)m_pParentWnd);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::Lock()
{
	return m_pwndList->Lock();
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::Unlock()
{
	return m_pwndList->Unlock();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesPageDetailsView, CView)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesPageDetailsView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageDetailsView drawing

void CTCOnBoardBufferQueuesPageDetailsView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPageDetailsView message handlers

int CTCOnBoardBufferQueuesPageDetailsView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) != -1 && m_pwndList->Create(this, CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy), TVS_HEADER | TVS_TOP | TVS_BUTTONS | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		m_pParentWnd = CView::GetParent()->GetParent()->GetParent();
		return 0;
	}
	return -1;
}

void CTCOnBoardBufferQueuesPageDetailsView::OnSize(UINT nType, int cx, int cy)
{
	m_pwndList->MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardBufferQueuesPageDetailsView::OnEraseBkgnd(CDC *pDC)
{
	return TRUE;
}

void CTCOnBoardBufferQueuesPageDetailsView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsChild(pOldWnd)) GetParent()->SetFocus();
		else  m_pwndList->SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPage

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesPage, CSplitterWndEx)

CTCOnBoardBufferQueuesPage::CTCOnBoardBufferQueuesPage() : CSplitterWndEx()
{
	m_pSummaryView = (CTCOnBoardBufferQueuesPageSummaryView *)NULL;
	m_pDetailsView = (CTCOnBoardBufferQueuesPageDetailsView *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardBufferQueuesPage::Create(CWnd *pParentWnd, CONST CUIntArray *pSummaryPaneColumns, CONST CUIntArray *pSummaryPaneColumnWidths, CONST SIZE *pSummaryPaneList, CONST LOGFONT *plfSummaryTitleFont, CONST LOGFONT *plfSummaryItemsFont, CONST CUIntArray *pDetailsPaneColumns, CONST CUIntArray *pDetailsPaneColumnWidths, CONST SIZE *pDetailsPaneList, CONST LOGFONT *plfDetailsTitleFont, CONST LOGFONT *plfDetailsItemsFont, BOOL bVisible)
{
	CRect  rPanes;
	CSize  sizePanes[2];
	CCreateContext  cContext;

	if (CreateStatic((m_pParentWnd = pParentWnd), 2, 1))
	{
		for (GetParent()->GetClientRect(rPanes), GetParent()->AdjustRect(FALSE, rPanes), cContext.m_pCurrentDoc = new CTCOnBoardBufferQueuesDocument; CreateView(0, 0, RUNTIME_CLASS(CTCOnBoardBufferQueuesPageSummaryView), (sizePanes[0] = CSize(rPanes.Width(), rPanes.Height() / 3)), &cContext) && CreateView(1, 0, RUNTIME_CLASS(CTCOnBoardBufferQueuesPageDetailsView), (sizePanes[1] = CSize(rPanes.Width(), (2 * rPanes.Height()) / 3)), &cContext); )
		{
			for (m_pSummaryView = (CTCOnBoardBufferQueuesPageSummaryView *)GetPane(0, 0), m_pDetailsView = (CTCOnBoardBufferQueuesPageDetailsView *)GetPane(1, 0); ((pSummaryPaneColumns != (CUIntArray *)NULL && pSummaryPaneColumnWidths != (CUIntArray *)NULL && m_pSummaryView->SetLayout(*pSummaryPaneColumns, *pSummaryPaneColumnWidths)) || m_pSummaryView->SetLayout(TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEMS_DEFAULT)) && ((pDetailsPaneColumns != (CUIntArray *)NULL && pDetailsPaneColumnWidths != (CUIntArray *)NULL && m_pDetailsView->SetLayout(*pDetailsPaneColumns, *pDetailsPaneColumnWidths)) || m_pDetailsView->SetLayout(TCONBOARDBUFFERQUEUESDETAILS_TITLEITEMS_DEFAULT)) && (!plfSummaryTitleFont || SetListTitleFont(TCONBOARDBUFFERQUEUES_PANE_SUMMARY, plfSummaryTitleFont)) && (!plfSummaryItemsFont || SetListItemsFont(TCONBOARDBUFFERQUEUES_PANE_SUMMARY, plfSummaryItemsFont)) && (!plfDetailsTitleFont || SetListTitleFont(TCONBOARDBUFFERQUEUES_PANE_DETAILS, plfDetailsTitleFont)) && (!plfDetailsItemsFont || SetListItemsFont(TCONBOARDBUFFERQUEUES_PANE_DETAILS, plfDetailsItemsFont)); )
			{
				SetRowInfo(0, (pSummaryPaneList != (CSize *)NULL  &&  pSummaryPaneList->cy > 0) ? max(pSummaryPaneList->cy, 0) : max(sizePanes[0].cy, 0), 0);
				SetRowInfo(1, (pDetailsPaneList != (CSize *)NULL  &&  pDetailsPaneList->cy > 0) ? max(pDetailsPaneList->cy, 0) : max(sizePanes[1].cy, 0), 0);
				ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				MoveWindow(rPanes);
				return TRUE;
			}
			break;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetLayout(nColumns) : m_pDetailsView->SetLayout(nColumns)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetLayout(nColumns, nWidths) : m_pDetailsView->SetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizePane)
{
	if (SetLayout(nPane, nColumns, nWidths))
	{
		SetRowInfo((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? 0 : 1, max(sizePane.cy, 0), 0);
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPage::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetLayout(nColumns) : m_pDetailsView->GetLayout(nColumns)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetLayout(nColumns, nWidths) : m_pDetailsView->GetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizePane) CONST
{
	INT  nPaneHeight[2];

	if (GetLayout(nPane, nColumns, nWidths))
	{
		GetRowInfo((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? 0 : 1, nPaneHeight[0], nPaneHeight[1]);
		sizePane.cx = (sizePane.cy = nPaneHeight[0]) - nPaneHeight[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesPage::SetListTitleFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetListTitleFont(pFont) : m_pDetailsView->SetListTitleFont(pFont)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::SetListTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetListTitleFont(plfFont) : m_pDetailsView->SetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetListTitleFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetListTitleFont(pFont) : m_pDetailsView->GetListTitleFont(pFont)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::GetListTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetListTitleFont(plfFont) : m_pDetailsView->GetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::SetListItemsFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetListItemsFont(pFont) : m_pDetailsView->SetListItemsFont(pFont)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::SetListItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetListItemsFont(plfFont) : m_pDetailsView->SetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetListItemsFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetListItemsFont(pFont) : m_pDetailsView->GetListItemsFont(pFont)) : FALSE);
}
BOOL CTCOnBoardBufferQueuesPage::GetListItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetListItemsFont(plfFont) : m_pDetailsView->GetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::SetGridBackgroundColor(UINT nPane, COLORREF nColor)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) ? m_pDetailsView->SetGridBackgroundColor(nColor) : FALSE) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) ? m_pDetailsView->GetGridBackgroundColor(nColor) : FALSE) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::EnableFullViewMode(BOOL bEnable)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->EnableFullViewMode(bEnable) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::IsFullViewModeEnabled() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->IsFullViewModeEnabled() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->EnableToolTipMode(bEnable) && m_pDetailsView->EnableToolTipMode(bEnable)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->IsToolTipModeEnabled() || m_pDetailsView->IsToolTipModeEnabled()) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::StartMonitoring()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->StartMonitoring() && m_pDetailsView->StartMonitoring()) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->UpdateMonitoring(pQueues) && m_pDetailsView->UpdateMonitoring(pQueues)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::StopMonitoring()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->StopMonitoring() && m_pDetailsView->StopMonitoring()) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->SetQueues(pQueues) && m_pDetailsView->SetQueues(pQueues)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetQueues(pQueues) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::SetCurQueue(INT nIndex)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->SetCurQueue(nIndex) && m_pDetailsView->SetCurQueue(nIndex)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::CheckCurQueue(UINT nFlags) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->CheckCurQueue(nFlags) : FALSE);
}

INT CTCOnBoardBufferQueuesPage::GetCurQueue() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetCurQueue() : -1);
}

UINT CTCOnBoardBufferQueuesPage::GetQueueCount() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetQueueCount() : 0);
}

BOOL CTCOnBoardBufferQueuesPage::DoAcknowledgeQueue()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->DoAcknowledgeQueue() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::CanAcknowledgeQueue() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->CanAcknowledgeQueue() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::DoCopyTelecommand()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoCopyTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::CanCopyTelecommand() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanCopyTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::DoDeleteTelecommand()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoDeleteTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::CanDeleteTelecommand() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanDeleteTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::ShowTelecommandProperties()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->ShowTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::CanShowTelecommandProperties() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanShowTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::IsShowingTelecommandProperties() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->IsShowingTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::SetLayoutInfo(UINT nPane, INT nQueue, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->SetLayoutInfo(nQueue, pHorzScrollInfo, pVertScrollInfo) : m_pDetailsView->SetLayoutInfo(pHorzScrollInfo, pVertScrollInfo)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetLayoutInfo(UINT nPane, INT &nQueue, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) ? m_pSummaryView->GetLayoutInfo(nQueue, pHorzScrollInfo, pVertScrollInfo) : m_pDetailsView->GetLayoutInfo(pHorzScrollInfo, pVertScrollInfo)) : FALSE);
}

BOOL CTCOnBoardBufferQueuesPage::GetPrintProperties(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CStringArray &szSummaryColumns, CStringArray &szSummaryContents, CTextViewAttributes &pSummaryAttributes, LOGFONT *pSummaryTitleFont, LOGFONT *pSummaryItemsFont, CStringArray &szDetailsColumns, CStringArray &szDetailsContents, CTextViewAttributes &pDetailsAttributes, LOGFONT *pDetailsTitleFont, LOGFONT *pDetailsItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->GetPrintProperties(szSummaryColumns, szSummaryContents, pSummaryAttributes, pSummaryTitleFont, pSummaryItemsFont, pSymbols, nSymbolIDs) && m_pDetailsView->GetPrintProperties(pJobInfo, szDetailsColumns, szDetailsContents, pDetailsAttributes, pDetailsTitleFont, pDetailsItemsFont, pSymbols, nSymbolIDs)) : FALSE);
}

VOID CTCOnBoardBufferQueuesPage::UpdateContents(BOOL bRedraw)
{
	if (IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		m_pSummaryView->UpdateContent(bRedraw);
		m_pDetailsView->UpdateContent(bRedraw);
	}
}

void CTCOnBoardBufferQueuesPage::StartTracking(int ht)
{
	CSplitterWndEx::StartTracking(ht);
	m_rectLimit.top += m_pSummaryView->GetTrackSize().cy;
}

VOID CTCOnBoardBufferQueuesPage::SetTrackSize(CONST SIZE &size)
{
	m_pSummaryView->SetTrackSize(size);
}

CSize CTCOnBoardBufferQueuesPage::GetTrackSize() CONST
{
	return m_pSummaryView->GetTrackSize();
}

CTCOnBoardBufferQueuesPageSummaryView *CTCOnBoardBufferQueuesPage::GetSummaryView() CONST
{
	return m_pSummaryView;
}

CTCOnBoardBufferQueuesPageDetailsView *CTCOnBoardBufferQueuesPage::GetDetailsView() CONST
{
	return m_pDetailsView;
}

CTCOnBoardBufferQueuesView *CTCOnBoardBufferQueuesPage::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesView *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesPage, CSplitterWndEx)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesPage)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesPage message handlers

void CTCOnBoardBufferQueuesPage::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent())
	{
		GetSummaryView()->SetFocus();
		return;
	}
	if (pOldWnd == GetSummaryView())
	{
		if (GetDetailsView()->GetCurTelecommand() < 0 && !GetDetailsView()->HasSelectedTelecommands()) GetDetailsView()->SetCurTelecommand(0);
		GetDetailsView()->SetFocus();
		return;
	}
	if (pOldWnd == GetDetailsView())
	{
		GetParent()->SetFocus();
		return;
	}
	CSplitterWndEx::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesView

IMPLEMENT_DYNCREATE(CTCOnBoardBufferQueuesView, CTabCtrl)

CTCOnBoardBufferQueuesView::CTCOnBoardBufferQueuesView() : CTabCtrl()
{
	m_nIndex = 0;
	m_sizeTabMargins.cx = 0;
	m_sizeTabMargins.cy = 0;
	m_bFullView = FALSE;
	m_bToolTips = TRUE;
}

BOOL CTCOnBoardBufferQueuesView::Create(CWnd *pParentWnd, DWORD dwStyle)
{
	INT  nPage;
	INT  nPages;
	CRect  rTabs[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	for (pParentWnd->GetClientRect(rTabs[0]); CTabCtrl::Create(dwStyle, rTabs[0], pParentWnd, 0); )
	{
		for (nPage = 0, nPages = (INT)m_szPages.GetSize(); nPage < nPages; nPage++)
		{
			if ((pPage = new CTCOnBoardBufferQueuesPage) != (CTCOnBoardBufferQueuesPage *)NULL)
			{
				if (pPage->Create(this, (nPage < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nPage) : (CUIntArray *)NULL, (nPage < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nPage) : (CUIntArray *)NULL, (nPage < m_pPanes[0].GetSize()) ? (CSize *)m_pPanes[0].GetAt(nPage) : (CSize *)NULL, (nPage < m_pFonts[0][0].GetSize()) ? (LOGFONT *)m_pFonts[0][0].GetAt(nPage) : (LOGFONT *)NULL, (nPage < m_pFonts[0][1].GetSize()) ? (LOGFONT *)m_pFonts[0][1].GetAt(nPage) : (LOGFONT *)NULL, (nPage < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nPage) : (CUIntArray *)NULL, (nPage < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nPage) : (CUIntArray *)NULL, (nPage < m_pPanes[1].GetSize()) ? (CSize *)m_pPanes[1].GetAt(nPage) : (CSize *)NULL, (nPage < m_pFonts[1][0].GetSize()) ? (LOGFONT *)m_pFonts[1][0].GetAt(nPage) : (LOGFONT *)NULL, (nPage < m_pFonts[1][1].GetSize()) ? (LOGFONT *)m_pFonts[1][1].GetAt(nPage) : (LOGFONT *)NULL, (!nPage) ? TRUE : FALSE))
				{
					m_pPages.Add(pPage);
					continue;
				}
				pPage->DestroyWindow();
			}
			delete pPage;
			break;
		}
		if (nPage == nPages)
		{
			m_sizeTabMargins = (GetItemRect(0, rTabs[1])) ? CSize(rTabs[1].left, rTabs[1].top) : m_sizeTabMargins;
			return(EnableFullViewMode(m_bFullView) && EnableToolTipMode(m_bToolTips));
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns)
{
	INT  nIndex;
	CUIntArray  *pColumns[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pColumns[0] = new CUIntArray))
	{
		for (nIndex = FindPage(pszPage); nIndex < 0; )
		{
			m_szPages.Add(pszPage);
			break;
		}
		for (pColumns[0]->Copy(nColumns); nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY; )
		{
			if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				m_pColumns[0].RemoveAt(nIndex);
				delete pColumns[1];
			}
			m_pColumns[0].InsertAt((nIndex < 0) ? m_pColumns[0].GetSize() : nIndex, pColumns[0]);
			break;
		}
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
		{
			if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				m_pColumns[1].RemoveAt(nIndex);
				delete pColumns[1];
			}
			m_pColumns[1].InsertAt((nIndex < 0) ? m_pColumns[1].GetSize() : nIndex, pColumns[0]);
		}
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetLayout(nPane, nColumns) : FALSE) : TRUE);
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesView::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	CUIntArray  *pColumns[2];
	CUIntArray  *pColumnWidths[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pColumns[0] = new CUIntArray))
	{
		if ((pColumnWidths[0] = new CUIntArray))
		{
			for (nIndex = FindPage(pszPage); nIndex < 0; )
			{
				m_szPages.Add(pszPage);
				break;
			}
			for (pColumns[0]->Copy(nColumns), pColumnWidths[0]->Copy(nWidths); nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY; )
			{
				if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					m_pColumns[0].RemoveAt(nIndex);
					delete pColumns[1];
				}
				if ((pColumnWidths[1] = (nIndex >= 0 && nIndex < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					m_pColumnWidths[0].RemoveAt(nIndex);
					delete pColumnWidths[1];
				}
				m_pColumns[0].InsertAt((nIndex < 0) ? m_pColumns[0].GetSize() : nIndex, pColumns[0]);
				m_pColumnWidths[0].InsertAt((nIndex < 0) ? m_pColumnWidths[0].GetSize() : nIndex, pColumnWidths[0]);
				break;
			}
			if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
			{
				if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					m_pColumns[1].RemoveAt(nIndex);
					delete pColumns[1];
				}
				if ((pColumnWidths[1] = (nIndex >= 0 && nIndex < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					m_pColumnWidths[1].RemoveAt(nIndex);
					delete pColumnWidths[1];
				}
				m_pColumns[1].InsertAt((nIndex < 0) ? m_pColumns[1].GetSize() : nIndex, pColumns[0]);
				m_pColumnWidths[1].InsertAt((nIndex < 0) ? m_pColumnWidths[1].GetSize() : nIndex, pColumnWidths[0]);
			}
			return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetLayout(nPane, nColumns, nWidths) : FALSE) : TRUE);
		}
		delete pColumns[0];
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesView::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizePane)
{
	INT  nIndex;
	CSize  *pSize[2];
	CUIntArray  *pColumns[2];
	CUIntArray  *pColumnWidths[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pColumns[0] = new CUIntArray))
	{
		if ((pColumnWidths[0] = new CUIntArray))
		{
			if ((pSize[0] = new CSize) != (CSize *)NULL)
			{
				for (nIndex = FindPage(pszPage); nIndex < 0; )
				{
					m_szPages.Add(pszPage);
					break;
				}
				for (pColumns[0]->Copy(nColumns), pColumnWidths[0]->Copy(nWidths), pSize[0]->cx = sizePane.cx, pSize[0]->cy = sizePane.cy; nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY; )
				{
					if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL))
					{
						m_pColumns[0].RemoveAt(nIndex);
						delete pColumns[1];
					}
					if ((pColumnWidths[1] = (nIndex >= 0 && nIndex < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nIndex) : (CUIntArray *)NULL))
					{
						m_pColumnWidths[0].RemoveAt(nIndex);
						delete pColumnWidths[1];
					}
					if ((pSize[1] = (nIndex >= 0 && nIndex < m_pPanes[0].GetSize()) ? (CSize *)m_pPanes[0].GetAt(nIndex) : (CSize *)NULL))
					{
						m_pPanes[0].RemoveAt(nIndex);
						delete pSize[1];
					}
					m_pColumns[0].InsertAt((nIndex < 0) ? m_pColumns[0].GetSize() : nIndex, pColumns[0]);
					m_pColumnWidths[0].InsertAt((nIndex < 0) ? m_pColumnWidths[0].GetSize() : nIndex, pColumnWidths[0]);
					m_pPanes[0].InsertAt((nIndex < 0) ? m_pPanes[0].GetSize() : nIndex, pSize[0]);
					break;
				}
				if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
				{
					if ((pColumns[1] = (nIndex >= 0 && nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL))
					{
						m_pColumns[1].RemoveAt(nIndex);
						delete pColumns[1];
					}
					if ((pColumnWidths[1] = (nIndex >= 0 && nIndex < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nIndex) : (CUIntArray *)NULL))
					{
						m_pColumnWidths[1].RemoveAt(nIndex);
						delete pColumnWidths[1];
					}
					if ((pSize[1] = (nIndex >= 0 && nIndex < m_pPanes[1].GetSize()) ? (CSize *)m_pPanes[1].GetAt(nIndex) : (CSize *)NULL))
					{
						m_pPanes[1].RemoveAt(nIndex);
						delete pSize[1];
					}
					m_pColumns[1].InsertAt((nIndex < 0) ? m_pColumns[1].GetSize() : nIndex, pColumns[0]);
					m_pColumnWidths[1].InsertAt((nIndex < 0) ? m_pColumnWidths[1].GetSize() : nIndex, pColumnWidths[0]);
					m_pPanes[1].InsertAt((nIndex < 0) ? m_pPanes[1].GetSize() : nIndex, pSize[0]);
				}
				return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetLayout(nPane, nColumns, nWidths, sizePane) : FALSE) : TRUE);
			}
			delete pColumnWidths[0];
		}
		delete pColumns[0];
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns) CONST
{
	INT  nIndex;
	CUIntArray  *pColumns;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if ((pColumns = ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) && nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL)) nColumns.Copy(*pColumns);
		if ((pColumns = ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) && nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL)) nColumns.Copy(*pColumns);
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayout(nPane, nColumns) : FALSE) : TRUE);
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesView::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	CUIntArray  *pColumns;
	CUIntArray  *pColumnWidths;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY)
		{
			if ((pColumns = (nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				if ((pColumnWidths = (nIndex < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					nColumns.Copy(*pColumns);
					nWidths.Copy(*pColumnWidths);
				}
			}
			return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayout(nPane, nColumns, nWidths) : FALSE) : TRUE);
		}
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
		{
			if ((pColumns = (nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				if ((pColumnWidths = (nIndex < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					nColumns.Copy(*pColumns);
					nWidths.Copy(*pColumnWidths);
				}
			}
			return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayout(nPane, nColumns, nWidths) : FALSE) : TRUE);
		}
	}
	return FALSE;
}
BOOL CTCOnBoardBufferQueuesView::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizePane) CONST
{
	INT  nIndex;
	CSize  *pSize;
	CUIntArray  *pColumns;
	CUIntArray  *pColumnWidths;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY)
		{
			if ((pColumns = (nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				if ((pColumnWidths = (nIndex < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					if ((pSize = (nIndex < m_pPanes[0].GetSize()) ? (CSize *)m_pPanes[0].GetAt(nIndex) : (CSize *)NULL))
					{
						nColumns.Copy(*pColumns);
						nWidths.Copy(*pColumnWidths);
						sizePane.cx = pSize->cx;
						sizePane.cy = pSize->cy;
					}
				}
			}
			return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayout(nPane, nColumns, nWidths, sizePane) : FALSE) : TRUE);
		}
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
		{
			if ((pColumns = (nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL))
			{
				if ((pColumnWidths = (nIndex < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nIndex) : (CUIntArray *)NULL))
				{
					if ((pSize = (nIndex < m_pPanes[1].GetSize()) ? (CSize *)m_pPanes[1].GetAt(nIndex) : (CSize *)NULL))
					{
						nColumns.Copy(*pColumns);
						nWidths.Copy(*pColumnWidths);
						sizePane.cx = pSize->cx;
						sizePane.cy = pSize->cy;
					}
				}
			}
			return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayout(nPane, nColumns, nWidths, sizePane) : FALSE) : TRUE);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::SetListTitleFont(LPCTSTR pszPage, UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListTitleFont(pszPage, nPane, &lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::SetListTitleFont(LPCTSTR pszPage, UINT nPane, CONST LOGFONT *plfFont)
{
	INT  nIndex;
	LOGFONT  *pLogFont[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pLogFont[0] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
	{
		for (nIndex = FindPage(pszPage); nIndex < 0; )
		{
			m_szPages.Add(pszPage);
			break;
		}
		for (CopyMemory(pLogFont[0], plfFont, sizeof(LOGFONT)); nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY; )
		{
			if ((pLogFont[1] = (nIndex >= 0 && nIndex < m_pFonts[0][0].GetSize()) ? (LOGFONT *)m_pFonts[0][0].GetAt(nIndex) : (LOGFONT *)NULL))
			{
				m_pFonts[0][0].RemoveAt(nIndex);
				GlobalFree(pLogFont[1]);
			}
			m_pFonts[0][0].InsertAt((nIndex < 0) ? m_pFonts[0][0].GetSize() : nIndex, pLogFont[0]);
			break;
		}
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
		{
			if ((pLogFont[1] = (nIndex >= 0 && nIndex < m_pFonts[0][1].GetSize()) ? (LOGFONT *)m_pFonts[0][1].GetAt(nIndex) : (LOGFONT *)NULL))
			{
				m_pFonts[0][1].RemoveAt(nIndex);
				GlobalFree(pLogFont[1]);
			}
			m_pFonts[0][1].InsertAt((nIndex < 0) ? m_pFonts[0][1].GetSize() : nIndex, pLogFont[0]);
		}
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetListTitleFont(nPane, plfFont) : FALSE) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::GetListTitleFont(LPCTSTR pszPage, UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetListTitleFont(pszPage, nPane, &lfFont)) ? pFont->CreateFontIndirect(&lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::GetListTitleFont(LPCTSTR pszPage, UINT nPane, LOGFONT *plfFont) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) && nIndex < m_pFonts[0][0].GetSize()) CopyMemory(plfFont, m_pFonts[0][0].GetAt(nIndex), sizeof(LOGFONT));
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) && nIndex < m_pFonts[0][1].GetSize()) CopyMemory(plfFont, m_pFonts[0][1].GetAt(nIndex), sizeof(LOGFONT));
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetListTitleFont(nPane, plfFont) : FALSE) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::SetListItemsFont(LPCTSTR pszPage, UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListItemsFont(pszPage, nPane, &lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::SetListItemsFont(LPCTSTR pszPage, UINT nPane, CONST LOGFONT *plfFont)
{
	INT  nIndex;
	LOGFONT  *pLogFont[2];
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pLogFont[0] = (LOGFONT *)GlobalAlloc(GPTR, sizeof(LOGFONT))))
	{
		for (nIndex = FindPage(pszPage); nIndex < 0; )
		{
			m_szPages.Add(pszPage);
			break;
		}
		for (CopyMemory(pLogFont[0], plfFont, sizeof(LOGFONT)); nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY; )
		{
			if ((pLogFont[1] = (nIndex >= 0 && nIndex < m_pFonts[1][0].GetSize()) ? (LOGFONT *)m_pFonts[1][0].GetAt(nIndex) : (LOGFONT *)NULL))
			{
				m_pFonts[1][0].RemoveAt(nIndex);
				GlobalFree(pLogFont[1]);
			}
			m_pFonts[1][0].InsertAt((nIndex < 0) ? m_pFonts[1][0].GetSize() : nIndex, pLogFont[0]);
			break;
		}
		if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS)
		{
			if ((pLogFont[1] = (nIndex >= 0 && nIndex < m_pFonts[1][1].GetSize()) ? (LOGFONT *)m_pFonts[1][1].GetAt(nIndex) : (LOGFONT *)NULL))
			{
				m_pFonts[1][1].RemoveAt(nIndex);
				GlobalFree(pLogFont[1]);
			}
			m_pFonts[1][1].InsertAt((nIndex < 0) ? m_pFonts[1][1].GetSize() : nIndex, pLogFont[0]);
		}
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetListItemsFont(nPane, plfFont) : FALSE) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::GetListItemsFont(LPCTSTR pszPage, UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetListItemsFont(pszPage, nPane, &lfFont)) ? pFont->CreateFontIndirect(&lfFont) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::GetListItemsFont(LPCTSTR pszPage, UINT nPane, LOGFONT *plfFont) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) && nIndex < m_pFonts[1][0].GetSize()) CopyMemory(plfFont, m_pFonts[1][0].GetAt(nIndex), sizeof(LOGFONT));
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) && nIndex < m_pFonts[1][1].GetSize()) CopyMemory(plfFont, m_pFonts[1][1].GetAt(nIndex), sizeof(LOGFONT));
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetListItemsFont(nPane, plfFont) : FALSE) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::SetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF nColor)
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nIndex = FindPage(pszPage); nIndex < 0; )
	{
		m_szPages.Add(pszPage);
		break;
	}
	if (nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) m_nColors[0].SetAtGrow((nIndex < 0) ? m_nColors[0].GetSize() : nIndex, nColor);
	if (nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) m_nColors[1].SetAtGrow((nIndex < 0) ? m_nColors[1].GetSize() : nIndex, nColor);
	return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetGridBackgroundColor(nPane, nColor) : FALSE) : TRUE);
}

BOOL CTCOnBoardBufferQueuesView::GetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF &nColor) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_SUMMARY) && nIndex < m_nColors[0].GetSize()) nColor = m_nColors[0].GetAt(nIndex);
		if ((nPane & TCONBOARDBUFFERQUEUES_PANE_DETAILS) && nIndex < m_nColors[1].GetSize()) nColor = m_nColors[1].GetAt(nIndex);
		return((IsWindow(GetSafeHwnd())) ? (((pPage = (nIndex >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetGridBackgroundColor(nPane, nColor) : FALSE) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::EnableFullViewMode(BOOL bEnable)
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(), m_bFullView = bEnable; nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->EnableFullViewMode(bEnable);
			continue;
		}
	}
	return((IsWindow(GetSafeHwnd())) ? ((nPages > 0) ? TRUE : FALSE) : TRUE);
}

BOOL CTCOnBoardBufferQueuesView::IsFullViewModeEnabled() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return((IsWindow(GetSafeHwnd())) ? (((pPage = (m_pPages.GetSize() > 0) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(0) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->IsFullViewModeEnabled() : FALSE) : m_bFullView);
}

BOOL CTCOnBoardBufferQueuesView::EnableToolTipMode(BOOL bEnable)
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(), m_bToolTips = bEnable; nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->EnableToolTipMode(bEnable);
			continue;
		}
	}
	return((IsWindow(GetSafeHwnd())) ? ((nPages > 0) ? TRUE : FALSE) : TRUE);
}

BOOL CTCOnBoardBufferQueuesView::IsToolTipModeEnabled() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return((IsWindow(GetSafeHwnd())) ? (((pPage = (m_pPages.GetSize() > 0) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(0) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->IsToolTipModeEnabled() : FALSE) : m_bToolTips);
}

BOOL CTCOnBoardBufferQueuesView::StartMonitoring()
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->StartMonitoring();
			continue;
		}
	}
	return((nPages > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	INT  nPage;
	INT  nPages;
	INT  nQueue;
	INT  nQueues;
	INT  nCount;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueues  pPageQueues;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(), nCount = 0; nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)) != (CTCOnBoardBufferQueuesPage *)NULL)
		{
			for (nQueue = 0, nQueues = (INT)pQueues.GetSize(), pPageQueues.RemoveAll(); nQueue < nQueues; nQueue++)
			{
				if ((pQueue[0] = pQueues.GetAt(nQueue)) && FindPage(pQueue[0]) == nPage)
				{
					if ((pQueue[1] = new CTCOnBoardBufferQueue))
					{
						pQueue[1]->Copy(pQueue[0]);
						pPageQueues.Add(pQueue[1]);
					}
				}
			}
			nCount = (pPage->UpdateMonitoring(pPageQueues)) ? (nCount + 1) : nCount;
		}
	}
	return((nCount == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::StopMonitoring()
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->StopMonitoring();
			continue;
		}
	}
	return((nPages > 0) ? TRUE : FALSE);
}

INT CTCOnBoardBufferQueuesView::EnumQueuePages(CStringArray &szPages) CONST
{
	szPages.Copy(m_szPages);
	return((INT)szPages.GetSize());
}

BOOL CTCOnBoardBufferQueuesView::SetQueuePage(LPCTSTR pszPage)
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage[2];

	if ((nIndex = FindPage(pszPage)) >= 0)
	{
		if ((pPage[0] = ((pPage[1] = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL) && m_nIndex != nIndex)
		{
			SetCurSel((m_nIndex = nIndex));
			pPage[0]->ShowWindow(SW_SHOW);
			pPage[1]->ShowWindow(SW_HIDE);
			GetParent()->UpdateBars();
		}
		return((m_nIndex == nIndex) ? TRUE : FALSE);
	}
	return FALSE;
}

CString CTCOnBoardBufferQueuesView::GetQueuePage() CONST
{
	return((m_nIndex >= 0 && m_nIndex < m_szPages.GetSize()) ? m_szPages.GetAt(m_nIndex) : EMPTYSTRING);
}

BOOL CTCOnBoardBufferQueuesView::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	INT  nPage;
	INT  nPages;
	INT  nQueue;
	INT  nQueues;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueues  pPageQueues;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_szPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (nPage < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage) : (CTCOnBoardBufferQueuesPage *)NULL))
		{
			for (nQueue = 0, nQueues = (INT)pQueues.GetSize(), pPageQueues.RemoveAll(); nQueue < nQueues; nQueue++)
			{
				if ((pQueue[0] = pQueues.GetAt(nQueue)) && FindPage(pQueue[0]) == nPage)
				{
					if ((pQueue[1] = new CTCOnBoardBufferQueue))
					{
						pQueue[1]->Copy(pQueue[0]);
						pPageQueues.Add(pQueue[1]);
					}
				}
			}
			if (pPage->SetQueues(pPageQueues))
			{
				pPage->SetCurQueue(0);
				continue;
			}
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::SetQueues(LPCTSTR pszPage, CONST CTCOnBoardBufferQueues &pQueues)
{
	INT  nIndex;
	INT  nQueue;
	INT  nQueues;
	CTCOnBoardBufferQueue  *pQueue[2];
	CTCOnBoardBufferQueues  pPageQueues;
	CTCOnBoardBufferQueuesPage  *pPage;

	if ((pPage = ((nIndex = FindPage(pszPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL))
	{
		for (nQueue = 0, nQueues = (INT)pQueues.GetSize(); nQueue < nQueues; nQueue++)
		{
			if ((pQueue[0] = pQueues.GetAt(nQueue)) && FindPage(pQueue[0]) == nIndex)
			{
				if ((pQueue[1] = new CTCOnBoardBufferQueue))
				{
					pQueue[1]->Copy(pQueue[0]);
					pPageQueues.Add(pQueue[1]);
				}
			}
		}
		return((pPage->SetQueues(pPageQueues) && pPage->SetCurQueue(0)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesView::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueues  pPageQueues;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_szPages.GetSize(), pQueues.RemoveAll(); nPage < nPages; nPage++)
	{
		if ((pPage = (nPage < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage) : (CTCOnBoardBufferQueuesPage *)NULL))
		{
			if (pPage->GetQueues(pPageQueues))
			{
				pQueues.Append(pPageQueues);
				pPageQueues.CPtrArray::RemoveAll();
				continue;
			}
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::GetQueues(LPCTSTR pszPage, CTCOnBoardBufferQueues &pQueues) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = ((nIndex = FindPage(pszPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetQueues(pQueues) : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::SetCurQueue(INT nIndex)
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetCurQueue(nIndex) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::SetCurQueue(LPCTSTR pszPage, INT nIndex)
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (FindPage(pszPage) >= 0 && FindPage(pszPage) < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(FindPage(pszPage)) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetCurQueue(nIndex) : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::CheckCurQueue(UINT nFlags) CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CheckCurQueue(nFlags) : FALSE);
}
BOOL CTCOnBoardBufferQueuesView::CheckCurQueue(LPCTSTR pszPage, UINT nFlags) CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (FindPage(pszPage) >= 0 && FindPage(pszPage) < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(FindPage(pszPage)) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CheckCurQueue(nFlags) : FALSE);
}

INT CTCOnBoardBufferQueuesView::GetCurQueue() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetCurQueue() : -1);
}
INT CTCOnBoardBufferQueuesView::GetCurQueue(LPCTSTR pszPage) CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (FindPage(pszPage) >= 0 && FindPage(pszPage) < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(FindPage(pszPage)) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetCurQueue() : -1);
}

UINT CTCOnBoardBufferQueuesView::GetQueueCount() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetQueueCount() : 0);
}
UINT CTCOnBoardBufferQueuesView::GetQueueCount(LPCTSTR pszPage) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = ((nIndex = FindPage(pszPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetQueueCount() : 0);
}

BOOL CTCOnBoardBufferQueuesView::DoAcknowledgeQueue()
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->DoAcknowledgeQueue() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::CanAcknowledgeQueue() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CanAcknowledgeQueue() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::DoCopyTelecommand()
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->DoCopyTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::CanCopyTelecommand() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CanCopyTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::DoDeleteTelecommand()
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->DoDeleteTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::CanDeleteTelecommand() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CanDeleteTelecommand() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::ShowTelecommandProperties()
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->ShowTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::CanShowTelecommandProperties() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->CanShowTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::IsShowingTelecommandProperties() CONST
{
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->IsShowingTelecommandProperties() : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::SetLayoutInfo(LPCTSTR pszPage, UINT nPane, INT nQueue, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = ((nIndex = FindPage(pszPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->SetLayoutInfo(nPane, nQueue, pHorzScrollInfo, pVertScrollInfo) : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::GetLayoutInfo(LPCTSTR pszPage, UINT nPane, INT &nQueue, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = ((nIndex = FindPage(pszPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetLayoutInfo(nPane, nQueue, pHorzScrollInfo, pVertScrollInfo) : FALSE);
}

BOOL CTCOnBoardBufferQueuesView::GetPrintProperties(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CStringArray &szSummaryColumns, CStringArray &szSummaryContents, CTextViewAttributes &pSummaryAttributes, LOGFONT *pSummaryTitleFont, LOGFONT *pSummaryItemsFont, CStringArray &szDetailsColumns, CStringArray &szDetailsContents, CTextViewAttributes &pDetailsAttributes, LOGFONT *pDetailsTitleFont, LOGFONT *pDetailsItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	INT  nIndex;
	CString  szPage;
	CTCOnBoardBufferQueuesPage  *pPage;

	szPage.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_BUFFERTYPE_FORMAT), (LPCTSTR)pJobInfo->GetPrintBuffer());
	return(((pPage = ((nIndex = FindPage(szPage)) >= 0 && nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL)) ? pPage->GetPrintProperties(pJobInfo, szSummaryColumns, szSummaryContents, pSummaryAttributes, pSummaryTitleFont, pSummaryItemsFont, szDetailsColumns, szDetailsContents, pDetailsAttributes, pDetailsTitleFont, pDetailsItemsFont, pSymbols, nSymbolIDs) : FALSE);
}

VOID CTCOnBoardBufferQueuesView::UpdateContents(BOOL bRedraw)
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->UpdateContents(bRedraw);
			continue;
		}
	}
}

VOID CTCOnBoardBufferQueuesView::SetTrackSize(CONST SIZE &size)
{
	INT  nPage;
	INT  nPages;
	CRect  rPage;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			if (GetItemRect(nPage, rPage)) pPage->SetTrackSize(CSize(size.cx, max(size.cy - rPage.Height(), 0)));
			continue;
		}
	}
}

CSize CTCOnBoardBufferQueuesView::GetTrackSize() CONST
{
	CRect  rPage;
	CTCOnBoardBufferQueuesPage  *pPage;

	return(((pPage = (m_pPages.GetSize() > 0 && GetItemRect(0, rPage)) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(0) : (CTCOnBoardBufferQueuesPage *)NULL)) ? CSize(pPage->GetTrackSize().cx, pPage->GetTrackSize().cy + rPage.Height()) : CSize(0, 0));
}

CSize CTCOnBoardBufferQueuesView::GetMargins() CONST
{
	return m_sizeTabMargins;
}

CTCOnBoardBufferQueuesWnd *CTCOnBoardBufferQueuesView::GetParent() CONST
{
	return((CTCOnBoardBufferQueuesWnd *)CTabCtrl::GetParent());
}

INT CTCOnBoardBufferQueuesView::EnumPages(CStringArray &szPages) CONST
{
	for (szPages.RemoveAll(); !GetTCService()->EnumTCOnBoardBufferTypes(szPages); )
	{
		szPages.Add(STRING(IDS_TCONBOARDBUFFERQUEUES_BUFFERTYPE_DEFAULT));
		break;
	}
	return((INT)szPages.GetSize());
}

INT CTCOnBoardBufferQueuesView::FindPage(LPCTSTR pszPage) CONST
{
	INT  nPage;
	INT  nPages;
	CStringArray  szPages;

	for (nPage = 0, nPages = (!m_szPages.GetSize()) ? GetTCService()->EnumTCOnBoardBufferTypes(szPages) : (INT)m_szPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((nPage < m_szPages.GetSize() && !m_szPages.GetAt(nPage).Compare(pszPage)) || (nPage < szPages.GetSize() && !szPages.GetAt(nPage).Compare(pszPage))) break;
		continue;
	}
	return((nPage < nPages) ? nPage : -1);
}
INT CTCOnBoardBufferQueuesView::FindPage(CTCOnBoardBufferQueue *pQueue) CONST
{
	CString  szPage;

	szPage.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_BUFFERTYPE_FORMAT), (LPCTSTR)pQueue->GetType());
	return FindPage(szPage);
}

VOID CTCOnBoardBufferQueuesView::RecalcLayout()
{
	CWnd  *pWnd;
	CRect  rWnd;
	CRect  rView;

	if (CThread::IsSameThread(this))
	{
		for (pWnd = GetParent()->GetWindow(GW_CHILD), GetParent()->GetClientRect(rView); pWnd != (CWnd *)NULL; pWnd = pWnd->GetNextWindow())
		{
			if (pWnd->GetSafeHwnd() != GetSafeHwnd())
			{
				pWnd->GetWindowRect(rWnd);
				GetParent()->ScreenToClient(rWnd);
				rWnd.left = rView.left;
				rWnd.right = rView.right;
				rView.SubtractRect(rView, rWnd);
			}
		}
		MoveWindow(rView);
	}
}

void CTCOnBoardBufferQueuesView::PostNcDestroy()
{
	INT  nIndex;
	INT  nCount;
	CSize  *pSize[2];
	LOGFONT  *plfFont[2][2];
	CUIntArray  *pColumns[2];
	CUIntArray  *pColumnWidths[2];

	for (nIndex = 0, nCount = (INT)max(m_pPanes[0].GetSize(), max(m_pPanes[1].GetSize(), max(m_pColumns[0].GetSize(), max(m_pColumns[1].GetSize(), max(m_pColumnWidths[0].GetSize(), max(m_pColumnWidths[1].GetSize(), max(m_pFonts[0][0].GetSize(), max(m_pFonts[0][1].GetSize(), max(m_pFonts[1][0].GetSize(), m_pFonts[1][1].GetSize()))))))))); nIndex < nCount; nIndex++)
	{
		if ((pSize[0] = (nIndex < m_pPanes[0].GetSize()) ? (CSize *)m_pPanes[0].GetAt(nIndex) : (CSize *)NULL)) delete pSize[0];
		if ((pSize[1] = (nIndex < m_pPanes[1].GetSize()) ? (CSize *)m_pPanes[1].GetAt(nIndex) : (CSize *)NULL)) delete pSize[1];
		if ((pColumns[0] = (nIndex < m_pColumns[0].GetSize()) ? (CUIntArray *)m_pColumns[0].GetAt(nIndex) : (CUIntArray *)NULL)) delete pColumns[0];
		if ((pColumns[1] = (nIndex < m_pColumns[1].GetSize()) ? (CUIntArray *)m_pColumns[1].GetAt(nIndex) : (CUIntArray *)NULL)) delete pColumns[1];
		if ((pColumnWidths[0] = (nIndex < m_pColumnWidths[0].GetSize()) ? (CUIntArray *)m_pColumnWidths[0].GetAt(nIndex) : (CUIntArray *)NULL)) delete pColumnWidths[0];
		if ((pColumnWidths[1] = (nIndex < m_pColumnWidths[1].GetSize()) ? (CUIntArray *)m_pColumnWidths[1].GetAt(nIndex) : (CUIntArray *)NULL)) delete pColumnWidths[1];
		if ((plfFont[0][0] = (nIndex < m_pFonts[0][0].GetSize()) ? (LOGFONT *)m_pFonts[0][0].GetAt(nIndex) : (LOGFONT *)NULL)) GlobalFree(plfFont[0][0]);
		if ((plfFont[0][1] = (nIndex < m_pFonts[0][1].GetSize()) ? (LOGFONT *)m_pFonts[0][1].GetAt(nIndex) : (LOGFONT *)NULL)) GlobalFree(plfFont[0][1]);
		if ((plfFont[1][0] = (nIndex < m_pFonts[1][0].GetSize()) ? (LOGFONT *)m_pFonts[1][0].GetAt(nIndex) : (LOGFONT *)NULL)) GlobalFree(plfFont[1][0]);
		if ((plfFont[1][1] = (nIndex < m_pFonts[1][1].GetSize()) ? (LOGFONT *)m_pFonts[1][1].GetAt(nIndex) : (LOGFONT *)NULL)) GlobalFree(plfFont[1][1]);
	}
	m_pPanes[0].RemoveAll();
	m_pPanes[1].RemoveAll();
	m_pColumns[0].RemoveAll();
	m_pColumns[1].RemoveAll();
	m_pColumnWidths[0].RemoveAll();
	m_pColumnWidths[1].RemoveAll();
	m_pFonts[0][0].RemoveAll();
	m_pFonts[0][1].RemoveAll();
	m_pFonts[1][0].RemoveAll();
	m_pFonts[1][1].RemoveAll();
	m_nColors[0].RemoveAll();
	m_nColors[1].RemoveAll();
	CTabCtrl::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesView, CTabCtrl)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_KEYDOWN()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_NOTIFY_REFLECT(TCN_SELCHANGE, OnSelchangePage)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesView message handlers

int CTCOnBoardBufferQueuesView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	INT  nPage;
	INT  nPages;
	TCITEM  sPage;
	CString  szPage;
	CStringArray  szPages;
	CFontTools  cFontTools;

	if (CTabCtrl::OnCreate(lpCreateStruct) != -1)
	{
		for (szPages.Copy(m_szPages); cFontTools.QueryDefaultFont(&m_cTabFont); )
		{
			SetFont(&m_cTabFont);
			break;
		}
		for (nPage = 0, nPages = (!szPages.GetSize()) ? EnumPages(szPages) : (INT)szPages.GetSize(), sPage.mask = TCIF_TEXT; nPage < nPages; nPage++)
		{
			for (szPage.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_BUFFERTYPE_FORMAT), (LPCTSTR)szPages.GetAt(nPage)), sPage.pszText = (m_szPages.GetSize() == szPages.GetSize()) ? (LPTSTR)(LPCTSTR)m_szPages.GetAt(nPage) : (LPTSTR)(LPCTSTR)szPage; InsertItem(nPage, &sPage) >= 0; )
			{
				m_szPages.SetAtGrow(nPage, (m_szPages.GetSize() == szPages.GetSize()) ? m_szPages.GetAt(nPage) : szPage);
				break;
			}
		}
		return((GetItemCount() == nPages) ? 0 : -1);
	}
	return -1;
}

void CTCOnBoardBufferQueuesView::OnSize(UINT nType, int cx, int cy)
{
	INT  nPage;
	INT  nPages;
	CRect  rPage;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(), GetClientRect(rPage), AdjustRect(FALSE, rPage); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->MoveWindow(rPage);
			continue;
		}
	}
	CTabCtrl::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardBufferQueuesView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rPage;

	GetClientRect(rPage);
	AdjustRect(FALSE, rPage);
	pDC->ExcludeClipRect(rPage);
	return CTabCtrl::OnEraseBkgnd(pDC);
}

void CTCOnBoardBufferQueuesView::OnSelchangePage(NMHDR *pNotifyStruct, LRESULT *pResult)
{
	INT  nIndex;
	CTCOnBoardBufferQueuesPage  *pPage[2];

	if ((pPage[0] = ((nIndex = max(TabCtrl_GetCurSel(GetSafeHwnd()), 0)) < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nIndex) : (CTCOnBoardBufferQueuesPage *)NULL))
	{
		if ((pPage[1] = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL))
		{
			for (pPage[0]->ShowWindow(SW_SHOW), pPage[1]->ShowWindow(SW_HIDE); (m_nIndex = nIndex) >= 0; )
			{
				GetParent()->UpdateBars();
				break;
			}
			*pResult = TRUE;
			return;
		}
	}
	*pResult = FALSE;
}

void CTCOnBoardBufferQueuesView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CTCOnBoardBufferQueuesPage  *pPage;

	if (nChar == VK_DOWN)
	{
		if ((pPage = (m_nIndex >= 0 && m_nIndex < m_pPages.GetSize()) ? (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(m_nIndex) : (CTCOnBoardBufferQueuesPage *)NULL))
		{
			pPage->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCOnBoardBufferQueuesView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()) && IsChild(pOldWnd))
	{
		GetParent()->SetFocus();
		return;
	}
	CTabCtrl::OnSetFocus(pOldWnd);
}

void CTCOnBoardBufferQueuesView::OnDestroy()
{
	INT  nPage;
	INT  nPages;
	CTCOnBoardBufferQueuesPage  *pPage;

	for (nPage = 0, nPages = (INT)m_pPages.GetSize(); nPage < nPages; nPage++)
	{
		if ((pPage = (CTCOnBoardBufferQueuesPage *)m_pPages.GetAt(nPage)))
		{
			pPage->DestroyWindow();
			delete pPage;
		}
	}
	m_pPages.RemoveAll();
	m_szPages.RemoveAll();
	m_cTabFont.DeleteObject();
	CTabCtrl::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesWnd

IMPLEMENT_DYNAMIC(CTCOnBoardBufferQueuesWnd, CDisplayWnd)

CTCOnBoardBufferQueuesWnd::CTCOnBoardBufferQueuesWnd() : CDisplayWnd()
{
	SetType(DISPLAY_TYPE_TCONBOARDBUFFERQUEUES);
}

BOOL CTCOnBoardBufferQueuesWnd::Create(CMDIFrameWnd *pParentWnd, LPCTSTR pszTitle, PDISPLAYINFO pDefaultInfo, BOOL bDefault)
{
	if (CDisplayWnd::Create(pParentWnd, (!AfxIsValidString(pszTitle) || !_tcsstr(pszTitle, STRING(IDS_DISPLAY_TITLE_TCONBOARDBUFFERQUEUES))) ? STRING(IDS_DISPLAY_TITLE_TCONBOARDBUFFERQUEUES) : pszTitle, pDefaultInfo->rWnd, IDR_TCONBOARDBUFFERQUEUESFRAME))
	{
		if (SetScope(pDefaultInfo->nScope) && SetMode(pDefaultInfo->nMode) && Customize(bDefault)) return TRUE;
		DestroyWindow();
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns)
{
	return m_wndView.SetLayout(pszPage, nPane, nColumns);
}
BOOL CTCOnBoardBufferQueuesWnd::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_wndView.SetLayout(pszPage, nPane, nColumns, nWidths);
}
BOOL CTCOnBoardBufferQueuesWnd::SetLayout(LPCTSTR pszPage, UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizePane)
{
	return m_wndView.SetLayout(pszPage, nPane, nColumns, nWidths, sizePane);
}

BOOL CTCOnBoardBufferQueuesWnd::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns) CONST
{
	return m_wndView.GetLayout(pszPage, nPane, nColumns);
}
BOOL CTCOnBoardBufferQueuesWnd::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_wndView.GetLayout(pszPage, nPane, nColumns, nWidths);
}
BOOL CTCOnBoardBufferQueuesWnd::GetLayout(LPCTSTR pszPage, UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizePane) CONST
{
	return m_wndView.GetLayout(pszPage, nPane, nColumns, nWidths, sizePane);
}

BOOL CTCOnBoardBufferQueuesWnd::SetListTitleFont(LPCTSTR pszPage, UINT nPane, CFont *pFont)
{
	return m_wndView.SetListTitleFont(pszPage, nPane, pFont);
}
BOOL CTCOnBoardBufferQueuesWnd::SetListTitleFont(LPCTSTR pszPage, UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetListTitleFont(pszPage, nPane, plfFont);
}

BOOL CTCOnBoardBufferQueuesWnd::GetListTitleFont(LPCTSTR pszPage, UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetListTitleFont(pszPage, nPane, pFont);
}
BOOL CTCOnBoardBufferQueuesWnd::GetListTitleFont(LPCTSTR pszPage, UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetListTitleFont(pszPage, nPane, plfFont);
}

BOOL CTCOnBoardBufferQueuesWnd::SetListItemsFont(LPCTSTR pszPage, UINT nPane, CFont *pFont)
{
	return m_wndView.SetListItemsFont(pszPage, nPane, pFont);
}
BOOL CTCOnBoardBufferQueuesWnd::SetListItemsFont(LPCTSTR pszPage, UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetListItemsFont(pszPage, nPane, plfFont);
}

BOOL CTCOnBoardBufferQueuesWnd::GetListItemsFont(LPCTSTR pszPage, UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetListItemsFont(pszPage, nPane, pFont);
}
BOOL CTCOnBoardBufferQueuesWnd::GetListItemsFont(LPCTSTR pszPage, UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetListItemsFont(pszPage, nPane, plfFont);
}

BOOL CTCOnBoardBufferQueuesWnd::SetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF nColor)
{
	return m_wndView.SetGridBackgroundColor(pszPage, nPane, nColor);
}

BOOL CTCOnBoardBufferQueuesWnd::GetGridBackgroundColor(LPCTSTR pszPage, UINT nPane, COLORREF &nColor) CONST
{
	return m_wndView.GetGridBackgroundColor(pszPage, nPane, nColor);
}

BOOL CTCOnBoardBufferQueuesWnd::EnableFullViewMode(BOOL bEnable)
{
	return m_wndView.EnableFullViewMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesWnd::IsFullViewModeEnabled() CONST
{
	return m_wndView.IsFullViewModeEnabled();
}

BOOL CTCOnBoardBufferQueuesWnd::EnableToolTipMode(BOOL bEnable)
{
	return m_wndView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardBufferQueuesWnd::IsToolTipModeEnabled() CONST
{
	return m_wndView.IsToolTipModeEnabled();
}

BOOL CTCOnBoardBufferQueuesWnd::StartMonitoring()
{
	return m_wndView.StartMonitoring();
}

BOOL CTCOnBoardBufferQueuesWnd::UpdateMonitoring(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_wndView.UpdateMonitoring(pQueues);
}

BOOL CTCOnBoardBufferQueuesWnd::StopMonitoring()
{
	return m_wndView.StopMonitoring();
}

INT CTCOnBoardBufferQueuesWnd::EnumQueuePages(CStringArray &szPages) CONST
{
	return m_wndView.EnumQueuePages(szPages);
}

BOOL CTCOnBoardBufferQueuesWnd::SetQueuePage(LPCTSTR pszPage)
{
	return m_wndView.SetQueuePage(pszPage);
}

CString CTCOnBoardBufferQueuesWnd::GetQueuePage() CONST
{
	return m_wndView.GetQueuePage();
}

BOOL CTCOnBoardBufferQueuesWnd::SetQueues(CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_wndView.SetQueues(pQueues);
}
BOOL CTCOnBoardBufferQueuesWnd::SetQueues(LPCTSTR pszPage, CONST CTCOnBoardBufferQueues &pQueues)
{
	return m_wndView.SetQueues(pszPage, pQueues);
}

BOOL CTCOnBoardBufferQueuesWnd::GetQueues(CTCOnBoardBufferQueues &pQueues) CONST
{
	return m_wndView.GetQueues(pQueues);
}
BOOL CTCOnBoardBufferQueuesWnd::GetQueues(LPCTSTR pszPage, CTCOnBoardBufferQueues &pQueues) CONST
{
	return m_wndView.GetQueues(pszPage, pQueues);
}

BOOL CTCOnBoardBufferQueuesWnd::SetCurQueue(INT nIndex)
{
	return m_wndView.SetCurQueue(nIndex);
}
BOOL CTCOnBoardBufferQueuesWnd::SetCurQueue(LPCTSTR pszPage, INT nIndex)
{
	return m_wndView.SetCurQueue(pszPage, nIndex);
}

BOOL CTCOnBoardBufferQueuesWnd::CheckCurQueue(UINT nFlags) CONST
{
	return m_wndView.CheckCurQueue(nFlags);
}
BOOL CTCOnBoardBufferQueuesWnd::CheckCurQueue(LPCTSTR pszPage, UINT nFlags) CONST
{
	return m_wndView.CheckCurQueue(pszPage, nFlags);
}

INT CTCOnBoardBufferQueuesWnd::GetCurQueue() CONST
{
	return m_wndView.GetCurQueue();
}
INT CTCOnBoardBufferQueuesWnd::GetCurQueue(LPCTSTR pszPage) CONST
{
	return m_wndView.GetCurQueue(pszPage);
}

UINT CTCOnBoardBufferQueuesWnd::GetQueueCount() CONST
{
	return m_wndView.GetQueueCount();
}
UINT CTCOnBoardBufferQueuesWnd::GetQueueCount(LPCTSTR pszPage) CONST
{
	return m_wndView.GetQueueCount(pszPage);
}

BOOL CTCOnBoardBufferQueuesWnd::DoAcknowledgeQueue()
{
	return m_wndView.DoAcknowledgeQueue();
}

BOOL CTCOnBoardBufferQueuesWnd::CanAcknowledgeQueue() CONST
{
	return m_wndView.CanAcknowledgeQueue();
}

BOOL CTCOnBoardBufferQueuesWnd::DoCopyTelecommand()
{
	if (m_wndView.DoCopyTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CanCopyTelecommand() CONST
{
	return m_wndView.CanCopyTelecommand();
}

BOOL CTCOnBoardBufferQueuesWnd::DoDeleteTelecommand()
{
	if (m_wndView.DoDeleteTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CanDeleteTelecommand() CONST
{
	return m_wndView.CanDeleteTelecommand();
}

BOOL CTCOnBoardBufferQueuesWnd::ShowTelecommandProperties()
{
	return m_wndView.ShowTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesWnd::CanShowTelecommandProperties() CONST
{
	return m_wndView.CanShowTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesWnd::IsShowingTelecommandProperties() CONST
{
	return m_wndView.IsShowingTelecommandProperties();
}

BOOL CTCOnBoardBufferQueuesWnd::Start()
{
	CTCOnBoardBufferQueues  pQueues;

	for (Initialize(TRUE); GetTCService()->EnumTCOnBoardBufferQueues(pQueues); )
	{
		SetQueues(pQueues);
		break;
	}
	UpdateAllPanes();
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesWnd::Prepare(BOOL bDialog)
{
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesWnd::Check() CONST
{
	return((CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) ? TRUE : FALSE);
}

VOID CTCOnBoardBufferQueuesWnd::Update()
{
	if (!Check())
	{
		if (IsWindowVisible())
		{
			ReportEvent(USER_INFORMATIONAL_DISPLAY_ACCESS_VIOLATION);
			ActivateFrame(SW_HIDE);
			return;
		}
	}
	UpdateAllPanes();
	CDisplayWnd::Update();
}

BOOL CTCOnBoardBufferQueuesWnd::Stop()
{
	Initialize(FALSE);
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesWnd::SaveInfo(INT nPage, INT nDisplay, LPCTSTR pszTitle, CONST PDISPLAYINFO pDisplayInfo)
{
	CSize  sizeList[2];
	CStringArray  szPages;
	CUIntArray  nColumns[2];
	CUIntArray  nWidths[2];
	CByteArray  nFontsInfo;
	CByteArray  nPrintInfo;
	CDWordArray  dwGridColors;
	CProfile  cProfile;

	return((CDisplayWnd::SaveInfo(nPage, nDisplay, pszTitle, pDisplayInfo) && (nPage > 0 || (GetLayoutInfo(szPages, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], dwGridColors) && GetFontsInfo(nFontsInfo) && GetPrintJobs(nPrintInfo) && cProfile.SetTCOnBoardBufferQueuesLayoutInfo(nPage, nDisplay, szPages, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], dwGridColors, IsToolTipModeEnabled()) && cProfile.SetTCOnBoardBufferQueuesFontsInfo(nPage, nDisplay, nFontsInfo) && cProfile.SetTCOnBoardBufferQueuesPrintInfo(nPage, nDisplay, nPrintInfo)))) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::LoadInfo(INT nPage, INT nDisplay, CString &szTitle, PDISPLAYINFO pDisplayInfo)
{
	BOOL  bToolTips;
	CSize  sizeList[2];
	CStringArray  szPages;
	CUIntArray  nColumns[2];
	CUIntArray  nWidths[2];
	CByteArray  nFontsInfo;
	CByteArray  nPrintInfo;
	CDWordArray  dwGridColors;
	CProfile  cProfile;

	return((CDisplayWnd::LoadInfo(nPage, nDisplay, szTitle, pDisplayInfo) && (nPage > 0 || (cProfile.GetTCOnBoardBufferQueuesLayoutInfo(nPage, nDisplay, szPages, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], dwGridColors, bToolTips) && cProfile.GetTCOnBoardBufferQueuesFontsInfo(nPage, nDisplay, nFontsInfo) && cProfile.GetTCOnBoardBufferQueuesPrintInfo(nPage, nDisplay, nPrintInfo) && SetLayoutInfo(szPages, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], dwGridColors) && SetFontsInfo(nFontsInfo) && SetPrintJobs(nPrintInfo) && EnableToolTipMode(bToolTips)))) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::SetLayoutInfo(LPCVOID pData)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nPagesInfo;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		for (CopyMemory(&sData, pData, ((cbData = (INT)GlobalSize((HGLOBAL)pData)) >= sizeof(DATA)) ? sizeof(DATA) : 0); cbData >= sizeof(DATA) && sData.cbSize == sizeof(DATA) + sData.cbPages && sData.cbPages >= 0; )
		{
			for (nPagesInfo.SetSize(sData.cbPages), CopyMemory(nPagesInfo.GetData(), (LPBYTE)pData + sizeof(DATA), sData.cbPages); SetLayoutInfo(sData.nIndex, nPagesInfo); ) return TRUE;
			break;
		}
		return FALSE;
	}
	return TRUE;
}

INT CTCOnBoardBufferQueuesWnd::GetLayoutInfo(LPVOID *pData) CONST
{
	INT  cbData;
	DATA  sData;
	LPVOID  pBlock;
	CByteArray  nPagesInfo;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		if (GetLayoutInfo(sData.nIndex, nPagesInfo))
		{
			for (sData.cbSize = sizeof(DATA) + (sData.cbPages = (INT)nPagesInfo.GetSize()); (pBlock = (AfxIsValidAddress(pData, sizeof(DATA))) ? (LPVOID)GlobalReAlloc(*pData, sData.cbSize, GMEM_MOVEABLE | GMEM_ZEROINIT) : (LPVOID)NULL); )
			{
				CopyMemory(pData, &pBlock, sizeof(LPVOID));
				CopyMemory(pBlock, &sData, sizeof(DATA));
				CopyMemory((LPBYTE)pBlock + (cbData = sizeof(DATA)), nPagesInfo.GetData(), sData.cbPages);
				break;
			}
			return sData.cbSize;
		}
	}
	return 0;
}

BOOL CTCOnBoardBufferQueuesWnd::QueryDefaultInfo(PDISPLAYINFO pDefaultInfo) CONST
{
	pDefaultInfo->ptWnd.x = 0;
	pDefaultInfo->ptWnd.y = 0;
	pDefaultInfo->nNumber = -1;
	pDefaultInfo->rWnd = rectDefault;
	pDefaultInfo->nScope = DISPLAY_SCOPE_GLOBAL;
	pDefaultInfo->nMode = DISPLAY_MODE_REALTIME;
	pDefaultInfo->pData = (LPVOID)NULL;
	pDefaultInfo->nShow = SW_SHOWNORMAL;
	pDefaultInfo->bShow = TRUE;
	return TRUE;
}

BOOL CTCOnBoardBufferQueuesWnd::QueryDefaultMenu(CLocaleMenu &cMenu, CImageList &cImages, CUIntArray &nImageIDs) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  iImage;
	UINT  nButtonID;
	UINT  nButtonStyle;
	CBitmap  cBitmap;
	BITMAP  sBitmap;

	for (cImages.DeleteImageList(), nImageIDs.RemoveAll(); cBitmap.LoadBitmap(IDB_TCONBOARDBUFFERQUEUESFRAMESMALLIMAGES) && cBitmap.GetBitmap(&sBitmap); )
	{
		for (nIndex = 0, nCount = (cImages.Create(sBitmap.bmHeight, sBitmap.bmHeight, ILC_COLOR32, sBitmap.bmWidth / sBitmap.bmHeight, 1) && cImages.Add(&cBitmap, RGB(0, 0, 0)) >= 0) ? m_wndToolBar.GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar.GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		cBitmap.DeleteObject();
		break;
	}
	return cMenu.LoadMenu(IDR_TCONBOARDBUFFERQUEUESFRAME);
}

VOID CTCOnBoardBufferQueuesWnd::UpdateBars()
{
	CTCServiceLock  cLock(this);

	UpdateMessagePane();
	UpdateModePane();
	UpdateTypePane();
}

BOOL CTCOnBoardBufferQueuesWnd::Print(PRINTDLG *pPrintInfo)
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardBufferQueuesPrintJobs  pJobs;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;
	CTCServiceLock  cLock(this);

	for (nJob = 0, nJobs = (GetPrintJobs(pJobs)) ? (INT)pJobs.GetSize() : 0; nJob < nJobs; nJob++)
	{
		if ((pJobInfo = pJobs.GetAt(nJob)) && pJobInfo->GetName() == STRING(IDS_PRINTJOB_DEFAULTNAME))
		{
			if (Print(pJobInfo, pPrintInfo)) break;
			continue;
		}
	}
	if (nJob < nJobs)
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS)
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDBUFFERQUEUES_PRINT_CLEARCOMMENTS);
			pJobInfo->SetComments(EMPTYSTRING);
			SetPrintJobs(pJobs);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CanPrint() CONST
{
	CTCOnBoardBufferQueue  *pQueue;
	CTCOnBoardBufferQueues  pQueues;
	CTCOnBoardBufferQueuesPrintJobs  pJobs;
	CTCOnBoardBufferQueuesPrintJobInfo  *pJobInfo;
	CTCServiceLock  cLock(this);

	if ((pJobInfo = (GetPrintJobs(pJobs)) ? pJobs.GetAt(pJobs.Find(STRING(IDS_PRINTJOB_DEFAULTNAME))) : (CTCOnBoardBufferQueuesPrintJobInfo *)NULL))
	{
		for (; (pQueue = (GetQueues(pQueues)) ? pQueues.GetAt(GetCurQueue()) : (CTCOnBoardBufferQueue *)NULL) != (CTCOnBoardBufferQueue *)NULL; )
		{
			if (((pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_SUMMARY) && GetQueueCount() > 0) || ((pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) && pQueue->GetSize() > 0)) return TRUE;
			break;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::SetPrintJobs(CONST CTCOnBoardBufferQueuesPrintJobs &pPrintJobs)
{
	CTCServiceLock  cLock(this);

	return m_pPrintJobs.Copy(&pPrintJobs);
}

BOOL CTCOnBoardBufferQueuesWnd::GetPrintJobs(CTCOnBoardBufferQueuesPrintJobs &pPrintJobs) CONST
{
	CTCServiceLock  cLock(this);

	return pPrintJobs.Copy(&m_pPrintJobs);
}

BOOL CTCOnBoardBufferQueuesWnd::Print(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, PRINTDLG *pPrintInfo)
{
	CDC  cDC;
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	LOGFONT  lfFont[2][2];
	DEVMODE  *pDevMode;
	DEVNAMES  *pDevNames;
	CPtrArray  pSymbols;
	CUIntArray  nSymbolIDs;
	CStringArray  szColumns[2];
	CStringArray  szContents[2];
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTextViewAttributes  pAttributes[2];

	if ((pPrintProfileInfo = (GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		if (GetPrintProperties(pJobInfo, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], pSymbols, nSymbolIDs))
		{
			if (!AfxIsValidAddress(pPrintInfo, sizeof(PRINTDLG)))
			{
				if (CreatePrinterDC(pPrintProfileInfo, cDC))
				{
					if (PrintJob(cDC, pJobInfo, pPrintProfileInfo->GetPrinterName(), 0, 0, rtMargin[0], bMetric, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], pSymbols, nSymbolIDs))
					{
						cDC.DeleteDC();
						return TRUE;
					}
					cDC.DeleteDC();
				}
				return FALSE;
			}
			if ((pDevNames = (DEVNAMES *)GlobalLock(pPrintInfo->hDevNames)))
			{
				if ((pDevMode = (DEVMODE *)GlobalLock(pPrintInfo->hDevMode)))
				{
					if (CreatePrinterDC(pPrintInfo->hDevNames, pPrintInfo->hDevMode, cDC))
					{
						if (PrintJob(cDC, pJobInfo, (LPCTSTR)pDevMode->dmDeviceName, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nFromPage : 0, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nToPage : 0, rtMargin[0], bMetric, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], pSymbols, nSymbolIDs))
						{
							GlobalUnlock(pPrintInfo->hDevNames);
							GlobalUnlock(pPrintInfo->hDevMode);
							cDC.DeleteDC();
							return TRUE;
						}
						cDC.DeleteDC();
					}
					GlobalUnlock(pPrintInfo->hDevMode);
				}
				GlobalUnlock(pPrintInfo->hDevNames);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CreateToolBar()
{
	if (m_wndToolBar.CreateEx(this, TBSTYLE_FLAT, CBRS_TOP | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndToolBar.LoadToolBar(IDB_TCONBOARDBUFFERQUEUESFRAMELARGEIMAGES, 0, IDB_TCONBOARDBUFFERQUEUESFRAMESMALLIMAGES, TRUE))
	{
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESSETTINGS), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESDETAILS), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESDELETE), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESSTART), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESSTOP), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESACKNOWLEDGE), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESDUMP), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESRESET), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESFULLVIEWMODE), TBBS_DISABLED);
		m_wndToolBar.SetButtonStyle(m_wndToolBar.CommandToIndex(IDM_TCONBOARDBUFFERQUEUESPRINT), TBBS_DISABLED);
		DockPane(&m_wndToolBar);
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CreateStatusBar()
{
	if (m_wndStatusBar.Create(this, CBRS_BOTTOM | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndStatusBar.SetIndicators(nTCOnBoardBufferQueuesStatusBarIndicators, 1))
	{
		m_wndStatusBar.EnableToolTips();
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::CreateView()
{
	if (m_wndView.Create(this, TCS_TABS | TCS_SINGLELINE | TCS_TOOLTIPS | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::Customize(BOOL bDefault)
{
	CByteArray  nPrintInfo;

	return(((!bDefault  &&  GetPrintJobs(nPrintInfo) && nPrintInfo.GetSize() > 0) || SetPrintJobs(nPrintInfo)) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::UpdateAllPanes()
{
	INT  nPane;
	INT  nPanes;

	for (nPane = 0, nPanes = sizeof(nTCOnBoardBufferQueuesStatusBarIndicators) / sizeof(UINT); nPane < nPanes; nPane++)
	{
		if (m_wndStatusBar.CommandToIndex(nTCOnBoardBufferQueuesStatusBarIndicators[nPane]) != nPane) break;
		continue;
	}
	if (nPane < nPanes)
	{
		if (m_wndStatusBar.SetIndicators(nTCOnBoardBufferQueuesStatusBarIndicators, sizeof(nTCOnBoardBufferQueuesStatusBarIndicators) / sizeof(UINT)))
		{
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	UpdateBars();
	return TRUE;
}

VOID CTCOnBoardBufferQueuesWnd::UpdateMessagePane()
{
	UINT  nCount;
	CString  szMessage;

	szMessage.Format(((nCount = GetQueueCount()) > 0) ? ((nCount > 1) ? STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_DATAMESSAGES) : STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_DATAMESSAGE)) : STRING(IDS_TCONBOARDBUFFERQUEUES_STATUSBAR_NODATAMESSAGE), nCount);
	m_wndStatusBar.SetPaneText(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE, szMessage);
}

VOID CTCOnBoardBufferQueuesWnd::UpdateModePane()
{
	m_wndStatusBar.SetPaneText(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE, STRING(IDS_DISPLAY_MODE_REALTIME));
}

VOID CTCOnBoardBufferQueuesWnd::UpdateTypePane()
{
	m_wndStatusBar.SetPaneText(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE, (LPCTSTR)GetQueuePage());
}

VOID CTCOnBoardBufferQueuesWnd::UpdateContents()
{
	m_wndView.UpdateContents();
}

BOOL CTCOnBoardBufferQueuesWnd::SetLayoutInfo(CONST CStringArray &szPages, CONST CUIntArray &nSummaryColumns, CONST CUIntArray &nSummaryWidths, CONST SIZE &sizeSummaryList, CONST CUIntArray &nDetailsColumns, CONST CUIntArray &nDetailsWidths, CONST SIZE &sizeDetailsList, CONST CDWordArray &dwDetailsGridColors)
{
	INT  nPage;
	INT  nPages;
	CUIntArray  nColumns[2][2];
	CUIntArray  nWidths[2][2];

	for (nPage = 0, nPages = (INT)szPages.GetSize(), nColumns[0][0].Copy(nSummaryColumns), nWidths[0][0].Copy(nSummaryWidths), nColumns[0][1].Copy(nDetailsColumns), nWidths[0][1].Copy(nDetailsWidths); nPage < nPages; nPage++)
	{
		for (nColumns[1][0].RemoveAll(); nColumns[0][0].GetSize() > 0; nColumns[0][0].RemoveAt(0))
		{
			if (!nColumns[0][0].GetAt(0))
			{
				nColumns[0][0].RemoveAt(0);
				break;
			}
			nColumns[1][0].Add(nColumns[0][0].GetAt(0));
		}
		for (nWidths[1][0].RemoveAll(); nWidths[0][0].GetSize() > 0; nWidths[0][0].RemoveAt(0))
		{
			if (!nWidths[0][0].GetAt(0))
			{
				nWidths[0][0].RemoveAt(0);
				break;
			}
			nWidths[1][0].Add(nWidths[0][0].GetAt(0));
		}
		for (nColumns[1][1].RemoveAll(); nColumns[0][1].GetSize() > 0; nColumns[0][1].RemoveAt(0))
		{
			if (!nColumns[0][1].GetAt(0))
			{
				nColumns[0][1].RemoveAt(0);
				break;
			}
			nColumns[1][1].Add(nColumns[0][1].GetAt(0));
		}
		for (nWidths[1][1].RemoveAll(); nWidths[0][1].GetSize() > 0; nWidths[0][1].RemoveAt(0))
		{
			if (!nWidths[0][1].GetAt(0))
			{
				nWidths[0][1].RemoveAt(0);
				break;
			}
			nWidths[1][1].Add(nWidths[0][1].GetAt(0));
		}
		if (nColumns[1][0].GetSize() > 0 && nWidths[1][0].GetSize() > 0 && nColumns[1][1].GetSize() > 0 && nWidths[1][1].GetSize() > 0 && nPage < dwDetailsGridColors.GetSize())
		{
			if (!SetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[1][0], nWidths[1][0], sizeSummaryList) || !SetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1][1], nWidths[1][1], sizeDetailsList) || !SetGridBackgroundColor(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, dwDetailsGridColors.GetAt(nPage))) break;
			continue;
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::GetLayoutInfo(CStringArray &szPages, CUIntArray &nSummaryColumns, CUIntArray &nSummaryWidths, CSize &sizeSummaryList, CUIntArray &nDetailsColumns, CUIntArray &nDetailsWidths, CSize &sizeDetailsList, CDWordArray &dwDetailsGridColors) CONST
{
	INT  nPage;
	INT  nPages;
	CSize  sizeList[2];
	CUIntArray  nColumns[2];
	CUIntArray  nWidths[2];
	COLORREF  nColor;

	for (nPage = 0, nPages = EnumQueuePages(szPages), nSummaryColumns.RemoveAll(), nSummaryWidths.RemoveAll(), nDetailsColumns.RemoveAll(), nDetailsWidths.RemoveAll(), dwDetailsGridColors.RemoveAll(); nPage < nPages; nPage++)
	{
		if (GetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[0], nWidths[0], sizeList[0]) && GetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1], nWidths[1], sizeList[1]) && GetGridBackgroundColor(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColor))
		{
			for (nSummaryColumns.Append(nColumns[0]), nDetailsColumns.Append(nColumns[1]), nSummaryWidths.Append(nWidths[0]), nDetailsWidths.Append(nWidths[1]), nSummaryColumns.Add(0), nDetailsColumns.Add(0), nSummaryWidths.Add(0), nDetailsWidths.Add(0), dwDetailsGridColors.Add(nColor); !nPage; )
			{
				sizeSummaryList = sizeList[0];
				sizeDetailsList = sizeList[1];
				break;
			}
			continue;
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::SetFontsInfo(CONST CByteArray &nFontsInfo)
{
	INT  nPage;
	INT  nPages;
	CStringArray  szPages;
	LOGFONT  sPageFont[2][2];

	for (nPage = 0, nPages = EnumQueuePages(szPages), nPages = (nFontsInfo.GetSize() == 4 * nPages*sizeof(LOGFONT)) ? nPages : -1; nPage < nPages; nPage++)
	{
		for (CopyMemory(sPageFont, nFontsInfo.GetData() + (4 * nPage)*sizeof(LOGFONT), sizeof(sPageFont)); !SetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageFont[0][0]) || !SetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageFont[0][1]) || !SetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageFont[1][0]) || !SetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageFont[1][1]); )
		{
			nPages = -1;
			break;
		}
	}
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::GetFontsInfo(CByteArray &nFontsInfo) CONST
{
	INT  nPage;
	INT  nPages;
	CStringArray  szPages;
	LOGFONT  sPageFont[2][2];

	for (nPage = 0, nPages = EnumQueuePages(szPages), nFontsInfo.SetSize(4 * nPages*sizeof(LOGFONT)); nPage < nPages; nPage++)
	{
		if (GetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageFont[0][0]) && GetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageFont[0][1]) && GetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageFont[1][0]) && GetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageFont[1][1]))
		{
			CopyMemory(nFontsInfo.GetData() + (4 * nPage)*sizeof(LOGFONT), sPageFont, sizeof(sPageFont));
			continue;
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::SetPrintJobs(CONST CByteArray &nPrintInfo)
{
	CTCOnBoardBufferQueuesPrintJobs  pPrintJobs;

	return((pPrintJobs.Unmap(nPrintInfo)) ? SetPrintJobs(pPrintJobs) : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::GetPrintJobs(CByteArray &nPrintInfo) CONST
{
	CTCOnBoardBufferQueuesPrintJobs  pPrintJobs;

	return((GetPrintJobs(pPrintJobs)) ? pPrintJobs.Map(nPrintInfo) : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::GetPrintProperties(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CStringArray &szSummaryColumns, CStringArray &szSummaryContents, CTextViewAttributes &pSummaryAttributes, LOGFONT *pSummaryTitleFont, LOGFONT *pSummaryItemsFont, CStringArray &szDetailsColumns, CStringArray &szDetailsContents, CTextViewAttributes &pDetailsAttributes, LOGFONT *pDetailsTitleFont, LOGFONT *pDetailsItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_wndView.GetPrintProperties(pJobInfo, szSummaryColumns, szSummaryContents, pSummaryAttributes, pSummaryTitleFont, pSummaryItemsFont, szDetailsColumns, szDetailsContents, pDetailsAttributes, pDetailsTitleFont, pDetailsItemsFont, pSymbols, nSymbolIDs);
}

BOOL CTCOnBoardBufferQueuesWnd::StartPrintJob(CDC &cDC)
{
	DOCINFO  sJobInfo;
	CString  szJobTitle;

	for (sJobInfo.fwType = 0, sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.lpszDocName = (LPTSTR)EMPTYSTRING, sJobInfo.lpszOutput = (LPCTSTR)NULL, sJobInfo.lpszDatatype = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCONBOARDBUFFERQUEUES)); szJobTitle.GetLength() >= 0; )
	{
		sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle;
		break;
	}
	return((cDC.StartDoc(&sJobInfo) >= 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::PrintJob(CDC &cDC, CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, LPCTSTR pszPrinterName, INT nFromPage, INT nToPage, CONST RECT &rtMargin, BOOL bMetric, CONST CStringArray &szSummaryColumns, CONST CStringArray &szSummaryContents, CONST CTextViewAttributes &pSummaryAttributes, CONST LOGFONT *pSummaryTitleFont, CONST LOGFONT *pSummaryItemsFont, CONST CStringArray &szDetailsColumns, CONST CStringArray &szDetailsContents, CONST CTextViewAttributes &pDetailsAttributes, CONST LOGFONT *pDetailsTitleFont, CONST LOGFONT *pDetailsItemsFont, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nPos;
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	INT  nLine;
	INT  nLines;
	INT  nColumn;
	INT  nColumns;
	INT  nFont;
	INT  nFonts;
	INT  nSpacing;
	INT  nHeight[2];
	UINT  nFormat;
	BOOL  bOverlap;
	BOOL  bOutput;
	CRgn  rgnArea;
	CRect  rArea;
	CRect  rCalc;
	CRect  rClip;
	CRect  rItem;
	CFont  *pOldFont;
	CFont  cFont[TCONBOARDBUFFERQUEUES_PRINTFONTS];
	CSize  sizeSymbol;
	CString  szColumn;
	COLORREF  nColor;
	COLORREF  nOldColor;
	CTimeKey  tPrint;
	CPtrArray  pFonts;
	TEXTMETRIC  tmFont;
	CUIntArray  nTabs[2];
	CStringArray  szColumns[2];
	CStringArray  szContents[2];
	CStringArray  szColumnsText;
	CTextViewAttribute  *pAttribute;
	CTextViewAttributes  pAttributes[2];

	for (nPage = nPages = 0; (!nPages || nPage <= nPages) && (nPages > 0 || (nPages = (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rArea) != ERROR && rgnArea.CreateRectRgnIndirect(rArea) && CalcPrintDocTitleFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_TITLE]) && CalcPrintDocSubTitleFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUBTITLE]) && CalcPrintDocDetailsFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_COMMENTS]) && CalcPrintDocListTitleFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYTITLE]) && CalcPrintDocListItemsFonts(cDC, rArea, szSummaryColumns, szSummaryContents, pSummaryTitleFont, pSummaryItemsFont, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMSTITLE], cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMS]) && CalcPrintDocListTitleFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSTITLE]) && CalcPrintDocListItemsFonts(cDC, rArea, szDetailsColumns, szDetailsContents, pDetailsTitleFont, pDetailsItemsFont, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE], cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMS]) && CalcPrintDocNoticeFonts(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_NOTICE], cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rArea, cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_FOOTER]) && CalcPrintDocTitleWidth(cDC, rArea, szSummaryColumns, szSummaryContents, &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMSTITLE], &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMS], nTabs[0]) == szSummaryColumns.GetSize() && CalcPrintDocTitleWidth(cDC, rArea, szDetailsColumns, szDetailsContents, &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE], &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMS], nTabs[1]) == szDetailsColumns.GetSize()) ? nPages : -1) == 0); )
	{
		for (nFont = 0, nFonts = (!nPages) ? (INT)(sizeof(cFont) / sizeof(cFont[0])) : 0; nFont < nFonts; nFont++)
		{
			pFonts.SetAtGrow(nFont, &cFont[nFont]);
			continue;
		}
		for (nPane = 0, nPanes = TCONBOARDBUFFERQUEUES_PANES, szColumns[0].Copy(szSummaryColumns), szColumns[1].Copy(szDetailsColumns), szContents[0].Copy(szSummaryContents), szContents[1].Copy(szDetailsContents), pAttributes[0].Copy(&pSummaryAttributes), pAttributes[1].Copy(&pDetailsAttributes), nSpacing = 0, rCalc.SetRectEmpty(), rClip.SetRectEmpty(), bOverlap = FALSE; nPages >= 0 && nPane < nPanes; nPane++)
		{
			for (nLine = 0, nLines = ((!nPane && (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_SUMMARY)) || (nPane > 0 && (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_QUEUE))) ? (INT)szContents[nPane].GetSize() : 0, bOutput = TRUE; nPages >= 0 && nLine < nLines; nLine++, bOutput = TRUE)
			{
				for (nColumn = 0, nColumns = (INT)szColumns[nPane].GetSize(), ExtractPrintDocText(szContents[nPane].GetAt(nLine), szColumnsText), nHeight[0] = nHeight[1] = 0; nPages >= 0 && nColumn < nColumns; nColumn++, nHeight[1] = 0)
				{
					if (rClip.Height() > 0)
					{
						if (nPane == 0)
						{
							if ((pOldFont = cDC.SelectObject((CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMS))))
							{
								if ((nSpacing = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmHeight / 10, 1) : -1) >= 0)
								{
									for (rCalc.SetRect(rCalc.left, (!nColumn) ? (rCalc.top + nSpacing) : rCalc.top, rCalc.right, (!nColumn) ? (rCalc.top + nSpacing + tmFont.tmHeight*((rClip.bottom - (rCalc.top + nSpacing)) / tmFont.tmHeight)) : (rCalc.top + tmFont.tmHeight*((rClip.bottom - rCalc.top) / tmFont.tmHeight))), nFormat = DT_LEFT | DT_NOPREFIX | DT_WORDBREAK, nColor = cDC.GetTextColor(); (pAttribute = pAttributes[nPane].GetAt(nLine)); )
									{
										pAttribute->GetColumnFormat(nColumn, nFormat);
										pAttribute->GetColumnColor(nColumn, nColor);
										break;
									}
									for (szColumn = (!szColumnsText.GetAt(nColumn).IsEmpty()) ? (((nPos = (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)) ? szColumnsText.GetAt(nColumn).Find(CTCOnBoardBufferQueuesPageSummaryTextView::GetSymbolDelimiter()) : -1) >= 0) ? (szColumnsText.GetAt(nColumn).Left(nPos)) : (szColumnsText.GetAt(nColumn) + SPACE)) : EMPTYSTRING, nFormat = (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage && nPage <= nToPage))) ? nFormat : (nFormat | DT_CALCRECT), nOldColor = cDC.SetTextColor((cDC.GetDeviceCaps(NUMCOLORS) > 2) ? nColor : cDC.GetTextColor()), sizeSymbol.cx = sizeSymbol.cy = tmFont.tmHeight, nHeight[1] = cDC.DrawText(szColumn, (rItem = CRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.bottom)), nFormat); szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME); )
									{
										DrawPrintDocSymbol(cDC, (rItem = ((nFormat & DT_CALCRECT) != DT_CALCRECT  &&  rItem.top + sizeSymbol.cy <= rCalc.bottom) ? CRect(rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2, rItem.top, rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2 + sizeSymbol.cx, rItem.top + sizeSymbol.cy) : CRect(0, 0, 0, 0)), (szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_INFORMATION)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINFORMATION : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_WARNING)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESWARNING : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_LIST_ALERT_ERROR)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESERROR : -1)), pSymbols, nSymbolIDs);
										break;
									}
									nHeight[0] = max(max(nHeight[0], sizeSymbol.cy), nHeight[1]);
									cDC.SetTextColor(nOldColor);
									cDC.SelectObject(pOldFont);
								}
								else
								{
									cDC.SelectObject(pOldFont);
									break;
								}
							}
							else break;
						}
						else
						{
							if ((pOldFont = cDC.SelectObject((CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMS))))
							{
								if ((nSpacing = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmHeight / 10, 1) : -1) >= 0)
								{
									for (rCalc.SetRect(rCalc.left, (!nColumn) ? (rCalc.top + nSpacing) : rCalc.top, rCalc.right, (!nColumn) ? (rCalc.top + nSpacing + tmFont.tmHeight*((rClip.bottom - (rCalc.top + nSpacing)) / tmFont.tmHeight)) : (rCalc.top + tmFont.tmHeight*((rClip.bottom - rCalc.top) / tmFont.tmHeight))), nFormat = DT_LEFT | DT_NOPREFIX | DT_WORDBREAK, nColor = cDC.GetTextColor(); (pAttribute = pDetailsAttributes.GetAt(nLine)); )
									{
										pAttribute->GetColumnFormat(nColumn, nFormat);
										pAttribute->GetColumnColor(nColumn, nColor);
										break;
									}
									for (szColumn = (!szColumnsText.GetAt(nColumn).IsEmpty()) ? (((nPos = (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)) ? szColumnsText.GetAt(nColumn).Find(CTCOnBoardBufferQueuesPageDetailsTextView::GetSymbolDelimiter()) : -1) >= 0) ? (szColumnsText.GetAt(nColumn).Left(nPos)) : (szColumnsText.GetAt(nColumn) + SPACE)) : EMPTYSTRING, nFormat = (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage && nPage <= nToPage))) ? nFormat : (nFormat | DT_CALCRECT), nOldColor = cDC.SetTextColor((cDC.GetDeviceCaps(NUMCOLORS) > 2) ? nColor : cDC.GetTextColor()), sizeSymbol.cx = sizeSymbol.cy = tmFont.tmHeight, nHeight[1] = (szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT)) ? cDC.DrawText(szColumn, (rItem = CRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.bottom)), nFormat) : sizeSymbol.cy; szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER); )
									{
										DrawPrintDocSymbol(cDC, ((nFormat & DT_CALCRECT) != DT_CALCRECT  &&  rItem.top + sizeSymbol.cy <= rCalc.bottom) ? (rItem = CRect(rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2, rItem.top, rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2 + sizeSymbol.cx, rItem.top + sizeSymbol.cy)) : CRect(0, 0, 0, 0), (szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_INFORMATION)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINFORMATION : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_WARNING)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESWARNING : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_ALERT_ERROR)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESERROR : -1)), pSymbols, nSymbolIDs);
										break;
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS))
									{
										for (rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, (nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1) + sizeSymbol.cx) : (rCalc.left + sizeSymbol.cx), rCalc.top + sizeSymbol.cy); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCK)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINTERLOCK : -1, pSymbols, nSymbolIDs);
											DrawPrintDocSymbol(cDC, rItem + CPoint(3 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKIDLE)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINTERLOCKIDLE : ((szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKPENDING)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINTERLOCKPENDING : ((szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKSUCCESS)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINTERLOCKSUCCESS : ((szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_INTERLOCKFAILURE)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESINTERLOCKFAILURE : -1))), pSymbols, nSymbolIDs);
											DrawPrintDocSymbol(cDC, rItem + CPoint(6 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_GROUPED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESGROUPED : -1, pSymbols, nSymbolIDs);
											DrawPrintDocSymbol(cDC, rItem + CPoint(9 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_FLAGS_BLOCKED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESBLOCKED : -1, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS))
									{
										for (nID = (szColumn.IsEmpty()) ? IDP_TCONBOARDBUFFERQUEUESCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_ON)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_OFF)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVCHECKS_DISABLED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT))
									{
										for (nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_GO)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESPTVGO : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_WAIT)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESPTVWAIT : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PTVRESULT_FAIL)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESPTVFAIL : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS))
									{
										for (nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_NONE)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_ON)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_OFF)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVCHECKS_DISABLED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT))
									{
										for (nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_GO)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESPEVGO : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_PEVRESULT_NOGO)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESPEVNOGO : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS))
									{
										for (nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_NONE))) ? IDP_TCONBOARDBUFFERQUEUESCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_ON)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_OFF)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVCHECKS_DISABLED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVRESULT))
									{
										for (nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_IDLE)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVIDLE : -1, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PENDING)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVPENDING : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_PASSED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVPASSED : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_FAILED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVFAILED : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNKNOWN)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVUNKNOWN : nID, nID = (szColumn.Find(STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? IDP_TCONBOARDBUFFERQUEUESCEVUNVERIFIED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs[nPane].GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs[nPane].GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
										{
											DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
											break;
										}
									}
									nHeight[0] = max(max(nHeight[0], sizeSymbol.cy), nHeight[1]);
									cDC.SetTextColor(nOldColor);
									cDC.SelectObject(pOldFont);
								}
								else
								{
									cDC.SelectObject(pOldFont);
									break;
								}
							}
							else break;
						}
					}
					if (((rCalc.top + nHeight[1] > rCalc.bottom || bOverlap) && nColumn == nColumns - 1) || !rClip.Height())
					{
						if (nPages > 0 && (nPage == nPages || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage == nToPage)))
						{
							nPages = nPage;
							nLines = nLine;
							nColumns = nColumn;
							break;
						}
						if (bOutput && (!nPages || ((!nPage || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage || nPage > nToPage)) || cDC.EndPage() >= 0) && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage - 1 || nPage >= nToPage)) || (((((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage) && nPage > 0) || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage != nFromPage - 1)) || StartPrintJob(cDC)) && cDC.StartPage() >= 0)))))
						{
							if (cDC.SelectClipRgn(&rgnArea) != ERROR  &&  DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, (!nPane) ? STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_SUMMARYITEMSTITLE) : STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_DETAILSITEMSTITLE), szColumns[nPane], pFonts, nTabs[nPane], nPages, (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage - 1 && nPage < nToPage))) ? (nPage + 1) : 0, rClip) && cDC.IntersectClipRect(rClip) != ERROR)
							{
								rCalc.SetRect(rClip.left, rClip.top - rCalc.Height() - nSpacing, rClip.right, rClip.bottom);
								bOverlap = FALSE;
								bOutput = FALSE;
								nColumn = -1;
								nPage++;
								continue;
							}
						}
						break;
					}
					bOverlap = (rCalc.top + nHeight[1] > rCalc.bottom) ? TRUE : bOverlap;
				}
				if (nLine < nLines  &&  nColumn == nColumns)
				{
					rCalc.DeflateRect(0, nHeight[0], 0, 0);
					continue;
				}
				break;
			}
			if (nLine == nLines)
			{
				if (nPage <= nPages || !nPages)
				{
					if (!nPane && (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_QUEUE) && szContents[1].GetSize() > 0)
					{
						if (DrawPrintDocListTitle(cDC, (rItem = rCalc), GetPrintDocListTitle(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_DETAILSITEMSTITLE), pJobInfo->GetPrintQueue(), pJobInfo->GetPrintQueueID()), &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSTITLE], TRUE) && DrawPrintDocListItemsTitle(cDC, rItem, szColumns[1], &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE], nTabs[1], TRUE) && DrawPrintDocListItemsTitle(cDC, rItem, szColumns[1], &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE], nTabs[1], TRUE) && (rItem.top > rItem.bottom || (DrawPrintDocListTitle(cDC, rCalc, GetPrintDocListTitle(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_DETAILSITEMSTITLE), pJobInfo->GetPrintQueue(), pJobInfo->GetPrintQueueID()), &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSTITLE]) && DrawPrintDocListItemsTitle(cDC, rCalc, szColumns[1], &cFont[TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE], nTabs[1]))))
						{
							rCalc.SetRect(rCalc.left, (rItem.top <= rItem.bottom) ? rCalc.top : rClip.bottom, rCalc.right, rClip.bottom);
							continue;
						}
						nPages = -1;
						break;
					}
					continue;
				}
			}
			break;
		}
		if (nPages >= 0)
		{
			if (nLine == nLines)
			{
				if (!szContents[nPane].GetSize())
				{
					if (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nFromPage > 1)
					{
						nPages = nPage = 0;
						break;
					}
					if (StartPrintJob(cDC))
					{
						if (cDC.StartPage() >= 0)
						{
							if (DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, (!nPane) ? STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_SUMMARYITEMSTITLE) : STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_DETAILSITEMSTITLE), szColumns[nPane], pFonts, nTabs[nPane], 1, 1, rClip))
							{
								nPages = nPage = 1;
								break;
							}
							cDC.EndPage();
						}
						EndPrintJob(cDC);
					}
					nPages = -1;
					break;
				}
				if (!nPages)
				{
					if (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || nPage >= nFromPage)
					{
						nPages = nPage;
						nPage = 0;
						continue;
					}
					nPages = nPage = 0;
				}
			}
			else
			{
				if (nPages > 0) cDC.AbortDoc();
				nPages = -1;
			}
		}
		break;
	}
	return(((!nPages || (nPages > 0 && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage < nFromPage) || (cDC.EndPage() >= 0 && EndPrintJob(cDC))))) && nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::EndPrintJob(CDC &cDC)
{
	return((cDC.EndDoc() >= 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocPage(CDC &cDC, CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, CONST RECT &rtMargin, BOOL bMetric, LPCTSTR pszTitle, CONST CStringArray &szColumns, CONST CPtrArray &pFonts, CONST CUIntArray &nTabs, INT nPages, INT nPage, LPRECT prClip)
{
	return((CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(prClip) != ERROR  &&  DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocSubTitle(cDC, prClip, GetPrintDocSubTitle(pJobInfo->GetPrintBuffer()), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_SUBTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocListTitle(cDC, prClip, GetPrintDocListTitle(pszTitle, pJobInfo->GetPrintQueue(), pJobInfo->GetPrintQueueID()), (!lstrcmp(pszTitle, STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_SUMMARYITEMSTITLE))) ? (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYTITLE) : (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocListItemsTitle(cDC, prClip, szColumns, (!lstrcmp(pszTitle, STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_SUMMARYITEMSTITLE))) ? (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_SUMMARYLISTITEMSTITLE) : (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_DETAILSLISTITEMSTITLE), nTabs, (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCONBOARDBUFFERQUEUES_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocSubTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszType, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszType, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszType, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocListTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocListItemsTitle(CDC &cDC, LPRECT prClip, CONST CStringArray &szColumns, CFont *pFont, CONST CUIntArray &nTabs, BOOL bCalc)
{
	CSize  rCalc;
	CFont  *pOldFont;
	CString  szItems;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		szItems = GetPrintDocListItemsTitle(szColumns);
		rCalc = (!bCalc) ? cDC.TabbedTextOut(prClip->left, prClip->top + cDC.GetTextExtent(szItems, szItems.GetLength()).cy, szItems, (INT)nTabs.GetSize(), (LPINT)nTabs.GetData(), prClip->left) : CSize(nTabs.GetAt(nTabs.GetSize() - 1), cDC.GetTextExtent(szItems, szItems.GetLength()).cy);
		prClip->top += 2 * rCalc.cy;
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocSymbol(CDC &cDC, LPRECT prClip, UINT nSymbolID, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nIDs;
	CImage  *pSymbol;

	for (nID = 0, nIDs = (nSymbolID != (UINT)-1) ? (INT)nSymbolIDs.GetSize() : -1; nID < nIDs; nID++)
	{
		if (nSymbolIDs.GetAt(nID) == nSymbolID) break;
		continue;
	}
	if ((pSymbol = (nID < nIDs) ? (CImage *)pSymbols.GetAt(nID) : (CImage *)NULL) && prClip->right - prClip->left > 0 && prClip->bottom - prClip->top > 0)
	{
		pSymbol->Draw(cDC.GetSafeHdc(), prClip->left, prClip->top, prClip->right - prClip->left, prClip->bottom - prClip->top);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardBufferQueuesWnd::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocSubTitle(LPCTSTR pszType) CONST
{
	return pszType;
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocDetails(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo) CONST
{
	INT  nDigits;
	UINT  nRange[2];
	CString  szDetails;
	CString  szRange[2];
	CTimeKey  tRange[2];
	CStringTools  cStringTools;

	pJobInfo->GetPrintRange(nRange[0], nRange[1]);
	pJobInfo->GetPrintRange(tRange[0], tRange[1]);
	nDigits = max(cStringTools.ConvertUIntToString(nRange[1]).GetLength(), 3);
	szRange[0].Format(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_ITEMRANGESUBTITLE), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[0], nDigits), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[1], nDigits));
	szRange[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_TIMERANGESUBTITLE), (LPCTSTR)tRange[0].FormatGmt(), (LPCTSTR)tRange[1].FormatGmt());
	szDetails = (pJobInfo->GetPrintMode() & (TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE | TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE)) ? STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_SUBTITLE) : EMPTYSTRING;
	szDetails += (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_ITEMRANGE) ? (CString(CR) + CString(EOL) + szRange[0]) : EMPTYSTRING;
	szDetails += (pJobInfo->GetPrintMode() & TCONBOARDBUFFERQUEUES_PRINT_TIMERANGE) ? (CString(CR) + CString(EOL) + szRange[1]) : EMPTYSTRING;
	return szDetails;
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocComments(CONST CTCOnBoardBufferQueuesPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocListTitle(LPCTSTR pszTitle, LPCTSTR pszQueue, UINT nSubScheduleID) CONST
{
	CString  szTitle[2];

	for (szTitle[0].Format(pszTitle, pszQueue), szTitle[1] = szTitle[0]; nSubScheduleID != (UINT)-1; )
	{
		szTitle[1].Format(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_DETAILSITEMSTITLEFORMAT), (LPCTSTR)szTitle[0], nSubScheduleID);
		break;
	}
	return CString(EOL) + CString(EOL) + szTitle[1];
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocListItemsTitle(CONST CStringArray &szColumns) CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szItems;

	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		szItems += (nColumn > 0) ? CString(TAB) : EMPTYSTRING;
		szItems += szColumns.GetAt(nColumn);
	}
	return szItems;
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCOnBoardBufferQueuesWnd::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

INT CTCOnBoardBufferQueuesWnd::ExtractPrintDocText(LPCTSTR pszText, CStringArray &szColumnsText) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szText;

	for (nPos[0] = 0, nLength = lstrlen(pszText), szColumnsText.RemoveAll(); nPos[0] <= nLength; nPos[0] += ++nPos[1])
	{
		if ((nPos[1] = (INT)_tcscspn((szText = pszText + nPos[0]), CString(CTextView::GetColumnDelimiter()))) < nLength - nPos[0])
		{
			szColumnsText.Add((nPos[1] > 0) ? szText.Left(nPos[1]) : EMPTYSTRING);
			continue;
		}
		szColumnsText.Add(szText);
		break;
	}
	return((INT)szColumnsText.GetSize());
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocSubTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocListTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocListItemsFonts(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CFont &cTitleFont, CFont &cItemsFont) CONST
{
	INT  nWidth;
	INT  nHeight;
	CFont  cFont[2];
	CUIntArray  nTabs;

	for (nHeight = max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))); nHeight < 0; nHeight++)
	{
		if (cFont[0].CreateFont(nHeight, 0, pTitleFont->lfEscapement, pTitleFont->lfOrientation, FW_BOLD, pTitleFont->lfItalic, pTitleFont->lfUnderline, pTitleFont->lfStrikeOut, pTitleFont->lfCharSet, pTitleFont->lfOutPrecision, pTitleFont->lfClipPrecision, pTitleFont->lfQuality, pTitleFont->lfPitchAndFamily, pTitleFont->lfFaceName))
		{
			if (cFont[1].CreateFont((4 * nHeight) / 5, 0, pItemsFont->lfEscapement, pItemsFont->lfOrientation, pItemsFont->lfWeight, pItemsFont->lfItalic, pItemsFont->lfUnderline, pItemsFont->lfStrikeOut, pItemsFont->lfCharSet, pItemsFont->lfOutPrecision, pItemsFont->lfClipPrecision, pItemsFont->lfQuality, pItemsFont->lfPitchAndFamily, pItemsFont->lfFaceName))
			{
				if (CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[0], &cFont[1], nTabs) > 0)
				{
					if ((nWidth = nTabs.GetAt(nTabs.GetSize() - 1)) > rArea.right - rArea.left)
					{
						nHeight = (nHeight*(rArea.right - rArea.left)) / nWidth - 1;
						cFont[0].DeleteObject();
						cFont[1].DeleteObject();
						continue;
					}
					cTitleFont.Attach(cFont[0].Detach());
					cItemsFont.Attach(cFont[1].Detach());
					break;
				}
				cFont[1].DeleteObject();
			}
			cFont[0].DeleteObject();
		}
	}
	return((cTitleFont.GetSafeHandle() && cItemsFont.GetSafeHandle()) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

INT CTCOnBoardBufferQueuesWnd::CalcPrintDocTitleWidth(CDC &cDC, LPCTSTR pszColumn, CFont *pTitleFont) CONST
{
	INT  nWidth;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pTitleFont)))
	{
		nWidth = cDC.GetTextExtent(pszColumn, lstrlen(pszColumn)).cx;
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}
INT CTCOnBoardBufferQueuesWnd::CalcPrintDocTitleWidth(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CFont *pTitleFont, CFont *pItemsFont, CUIntArray &nTabs) CONST
{
	INT  nIndent;
	INT  nColumn;
	INT  nColumns;
	INT  nWidth[2];
	CSize  sizeSymbol;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;
	CStringArray  szLines;

	for (nIndent = 0, sizeSymbol.cx = sizeSymbol.cy = 0, nTabs.RemoveAll(); (pOldFont = cDC.SelectObject(pTitleFont)); )
	{
		nIndent = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmAveCharWidth, nIndent) : nIndent;
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		if (cDC.GetTextMetrics(&tmFont))
		{
			sizeSymbol.cx = tmFont.tmHeight;
			sizeSymbol.cy = tmFont.tmHeight;
			nIndent = max(tmFont.tmAveCharWidth, nIndent);
		}
		cDC.SelectObject(pOldFont);
	}
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), szLines.Copy(szContents); nColumn < nColumns; nColumn++)
	{
		for (nWidth[0] = CalcPrintDocTitleWidth(cDC, szColumns.GetAt(nColumn), pTitleFont), nWidth[1] = CalcPrintDocColumnWidth(cDC, rArea, szColumns.GetAt(nColumn), szLines, pItemsFont); szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME) || szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER); )
		{
			nWidth[1] += 3 * sizeSymbol.cx / 2;
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_ARGUMENTS); )
		{
			nWidth[1] = min(3 * nWidth[0], nWidth[1]);
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_FLAGS); )
		{
			nWidth[1] = (sizeSymbol.cx > 0) ? (11 * sizeSymbol.cx / 2) : nWidth[1];
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PTVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_PEVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_CEVCHECKS); )
		{
			nWidth[1] = sizeSymbol.cx;
			break;
		}
		nTabs.Add((nTabs.GetSize() > 0) ? (2 * nIndent + nTabs.GetAt(nTabs.GetSize() - 1) + max(nWidth[0], nWidth[1])) : (2 * nIndent + max(nWidth[0], nWidth[1])));
	}
	if (nTabs.GetSize() > 0)
	{
		nTabs.SetAt(nTabs.GetSize() - 1, nTabs.GetAt(nTabs.GetSize() - 1) - nIndent);
		return((INT)nTabs.GetSize());
	}
	return 0;
}

INT CTCOnBoardBufferQueuesWnd::CalcPrintDocColumnWidth(CDC &cDC, CONST RECT &rArea, LPCTSTR pszColumn, CStringArray &szContents, CFont *pItemsFont) CONST
{
	INT  nPos;
	INT  nLine;
	INT  nLines;
	INT  nWidth;
	CRect  rColumn;
	CFont  *pOldFont;
	CString  szLine;

	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		for (nLine = 0, nLines = (INT)szContents.GetSize(), nWidth = 0; nLine < nLines; nLine++)
		{
			if ((nPos = szContents.GetAt(nLine).Find(CTextView::GetColumnDelimiter())) >= 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME)) || !lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESDETAILS_TITLEITEM_NUMBER)) && szContents.GetAt(nLine).Left(nPos).Find((!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME))) ? CTCOnBoardBufferQueuesPageSummaryTextView::GetSymbolDelimiter() : CTCOnBoardBufferQueuesPageDetailsTextView::GetSymbolDelimiter()) >= 0) ? szContents.GetAt(nLine).Left(nPos).Left(szContents.GetAt(nLine).Left(nPos).Find((!lstrcmp(pszColumn, STRING(IDS_TCONBOARDBUFFERQUEUESSUMMARY_TITLEITEM_NAME))) ? CTCOnBoardBufferQueuesPageSummaryTextView::GetSymbolDelimiter() : CTCOnBoardBufferQueuesPageDetailsTextView::GetSymbolDelimiter())) : szContents.GetAt(nLine).Left(nPos))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, szContents.GetAt(nLine).Mid(nPos + 1));
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
			if (szContents.GetAt(nLine).GetLength() > 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = szContents.GetAt(nLine))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, EMPTYSTRING);
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
		}
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}

BOOL CTCOnBoardBufferQueuesWnd::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::SetLayoutInfo(INT nIndex, CONST CByteArray &nPagesInfo)
{
	INT  cbPage;
	INT  cbPages;
	INT  cbData;
	CString  szName;
	CUIntArray  nWidths[2];
	CUIntArray  nColumns[2];
	CByteArray  nPageInfo;
	CStringArray  szPages;
	PAGEDATA  sPageData;

	for (cbPages = 0; cbPages < nPagesInfo.GetSize(); cbPages += cbPage)
	{
		for (CopyMemory(&cbPage, nPagesInfo.GetData() + cbPages, sizeof(cbPage)), nPageInfo.SetSize(max(min(cbPage, nPagesInfo.GetSize() - cbPages), 0)); nPageInfo.GetSize() >= 0; )
		{
			CopyMemory(nPageInfo.GetData(), nPagesInfo.GetData() + cbPages, nPageInfo.GetSize());
			break;
		}
		for (CopyMemory(&sPageData, nPageInfo.GetData(), (nPageInfo.GetSize() >= sizeof(PAGEDATA)) ? sizeof(sPageData) : 0), szName.Empty(); nPageInfo.GetSize() >= sizeof(PAGEDATA) && nPageInfo.GetSize() == sPageData.cbSize && sPageData.cbSize == sizeof(PAGEDATA) + sPageData.cbName + sPageData.cbColumns[0][0] + sPageData.cbColumns[0][1] + sPageData.cbColumns[1][0] + sPageData.cbColumns[1][1] && sPageData.cbName > 0 && sPageData.cbColumns[0][0] >= 0 && sPageData.cbColumns[0][1] >= 0 && sPageData.cbColumns[1][0] >= 0 && sPageData.cbColumns[1][1] >= 0; )
		{
			for (nColumns[0].SetSize(sPageData.cbColumns[0][0] / sizeof(UINT)), nWidths[0].SetSize(sPageData.cbColumns[0][1] / sizeof(UINT)), nColumns[1].SetSize(sPageData.cbColumns[1][0] / sizeof(UINT)), nWidths[1].SetSize(sPageData.cbColumns[1][1] / sizeof(UINT)), CopyMemory(szName.GetBufferSetLength(STRINGCHARS(sPageData.cbName)), nPageInfo.GetData() + (cbData = sizeof(PAGEDATA)), STRINGBYTES(sPageData.cbName)), CopyMemory(nColumns[0].GetData(), nPageInfo.GetData() + (cbData = cbData + sPageData.cbName), sPageData.cbColumns[0][0]), CopyMemory(nWidths[0].GetData(), nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[0][0]), sPageData.cbColumns[0][1]), CopyMemory(nColumns[1].GetData(), nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[0][1]), sPageData.cbColumns[1][0]), CopyMemory(nWidths[1].GetData(), nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[1][0]), sPageData.cbColumns[1][1]), szName.ReleaseBuffer(); !m_wndView.SetLayout(szName, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[0], nWidths[0], sPageData.sizePanes[0]) || !m_wndView.SetListTitleFont(szName, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageData.sFont[0][0]) || !m_wndView.SetListItemsFont(szName, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageData.sFont[0][1]) || !m_wndView.SetLayoutInfo(szName, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, sPageData.nQueue, &sPageData.sScrollInfo[0][0], &sPageData.sScrollInfo[0][1]) || !m_wndView.SetLayout(szName, TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1], nWidths[1], sPageData.sizePanes[1]) || !m_wndView.SetListTitleFont(szName, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageData.sFont[1][0]) || !m_wndView.SetListItemsFont(szName, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageData.sFont[1][1]) || !m_wndView.SetGridBackgroundColor(szName, TCONBOARDBUFFERQUEUES_PANE_DETAILS, sPageData.nColor) || !m_wndView.SetLayoutInfo(szName, TCONBOARDBUFFERQUEUES_PANE_DETAILS, sPageData.nQueue, &sPageData.sScrollInfo[1][0], &sPageData.sScrollInfo[1][1]); )
			{
				szName.Empty();
				break;
			}
			break;
		}
		if (szName.IsEmpty()) break;
	}
	return((cbPages >= nPagesInfo.GetSize()) ? (nIndex < m_wndView.EnumQueuePages(szPages) && m_wndView.SetQueuePage(szPages.GetAt(nIndex))) : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::GetLayoutInfo(INT &nIndex, CByteArray &nPagesInfo) CONST
{
	INT  nPage;
	INT  nPages;
	INT  cbData;
	CSize  sizePanes[2];
	CUIntArray  nWidths[2];
	CUIntArray  nColumns[2];
	CByteArray  nPageInfo;
	CStringArray  szPages;
	PAGEDATA  sPageData;

	for (nPage = 0, nPages = EnumQueuePages(szPages), nIndex = 0, nPagesInfo.RemoveAll(); nPage < nPages; nPage++)
	{
		if (m_wndView.GetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[0], nWidths[0], sizePanes[0]) && m_wndView.GetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageData.sFont[0][0]) && m_wndView.GetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sPageData.sFont[0][1]) && m_wndView.GetLayoutInfo(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_SUMMARY, sPageData.nQueue, &sPageData.sScrollInfo[0][0], &sPageData.sScrollInfo[0][1]) && m_wndView.GetLayout(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1], nWidths[1], sizePanes[1]) && m_wndView.GetListTitleFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageData.sFont[1][0]) && m_wndView.GetListItemsFont(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sPageData.sFont[1][1]) && m_wndView.GetGridBackgroundColor(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, sPageData.nColor) && m_wndView.GetLayoutInfo(szPages.GetAt(nPage), TCONBOARDBUFFERQUEUES_PANE_DETAILS, sPageData.nQueue, &sPageData.sScrollInfo[1][0], &sPageData.sScrollInfo[1][1]))
		{
			for (nIndex = (szPages.GetAt(nPage) == m_wndView.GetQueuePage()) ? nPage : nIndex, sPageData.cbName = (szPages.GetAt(nPage).GetLength() + 1)*sizeof(TCHAR), sPageData.cbColumns[0][0] = (INT)(nColumns[0].GetSize()*sizeof(UINT)), sPageData.cbColumns[0][1] = (INT)(nWidths[0].GetSize()*sizeof(UINT)), sPageData.cbColumns[1][0] = (INT)(nColumns[1].GetSize()*sizeof(UINT)), sPageData.cbColumns[1][1] = (INT)(nWidths[1].GetSize()*sizeof(UINT)), sPageData.sizePanes[0].cx = sizePanes[0].cx, sPageData.sizePanes[0].cy = sizePanes[0].cy, sPageData.sizePanes[1].cx = sizePanes[1].cx, sPageData.sizePanes[1].cy = sizePanes[1].cy, sPageData.cbSize = sizeof(PAGEDATA) + sPageData.cbName + sPageData.cbColumns[0][0] + sPageData.cbColumns[0][1] + sPageData.cbColumns[1][0] + sPageData.cbColumns[1][1], nPageInfo.SetSize(sPageData.cbSize); nPageInfo.GetSize() == sPageData.cbSize; )
			{
				CopyMemory(nPageInfo.GetData(), &sPageData, sizeof(PAGEDATA));
				CopyMemory(nPageInfo.GetData() + (cbData = sizeof(PAGEDATA)), (LPCTSTR)szPages.GetAt(nPage), sPageData.cbName);
				CopyMemory(nPageInfo.GetData() + (cbData = cbData + sPageData.cbName), nColumns[0].GetData(), sPageData.cbColumns[0][0]);
				CopyMemory(nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[0][0]), nWidths[0].GetData(), sPageData.cbColumns[0][1]);
				CopyMemory(nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[0][1]), nColumns[1].GetData(), sPageData.cbColumns[1][0]);
				CopyMemory(nPageInfo.GetData() + (cbData = cbData + sPageData.cbColumns[1][0]), nWidths[1].GetData(), sPageData.cbColumns[1][1]);
				nPagesInfo.Append(nPageInfo);
				break;
			}
			continue;
		}
		break;
	}
	return((nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::Lock()
{
	return((GetTCService()->Lock() && CDisplayWnd::Lock()) ? TRUE : FALSE);
}

BOOL CTCOnBoardBufferQueuesWnd::Unlock()
{
	return((CDisplayWnd::Unlock() && GetTCService()->Unlock()) ? TRUE : FALSE);
}

BEGIN_MESSAGE_MAP(CTCOnBoardBufferQueuesWnd, CDisplayWnd)
	//{{AFX_MSG_MAP(CTCOnBoardBufferQueuesWnd)
	ON_WM_CREATE()
	ON_WM_GETMINMAXINFO()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESSETTINGS, OnSettings)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESDETAILS, OnDetails)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESDELETE, OnDelete)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESSTART, OnStart)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESSTOP, OnStop)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESACKNOWLEDGE, OnAcknowledge)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESDUMP, OnDump)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESRESET, OnReset)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESFULLVIEWMODE, OnFullViewMode)
	ON_COMMAND(IDM_TCONBOARDBUFFERQUEUESPRINT, OnPrint)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESSETTINGS, OnUpdateSettings)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESDETAILS, OnUpdateDetails)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESDELETE, OnUpdateDelete)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESSTART, OnUpdateStart)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESSTOP, OnUpdateStop)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESACKNOWLEDGE, OnUpdateAcknowledge)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESDUMP, OnUpdateDump)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESRESET, OnUpdateReset)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESFULLVIEWMODE, OnUpdateFullViewMode)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDBUFFERQUEUESPRINT, OnUpdatePrint)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MESSAGEPANE, OnUpdateStatusBarMessagePane)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_MODEPANE, OnUpdateStatusBarModePane)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDBUFFERQUEUES_STATUSBAR_TYPEPANE, OnUpdateStatusBarTypePane)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardBufferQueuesWnd message handlers

int CTCOnBoardBufferQueuesWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CDisplayWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (EnableDocking(CBRS_ALIGN_TOP); CreateToolBar() && CreateStatusBar() && CreateView() && LoadAccelTable(MAKEINTRESOURCE(IDR_TCONBOARDBUFFERQUEUESFRAME)); )
		{
			UpdateBars();
			return 0;
		}
	}
	return -1;
}

void CTCOnBoardBufferQueuesWnd::OnGetMinMaxInfo(MINMAXINFO *lpMMI)
{
	CRect  rView;
	CRect  rToolBar;
	CRect  rStatusBar;

	for (rView.SetRectEmpty(); IsWindow(m_wndView.GetSafeHwnd()); )
	{
		rView.SetRect(0, 0, m_wndView.GetTrackSize().cx, m_wndView.GetTrackSize().cy);
		break;
	}
	for (rToolBar.SetRectEmpty(); IsWindow(m_wndToolBar.GetSafeHwnd()); )
	{
		m_wndToolBar.GetWindowRect(rToolBar);
		break;
	}
	for (rStatusBar.SetRectEmpty(); IsWindow(m_wndStatusBar.GetSafeHwnd()); )
	{
		m_wndStatusBar.GetWindowRect(rStatusBar);
		break;
	}
	lpMMI->ptMinTrackSize.x = max(lpMMI->ptMinTrackSize.x, 2 * GetSystemMetrics(SM_CXFRAME) + rView.Width());
	lpMMI->ptMinTrackSize.y = max(lpMMI->ptMinTrackSize.y, 2 * (GetSystemMetrics(SM_CYFRAME) + GetSystemMetrics(SM_CYEDGE)) + GetSystemMetrics(SM_CYCAPTION) + rToolBar.Height() + rView.Height() + rStatusBar.Height());
	CDisplayWnd::OnGetMinMaxInfo(lpMMI);
}

void CTCOnBoardBufferQueuesWnd::OnSize(UINT nType, int cx, int cy)
{
	CDisplayWnd::OnSize(nType, cx, cy);
	m_wndView.RecalcLayout();
}

BOOL CTCOnBoardBufferQueuesWnd::OnEraseBkgnd(CDC *pDC)
{
	CRect  rView;
	CRect  rPage[3];

	if (!IsInitialized())
	{
		m_wndView.UpdateWindow();
		m_wndToolBar.UpdateWindow();
		m_wndStatusBar.UpdateWindow();
	}
	for (GetClientRect(rView), m_wndView.GetItemRect(0, rPage[0]), m_wndView.GetItemRect(m_wndView.GetCurSel(), rPage[1]), m_wndView.GetItemRect(m_wndView.GetItemCount() - 1, rPage[2]), m_wndView.ClientToScreen(rPage[0]), m_wndView.ClientToScreen(rPage[1]), m_wndView.ClientToScreen(rPage[2]), ScreenToClient(rPage[0]), ScreenToClient(rPage[1]), ScreenToClient(rPage[2]), rPage[0].InflateRect((!m_wndView.GetCurSel()) ? m_wndView.GetMargins().cx : 0, 0, 0, 0), rPage[1].InflateRect(0, m_wndView.GetMargins().cy); m_wndView.GetCurSel() != m_wndView.GetItemCount() - 1; )
	{
		rPage[2].DeflateRect(0, 0, m_wndView.GetMargins().cx, 0);
		break;
	}
	rView.SetRect(rView.left, rView.top, rView.right, rPage[0].bottom);
	pDC->ExcludeClipRect(rPage[0].left, rPage[0].top, rPage[2].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[2].bottom);
	pDC->ExcludeClipRect(rPage[1].left, rPage[1].top, rPage[1].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[1].bottom);
	pDC->FillSolidRect(rView, GetSysColor(COLOR_BTNFACE));
	return TRUE;
}

void CTCOnBoardBufferQueuesWnd::OnSetFocus(CWnd *pOldWnd)
{
	CStringArray  szPages;

	if (pOldWnd->GetSafeHwnd() == m_wndView.GetSafeHwnd())
	{
		GetParent()->SetFocus();
		return;
	}
	if (m_wndView.EnumQueuePages(szPages) > 0)
	{
		m_wndView.SetFocus();
		return;
	}
	CDisplayWnd::OnSetFocus(pOldWnd);
}

BOOL CTCOnBoardBufferQueuesWnd::OnCloseSettingsDialog(UINT nCode)
{
	INT  nPage;
	INT  nPages;
	BOOL  bToolTips;
	CString  szPage;
	COLORREF  nColor;
	LOGFONT  sTitleFont[2];
	LOGFONT  sItemsFont[2];
	CUIntArray  nColumns[2];
	CStringArray  szPages;
	CTCOnBoardBufferQueuesPrintJobs  pJobs;

	if (nCode == IDOK)
	{
		if (m_dlgSettings.IsLayoutModified())
		{
			for (nPage = 0, nPages = GetTCService()->EnumTCOnBoardBufferTypes(szPages), m_dlgSettings.GetToolTipMode(bToolTips); nPage < nPages; nPage++)
			{
				szPage.Format(STRING(IDS_TCONBOARDBUFFERQUEUES_BUFFERTYPE_FORMAT), (LPCTSTR)szPages.GetAt(nPage));
				m_dlgSettings.GetColumns(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[0]);
				m_dlgSettings.GetColumns(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1]);
				m_dlgSettings.GetTitleFont(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sTitleFont[0]);
				m_dlgSettings.GetTitleFont(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sTitleFont[1]);
				m_dlgSettings.GetItemsFont(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sItemsFont[0]);
				m_dlgSettings.GetItemsFont(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sItemsFont[1]);
				m_dlgSettings.GetGridBackgroundColor(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColor);
				if (!SetLayout(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, nColumns[0]) || !SetLayout(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColumns[1]) || !SetListTitleFont(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sTitleFont[0]) || !SetListTitleFont(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sTitleFont[1]) || !SetListItemsFont(szPage, TCONBOARDBUFFERQUEUES_PANE_SUMMARY, &sItemsFont[0]) || !SetListItemsFont(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, &sItemsFont[1]) || !SetGridBackgroundColor(szPage, TCONBOARDBUFFERQUEUES_PANE_DETAILS, nColor)) return FALSE;
			}
			if (!EnableToolTipMode(bToolTips)) return FALSE;
		}
		if (m_dlgSettings.IsPrintingModified())
		{
			m_dlgSettings.GetPrintJobs(pJobs);
			if (!SetPrintJobs(pJobs)) return FALSE;
		}
		UpdateContents();
		UpdateAllPanes();
	}
	return TRUE;
}

void CTCOnBoardBufferQueuesWnd::OnSettings()
{
	ReportEvent((m_dlgSettings.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnDetails()
{
	CHourglassCursor  cCursor;

	ShowTelecommandProperties();
}

void CTCOnBoardBufferQueuesWnd::OnDelete()
{
	CHourglassCursor  cCursor;

	DoDeleteTelecommand();
}

void CTCOnBoardBufferQueuesWnd::OnStart()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgStart.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnStop()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgStop.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnAcknowledge()
{
	CHourglassCursor  cCursor;

	DoAcknowledgeQueue();
}

void CTCOnBoardBufferQueuesWnd::OnDump()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgDump.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnReset()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgReset.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnFullViewMode()
{
	CHourglassCursor  cCursor;

	EnableFullViewMode(!IsFullViewModeEnabled());
}

void CTCOnBoardBufferQueuesWnd::OnPrint()
{
	CHourglassCursor  cCursor;

	ReportEvent((!Print()) ? SYSTEM_WARNING_DISPLAY_PRINT_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardBufferQueuesWnd::OnDestroy()
{
	CHourglassCursor  cCursor;

	Stop();
	CDisplayWnd::OnDestroy();
}

void CTCOnBoardBufferQueuesWnd::OnUpdateSettings(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsWindow(m_dlgSettings.GetSafeHwnd()));
}

void CTCOnBoardBufferQueuesWnd::OnUpdateDetails(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanShowTelecommandProperties());
	pCmdUI->SetCheck(IsShowingTelecommandProperties());
}

void CTCOnBoardBufferQueuesWnd::OnUpdateDelete(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanDeleteTelecommand());
}

void CTCOnBoardBufferQueuesWnd::OnUpdateStart(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CheckCurQueue(TCONBOARDBUFFERQUEUE_FLAG_ALLOWSTATUSCHANGE) && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	pCmdUI->SetCheck(IsWindow(m_dlgStart.GetSafeHwnd()));
}

void CTCOnBoardBufferQueuesWnd::OnUpdateStop(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CheckCurQueue(TCONBOARDBUFFERQUEUE_FLAG_ALLOWSTATUSCHANGE) && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	pCmdUI->SetCheck(IsWindow(m_dlgStop.GetSafeHwnd()));
}

void CTCOnBoardBufferQueuesWnd::OnUpdateAcknowledge(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanAcknowledgeQueue());
}

void CTCOnBoardBufferQueuesWnd::OnUpdateDump(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CheckCurQueue(TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDOWNLOADBYSEQUENCECOUNTER) && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	pCmdUI->SetCheck(IsWindow(m_dlgDump.GetSafeHwnd()));
}

void CTCOnBoardBufferQueuesWnd::OnUpdateReset(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CheckCurQueue(TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEALL | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYRANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYTIMERANGE | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSUBSYSTEM | TCONBOARDBUFFERQUEUE_FLAG_ALLOWDELETEBYSEQUENCECOUNTER) && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	pCmdUI->SetCheck(IsWindow(m_dlgReset.GetSafeHwnd()));
}

void CTCOnBoardBufferQueuesWnd::OnUpdateFullViewMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsFullViewModeEnabled());
}

void CTCOnBoardBufferQueuesWnd::OnUpdatePrint(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((IsInitialized() && IsDefaultPrinterAvailable() && CanPrint()) ? TRUE : FALSE);
}

void CTCOnBoardBufferQueuesWnd::OnUpdateStatusBarMessagePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCOnBoardBufferQueuesWnd::OnUpdateStatusBarModePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCOnBoardBufferQueuesWnd::OnUpdateStatusBarTypePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesProcessorItem

CTCOnBoardMemoryImagesProcessorItem::CTCOnBoardMemoryImagesProcessorItem() : CDatabaseOBProcessor()
{
	m_nDumpIntervalTolerance = 0;
	m_nMemoryImageVersioning[0] = TCONBOARDMEMORYIMAGE_VERSIONING_NONE;
	m_nMemoryImageVersioning[1] = 0;
	m_nMemoryImageVersionLimit = 0;
	m_tLastPatchTime = 0;
	m_tLastDumpTime = 0;
}

BOOL CTCOnBoardMemoryImagesProcessorItem::SetMasterImage(CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return m_cMasterImage.Copy(pImage);
}

BOOL CTCOnBoardMemoryImagesProcessorItem::GetMasterImage(CDatabaseOBProcessorMemoryImage *pImage) CONST
{
	return pImage->Copy(&m_cMasterImage);
}
CString CTCOnBoardMemoryImagesProcessorItem::GetMasterImage() CONST
{
	return m_cMasterImage.GetName();
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetMemoryImageVersioning(LPCTSTR pszPrefix, UINT nFormat, UINT nInfo)
{
	m_szMemoryImageVersioning = pszPrefix;
	m_nMemoryImageVersioning[0] = nFormat;
	m_nMemoryImageVersioning[1] = nInfo;
}

BOOL CTCOnBoardMemoryImagesProcessorItem::GetMemoryImageVersioning(CString &szPrefix, UINT &nFormat, UINT &nInfo) CONST
{
	szPrefix = m_szMemoryImageVersioning;
	nFormat = m_nMemoryImageVersioning[0];
	nInfo = m_nMemoryImageVersioning[1];
	return((nFormat != TCONBOARDMEMORYIMAGE_VERSIONING_NONE) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetMemoryImageVersionLimit(UINT nLimit)
{
	m_nMemoryImageVersionLimit = nLimit;
}

UINT CTCOnBoardMemoryImagesProcessorItem::GetMemoryImageVersionLimit() CONST
{
	return m_nMemoryImageVersionLimit;
}

CString CTCOnBoardMemoryImagesProcessorItem::GetMemoryImageVersion(LPCTSTR pszName, INT nIndex) CONST
{
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion;
	TIMEKEY  tMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry[2];

	if ((pMemoryArea = GetAt(Find(pszName))))
	{
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
		{
			if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage) && pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && pMemoryImageBlock->GetVersion() != szVersion)
					{
						if ((pMemoryAreaCatalogueEntry[0] = pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(pMemoryImageBlock->GetVersion()))) != (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL)
						{
							for (nEntry = 0, nEntries = (INT)pMemoryAreaCatalogue->GetSize(), nCount = ((tMemoryImage[0] = CTimeTag(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? 0 : -1; nEntry < nEntries && nCount >= 0; nEntry++)
							{
								if ((pMemoryAreaCatalogueEntry[1] = pMemoryAreaCatalogue->GetAt(nEntry)) && pMemoryAreaCatalogueEntry[0]->GetVersion() != pMemoryAreaCatalogueEntry[1]->GetVersion() && pMemoryImage->Find(pMemoryAreaCatalogueEntry[1]->GetVersion()) >= 0 && (tMemoryImage[1] = CTimeTag(0).ParseGmt(pMemoryAreaCatalogueEntry[1]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[1]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0 && tMemoryImage[1] <= tMemoryImage[0])
								{
									nCount++;
									continue;
								}
							}
							if (nIndex == nCount)
							{
								szVersion = pMemoryImageBlock->GetVersion();
								break;
							}
						}
						szVersion = pMemoryImageBlock->GetVersion();
					}
				}
				delete pMemoryImage;
				delete pMemoryAreaCatalogue;
				return((nMemoryBlock < nMemoryBlocks) ? szVersion : EMPTYSTRING);
			}
			delete pMemoryImage;
		}
	}
	return EMPTYSTRING;
}

INT CTCOnBoardMemoryImagesProcessorItem::FindMemoryImageVersion(LPCTSTR pszName, LPCTSTR pszVersion) CONST
{
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	CString  szVersion;
	TIMEKEY  tMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry[2];

	if ((pMemoryArea = GetAt(Find(pszName))))
	{
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
		{
			if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
			{
				if ((pMemoryAreaCatalogueEntry[0] = ((pMemoryImageBlock = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? pMemoryImage->GetAt(pMemoryImage->Find(pszVersion)) : (CDatabaseOBProcessorMemoryImageBlock *)NULL) && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(pszVersion)) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
				{
					for (nEntry = 0, nEntries = (INT)pMemoryAreaCatalogue->GetSize(), nIndex = ((tMemoryImage[0] = CTimeTag(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? 0 : -1; nEntry < nEntries && nIndex >= 0; nEntry++)
					{
						if ((pMemoryAreaCatalogueEntry[1] = pMemoryAreaCatalogue->GetAt(nEntry)) && pMemoryAreaCatalogueEntry[0]->GetVersion() != pMemoryAreaCatalogueEntry[1]->GetVersion() && pMemoryImage->Find(pMemoryAreaCatalogueEntry[1]->GetVersion()) >= 0 && (tMemoryImage[1] = CTimeTag(0).ParseGmt(pMemoryAreaCatalogueEntry[1]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[1]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0 && tMemoryImage[1] <= tMemoryImage[0])
						{
							nIndex++;
							continue;
						}
					}
					delete pMemoryImage;
					delete pMemoryAreaCatalogue;
					return nIndex;
				}
				delete pMemoryAreaCatalogue;
			}
			delete pMemoryImage;
		}
	}
	return -1;
}

INT CTCOnBoardMemoryImagesProcessorItem::GetMemoryImageVersionCount(LPCTSTR pszName) CONST
{
	INT  nCount;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	if ((pMemoryArea = GetAt(Find(pszName))))
	{
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
		{
			if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage) && pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? (INT)pMemoryImage->GetSize() : 0, nCount = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && pMemoryImageBlock->GetVersion() != szVersion)
					{
						if ((pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(pMemoryImageBlock->GetVersion()))) && pMemoryAreaCatalogueEntry->GetDate().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) >= 0 && pMemoryAreaCatalogueEntry->GetTime().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) >= 0)
						{
							szVersion = pMemoryImageBlock->GetVersion();
							nCount++;
						}
					}
				}
				delete pMemoryImage;
				delete pMemoryAreaCatalogue;
				return nCount;
			}
			delete pMemoryImage;
		}
	}
	return 0;
}

BOOL CTCOnBoardMemoryImagesProcessorItem::SetMemoryDumps(CONST CMemoryDumps &pDumps)
{
	return m_pMemoryDumps.Copy(&pDumps, TRUE);
}

INT CTCOnBoardMemoryImagesProcessorItem::GetMemoryDumps(CMemoryDumps &pDumps) CONST
{
	return((pDumps.Copy(&m_pMemoryDumps, TRUE)) ? (INT)pDumps.GetSize() : 0);
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetDumpIntervalTolerance(UINT nTolerance)
{
	m_nDumpIntervalTolerance = nTolerance;
}

UINT CTCOnBoardMemoryImagesProcessorItem::GetDumpIntervalTolerance() CONST
{
	return m_nDumpIntervalTolerance;
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetLastPatchTime(CONST CTimeTag &tTime)
{
	m_tLastPatchTime = tTime;
}

CTimeTag CTCOnBoardMemoryImagesProcessorItem::GetLastPatchTime() CONST
{
	return m_tLastPatchTime;
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetLastDumpTime(CONST CTimeTag &tTime)
{
	m_tLastDumpTime = tTime;
}

CTimeTag CTCOnBoardMemoryImagesProcessorItem::GetLastDumpTime() CONST
{
	return m_tLastDumpTime;
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetDumpAlerts(CONST CUIntArray &nAlertTypes, CONST CStringArray &szAlerts, CONST CTimeKeyArray &tAlerts)
{
	m_szDumpAlerts.Copy(szAlerts);
	m_nDumpAlerts.Copy(nAlertTypes);
	m_tDumpAlerts.Copy(tAlerts);
}

INT CTCOnBoardMemoryImagesProcessorItem::GetDumpAlerts(CUIntArray &nAlertTypes, CStringArray &szAlerts, CTimeKeyArray &tAlerts) CONST
{
	szAlerts.Copy(m_szDumpAlerts);
	nAlertTypes.Copy(m_nDumpAlerts);
	tAlerts.Copy(m_tDumpAlerts);
	return((INT)szAlerts.GetSize());
}
INT CTCOnBoardMemoryImagesProcessorItem::GetDumpAlerts(UINT nAlertType) CONST
{
	INT  nIndex;
	INT  nCount[2];

	for (nIndex = 0, nCount[0] = (INT)m_szDumpAlerts.GetSize(), nCount[1] = 0; nIndex < nCount[0] && nAlertType != (UINT)-1; nIndex++)
	{
		nCount[1] = (m_nDumpAlerts.GetAt(nIndex) == nAlertType) ? (nCount[1] + 1) : nCount[1];
		continue;
	}
	return((nAlertType != (UINT)-1) ? nCount[1] : nCount[0]);
}

VOID CTCOnBoardMemoryImagesProcessorItem::SetLastDumpAlert(UINT nAlertType, LPCTSTR pszAlert, CONST CTimeKey &tAlert)
{
	if (nAlertType != (UINT)-1)
	{
		if (!m_szDumpAlerts.GetSize() || m_szDumpAlerts.GetAt(m_szDumpAlerts.GetUpperBound()).Compare(pszAlert) || m_nDumpAlerts.GetAt(m_nDumpAlerts.GetUpperBound()) != nAlertType)
		{
			m_szDumpAlerts.Add(pszAlert);
			m_nDumpAlerts.Add(nAlertType);
			m_tDumpAlerts.Add(tAlert);
			return;
		}
		m_tDumpAlerts.SetAt((INT)m_tDumpAlerts.GetUpperBound(), tAlert);
		return;
	}
	if (m_szDumpAlerts.GetSize() > 0)
	{
		m_szDumpAlerts.RemoveAt((INT)m_szDumpAlerts.GetUpperBound());
		m_nDumpAlerts.RemoveAt((INT)m_nDumpAlerts.GetUpperBound());
		m_tDumpAlerts.RemoveAt((INT)m_tDumpAlerts.GetUpperBound());
	}
}

BOOL CTCOnBoardMemoryImagesProcessorItem::GetLastDumpAlert(UINT &nAlertType, CString &szAlert, CTimeKey &tAlert) CONST
{
	for (szAlert.Empty(), nAlertType = (UINT)-1, tAlert = 0; m_szDumpAlerts.GetSize() > 0; )
	{
		szAlert = m_szDumpAlerts.GetAt((INT)m_szDumpAlerts.GetUpperBound());
		nAlertType = m_nDumpAlerts.GetAt((INT)m_nDumpAlerts.GetUpperBound());
		tAlert = m_tDumpAlerts.GetAt((INT)m_tDumpAlerts.GetUpperBound());
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesProcessorItem::Copy(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	m_tLastDumpTime = pItem->m_tLastDumpTime;
	m_tLastPatchTime = pItem->m_tLastPatchTime;
	m_tDumpAlerts.Copy(pItem->m_tDumpAlerts);
	m_nDumpAlerts.Copy(pItem->m_nDumpAlerts);
	m_szDumpAlerts.Copy(pItem->m_szDumpAlerts);
	m_nDumpIntervalTolerance = pItem->m_nDumpIntervalTolerance;
	m_szMemoryImageVersioning = pItem->m_szMemoryImageVersioning;
	m_nMemoryImageVersionLimit = pItem->m_nMemoryImageVersionLimit;
	m_nMemoryImageVersioning[0] = pItem->m_nMemoryImageVersioning[0];
	m_nMemoryImageVersioning[1] = pItem->m_nMemoryImageVersioning[1];
	return((m_cMasterImage.Copy(&pItem->m_cMasterImage) && m_pMemoryDumps.Copy(&pItem->m_pMemoryDumps)) ? CDatabaseOBProcessor::Copy(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesProcessorItem::Compare(CONST CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (pItem->m_cMasterImage.Compare(&m_cMasterImage) && pItem->m_pMemoryDumps.Compare(&m_pMemoryDumps) && pItem->m_szMemoryImageVersioning == m_szMemoryImageVersioning && pItem->m_nMemoryImageVersioning[0] == m_nMemoryImageVersioning[0] && pItem->m_nMemoryImageVersioning[1] == m_nMemoryImageVersioning[1] && pItem->m_nMemoryImageVersionLimit == m_nMemoryImageVersionLimit && pItem->m_nDumpIntervalTolerance == m_nDumpIntervalTolerance && pItem->m_tLastPatchTime == m_tLastPatchTime && pItem->m_tLastDumpTime == m_tLastDumpTime && pItem->m_szDumpAlerts.GetSize() == m_szDumpAlerts.GetSize() && pItem->m_tDumpAlerts.GetSize() == m_tDumpAlerts.GetSize()) ? (INT)m_szDumpAlerts.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		if (pItem->m_szDumpAlerts.GetAt(nIndex) != m_szDumpAlerts.GetAt(nIndex) || pItem->m_nDumpAlerts.GetAt(nIndex) != m_nDumpAlerts.GetAt(nIndex) || pItem->m_tDumpAlerts.GetAt(nIndex) != m_tDumpAlerts.GetAt(nIndex)) break;
		continue;
	}
	return((nIndex == nCount) ? CDatabaseOBProcessor::Compare(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesProcessorItem::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CString  szName;
	CString  szPacket;
	CString  szCommand[2];
	CDatabaseTMPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;

	sData.cbName = ((szName = GetName()).GetLength() + 1)*sizeof(TCHAR);
	sData.cbMemoryImageVersioning = (m_szMemoryImageVersioning.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPatchCommand = ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetPatchCommandRef()))) ? (((szCommand[0] = pFunction->GetName()).GetLength() + 1)*sizeof(TCHAR)) : sizeof(TCHAR);
	sData.cbDumpCommand = ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDumpCommandRef()))) ? (((szCommand[1] = pFunction->GetName()).GetLength() + 1)*sizeof(TCHAR)) : sizeof(TCHAR);
	sData.cbDumpPacket = ((pPacket = GetDatabase()->GetTMPackets()->GetAt(GetDumpPacketRef()))) ? (((szPacket = pPacket->GetTag()).GetLength() + 1)*sizeof(TCHAR)) : sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + sData.cbMemoryImageVersioning)), GetAddressRange(sData.nAddressRange[0][0], sData.nAddressRange[0][1], sData.nAddressRange[1][0], sData.nAddressRange[1][1]), sData.nMemoryImageVersioning[0] = m_nMemoryImageVersioning[0], sData.nMemoryImageVersioning[1] = m_nMemoryImageVersioning[1], sData.nMemoryImageVersionLimit = m_nMemoryImageVersionLimit, sData.nDumpIntervalTolerance = m_nDumpIntervalTolerance, sData.tLastPatchTime = m_tLastPatchTime.GetTime(), sData.tLastDumpTime = m_tLastDumpTime.GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)szCommand[0], sData.cbPatchCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), (LPCTSTR)szCommand[1], sData.cbDumpCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), (LPCTSTR)szPacket, sData.cbDumpPacket);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), (LPCTSTR)m_szMemoryImageVersioning, sData.cbMemoryImageVersioning);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesProcessorItem::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CString  szName;
	CString  szPacket;
	CString  szCommand[2];

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + sData.cbMemoryImageVersioning && sData.cbName > 0 && sData.cbPatchCommand > 0 && sData.cbDumpCommand > 0 && sData.cbDumpPacket > 0 && sData.cbMemoryImageVersioning > 0; )
	{
		CopyMemory(szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(szCommand[0].GetBufferSetLength(STRINGCHARS(sData.cbPatchCommand)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbPatchCommand));
		CopyMemory(szCommand[1].GetBufferSetLength(STRINGCHARS(sData.cbDumpCommand)), nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), STRINGBYTES(sData.cbDumpCommand));
		CopyMemory(szPacket.GetBufferSetLength(STRINGCHARS(sData.cbDumpPacket)), nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), STRINGBYTES(sData.cbDumpPacket));
		CopyMemory(m_szMemoryImageVersioning.GetBufferSetLength(STRINGCHARS(sData.cbMemoryImageVersioning)), nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), STRINGBYTES(sData.cbMemoryImageVersioning));
		SetAddressRange(sData.nAddressRange[0][0], sData.nAddressRange[0][1], sData.nAddressRange[1][0], sData.nAddressRange[1][1]);
		SetPatchCommandRef(GetDatabase()->GetTCFunctions()->Find(szCommand[0]));
		SetDumpCommandRef(GetDatabase()->GetTCFunctions()->Find(szCommand[1]));
		SetDumpPacketRef(GetDatabase()->GetTMPackets()->Find(szPacket));
		m_nMemoryImageVersioning[0] = sData.nMemoryImageVersioning[0];
		m_nMemoryImageVersioning[1] = sData.nMemoryImageVersioning[1];
		m_nMemoryImageVersionLimit = sData.nMemoryImageVersionLimit;
		m_nDumpIntervalTolerance = sData.nDumpIntervalTolerance;
		m_tLastPatchTime = sData.tLastPatchTime;
		m_tLastDumpTime = sData.tLastDumpTime;
		m_szMemoryImageVersioning.ReleaseBuffer();
		szCommand[0].ReleaseBuffer();
		szCommand[1].ReleaseBuffer();
		szPacket.ReleaseBuffer();
		szName.ReleaseBuffer();
		SetName(szName);
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesProcessorItems

CTCOnBoardMemoryImagesProcessorItems::CTCOnBoardMemoryImagesProcessorItems() : CPtrArray()
{
	return;
}

CTCOnBoardMemoryImagesProcessorItems::~CTCOnBoardMemoryImagesProcessorItems()
{
	RemoveAll();
}

INT CTCOnBoardMemoryImagesProcessorItems::Add(CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pItem->GetName(), TRUE)) >= 0) InsertAt(nIndex, pItem, 1);
	return nIndex;
}

INT CTCOnBoardMemoryImagesProcessorItems::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTCOnBoardMemoryImagesProcessorItem *CTCOnBoardMemoryImagesProcessorItems::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesProcessorItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesProcessorItem *)NULL);
}

CTCOnBoardMemoryImagesProcessorItem *CTCOnBoardMemoryImagesProcessorItems::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesProcessorItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesProcessorItem *)NULL);
}

VOID CTCOnBoardMemoryImagesProcessorItems::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCOnBoardMemoryImagesProcessorItems::Copy(CONST CTCOnBoardMemoryImagesProcessorItems *pItems)
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems->GetSize(), RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CTCOnBoardMemoryImagesProcessorItem))
		{
			pItem->Copy(pItems->GetAt(nItem));
			InsertAt(nItem, pItem, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesProcessorItems::Compare(CONST CTCOnBoardMemoryImagesProcessorItems *pItems) CONST
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (pItems->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if (!pItems->GetAt(nItem)->Compare(GetAt(nItem))) break;
		continue;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesProcessorItems::Map(CByteArray &nInfo) CONST
{
	INT  nItem;
	INT  nItems;
	CByteArray  nItemData;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(), nInfo.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->Map(nItemData) && nInfo.Append(nItemData) >= 0) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesProcessorItems::Unmap(CONST CByteArray &nInfo)
{
	INT  cbItem;
	INT  cbItems;
	CByteArray  nItemData;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;

	for (cbItems = 0, RemoveAll(); cbItems < nInfo.GetSize(); cbItems += cbItem)
	{
		for (CopyMemory(&cbItem, nInfo.GetData() + cbItems, sizeof(cbItem)), nItemData.SetSize(max(min(cbItem, nInfo.GetSize() - cbItems), 0)); nItemData.GetSize() >= 0; )
		{
			CopyMemory(nItemData.GetData(), nInfo.GetData() + cbItems, nItemData.GetSize());
			break;
		}
		if ((pItem = new CTCOnBoardMemoryImagesProcessorItem))
		{
			if (pItem->Unmap(nItemData) && Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	return((cbItems == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCOnBoardMemoryImagesProcessorItems::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pItem = GetAt(nIndex[0]))) ? ((nIndex[1] = (pItem->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pItem = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pItem->GetName() == pszName) || (bInsert && (((pItem = GetAt(max(nIndex[0] - 1, 0))) && pItem->GetName() != pszName && (pItem = GetAt((INT)min(nIndex[0], GetUpperBound()))) && pItem->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDatabaseThread thread

IMPLEMENT_DYNAMIC(CTCOnBoardMemoryImagesDatabaseThread, CThread)

CTCOnBoardMemoryImagesDatabaseThread::CTCOnBoardMemoryImagesDatabaseThread() : CThread()
{
	m_bFile = TRUE;
	m_bDBMS = TRUE;
	m_tDBMSDelay = 0;
	m_bDBMSQueue = FALSE;
	m_bDBMSStatus = FALSE;
	m_pDatabaseMutex = (CMutex *)NULL;
	m_pTCOnBoardMemoryImagesWnd = (CTCOnBoardMemoryImagesWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::Start(CTCOnBoardMemoryImagesWnd *pTCOnBoardMemoryImagesWnd, CMutex *pDatabaseMutex)
{
	for (m_pTCOnBoardMemoryImagesWnd = pTCOnBoardMemoryImagesWnd, m_pDatabaseMutex = pDatabaseMutex, m_szDBMSDetails.Empty(), m_bDBMSStatus = FALSE, m_bDBMSQueue = FALSE; CreateThread((LPVOID)NULL, THREAD_PRIORITY_BELOW_NORMAL); ) return TRUE;
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::Stop()
{
	return((DestroyThread() >= 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::UpdateMemoryImage(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	CTimeKey  tUpdate;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	if ((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) == 0 || (pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) == 0)
	{
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL  &&  pMemoryImage->Copy(pImage))
		{
			for (m_szProcessors.Add(pszProcessor), m_pMemoryImages.InsertAt(m_pMemoryImages.GetSize(), pMemoryImage, 1), m_nActions.Add(MAKELONG(bOverwrite, bDelete)), m_tUpdates.Add(tUpdate.GetTime()), m_bDBMSQueue = TRUE; !bDelayed; )
			{
				m_bDatabaseUpdate.SetEvent();
				break;
			}
			return TRUE;
		}
		delete pMemoryImage;
		return FALSE;
	}
	return(bDelayed || m_bDatabaseUpdate.SetEvent());
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::SetFlushDelay(CONST CTimeSpan &tDelay)
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_tDBMSDelay = tDelay;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::GetFlushDelay(CTimeSpan &tDelay) CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	tDelay = m_tDBMSDelay;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::EnableFlush(BOOL bDBMS, BOOL bFile)
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_bDBMS = bDBMS;
	m_bFile = bFile;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::IsFlushEnabled(BOOL &bDBMS, BOOL &bFile) CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	bDBMS = m_bDBMS;
	bFile = m_bFile;
	return TRUE;
}

CString CTCOnBoardMemoryImagesDatabaseThread::GetDBMSDetails() CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	return((IsThreadActive()) ? m_szDBMSDetails : EMPTYSTRING);
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::IsDBMSOnline() CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	return((IsThreadActive()) ? m_bDBMSStatus : FALSE);
}

int CTCOnBoardMemoryImagesDatabaseThread::Run()
{
	INT  nIndex;
	INT  nCount;
	UINT  nAction;
	DWORD  dwResult;
	DWORD  dwTimeout;
	CString  szProcessor;
	CTimeSpan  tFlushDelay;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nIndex = 0, nCount = 0, dwTimeout = 0; (dwResult = Wait(m_bDatabaseUpdate, FALSE, dwTimeout)) == WAIT_OBJECT_0 || dwResult == WAIT_OBJECT_0 + 1 || dwResult == WAIT_TIMEOUT; dwTimeout = 1000 * TCONBOARDMEMORYIMAGESDATABASETHREAD_DBMS_INTERVAL)
	{
		if (dwResult == WAIT_TIMEOUT)
		{
			UpdateDBMSStatus();
			continue;
		}
		if ((dwResult = (dwResult == WAIT_OBJECT_0  &&  m_bDBMSQueue) ? (dwResult + 1) : dwResult) == WAIT_OBJECT_0 + 1)
		{
			for (Wait((GetFlushDelay(tFlushDelay)) ? (DWORD)(1000 * (min(tFlushDelay.GetTotalSeconds(), SECONDSPERDAY) + 1)) : 0); m_pDatabaseMutex->Lock(); )
			{
				do
				{
					if (Lock())
					{
						if ((nCount = (INT)m_szProcessors.GetSize()) > nIndex)
						{
							szProcessor = m_szProcessors.GetAt(nIndex);
							pMemoryImage = m_pMemoryImages.GetAt(nIndex);
							nAction = m_nActions.GetAt(nIndex);
							m_szProcessors.RemoveAt(nIndex);
							m_pMemoryImages.RemoveAt(nIndex);
							m_nActions.RemoveAt(nIndex);
						}
						Unlock();
					}
					if (nIndex == nCount)
					{
						if (m_bDBMSQueue)
						{
							m_bDBMSQueue = FALSE;
							continue;
						}
						break;
					}
					FlushToDBMS(szProcessor, pMemoryImage, nAction);
					delete pMemoryImage;
				} while (TRUE);
				FlushToFile();
				ShowErrors();
				m_pDatabaseMutex->Unlock();
				break;
			}
			continue;
		}
		break;
	}
	return 0;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::FlushToDBMS(LPCTSTR pszProcessor, CDatabaseOBProcessorMemoryImage *pImage, UINT nAction)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if (CanFlushToDBMS())
	{
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))))
		{
			if ((pMemoryImage = (!LOWORD(nAction) && !HIWORD(nAction)) ? GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(pImage->GetName())) : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock = nMemoryBlock + 1)
				{
					if ((pMemoryImageBlock = pImage->GetAt(nMemoryBlock)) && pMemoryImage->Find((szVersion = pMemoryImageBlock->GetVersion())) >= 0)
					{
						do
						{
							pImage->RemoveAt(nMemoryBlock);
							delete pMemoryImageBlock;
							nMemoryBlocks--;
							nMemoryBlock--;
						} while ((pMemoryImageBlock = pImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == szVersion);
					}
				}
			}
			if (pImage->GetSize() > 0 || HIWORD(nAction) != 0)
			{
				if (!GetDatabase()->Flush(pProcessor, pImage, (HIWORD(nAction) != 0) ? TRUE : FALSE))
				{
					m_szErrors[0].Add(pImage->GetName());
					return FALSE;
				}
			}
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::CanFlushToDBMS() CONST
{
	return m_bDBMS;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::FlushToFile()
{
	if (CanFlushToFile())
	{
		if (!GetDatabase()->Save(DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE))
		{
			m_szErrors[1].Add(GetDatabase()->GetName());
			return FALSE;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDatabaseThread::CanFlushToFile() CONST
{
	return m_bFile;
}

VOID CTCOnBoardMemoryImagesDatabaseThread::UpdateDBMSStatus()
{
	CString  szDBMSStatus;

	for (szDBMSStatus = ConstructDBMSStatus(); Lock(); )
	{
		m_szDBMSDetails = szDBMSStatus;
		m_bDBMSStatus = !szDBMSStatus.IsEmpty();
		Unlock();
		break;
	}
}

CString CTCOnBoardMemoryImagesDatabaseThread::ConstructDBMSStatus() CONST
{
	SWORD  nResult;
	TCHAR  szDBMS[3][64];
	RETCODE  nDBMSResult;
	CString  szDBMSInfo;
	CTimeKey  tDBMSInfo;

	if (GetDatabase()->OpenDBMS(CDatabase::noOdbcDialog))
	{
		if ((nDBMSResult = SQLGetInfo(GetDatabase()->GetDBMS()->m_hdbc, SQL_DBMS_NAME, szDBMS[0], sizeof(szDBMS[0]), &nResult)) == SQL_SUCCESS || nDBMSResult == SQL_SUCCESS_WITH_INFO || nDBMSResult == SQL_NO_DATA_FOUND)
		{
			if ((nDBMSResult = SQLGetInfo(GetDatabase()->GetDBMS()->m_hdbc, SQL_DBMS_VER, szDBMS[1], sizeof(szDBMS[1]), &nResult)) == SQL_SUCCESS || nDBMSResult == SQL_SUCCESS_WITH_INFO || nDBMSResult == SQL_NO_DATA_FOUND)
			{
				if ((nDBMSResult = SQLGetInfo(GetDatabase()->GetDBMS()->m_hdbc, SQL_ODBC_VER, szDBMS[2], sizeof(szDBMS[2]), &nResult)) == SQL_SUCCESS || nDBMSResult == SQL_SUCCESS_WITH_INFO || nDBMSResult == SQL_NO_DATA_FOUND)
				{
					szDBMSInfo.Format(STRING(IDS_DATABASE_DBMSINFO_FORMAT), szDBMS[0], szDBMS[1], szDBMS[2], (LPCTSTR)tDBMSInfo.FormatGmt(STRING(IDS_DATABASE_DBMSINFO_TIMEFORMAT)));
					GetDatabase()->CloseDBMS();
					return szDBMSInfo;
				}
			}
		}
		GetDatabase()->CloseDBMS();
	}
	return EMPTYSTRING;
}

VOID CTCOnBoardMemoryImagesDatabaseThread::ShowErrors()
{
	INT  nError;
	INT  nErrors;
	CString  szMessage;
	CString  szMemoryImage;
	CString  szMemoryImages;

	if ((nErrors = (INT)m_szErrors[0].GetSize()) == 1)
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_UPDATEMEMORYIMAGE_DBMS_FAILURE), (LPCTSTR)m_szErrors[0].GetAt(nErrors - 1));
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if (nErrors > 1)
	{
		for (nError = 0, szMemoryImages.Empty(); nError < nErrors; nError++)
		{
			szMemoryImage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_UPDATEMEMORYIMAGE_DBMS_FORMAT), (LPCTSTR)m_szErrors[0].GetAt(nError));
			szMemoryImages += (nError < nErrors - 1) ? ((!szMemoryImages.IsEmpty()) ? (STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_UPDATEMEMORYIMAGE_DBMS_SEPARATOR) + szMemoryImage) : szMemoryImage) : EMPTYSTRING;
		}
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_UPDATEMEMORYIMAGE_DBMS_FAILURES), (LPCTSTR)szMemoryImages, (LPCTSTR)szMemoryImage);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if ((nErrors = (INT)m_szErrors[1].GetSize()) > 0)
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_UPDATEMEMORYIMAGE_FILE_FAILURE), (LPCTSTR)m_szErrors[1].GetAt(nErrors - 1));
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	m_szErrors[0].RemoveAll();
	m_szErrors[1].RemoveAll();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDatabaseThread, CThread)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDatabaseThread)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDatabaseThread message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesPrintJobInfo

CTCOnBoardMemoryImagesPrintJobInfo::CTCOnBoardMemoryImagesPrintJobInfo() : CObject()
{
	m_nPrintMode = 0;
	m_nPrintCount = 0;
	m_nPrintByCount = 0;
	m_nPrintByRange[0] = 0;
	m_nPrintByRange[1] = 0;
	m_nPrintColumns = 0;
	m_nPrintDataBits = 0;
	m_nRepeatStopByCount = 0;
	m_tRepeatStopByTime = 0;
}

VOID CTCOnBoardMemoryImagesPrintJobInfo::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCOnBoardMemoryImagesPrintJobInfo::GetName() CONST
{
	return m_szName;
}

VOID CTCOnBoardMemoryImagesPrintJobInfo::SetProfile(LPCTSTR pszProfile)
{
	m_szProfile = pszProfile;
}

CString CTCOnBoardMemoryImagesPrintJobInfo::GetProfile() CONST
{
	return m_szProfile;
}

VOID CTCOnBoardMemoryImagesPrintJobInfo::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CTCOnBoardMemoryImagesPrintJobInfo::GetComments() CONST
{
	return m_szComments;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintMode(UINT nMode)
{
	m_nPrintMode = nMode;
	return TRUE;
}

UINT CTCOnBoardMemoryImagesPrintJobInfo::GetPrintMode() CONST
{
	return m_nPrintMode;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintBySide(UINT nCount)
{
	if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) || (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE))
	{
		m_nPrintByCount = nCount;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintBySide(UINT &nCount) CONST
{
	if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) || (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE))
	{
		nCount = m_nPrintByCount;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintByRange(UINT nFirst, UINT nLast)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_RANGE)
	{
		m_nPrintByRange[0] = min(nFirst, nLast);
		m_nPrintByRange[1] = max(nFirst, nLast);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintByRange(UINT &nFirst, UINT &nLast) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_RANGE)
	{
		nFirst = m_nPrintByRange[0];
		nLast = m_nPrintByRange[1];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintFormat(UINT nColumns, UINT nBits)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT)
	{
		m_nPrintColumns = nColumns;
		m_nPrintDataBits = nBits;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintFormat(UINT &nColumns, UINT &nBits) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT)
	{
		nColumns = m_nPrintColumns;
		nBits = m_nPrintDataBits;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintProcessor(LPCTSTR pszProcessor)
{
	return((lstrlen((m_szProcessor = pszProcessor)) > 0) ? TRUE : FALSE);
}

CString CTCOnBoardMemoryImagesPrintJobInfo::GetPrintProcessor() CONST
{
	return m_szProcessor;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintDumps(CONST CStringArray &szDumps)
{
	m_szDumps.Copy(szDumps);
	return((szDumps.GetSize() > 0) ? TRUE : FALSE);
}

INT CTCOnBoardMemoryImagesPrintJobInfo::GetPrintDumps(CStringArray &szDumps) CONST
{
	szDumps.Copy(m_szDumps);
	return((INT)szDumps.GetSize());
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintAtEvent(LPCTSTR pszEvent, CONST CTimeKey &tStopTime)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT)
	{
		if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) && tStopTime > 0)
		{
			m_tRepeatStopByTime = tStopTime;
			m_nRepeatStopByCount = 0;
		}
		m_szEvent = pszEvent;
		m_nPrintCount = 0;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintAtEvent(LPCTSTR pszEvent, UINT nStopCount)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT)
	{
		if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) && nStopCount > 0)
		{
			m_nRepeatStopByCount = nStopCount;
			m_tRepeatStopByTime = 0;
		}
		m_szEvent = pszEvent;
		m_nPrintCount = 0;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintAtEvent(CString &szEvent, CTimeKey &tStopTime) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT)
	{
		tStopTime = (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) ? m_tRepeatStopByTime : 0;
		szEvent = m_szEvent;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintAtEvent(CString &szEvent, UINT &nStopCount) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT)
	{
		nStopCount = (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) ? m_nRepeatStopByCount : 0;
		szEvent = m_szEvent;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintAtDownload(CONST CTimeKey &tStopTime)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD)
	{
		if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) && tStopTime > 0)
		{
			m_tRepeatStopByTime = tStopTime;
			m_nRepeatStopByCount = 0;
		}
		m_nPrintCount = 0;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintAtDownload(UINT nStopCount)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD)
	{
		if ((m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) && nStopCount > 0)
		{
			m_nRepeatStopByCount = nStopCount;
			m_tRepeatStopByTime = 0;
		}
		m_nPrintCount = 0;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintAtDownload(CTimeKey &tStopTime) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD)
	{
		tStopTime = (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) ? m_tRepeatStopByTime : 0;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintAtDownload(UINT &nStopCount) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD)
	{
		nStopCount = (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) ? m_nRepeatStopByCount : 0;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::SetPrintCount(UINT nCount)
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT)
	{
		m_nPrintCount = nCount;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::GetPrintCount(UINT &nCount) CONST
{
	if (m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT)
	{
		nCount = m_nPrintCount;
		return TRUE;
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesPrintJobInfo::Copy(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo)
{
	m_szName = pJobInfo->m_szName;
	m_szEvent = pJobInfo->m_szEvent;
	m_szProfile = pJobInfo->m_szProfile;
	m_szComments = pJobInfo->m_szComments;
	m_szProcessor = pJobInfo->m_szProcessor;
	m_nPrintMode = pJobInfo->m_nPrintMode;
	m_nPrintCount = pJobInfo->m_nPrintCount;
	m_nPrintByCount = pJobInfo->m_nPrintByCount;
	m_nPrintByRange[0] = pJobInfo->m_nPrintByRange[0];
	m_nPrintByRange[1] = pJobInfo->m_nPrintByRange[1];
	m_nPrintColumns = pJobInfo->m_nPrintColumns;
	m_nPrintDataBits = pJobInfo->m_nPrintDataBits;
	m_nRepeatStopByCount = pJobInfo->m_nRepeatStopByCount;
	m_tRepeatStopByTime = pJobInfo->m_tRepeatStopByTime;
	m_szDumps.Copy(pJobInfo->m_szDumps);
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::Compare(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	INT  nDump;
	INT  nDumps;

	for (nDump = 0, nDumps = (pJobInfo->m_szName == m_szName && pJobInfo->m_szProfile == m_szProfile && pJobInfo->m_szComments == m_szComments && pJobInfo->m_szProcessor == m_szProcessor && pJobInfo->m_szDumps.GetSize() == m_szDumps.GetSize() && pJobInfo->m_nPrintMode == m_nPrintMode && ((!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) && !(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) || pJobInfo->m_nPrintByCount == m_nPrintByCount) && (!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_RANGE) || (pJobInfo->m_nPrintByRange[0] == m_nPrintByRange[0] && pJobInfo->m_nPrintByRange[1] == m_nPrintByRange[1])) && (!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT) || (pJobInfo->m_nPrintColumns == m_nPrintColumns && pJobInfo->m_nPrintDataBits == m_nPrintDataBits)) && (!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT) || pJobInfo->m_szEvent == m_szEvent) && (!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) || pJobInfo->m_tRepeatStopByTime == m_tRepeatStopByTime) && (!(m_nPrintMode & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) || pJobInfo->m_nRepeatStopByCount == m_nRepeatStopByCount)) ? (INT)m_szDumps.GetSize() : -1; nDump < nDumps; nDump++)
	{
		if (pJobInfo->m_szDumps.GetAt(nDump).CompareNoCase(m_szDumps.GetAt(nDump))) break;
		continue;
	}
	return((nDump == nDumps) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::Map(CByteArray &nInfo) CONST
{
	INT  nDump;
	INT  nDumps;
	INT  cbData;
	DATA  sData;
	CByteArray  nDumpsData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbEvent = (m_szEvent.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProfile = (m_szProfile.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProcessor = (m_szProcessor.GetLength() + 1)*sizeof(TCHAR);
	for (nDump = 0, nDumps = (INT)m_szDumps.GetSize(), sData.cbDumps = 0; nDump < nDumps; nDump++, sData.cbDumps += cbData)
	{
		nDumpsData.SetSize(sData.cbDumps + (cbData = (m_szDumps.GetAt(nDump).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nDumpsData.GetData() + sData.cbDumps, (LPCTSTR)m_szDumps.GetAt(nDump), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments + sData.cbEvent + sData.cbProcessor + sData.cbDumps)), sData.nPrintMode = m_nPrintMode, sData.nPrintByCount = m_nPrintByCount, sData.nPrintByRange[0] = m_nPrintByRange[0], sData.nPrintByRange[1] = m_nPrintByRange[1], sData.nPrintColumns = m_nPrintColumns, sData.nPrintDataBits = m_nPrintDataBits, sData.nPrintCount = m_nPrintCount, sData.tRepeatStopByTime = m_tRepeatStopByTime.GetTime(), sData.nRepeatStopByCount = m_nRepeatStopByCount; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szProfile, sData.cbProfile);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbProfile), (LPCTSTR)m_szComments, sData.cbComments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComments), (LPCTSTR)m_szEvent, sData.cbEvent);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEvent), (LPCTSTR)m_szProcessor, sData.cbProcessor);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbProcessor), nDumpsData.GetData(), sData.cbDumps);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesPrintJobInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbDump;
	INT  cbDumps;
	INT  cbData;
	DATA  sData;
	CByteArray  nDumpsData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments + sData.cbEvent + sData.cbProcessor + sData.cbDumps && sData.cbName > 0 && sData.cbProfile > 0 && sData.cbComments > 0 && sData.cbEvent > 0 && sData.cbProcessor > 0 && sData.cbDumps >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szProfile.GetBufferSetLength(STRINGCHARS(sData.cbProfile)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbProfile));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbProfile), STRINGBYTES(sData.cbComments));
		CopyMemory(m_szEvent.GetBufferSetLength(STRINGCHARS(sData.cbEvent)), nInfo.GetData() + (cbData = cbData + sData.cbComments), STRINGBYTES(sData.cbEvent));
		CopyMemory(m_szProcessor.GetBufferSetLength(STRINGCHARS(sData.cbProcessor)), nInfo.GetData() + (cbData = cbData + sData.cbEvent), STRINGBYTES(sData.cbProcessor));
		for (nDumpsData.SetSize(sData.cbDumps), CopyMemory(nDumpsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbProcessor), sData.cbDumps), m_nPrintMode = sData.nPrintMode, m_nPrintByCount = sData.nPrintByCount, m_nPrintByRange[0] = sData.nPrintByRange[0], m_nPrintByRange[1] = sData.nPrintByRange[1], m_nPrintColumns = sData.nPrintColumns, m_nPrintDataBits = sData.nPrintDataBits, m_nPrintCount = sData.nPrintCount, m_tRepeatStopByTime = sData.tRepeatStopByTime, m_nRepeatStopByCount = sData.nRepeatStopByCount, m_szName.ReleaseBuffer(), m_szProfile.ReleaseBuffer(), m_szComments.ReleaseBuffer(), m_szEvent.ReleaseBuffer(), m_szProcessor.ReleaseBuffer(), m_szDumps.RemoveAll(), cbDumps = 0; cbDumps < nDumpsData.GetSize(); cbDumps += cbDump)
		{
			m_szDumps.Add((LPCTSTR)(nDumpsData.GetData() + cbDumps));
			cbDump = (m_szDumps.GetAt(m_szDumps.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR);
		}
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesPrintJobs

CTCOnBoardMemoryImagesPrintJobs::CTCOnBoardMemoryImagesPrintJobs() : CPtrArray()
{
	return;
}

CTCOnBoardMemoryImagesPrintJobs::~CTCOnBoardMemoryImagesPrintJobs()
{
	RemoveAll();
}

INT CTCOnBoardMemoryImagesPrintJobs::Add(CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo)
{
	return((INT)CPtrArray::Add(pJobInfo));
}

INT CTCOnBoardMemoryImagesPrintJobs::Find(LPCTSTR pszName) CONST
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->GetName() == pszName) break;
		continue;
	}
	return((nJob < nJobs) ? nJob : -1);
}

CTCOnBoardMemoryImagesPrintJobInfo *CTCOnBoardMemoryImagesPrintJobs::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL);
}

CTCOnBoardMemoryImagesPrintJobInfo *CTCOnBoardMemoryImagesPrintJobs::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL);
}

VOID CTCOnBoardMemoryImagesPrintJobs::RemoveAll()
{
	INT  nJob;
	INT  nJobs;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		delete GetAt(nJob);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCOnBoardMemoryImagesPrintJobs::Copy(CONST CTCOnBoardMemoryImagesPrintJobs *pPrintJobs)
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)pPrintJobs->GetSize(), RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = new CTCOnBoardMemoryImagesPrintJobInfo))
		{
			pJobInfo->Copy(pPrintJobs->GetAt(nJob));
			InsertAt(nJob, pJobInfo, 1);
			continue;
		}
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesPrintJobs::Compare(CONST CTCOnBoardMemoryImagesPrintJobs *pPrintJobs) CONST
{
	INT  nJob[2];
	INT  nJobs[2];

	for (nJob[0] = 0, nJobs[0] = (INT)GetSize(), nJobs[1] = (INT)pPrintJobs->GetSize(); nJob[0] < nJobs[0]; nJob[0]++)
	{
		for (nJob[1] = (nJobs[0] != nJobs[1]) ? nJobs[1] : 0; nJob[1] < nJobs[1]; nJob[1]++)
		{
			if (pPrintJobs->GetAt(nJob[0])->Compare(GetAt(nJob[1]))) break;
			continue;
		}
		if (nJob[1] == nJobs[1]) break;
	}
	return((nJob[0] == nJobs[0] && nJobs[0] == nJobs[1]) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesPrintJobs::Map(CByteArray &nInfo) CONST
{
	INT  nJob;
	INT  nJobs;
	CByteArray  nJobData;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(), nInfo.RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->Map(nJobData) && nInfo.Append(nJobData) >= 0) continue;
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesPrintJobs::Unmap(CONST CByteArray &nInfo)
{
	INT  cbJob;
	INT  cbJobs;
	CByteArray  nJobData;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (cbJobs = 0, RemoveAll(); cbJobs < nInfo.GetSize(); cbJobs += cbJob)
	{
		for (CopyMemory(&cbJob, nInfo.GetData() + cbJobs, sizeof(cbJob)), nJobData.SetSize(max(min(cbJob, nInfo.GetSize() - cbJobs), 0)); nJobData.GetSize() >= 0; )
		{
			CopyMemory(nJobData.GetData(), nInfo.GetData() + cbJobs, nJobData.GetSize());
			break;
		}
		if ((pJobInfo = new CTCOnBoardMemoryImagesPrintJobInfo))
		{
			if (pJobInfo->Unmap(nJobData) && Add(pJobInfo) >= 0) continue;
			delete pJobInfo;
		}
		break;
	}
	if ((pJobInfo = (!GetSize()) ? new CTCOnBoardMemoryImagesPrintJobInfo : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL))
	{
		for (pJobInfo->SetName(STRING(IDS_PRINTJOB_DEFAULTNAME)), pJobInfo->SetProfile(STRING(IDS_PRINTPROFILE_DEFAULTNAME)), pJobInfo->SetPrintMode(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT | TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD), pJobInfo->SetPrintFormat(16, 16 * sizeof(BYTE)); Add(pJobInfo) >= 0; ) return TRUE;
		delete pJobInfo;
		return FALSE;
	}
	return((cbJobs == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsLayoutPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsLayoutPage, CLocalePropertyPage)

CTCOnBoardMemoryImagesSettingsLayoutPage::CTCOnBoardMemoryImagesSettingsLayoutPage() : CLocalePropertyPage(CTCOnBoardMemoryImagesSettingsLayoutPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesSettingsLayoutPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::Initialize()
{
	if (GetParentDisplay()->GetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, m_nColumns[0]) && GetParentDisplay()->GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &m_fntTitle[0]) && GetParentDisplay()->GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &m_fntItems[0]) && GetParentDisplay()->GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &m_fntPages[0][0]) && GetParentDisplay()->GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &m_fntPages[0][1]) && GetParentDisplay()->GetTablesOutline(&m_fntTables[0][0], &m_fntTables[0][1], m_nTableFontColors[0][0], m_nTableFontColors[0][1], m_nTableColors[0][0], m_nTableColors[0][1]))
	{
		CopyMemory(&m_fntTitle[1], &m_fntTitle[0], sizeof(LOGFONT));
		CopyMemory(&m_fntItems[1], &m_fntItems[0], sizeof(LOGFONT));
		CopyMemory(&m_fntPages[1][0], &m_fntPages[0][0], sizeof(LOGFONT));
		CopyMemory(&m_fntPages[1][1], &m_fntPages[0][1], sizeof(LOGFONT));
		CopyMemory(&m_fntTables[1][0], &m_fntTables[0][0], sizeof(LOGFONT));
		CopyMemory(&m_fntTables[1][1], &m_fntTables[0][1], sizeof(LOGFONT));
		m_bToolTips[0] = m_bToolTips[1] = GetParentDisplay()->IsToolTipModeEnabled();
		m_nTableFontColors[1][0] = m_nTableFontColors[0][0];
		m_nTableFontColors[1][1] = m_nTableFontColors[0][1];
		m_nTableColors[1][0] = m_nTableColors[0][0];
		m_nTableColors[1][1] = m_nTableColors[0][1];
		m_nColumns[1].Copy(m_nColumns[0]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::GetLayout(CUIntArray &nColumns) CONST
{
	nColumns.Copy(m_nColumns[0]);
	return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::GetTitleFont(UINT nPane, LPLOGFONT pTitleFont) CONST
{
	CopyMemory(pTitleFont, (nPane == TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? &m_fntTitle[0] : &m_fntPages[0][0], sizeof(LOGFONT));
	return Check(FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::GetItemsFont(UINT nPane, LPLOGFONT pItemsFont) CONST
{
	CopyMemory(pItemsFont, (nPane == TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? &m_fntItems[0] : &m_fntPages[0][1], sizeof(LOGFONT));
	return Check(FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::GetTablesOutline(LPLOGFONT pTitleFont, LPLOGFONT pItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	CopyMemory(pTitleFont, &m_fntTables[0][0], sizeof(LOGFONT));
	CopyMemory(pItemsFont, &m_fntTables[0][1], sizeof(LOGFONT));
	nTitleBackgroundColor = m_nTableColors[0][0];
	nItemsBackgroundColor = m_nTableColors[0][1];
	nTitleFontColor = m_nTableFontColors[0][0];
	nItemsFontColor = m_nTableFontColors[0][1];
	return Check(FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::GetToolTipMode(BOOL &bEnable) CONST
{
	bEnable = m_bToolTips[0];
	return Check(FALSE);
}

CTCOnBoardMemoryImagesSettingsDialog *CTCOnBoardMemoryImagesSettingsLayoutPage::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsLayoutPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::EnumLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;
	CStringArray  szColumns;

	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM));
	szColumns.Add(LookupColumnName(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME));
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szColumns.GetAt(nColumn));
		continue;
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_SETCURSEL);
	return((nColumn == nColumns) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::ShowLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_nColumns[0].GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW, LVM_DELETEALLITEMS), m_nColumnIndex = 0; nColumn < nColumns; nColumn++)
	{
		if ((nColumn >= m_szColumns.GetSize() && InsertLayoutColumn(nColumn, LookupColumnName(m_nColumns[0].GetAt(nColumn)))) || (nColumn < m_szColumns.GetSize() && ModifyLayoutColumn(nColumn, LookupColumnName(m_nColumns[0].GetAt(nColumn))))) continue;
		break;
	}
	while (nColumn < m_szColumns.GetSize())
	{
		if (!RemoveLayoutColumn(nColumn)) break;
		continue;
	}
	for (nColumn = (nColumn != nColumns) ? (nColumns + 1) : 0; nColumn < nColumns; nColumn++)
	{
		if ((!nColumn  &&  !Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, EMPTYSTRING)) || (nColumn > 0 && !Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, nColumn, EMPTYSTRING))) break;
		continue;
	}
	return((nColumn == nColumns) ? SetCurLayoutColumn() : FALSE);
}

VOID CTCOnBoardMemoryImagesSettingsLayoutPage::ShowLayoutFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfFaceName : m_fntPages[0][0].lfFaceName) : ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfFaceName : m_fntPages[0][1].lfFaceName)))); (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE) && ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES) && cFontTools.EnumerateFont(m_fntTitle[0].lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES) && cFontTools.EnumerateFont(m_fntPages[0][0].lfFaceName, szStyles, szSizes, bUnderlined)))) || (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS) && ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES) && cFontTools.EnumerateFont(m_fntItems[0].lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES) && cFontTools.EnumerateFont(m_fntPages[0][1].lfFaceName, szStyles, szSizes, bUnderlined)))); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontStyle(&m_fntTitle[0]) : (LPCTSTR)cFontTools.TranslateFontStyle(&m_fntPages[0][0]))), 0));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[0]) : (LPCTSTR)cFontTools.TranslateFontSize(&m_fntPages[0][0]))), max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[1]) : (LPCTSTR)cFontTools.TranslateFontSize(&m_fntPages[1][0]))), 0)));
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontStyle(&m_fntItems[0]) : (LPCTSTR)cFontTools.TranslateFontStyle(&m_fntPages[0][1]))), 0));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[0]) : (LPCTSTR)cFontTools.TranslateFontSize(&m_fntPages[0][1]))), max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[1]) : (LPCTSTR)cFontTools.TranslateFontSize(&m_fntPages[1][1]))), 0)));
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesSettingsLayoutPage::ShowLayoutFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::InsertLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.InsertAt(nIndex, pszColumn);
	m_nColumnIndex = (nIndex <= m_nColumnIndex) ? (INT)min(m_nColumnIndex + 1, m_szColumns.GetSize() - 1) : m_nColumnIndex;
	return Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::ModifyLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.SetAt(nIndex, pszColumn);
	return Listview_SetColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::RemoveLayoutColumn(INT nIndex)
{
	if (Listview_DeleteColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex))
	{
		m_nColumnIndex = (nIndex >= m_nColumnIndex) ? ((nIndex > m_nColumnIndex) ? m_nColumnIndex : 0) : max(m_nColumnIndex - 1, 0);
		m_szColumns.RemoveAt(nIndex);
		return SetCurLayoutColumn(m_nColumnIndex);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::SetCurLayoutColumn(INT nIndex)
{
	if (nIndex < m_nColumns[0].GetSize())
	{
		for (m_szColumns.SetAt(m_nColumnIndex, (m_szColumns.GetAt(m_nColumnIndex).Right(lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_COLUMNMARKER))) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_COLUMNMARKER)) ? (m_szColumns.GetAt(m_nColumnIndex).Left(m_szColumns.GetAt(m_nColumnIndex).GetLength() - lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_COLUMNMARKER)))) : m_szColumns.GetAt(m_nColumnIndex)), m_szColumns.SetAt(nIndex, m_szColumns.GetAt(nIndex) + STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_COLUMNMARKER)); TRUE; )
		{
			Listview_SetColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), m_nColumnIndex, m_szColumns.GetAt(m_nColumnIndex), CalcColumnWidth(m_szColumns.GetAt(m_nColumnIndex)));
			Listview_SetColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(m_szColumns.GetAt((m_nColumnIndex = nIndex))));
			break;
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE)->EnableWindow((m_nColumnIndex > 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		return TRUE;
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesSettingsLayoutPage::GetCurLayoutColumn() CONST
{
	return m_nColumnIndex;
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::CheckLayoutColumn() CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn);
	for (nColumn = 0, nColumns = (INT)m_nColumns[0].GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_nColumns[0].GetAt(nColumn) == LookupColumnName(szColumn)) break;
		continue;
	}
	return((nColumn == nColumns) ? TRUE : FALSE);
}

CString CTCOnBoardMemoryImagesSettingsLayoutPage::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME);
	return EMPTYSTRING;
}
UINT CTCOnBoardMemoryImagesSettingsLayoutPage::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME), lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME)))) return TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME;
	return 0;
}

INT CTCOnBoardMemoryImagesSettingsLayoutPage::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nColIndex;
	INT  nColItems;

	for (nColIndex = 0, nColItems = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nColIndex < nColItems; nColIndex++)
	{
		nWidths.Add((nColIndex > 0) ? (nWidths.GetAt(nColIndex - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nColIndex)))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nColIndex))));
		continue;
	}
	return((nWidths.GetSize() == nColItems) ? nColItems : 0);
}

INT CTCOnBoardMemoryImagesSettingsLayoutPage::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	UINT  nColumn;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			if (pDC->GetTextMetrics(&tmFont) && tmFont.tmAveCharWidth > 0)
			{
				nWidth = ((nColumn = LookupColumnName(pszColumn)) == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesProcessorColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : 0;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesAddressRangeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesSizeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesPatchTCColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesLastPatchTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesDumpTCColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesDumpTMColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCOnBoardMemoryImagesLastDumpTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (!nWidth) ? (2 * CalcColumnIndent() + pDC->GetTextExtent(pszColumn).cx) : nWidth;
				pDC->SelectObject(pOldFont);
				ReleaseDC(pDC);
				return nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
	return 0;
}

INT CTCOnBoardMemoryImagesSettingsLayoutPage::CalcColumnIndent() CONST
{
	return 3 * GetSystemMetrics(SM_CXEDGE);
}

VOID CTCOnBoardMemoryImagesSettingsLayoutPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, bCheck);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::IsModified(BOOL bAll) CONST
{
	INT  nColumn;
	INT  nColumns;
	CFontTools  cFontTools;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nColumn = 0, nColumns = (m_nColumns[0].GetSize() == m_nColumns[1].GetSize() && !lstrcmp(m_fntTitle[0].lfFaceName, m_fntTitle[1].lfFaceName) && (m_fntTitle[0].lfHeight == m_fntTitle[1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[1]))) && m_fntTitle[0].lfWeight == m_fntTitle[1].lfWeight && m_fntTitle[0].lfItalic == m_fntTitle[1].lfItalic && !lstrcmp(m_fntItems[0].lfFaceName, m_fntItems[1].lfFaceName) && (m_fntItems[0].lfHeight == m_fntItems[1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[1]))) && m_fntItems[0].lfWeight == m_fntItems[1].lfWeight && m_fntItems[0].lfItalic == m_fntItems[1].lfItalic && !lstrcmp(m_fntPages[0][0].lfFaceName, m_fntPages[1][0].lfFaceName) && (m_fntPages[0][0].lfHeight == m_fntPages[1][0].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntPages[0][0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntPages[1][0]))) && m_fntPages[0][0].lfWeight == m_fntPages[1][0].lfWeight && m_fntPages[0][0].lfItalic == m_fntPages[1][0].lfItalic && !lstrcmp(m_fntPages[0][1].lfFaceName, m_fntPages[1][1].lfFaceName) && (m_fntPages[0][1].lfHeight == m_fntPages[1][1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntPages[0][1])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntPages[1][1]))) && m_fntPages[0][1].lfWeight == m_fntPages[1][1].lfWeight && m_fntPages[0][1].lfItalic == m_fntPages[1][1].lfItalic && !lstrcmp(m_fntTables[0][0].lfFaceName, m_fntTables[1][0].lfFaceName) && (m_fntTables[0][0].lfHeight == m_fntTables[1][0].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTables[0][0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTables[1][0]))) && m_fntTables[0][0].lfWeight == m_fntTables[1][0].lfWeight && m_fntTables[0][0].lfItalic == m_fntTables[1][0].lfItalic && !lstrcmp(m_fntTables[0][1].lfFaceName, m_fntTables[1][1].lfFaceName) && (m_fntTables[0][1].lfHeight == m_fntTables[1][1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTables[0][1])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTables[1][1]))) && m_fntTables[0][1].lfWeight == m_fntTables[1][1].lfWeight && m_fntTables[0][1].lfItalic == m_fntTables[1][1].lfItalic && m_nTableColors[0][0] == m_nTableColors[1][0] && m_nTableColors[0][1] == m_nTableColors[1][1] && m_nTableFontColors[0][0] == m_nTableFontColors[1][0] && m_nTableFontColors[0][1] == m_nTableFontColors[1][1] && m_bToolTips[0] == m_bToolTips[1]) ? (INT)m_nColumns[0].GetSize() : -1; nColumn < nColumns; nColumn++)
		{
			if (m_nColumns[0].GetAt(nColumn) != m_nColumns[1].GetAt(nColumn)) break;
			continue;
		}
		return((nColumn != nColumns) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowTextLength() > 0) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesSettingsLayoutPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nColumns[0].RemoveAll();
	m_nColumns[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsLayoutPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsLayoutPage)
	ON_WM_PAINT()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE, OnInsertColumnBefore)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER, OnInsertColumnAfter)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE, OnRemoveColumn)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, OnToolTips)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, OnTitleFont)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, OnItemsFont)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES, OnPagesFont)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TABLES, OnTableProperties)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME, OnSelchangeColumnName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, OnSelchangeFontSize)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsLayoutPage message handlers

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, m_bToolTips[0]);
	CheckRadioButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES, IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TABLES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_CHARACTERISTICS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES)->EnableWindow();
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_fntTitle[0].lfFaceName));
	EnumLayoutColumns();
	ShowLayoutColumns();
	ShowLayoutFontDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? &m_fntTitle[0] : &m_fntPages[0][0]) : ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? &m_fntItems[0] : &m_fntPages[0][1])); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? GetSysColor(COLOR_WINDOWTEXT) : GetSysColor(COLOR_GRAYTEXT));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

BOOL CTCOnBoardMemoryImagesSettingsLayoutPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMLISTVIEW  *pNotifyInfo = (NMLISTVIEW *)lParam;

	if (pNotifyInfo->hdr.idFrom == IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_VIEW)
	{
		if (pNotifyInfo->hdr.code == LVN_COLUMNCLICK) SetCurLayoutColumn(pNotifyInfo->iSubItem);
		if (pNotifyInfo->hdr.code == LVN_ITEMCHANGING  &&  !(pNotifyInfo->uChanged & LVIF_TEXT))
		{
			*pResult = TRUE;
			return TRUE;
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnInsertColumnBefore()
{
	INT  nIndex;
	CString  szColumn;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); InsertLayoutColumn((nIndex = m_nColumnIndex), szColumn); )
	{
		m_nColumns[0].InsertAt(nIndex, LookupColumnName(szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnInsertColumnAfter()
{
	INT  nIndex;
	CString  szColumn;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); InsertLayoutColumn((nIndex = m_nColumnIndex + 1), szColumn); )
	{
		m_nColumns[0].InsertAt(nIndex, LookupColumnName(szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnRemoveColumn()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if (RemoveLayoutColumn((nIndex = m_nColumnIndex)))
	{
		m_nColumns[0].RemoveAt(nIndex);
		SetCurLayoutColumn();
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnToolTips()
{
	m_bToolTips[0] = IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnTitleFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnItemsFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnPagesFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnTableProperties()
{
	CTCOnBoardMemoryImagesTablePropertiesDialog  cTablePropertiesDialog;

	cTablePropertiesDialog.Create(this, &m_fntTables[0][0], &m_fntTables[0][1], m_nTableFontColors[0][0], m_nTableFontColors[0][1], m_nTableColors[0][0], m_nTableColors[0][1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnSelchangeColumnName()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE)->EnableWindow((m_nColumnIndex > 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		_tcscpy_s((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfFaceName : m_fntPages[0][0].lfFaceName, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (sizeof(m_fntTitle[0].lfFaceName) / sizeof(TCHAR)) : (sizeof(m_fntPages[0][0].lfFaceName) / sizeof(TCHAR)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		_tcscpy_s((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfFaceName : m_fntPages[0][1].lfFaceName, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? (sizeof(m_fntItems[0].lfFaceName) / sizeof(TCHAR)) : (sizeof(m_fntPages[0][1].lfFaceName) / sizeof(TCHAR)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfWeight : m_fntPages[0][0].lfWeight, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfItalic : m_fntPages[0][0].lfItalic);
		cFontTools.TranslateFontSize(szSize, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfHeight : m_fntPages[0][0].lfHeight);
		cFontTools.EnumerateFontCharacteristics((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? &m_fntTitle[0] : &m_fntPages[0][0]);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfWeight : m_fntPages[0][1].lfWeight, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfItalic : m_fntPages[0][1].lfItalic);
		cFontTools.TranslateFontSize(szSize, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfHeight : m_fntPages[0][1].lfHeight);
		cFontTools.EnumerateFontCharacteristics((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? &m_fntItems[0] : &m_fntPages[0][1]);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnSelchangeFontStyle()
{
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfWeight : m_fntPages[0][0].lfWeight, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfItalic : m_fntPages[0][0].lfItalic);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfWeight : m_fntPages[0][1].lfWeight, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfItalic : m_fntPages[0][1].lfItalic);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLayoutPage::OnSelchangeFontSize()
{
	CString  szSize;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntTitle[0].lfHeight : m_fntPages[0][0].lfHeight);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LAYOUTPAGE_FONTS_LOCATION_PAGES)) ? m_fntItems[0].lfHeight : m_fntPages[0][1].lfHeight);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsDumpsPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsDumpsPage, CLocalePropertyPage)

CTCOnBoardMemoryImagesSettingsDumpsPage::CTCOnBoardMemoryImagesSettingsDumpsPage() : CLocalePropertyPage(CTCOnBoardMemoryImagesSettingsDumpsPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesSettingsDumpsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::Initialize()
{
	if (GetParentDisplay()->GetProcessors(m_pProcessors[0], FALSE) && GetParentDisplay()->GetDBMSBehavior(m_tFlushDumps[0], m_bFlushDumps[0][0], m_bFlushDumps[0][1]))
	{
		m_tFlushDumps[0] = m_tFlushDumps[1] = (m_tFlushDumps[0].GetTotalSeconds() > 0) ? m_tFlushDumps[0].GetTotalSeconds() : TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTDATABASEFLUSHDELAY;
		m_bFlushDumps[1][0] = m_bFlushDumps[0][0];
		m_bFlushDumps[1][1] = m_bFlushDumps[0][1];
		return m_pProcessors[1].Copy(&m_pProcessors[0]);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::GetVersioning(CTCOnBoardMemoryImagesProcessorItems &pProcessors) CONST
{
	pProcessors.Copy(&m_pProcessors[0]);
	return Check(FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::GetFlashBehavior(CTimeSpan &tDelay, BOOL &bDBMS, BOOL &bFile) CONST
{
	tDelay = m_tFlushDumps[0];
	bDBMS = m_bFlushDumps[0][0];
	bFile = m_bFlushDumps[0][1];
	return Check(FALSE);
}

CTCOnBoardMemoryImagesSettingsDialog *CTCOnBoardMemoryImagesSettingsDumpsPage::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsDumpsPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::EnumProcessors()
{
	INT  nProcessor;
	INT  nProcessors;
	UINT  nAddress[2][2];
	CString  szProcessor;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	for (nProcessor = 0, nProcessors = (INT)m_pProcessors[0].GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = m_pProcessors[0].GetAt(nProcessor)) != (CTCOnBoardMemoryImagesProcessorItem *)NULL  &&  pProcessor->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]))
		{
			szProcessor.Format(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_PROCESSORFORMAT), (LPCTSTR)pProcessor->GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]));
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szProcessor);
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR, CB_SETCURSEL);
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

CTCOnBoardMemoryImagesProcessorItem *CTCOnBoardMemoryImagesSettingsDumpsPage::FindProcessor() CONST
{
	return m_pProcessors[0].GetAt((INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR)->SendMessage(CB_GETCURSEL));
}

VOID CTCOnBoardMemoryImagesSettingsDumpsPage::ShowProcessorVersioning()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
	{
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, ((nFormat & TCONBOARDMEMORYIMAGE_VERSIONING_NONUMBER) || !nFormat) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, (nFormat & TCONBAORDMEMORYIMAGE_VERSIONING_SIMPLENUMBER) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, (nFormat & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXTIMENUMBER) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, (nFormat & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXDATANUMBER) ? TRUE : FALSE);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT), pProcessor->GetMemoryImageVersionLimit());
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL), min(nInfo / SECONDSPERMINUTE, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMVERSIONINGTIMEINTERVAL));
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES), min(nInfo, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMVERSIONINGDATACHANGES));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE)) ? szPrefix : EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow(!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow(!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE));
		return;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow(FALSE);
}

VOID CTCOnBoardMemoryImagesSettingsDumpsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT, bCheck);
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_bFlushDumps[0][0] != m_bFlushDumps[1][0] || m_bFlushDumps[0][1] != m_bFlushDumps[1][1] || m_tFlushDumps[0] != m_tFlushDumps[1] || !m_pProcessors[0].Compare(&m_pProcessors[1])) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesSettingsDumpsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::PostNcDestroy()
{
	m_pProcessors[0].RemoveAll();
	m_pProcessors[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsDumpsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsDumpsPage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS, OnFlushDBMS)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE, OnFlushFile)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, OnVersioningNone)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, OnVersioningByNumbers)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, OnVersioningByTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, OnVersioningByData)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX, OnEditchangeVersioningPrefix)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR, OnSelchangeProcessor)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD, OnSpinchangeFlushInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL, OnSpinchangeVersioningTimeInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES, OnSpinchangeVersioningDataChanges)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT, OnSpinchangeVersioningDumpsLimit)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsDumpsPage message handlers

BOOL CTCOnBoardMemoryImagesSettingsDumpsPage::OnInitDialog()
{
	BOOL  bVersioning;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS, m_bFlushDumps[0][0]);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE, m_bFlushDumps[0][1]);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MINIMUMDATABASEFLUSHDELAY, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMDATABASEFLUSHDELAY);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MINIMUMVERSIONINGTIMEINTERVAL, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMVERSIONINGTIMEINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MINIMUMVERSIONINGDATACHANGES, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMVERSIONINGDATACHANGES);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MINIMUMVERSIONINGLIMIT, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_MAXIMUMVERSIONINGLIMIT);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD), m_tFlushDumps[0].GetTotalSeconds());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING)->EnableWindow((bVersioning = EnumProcessors()));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR_STATIC)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PROCESSOR)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_STATIC)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_COMMENT)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME)->EnableWindow(bVersioning);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA)->EnableWindow(bVersioning);
	ShowProcessorVersioning();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnFlushDBMS()
{
	for (m_bFlushDumps[0][0] = IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) && !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE); )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD), (m_tFlushDumps[0] = TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTDATABASEFLUSHDELAY).GetTotalSeconds());
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnFlushFile()
{
	for (m_bFlushDumps[0][1] = IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE); !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) && IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE); )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD), (m_tFlushDumps[0] = TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTDATABASEFLUSHDELAY).GetTotalSeconds());
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_DBMS) || IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FILE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnVersioningNone()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
	{
		pProcessor->SetMemoryImageVersioning(EMPTYSTRING, TCONBOARDMEMORYIMAGE_VERSIONING_NONE, 0);
		pProcessor->SetMemoryImageVersionLimit(0);
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnVersioningByNumbers()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
	{
		pProcessor->SetMemoryImageVersioning(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX), TCONBAORDMEMORYIMAGE_VERSIONING_SIMPLENUMBER, 0);
		pProcessor->SetMemoryImageVersionLimit(TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnVersioningByTime()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
	{
		pProcessor->SetMemoryImageVersioning(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX), TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXTIMENUMBER, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGTIMEINTERVAL*SECONDSPERMINUTE);
		pProcessor->SetMemoryImageVersionLimit(TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGTIMEINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnVersioningByData()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
	{
		pProcessor->SetMemoryImageVersioning(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX), TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXDATANUMBER, TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGDATACHANGES);
		pProcessor->SetMemoryImageVersionLimit(TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_NONE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYNUMBERS, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGDATACHANGES);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT), TCONBOARDMEMORYIMAGESSETTINGSDUMPSPAGE_DEFAULTVERSIONINGLIMIT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->SetWindowText(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONINGPREFIX));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnEditchangeVersioningPrefix()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix[2];
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_PREFIX)->GetWindowText(szPrefix[0]); (pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix[1], nFormat, nInfo) >= 0; )
	{
		pProcessor->SetMemoryImageVersioning(szPrefix[0], nFormat, nInfo);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnSelchangeProcessor()
{
	ShowProcessorVersioning();
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnSpinchangeFlushInterval()
{
	m_tFlushDumps[0] = Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_DATABASE_FLUSHDELAY_PERIOD));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnSpinchangeVersioningTimeInterval()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) && (nFormat & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXTIMENUMBER)) pProcessor->SetMemoryImageVersioning(szPrefix, nFormat, (UINT)(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYTIME_INTERVAL))));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnSpinchangeVersioningDataChanges()
{
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor()) && pProcessor->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) && (nFormat & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXDATANUMBER)) pProcessor->SetMemoryImageVersioning(szPrefix, nFormat, (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_BYDATA_CHANGES)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsDumpsPage::OnSpinchangeVersioningDumpsLimit()
{
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pProcessor = FindProcessor())) pProcessor->SetMemoryImageVersionLimit((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_DUMPSPAGE_VERSIONING_LIMIT_COUNT)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsLoggingPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsLoggingPage, CLocalePropertyPage)

CTCOnBoardMemoryImagesSettingsLoggingPage::CTCOnBoardMemoryImagesSettingsLoggingPage() : CLocalePropertyPage(CTCOnBoardMemoryImagesSettingsLoggingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesSettingsLoggingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::Initialize()
{
	if (GetParentDisplay()->GetLoggingOptions(m_nArchivalPolicy[0], m_szArchivalFileName[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0], m_nRetrievalReloadCount[0], m_bShowAsEvent[0]))
	{
		m_nArchivalPolicy[1] = m_nArchivalPolicy[0] = m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET;
		m_szArchivalFileName[1] = m_szArchivalFileName[0];
		m_dwArchivalRetention[1] = m_dwArchivalRetention[0];
		m_tArchivalRetention[1] = m_tArchivalRetention[0];
		m_szRetrievalFileName[1] = m_szRetrievalFileName[0];
		m_nRetrievalReloadCount[1] = m_nRetrievalReloadCount[0];
		m_bShowAsEvent[1] = m_bShowAsEvent[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::GetOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	nArchivalPolicy = m_nArchivalPolicy[0];
	szArchivalFileName = m_szArchivalFileName[0];
	dwArchivalRetention = m_dwArchivalRetention[0];
	tArchivalRetention = m_tArchivalRetention[0];
	szRetrievalFileName = m_szRetrievalFileName[0];
	nRetrievalReloadCount = m_nRetrievalReloadCount[0];
	bShowAsEvent = m_bShowAsEvent[0];
	return Check(FALSE);
}

CTCOnBoardMemoryImagesSettingsDialog *CTCOnBoardMemoryImagesSettingsLoggingPage::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsLoggingPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCOnBoardMemoryImagesSettingsLoggingPage::ShowLoggingDetails()
{
	for (Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_MINIMUMRELOADCOUNT, TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_MAXIMUMRELOADCOUNT), Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_MINIMUMRETRIEVALSTOPCOUNT, TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_MAXIMUMRETRIEVALSTOPCOUNT), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME, TRUE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_SHOWASEVENT, m_bShowAsEvent[0]); m_nRetrievalReloadCount[0] > 0; )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT), m_nRetrievalReloadCount[0]);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD, TRUE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
	SetTimer(TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_TIMERID, TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_TIMEOUT, NULL);
	RetrieveLogEntries();
}

VOID CTCOnBoardMemoryImagesSettingsLoggingPage::ShowLogEntries(CONST CTCLogEntries &pEntries)
{
	INT  nEntry;
	INT  nEntries;
	CTCLogEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)pEntries.GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pEntry = pEntries.GetAt(nEntry)))
		{
			ShowLogEntry(pEntry, nEntry);
			continue;
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST), nEntries);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST), 0);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesSettingsLoggingPage::ShowLogEntry(CONST CTCLogEntry *pEntry, INT nIndex)
{
	INT  nColumn;
	INT  nColumns;
	CString  szEntry;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_TIME); )
		{
			szEntry = pEntry->GetTime().FormatGmt();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_SUBJECT); )
		{
			szEntry = pEntry->GetDescription();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY); )
		{
			szEntry = pEntry->GetActivity();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_USER); )
		{
			szEntry = pEntry->GetUser();
			break;
		}
		if ((nIndex >= SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) || nIndex < 0) && !nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) : nIndex, szEntry);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) - 1) : nIndex, nColumn, szEntry);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::RetrieveLogEntries()
{
	CTCLogEntries  pEntries;

	if (RetrieveLogEntries(pEntries))
	{
		ShowLogEntries(pEntries);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::RetrieveLogEntries(CTCLogEntries &pEntries)
{
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	for (pEntries.RemoveAll(); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME); )
	{
		if ((nCount = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT)) : 0) > 0)
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.SeekFromEnd(nCount))
				{
					do
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry) != (CTCLogEntry *)NULL)
							{
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					} while (TRUE);
					for (nEntry = 0, nEntries = (INT)pEntries.GetSize() - nCount; nEntry < nEntries; nEntry++)
					{
						if ((pEntry = pEntries.GetAt(nEntry)))
						{
							pEntries.RemoveAt(nEntry);
							delete pEntry;
							nEntries--;
							nEntry--;
						}
					}
					m_cRetrievalFile.Close();
					return TRUE;
				}
				if (m_cRetrievalFile.IsEmpty())
				{
					m_cRetrievalFile.Close();
					return TRUE;
				}
				m_cRetrievalFile.Close();
			}
			return FALSE;
		}
		return TRUE;
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL))
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
		{
			for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)), nCount = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)); m_cRetrievalFile.SeekTo(tStartTime); )
			{
				do
				{
					if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && tLogTime <= tStopTime)
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && nCount > pEntries.GetSize())
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
					}
					break;
				} while (TRUE);
				m_cRetrievalFile.Close();
				return TRUE;
			}
			if (m_cRetrievalFile.IsEmpty())
			{
				m_cRetrievalFile.Close();
				return TRUE;
			}
			m_cRetrievalFile.Close();
		}
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesSettingsLoggingPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_SHOWASEVENT, bCheck);
}

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1]) || m_nRetrievalReloadCount[0] != m_nRetrievalReloadCount[1] || m_bShowAsEvent[0] != m_bShowAsEvent[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesSettingsLoggingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsLoggingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsLoggingPage)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME, OnRealtime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD, OnReloadCount)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, OnStopAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, OnStopAtLimit)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, OnStopAtEnd)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE, OnRetrieve)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_SHOWASEVENT, OnShowAsEvent)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT, OnSpinchangeReloadCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsLoggingPage message handlers

BOOL CTCOnBoardMemoryImagesSettingsLoggingPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_TIME));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_SUBJECT));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_USER));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_TIME)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_SUBJECT)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY)) ? ((3 * rColumns.Width()) / 4) : (rColumns.Width() / 5))));
		continue;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_MODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_SHOWASEVENT)->EnableWindow();
	ShowLoggingDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnRealtime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnHistorical()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), CTimeKey(CTime::GetCurrentTime().GetTime() - SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnReloadCount()
{
	m_nRetrievalReloadCount[0] = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD)) ? TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT : 0;
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnStopAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), CTimeKey(CTime::GetCurrentTime().GetTime()));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->SetFocus();
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnStopAtLimit()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_DEFAULTRETRIEVALSTOPCOUNT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->SetFocus();
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnStopAtEnd()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnOptions()
{
	CTCOnBoardMemoryImagesLoggingOptionsDialog  cLoggingOptionsDialog;

	for (cLoggingOptionsDialog.Create(this, m_szArchivalFileName[0], m_nArchivalPolicy[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0]); m_nArchivalPolicy[0] & LOGFILE_POLICY_RESET; )
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			m_cRetrievalFile.Reset();
			m_cRetrievalFile.Close();
			RetrieveLogEntries();
		}
		m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RESET;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnRetrieve()
{
	CHourglassCursor  cCursor;

	RetrieveLogEntries();
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnShowAsEvent()
{
	m_bShowAsEvent[0] = IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_SHOWASEVENT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnSpinchangeReloadCount()
{
	m_nRetrievalReloadCount[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_RELOAD_COUNT));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnSpinchangeStartTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), tTime[0]);
		break;
	}
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnSpinchangeStopTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), tTime[1]);
		break;
	}
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnTimer(UINT_PTR nEventID)
{
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	if (nEventID == TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_TIMERID)
	{
		if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_LOGGINGPAGE_REALTIME))
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.IsWatched() || m_cRetrievalFile.BeginWatch())
				{
					if (m_cRetrievalFile.Watch(nLogData))
					{
						do
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (pEntry->Unmap(nLogData)) ShowLogEntry(pEntry);
								delete pEntry;
							}
						} while (m_cRetrievalFile.Watch(nLogData));
					}
				}
				m_cRetrievalFile.Close();
			}
		}
	}
	CLocalePropertyPage::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesSettingsLoggingPage::OnDestroy()
{
	if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
	{
		m_cRetrievalFile.EndWatch();
		m_cRetrievalFile.Close();
	}
	KillTimer(TCONBOARDMEMORYIMAGESSETTINGSLOGGINGPAGE_TIMERID);
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintingComments

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsPrintingComments, CEdit)

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsPrintingComments, CEdit)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsPrintingComments)
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintingComments message handlers

void CTCOnBoardMemoryImagesSettingsPrintingComments::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_TAB)
	{
		if (!HIBYTE(GetKeyState(VK_SHIFT)))
		{
			GetParent()->GetParent()->GetNextDlgTabItem(GetParent())->SetFocus();
			return;
		}
	}
	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintingPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsPrintingPage, CLocalePropertyPage)

CTCOnBoardMemoryImagesSettingsPrintingPage::CTCOnBoardMemoryImagesSettingsPrintingPage() : CLocalePropertyPage(CTCOnBoardMemoryImagesSettingsPrintingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesSettingsPrintingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::Initialize()
{
	return((GetParentDisplay()->GetPrintJobs(m_pJobs[0])) ? m_pJobs[1].Copy(&m_pJobs[0]) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::GetJobs(CTCOnBoardMemoryImagesPrintJobs &pJobs) CONST
{
	return((pJobs.Copy(&m_pJobs[0])) ? Check(FALSE) : FALSE);
}

CTCOnBoardMemoryImagesSettingsDialog *CTCOnBoardMemoryImagesSettingsPrintingPage::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsPrintingPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCOnBoardMemoryImagesSettingsPrintingPage::ShowJobInfo()
{
	UINT  nMode;
	UINT  nRows;
	UINT  nRange[2];
	UINT  nColumns;
	UINT  nDataBits;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, ((nMode = pJobInfo->GetPrintMode()) & TCONBOARDMEMORYIMAGES_PRINT_ALL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, ((nMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) || (nMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, (nMode & TCONBOARDMEMORYIMAGES_PRINT_RANGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS, (nMode & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetProfile()));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_SELECTTEXT, (WPARAM)-1, (nMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) ? (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_FIRSTSIDE) : ((nMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) ? (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_LASTSIDE) : (LPARAM)EMPTYSTRING));
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT), (pJobInfo->GetPrintBySide(nRows)) ? nRows : TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW), (pJobInfo->GetPrintByRange(nRange[0], nRange[1])) ? nRange[0] : TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW), (pJobInfo->GetPrintByRange(nRange[0], nRange[1])) ? nRange[1] : TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS), (pJobInfo->GetPrintFormat(nColumns, nDataBits)) ? nColumns : TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTCOLUMNS);
		Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS), (pJobInfo->GetPrintFormat(nColumns, nDataBits)) ? nDataBits : TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTDATAWIDTH);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->SetWindowText(pJobInfo->GetComments());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVENAME)->EnableWindow((pJobInfo->GetName() != STRING(IDS_PRINTJOB_DEFAULTNAME)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVEALLNAMES)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_GETCOUNT) > 1) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_OPTIONS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTROW_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)->EnableWindow(!pJobInfo->GetComments().IsEmpty());
		return;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVEALLNAMES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTROW_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)->EnableWindow(FALSE);
}

CTCOnBoardMemoryImagesPrintJobInfo *CTCOnBoardMemoryImagesSettingsPrintingPage::FindJobInfo() CONST
{
	CString  szJobName;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowText(szJobName);
	return m_pJobs[0].GetAt(m_pJobs[0].Find(szJobName));
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pJobs[0].Compare(&m_pJobs[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? ((GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowTextLength() > 0 && FindJobInfo()) ? TRUE : FALSE) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesSettingsPrintingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::PostNcDestroy()
{
	m_pJobs[0].RemoveAll();
	m_pJobs[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsPrintingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsPrintingPage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME, OnAddName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVENAME, OnRemoveName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVEALLNAMES, OnRemoveAllNames)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, OnPrintAll)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, OnPrintBySide)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, OnPrintByRange)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS, OnResetComments)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, OnSelchangeProfile)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, OnChangePrintSide)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT, OnEditchangeComments)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT, OnSpinchangePrintRows)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW, OnSpinchangePrintFromRow)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW, OnSpinchangePrintToRow)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS, OnSpinchangePrintColumns)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS, OnSpinchangePrintDataBits)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintingPage message handlers

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::OnInitDialog()
{
	INT  nJob;
	INT  nJobs;
	INT  nProfile;
	INT  nProfiles;
	UDACCEL  sAccel;
	CStringArray  szProfiles;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(), sAccel.nSec = 1, sAccel.nInc = 4; m_wndComments.SubclassWindow(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->GetSafeHwnd()); )
	{
		for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(); nJob < nJobs; nJob++)
		{
			if ((pJobInfo = m_pJobs[0].GetAt(nJob)) != (CTCOnBoardMemoryImagesPrintJobInfo *)NULL)
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pJobInfo->GetName());
				continue;
			}
		}
		for (nProfile = 0, nProfiles = (EnumPrintProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
		{
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
			continue;
		}
		Spinbox_SetAccel(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS), 1, &sAccel);
		Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMROWS, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MAXIMUMROWS);
		Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMROWS, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MAXIMUMROWS);
		Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMROWS, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MAXIMUMROWS);
		Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMCOLUMNS, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MAXIMUMCOLUMNS);
		Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMDATAWIDTH, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MAXIMUMDATAWIDTH);
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_ADDTEXT, (WPARAM)NULL, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_FIRSTSIDE)), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_ADDTEXT, (WPARAM)NULL, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_LASTSIDE));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PRINTJOB_DEFAULTNAME)));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->EnableWindow();
		ShowJobInfo();
		break;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::OnSetActive()
{
	ShowJobInfo();
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::OnKillActive()
{
	GetParentDialog()->OnDataExchange(GetSafeHwnd(), m_pJobs[0]);
	return CLocalePropertyPage::OnKillActive();
}

BOOL CTCOnBoardMemoryImagesSettingsPrintingPage::OnDataExchange(CONST CTCOnBoardMemoryImagesPrintJobs &pJobs)
{
	return m_pJobs[0].Copy(&pJobs);
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnEditchangeName()
{
	CString  szJobName;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowText(szJobName); (pJobInfo = FindJobInfo()); )
	{
		ShowJobInfo();
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow((!pJobInfo  &&  szJobName.GetLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVENAME)->EnableWindow((pJobInfo != (CTCOnBoardMemoryImagesPrintJobInfo *)NULL  &&  szJobName != STRING(IDS_PRINTJOB_DEFAULTNAME)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_REMOVEALLNAMES)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)->EnableWindow((szJobName != STRING(IDS_PRINTJOB_DEFAULTNAME)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSelchangeName()
{
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_GETCURSEL));
	ShowJobInfo();
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnAddName()
{
	INT  nIndex;
	UINT  nMode;
	UINT  nCount;
	CString  szJobName;
	CString  szProfile;
	CString  szComments;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	for (; (pJobInfo = new CTCOnBoardMemoryImagesPrintJobInfo); )
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowText(szJobName);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE)->GetWindowText(szProfile);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->GetWindowText(szComments);
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL)) ? ((pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_ALL) & ~(TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) : pJobInfo->GetPrintMode();
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE)) ? ((!GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->SendMessage(TEM_GETPOS)) ? ((nMode | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) : ((nMode | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE))) : nMode;
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE)) ? (nMode | TCONBOARDMEMORYIMAGES_PRINT_RANGE) : (nMode & ~TCONBOARDMEMORYIMAGES_PRINT_RANGE);
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)) ? (nMode | TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS) : (nMode & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
		nCount = ((nMode & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) || (nMode & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)) : 0;
		if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szJobName) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szJobName)) >= 0)
		{
			for (pJobInfo->SetName(szJobName), pJobInfo->SetProfile(szProfile), pJobInfo->SetComments(szComments), pJobInfo->SetPrintMode(nMode | TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT), pJobInfo->SetPrintBySide(nCount), pJobInfo->SetPrintFormat((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS))); (nIndex = m_pJobs[0].Add(pJobInfo)) >= 0; )
			{
				ShowJobInfo();
				break;
			}
			if (nIndex >= 0) break;
		}
		delete pJobInfo;
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnRemoveName()
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = m_pJobs[0].GetAt(nJob)) && pJobInfo == FindJobInfo())
		{
			if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetName())) > 0)
			{
				m_pJobs[0].RemoveAt(nJob);
				delete pJobInfo;
			}
			break;
		}
	}
	for (; SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PRINTJOB_DEFAULTNAME))) >= 0; )
	{
		ShowJobInfo();
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnRemoveAllNames()
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = m_pJobs[0].GetAt(nJob)) && pJobInfo->GetName() != STRING(IDS_PRINTJOB_DEFAULTNAME) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetName())) > 0)
		{
			m_pJobs[0].RemoveAt(nJob);
			delete pJobInfo;
			nJobs--;
			nJob--;
		}
	}
	for (; SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PRINTJOB_DEFAULTNAME))) >= 0; )
	{
		ShowJobInfo();
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSelchangeProfile()
{
	CString  szProfile;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE)->GetWindowText(szProfile);
		pJobInfo->SetProfile(szProfile);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnPrintAll()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL))
	{
		for (CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, TRUE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, FALSE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, FALSE), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_SELECTTEXT, (WPARAM)-1, (LPARAM)EMPTYSTRING); (pJobInfo = FindJobInfo()); )
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~(TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE | TCONBOARDMEMORYIMAGES_PRINT_RANGE));
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_ALL);
			break;
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowTextLength() > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_GETCURSEL) != CB_ERR  &&  !pJobInfo) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTROW_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnPrintBySide()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE))
	{
		for (CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, FALSE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, TRUE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, FALSE), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_SELECTTEXT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_FIRSTSIDE)), Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS); (pJobInfo = FindJobInfo()); )
		{
			pJobInfo->SetPrintMode((pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE | TCONBOARDMEMORYIMAGES_PRINT_RANGE));
			pJobInfo->SetPrintBySide(TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS);
			break;
		}
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, EM_SETSEL, 0, (LPARAM)-1);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowTextLength() > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_GETCURSEL) != CB_ERR  &&  !pJobInfo) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTROW_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnPrintByRange()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE))
	{
		for (CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTALL, FALSE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE, FALSE), CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE, TRUE), Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMROWS), Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW), TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS); (pJobInfo = FindJobInfo()); )
		{
			pJobInfo->SetPrintMode((pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_RANGE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE));
			pJobInfo->SetPrintByRange(TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_MINIMUMROWS, TCONBOARDMEMORYIMAGESSETTINGSPRINTINGPAGE_OPTIONS_DEFAULTROWS);
			break;
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_ADDNAME)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_NAME)->GetWindowTextLength() > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PROFILE, CB_GETCURSEL) != CB_ERR  &&  !pJobInfo) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYSIDE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTBYRANGE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTROW_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnChangePrintSide()
{
	UINT  nMode;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (!SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDE, TEM_GETPOS)) ? ((pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)) : ((pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) & ~(TCONBOARDMEMORYIMAGES_PRINT_ALL | TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE));
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSpinchangePrintRows()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo())) pJobInfo->SetPrintBySide((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTSIDECOUNT)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSpinchangePrintFromRow()
{
	UINT  nRange[2];
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nRange[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)), nRange[1] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)); (pJobInfo = FindJobInfo()); )
	{
		pJobInfo->SetPrintByRange(nRange[0], (nRange[0] > nRange[1]) ? nRange[0] : nRange[1]);
		break;
	}
	if (nRange[0] > nRange[1]) Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW), nRange[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSpinchangePrintToRow()
{
	UINT  nRange[2];
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nRange[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW)), nRange[1] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTTOROW)); (pJobInfo = FindJobInfo()); )
	{
		pJobInfo->SetPrintByRange((nRange[0] < nRange[1]) ? nRange[0] : nRange[1], nRange[1]);
		break;
	}
	if (nRange[0] > nRange[1]) Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTFROMROW), nRange[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSpinchangePrintColumns()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT);
		pJobInfo->SetPrintFormat((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnSpinchangePrintDataBits()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_CUSTOMLAYOUT);
		pJobInfo->SetPrintFormat((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_COLUMNS)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_PRINTLAYOUT_DATAWIDTH_BITS)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnEditchangeComments()
{
	CString  szComments;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_COMMENTSTEXT)->GetWindowText(szComments);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)->EnableWindow(!szComments.IsEmpty());
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS, (!szComments.IsEmpty()) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS) : FALSE);
		pJobInfo->SetPrintMode((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS));
		pJobInfo->SetComments(szComments);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintingPage::OnResetComments()
{
	UINT  nMode;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTINGPAGE_PROPERTIES_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintJobsPage property page

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsPrintJobsPage, CLocalePropertyPage)

CTCOnBoardMemoryImagesSettingsPrintJobsPage::CTCOnBoardMemoryImagesSettingsPrintJobsPage() : CLocalePropertyPage(CTCOnBoardMemoryImagesSettingsPrintJobsPage::IDD)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesSettingsPrintJobsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::Initialize()
{
	return((GetParentDisplay()->GetPrintJobs(m_pJobs[0])) ? m_pJobs[1].Copy(&m_pJobs[0]) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::GetJobs(CTCOnBoardMemoryImagesPrintJobs &pJobs) CONST
{
	return((pJobs.Copy(&m_pJobs[0])) ? Check(FALSE) : FALSE);
}

CTCOnBoardMemoryImagesSettingsDialog *CTCOnBoardMemoryImagesSettingsPrintJobsPage::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsPrintJobsPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::EnumJobs()
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_RESETCONTENT); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = m_pJobs[0].GetAt(nJob)) && pJobInfo->GetName() != STRING(IDS_PRINTJOB_DEFAULTNAME) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pJobInfo->GetName()) >= 0)
		{
			if ((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_ACTIVE) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pJobInfo->GetName()) == LB_ERR)
			{
				pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_ACTIVE);
				continue;
			}
		}
	}
	if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_SETCURSEL);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
		ShowJobInfo();
		return TRUE;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DETAILS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB)->EnableWindow(FALSE);
	ShowJobInfo();
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::EnumProcessors()
{
	INT  nProcessor;
	INT  nProcessors;
	UINT  nAddress[2][2];
	CString  szProcessor;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	for (nProcessor = 0, nProcessors = (GetParentDisplay()->GetProcessors(m_pProcessors, FALSE)) ? (INT)m_pProcessors.GetSize() : 0; nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = m_pProcessors.GetAt(nProcessor)) != (CTCOnBoardMemoryImagesProcessorItem *)NULL  &&  pProcessor->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]))
		{
			szProcessor.Format(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_PROCESSORFORMAT), (LPCTSTR)pProcessor->GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]));
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szProcessor);
		}
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::EnumDumps()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	for (nMemoryArea = 0, nMemoryAreas = ((pProcessor = m_pProcessors.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCURSEL)))) ? (INT)pProcessor->GetSize() : -1, SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_RESETCONTENT); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = pProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL && (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE))
		{
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetName());
			continue;
		}
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesSettingsPrintJobsPage::ShowJobInfo()
{
	INT  nDump;
	INT  nDumps;
	INT  nIndex;
	UINT  nStopCount;
	UINT  nAddress[2][2];
	CString  szEvent;
	CString  szProcessor;
	CTimeKey  tStopTime;
	CStringArray  szDumps;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	if ((pJobInfo = FindJobInfo()))
	{
		if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCOUNT) > 0)
		{
			for (szProcessor.Empty(); (pProcessor = m_pProcessors.GetAt(m_pProcessors.Find(pJobInfo->GetPrintProcessor()))) && pProcessor->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]); )
			{
				szProcessor.Format(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_PROCESSORFORMAT), (LPCTSTR)pProcessor->GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]));
				break;
			}
			for (nDump = 0, nDumps = pJobInfo->GetPrintDumps(szDumps), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProcessor)), EnumDumps(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_SETSEL, (WPARAM)FALSE, (LPARAM)-1); nDump < nDumps; nDump++)
			{
				if ((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDumps.GetAt(nDump))) >= 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_SETSEL, TRUE, nIndex);
					continue;
				}
			}
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_SETCURSEL, (pJobInfo->GetPrintAtEvent(szEvent, tStopTime) || pJobInfo->GetPrintAtEvent(szEvent, nStopCount)) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) : (WPARAM)-1);
			Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME), ((pJobInfo->GetPrintAtEvent(szEvent, tStopTime) && tStopTime > 0) || (pJobInfo->GetPrintAtDownload(tStopTime) && tStopTime > 0)) ? tStopTime : CTime::GetCurrentTime().GetTime());
			Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES), ((pJobInfo->GetPrintAtEvent(szEvent, nStopCount) && nStopCount > 0) || (pJobInfo->GetPrintAtDownload(nStopCount) && nStopCount > 0)) ? nStopCount : 0);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_ATEVENT) ? ((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL) >= 0) ? TRUE : FALSE) : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_COMPLETEONLY) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT));
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOP_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME));
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES)->EnableWindow();
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES));
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES));
			return;
		}
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_SETSEL, (WPARAM)FALSE, (LPARAM)-1);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOP_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES_STATIC)->EnableWindow(FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::CheckJobInfo() CONST
{
	CStringArray  szDumps;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	return(((pJobInfo = FindJobInfo())) ? (!pJobInfo->GetPrintProcessor().IsEmpty() && pJobInfo->GetPrintDumps(szDumps) > 0 && (pJobInfo->GetPrintMode() & (TCONBOARDMEMORYIMAGES_PRINT_ATEVENT | TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD))) : FALSE);
}

CTCOnBoardMemoryImagesPrintJobInfo *CTCOnBoardMemoryImagesSettingsPrintJobsPage::FindJobInfo(BOOL bActive) CONST
{
	INT  nJob;
	INT  nJobs;
	CString  szJobName[2];
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)m_pJobs[0].GetSize(), szJobName[0] = Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS)->SendMessage(LB_GETCURSEL)), szJobName[1] = Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS)->SendMessage(LB_GETCURSEL)), szJobName[0] = (!bActive) ? szJobName[0] : szJobName[1]; nJob < nJobs; nJob++)
	{
		if ((pJobInfo = m_pJobs[0].GetAt(nJob)) && pJobInfo->GetName() == szJobName[0]) break;
		continue;
	}
	return((nJob < nJobs) ? m_pJobs[0].GetAt(nJob) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pJobs[0].Compare(&m_pJobs[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesSettingsPrintJobsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::PostNcDestroy()
{
	m_pJobs[0].RemoveAll();
	m_pJobs[1].RemoveAll();
	m_pProcessors.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsPrintJobsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsPrintJobsPage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB, OnAddJob)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB, OnRemoveJob)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT, OnPrintAtEvent)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD, OnPrintAtDownload)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY, OnPrintCompleteDumps)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME, OnRepetitionStopByTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES, OnRepetitionStopByCopies)
	ON_LBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, OnSelchangeDefinedJob)
	ON_LBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, OnSelchangeActiveJob)
	ON_LBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, OnSelchangeDump)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, OnSelchangeProcessor)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, OnSelchangeEvent)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES, OnSpinchangeRepetitionStopCopies)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME, OnSpinchangeRepetitionStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsPrintJobsPage message handlers

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES), TCONBOARDMEMORYIMAGESSETTINGSPRINTJOBSPAGE_OPTIONS_MINIMUMCOPIES, TCONBOARDMEMORYIMAGESSETTINGSPRINTJOBSPAGE_OPTIONS_MAXIMUMCOPIES);
	EnumProcessors();
	EnumEvents();
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSetActive()
{
	EnumJobs();
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnKillActive()
{
	GetParentDialog()->OnDataExchange(GetSafeHwnd(), m_pJobs[0]);
	return CLocalePropertyPage::OnKillActive();
}

BOOL CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnDataExchange(CONST CTCOnBoardMemoryImagesPrintJobs &pJobs)
{
	return m_pJobs[0].Copy(&pJobs);
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnAddJob()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	if ((pJobInfo = FindJobInfo()))
	{
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_ACTIVE);
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pJobInfo->GetName()));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB)->EnableWindow();
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnRemoveJob()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CHourglassCursor  cCursor;

	if ((pJobInfo = FindJobInfo(TRUE)))
	{
		pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_ACTIVE);
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCURSEL));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSelchangeDefinedJob()
{
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	ShowJobInfo();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow(((pJobInfo = FindJobInfo()) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetName()) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSelchangeActiveJob()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_REMOVEJOB)->EnableWindow();
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSelchangeProcessor()
{
	CStringArray  szDumps;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CTCOnBoardMemoryImagesProcessorItem  *pProcessor;

	for (EnumDumps(); (pJobInfo = FindJobInfo()); )
	{
		if ((pProcessor = m_pProcessors.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PROCESSOR, CB_GETCURSEL))))
		{
			pJobInfo->SetPrintProcessor(pProcessor->GetName());
			pJobInfo->SetPrintDumps(szDumps);
		}
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSelchangeDump()
{
	INT  nDump;
	INT  nDumps;
	CUIntArray  nDumpIDs;
	CStringArray  szDumps;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (nDump = 0, nDumpIDs.SetSize(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_GETCOUNT)), nDumps = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS, LB_GETSELITEMS, (WPARAM)nDumpIDs.GetSize(), (LPARAM)nDumpIDs.GetData()); nDump < nDumps; nDump++)
		{
			szDumps.Add(Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_DUMPS), nDumpIDs.GetAt(nDump)));
			continue;
		}
		pJobInfo->SetPrintDumps(szDumps);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnPrintAtEvent()
{
	UINT  nStopCount;
	CString  szEvent;
	CTimeKey  tStopTime;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT)) ? 0 : -1), pJobInfo->SetPrintAtEvent(EMPTYSTRING, 0), pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~(TCONBOARDMEMORYIMAGES_PRINT_ATEVENT | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT)); SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL) >= 0; )
		{
			for (pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_ATEVENT), szEvent = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL)), tStopTime = 0; IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME) && (tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME))) > 0; )
			{
				pJobInfo->SetPrintMode((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME);
				pJobInfo->SetPrintAtEvent(szEvent, tStopTime);
				break;
			}
			for (nStopCount = 0; (nStopCount = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)) : 0) > 0; )
			{
				pJobInfo->SetPrintMode((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT);
				break;
			}
			pJobInfo->SetPrintAtEvent(szEvent, nStopCount);
			break;
		}
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATEVENT));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnPrintAtDownload()
{
	UINT  nMode;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTATDOWNLOAD)) ? (pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD) : (pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ADDJOB)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_ACTIVEJOBS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_DEFINEDJOBS, LB_GETCURSEL))) == LB_ERR  &&  CheckJobInfo()) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnPrintCompleteDumps()
{
	UINT  nMode;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTCOMPLETEDUMPSONLY)) ? (pJobInfo->GetPrintMode() | TCONBOARDMEMORYIMAGES_PRINT_COMPLETEONLY) : (pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_COMPLETEONLY);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSelchangeEvent()
{
	UINT  nStopCount;
	CString  szEvent;
	CTimeKey  tStopTime;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	for (; (pJobInfo = FindJobInfo()); )
	{
		if ((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) && pJobInfo->GetPrintAtEvent(szEvent, tStopTime))
		{
			pJobInfo->SetPrintAtEvent(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL)), tStopTime);
			break;
		}
		if ((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) && pJobInfo->GetPrintAtEvent(szEvent, nStopCount))
		{
			pJobInfo->SetPrintAtEvent(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL)), nStopCount);
			break;
		}
		pJobInfo->SetPrintAtEvent(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_PRINTEVENT, CB_GETCURSEL)), 0);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnRepetitionStopByTime()
{
	CString  szEvent;
	CTimeKey  tStopTime[2];
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->SetPrintMode((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME)) ? ((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) : ((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME)), tStopTime[0] = tStopTime[0].GetTime() + CTimeSpan(1, 0, 0, 0).GetTotalSeconds(); pJobInfo->GetPrintAtEvent(szEvent, tStopTime[1]); )
		{
			pJobInfo->SetPrintAtEvent(szEvent, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) ? tStopTime[0] : 0);
			break;
		}
		if (pJobInfo->GetPrintAtDownload(tStopTime[1])) pJobInfo->SetPrintAtDownload((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) ? tStopTime[0] : 0);
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME), tStopTime[0]);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME, !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME));
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnRepetitionStopByCopies()
{
	UINT  nStopCount;
	CString  szEvent;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->SetPrintMode((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES)) ? ((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) | TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) : ((pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYTIME) & ~TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT)); pJobInfo->GetPrintAtEvent(szEvent, nStopCount); )
		{
			pJobInfo->SetPrintAtEvent(szEvent, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) ? TCONBOARDMEMORYIMAGESSETTINGSPRINTJOBSPAGE_OPTIONS_DEFAULTCOPIES : 0);
			break;
		}
		if (pJobInfo->GetPrintAtDownload(nStopCount)) pJobInfo->SetPrintAtDownload((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_REPEATSTOPBYCOUNT) ? TCONBOARDMEMORYIMAGESSETTINGSPRINTJOBSPAGE_OPTIONS_DEFAULTCOPIES : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES), TCONBOARDMEMORYIMAGESSETTINGSPRINTJOBSPAGE_OPTIONS_DEFAULTCOPIES);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES, !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES));
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPBYCOPIES));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSpinchangeRepetitionStopTime()
{
	CString  szEvent;
	CTimeKey  tStopTime;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (pJobInfo->GetPrintAtEvent(szEvent, tStopTime)) pJobInfo->SetPrintAtEvent(szEvent, Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)));
		if (pJobInfo->GetPrintAtDownload(tStopTime)) pJobInfo->SetPrintAtDownload(Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPTIME)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesSettingsPrintJobsPage::OnSpinchangeRepetitionStopCopies()
{
	UINT  nStopCount;
	CString  szEvent;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (pJobInfo->GetPrintAtEvent(szEvent, nStopCount)) pJobInfo->SetPrintAtEvent(szEvent, (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)));
		if (pJobInfo->GetPrintAtDownload(nStopCount)) pJobInfo->SetPrintAtDownload((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGESSETTINGS_PRINTJOBSPAGE_BEHAVIOR_REPETITIONSTOPCOPIES)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsTabCtrl

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsTabCtrl, CTabCtrl)

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsTabCtrl)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsTabCtrl message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsDialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSettingsDialog, CDisplayPropertySheetDialog)

CTCOnBoardMemoryImagesSettingsDialog::CTCOnBoardMemoryImagesSettingsDialog() : CDisplayPropertySheetDialog()
{
	AddPage(&m_pageLayout);
	AddPage(&m_pageDumps);
	AddPage(&m_pageLogging);
	AddPage(&m_pagePrinting);
	AddPage(&m_pagePrintJobs);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLayout(CUIntArray &nColumns) CONST
{
	return m_pageLayout.GetLayout(nColumns);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLayoutTitleFont(UINT nPane, LPLOGFONT pTitleFont) CONST
{
	return m_pageLayout.GetTitleFont(nPane, pTitleFont);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLayoutItemsFont(UINT nPane, LPLOGFONT pItemsFont) CONST
{
	return m_pageLayout.GetItemsFont(nPane, pItemsFont);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLayoutTablesOutline(LPLOGFONT pTitleFont, LPLOGFONT pItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	return m_pageLayout.GetTablesOutline(pTitleFont, pItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLayoutToolTipMode(BOOL &bEnable) CONST
{
	return m_pageLayout.GetToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::IsLayoutModified() CONST
{
	return m_pageLayout.IsModified();
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetDumpsVersioning(CTCOnBoardMemoryImagesProcessorItems &pProcessors) CONST
{
	return m_pageDumps.GetVersioning(pProcessors);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetDumpsFlashBehavior(CTimeSpan &tDelay, BOOL &bDBMS, BOOL &bFile) CONST
{
	return m_pageDumps.GetFlashBehavior(tDelay, bDBMS, bFile);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::IsDumpsModified() CONST
{
	return m_pageDumps.IsModified();
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	return m_pageLogging.GetOptions(nArchivalPolicy, szArchivalFileName, dwArchivalRetention, tArchivalRetention, szRetrievalFileName, nRetrievalReloadCount, bShowAsEvent);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::IsLoggingModified() CONST
{
	return m_pageLogging.IsModified();
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::GetPrintJobs(CTCOnBoardMemoryImagesPrintJobs &pPrintJobs) CONST
{
	return(((GetActivePage()->GetSafeHwnd() != m_pagePrintJobs.GetSafeHwnd() && m_pagePrinting.GetJobs(pPrintJobs)) || (GetActivePage()->GetSafeHwnd() == m_pagePrintJobs.GetSafeHwnd() && m_pagePrintJobs.GetJobs(pPrintJobs))) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::IsPrintingModified() CONST
{
	return m_pagePrinting.IsModified() || m_pagePrintJobs.IsModified();
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSettingsDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)CDisplayPropertySheetDialog::GetParentDisplay());
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSettingsDialog, CDisplayPropertySheetDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSettingsDialog message handlers

BOOL CTCOnBoardMemoryImagesSettingsDialog::OnInitDialog()
{
	INT  nPage;
	INT  nPages;
	CHourglassCursor  cCursor;

	CDisplayPropertySheetDialog::OnInitDialog();
	SetTitle(STRING(IDS_TCONBOARDMEMORYIMAGESSETTINGSDIALOG_TITLE));
	for (nPage = 0, nPages = GetPageCount(), m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nPage < nPages; nPage++)
	{
		SetActivePage((nPage + 1) % nPages);
		continue;
	}
	m_wndTabCtrl.SetFocus();
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CRect  rTab;
	CTCOnBoardMemoryImagesPrintJobs  pPrintJobs;
	LPNMHDR  pNotifyInfo = (LPNMHDR)lParam;

	if (pNotifyInfo->code == TCN_SELCHANGING)
	{
		if (HIBYTE(GetKeyState(VK_RIGHT)) && GetActivePage()->GetSafeHwnd() == m_pagePrinting.GetSafeHwnd() && m_pagePrinting.GetJobs(pPrintJobs) && pPrintJobs.GetSize() <= 1)
		{
			CAudioDevice::AlertBySound();
			*pResult = TRUE;
			return TRUE;
		}
		if (HIBYTE(GetKeyState(VK_LBUTTON)))
		{
			if (GetPrintJobs(pPrintJobs) && pPrintJobs.GetSize() <= 1)
			{
				if (GetTabControl()->GetItemRect(GetPageIndex(&m_pagePrintJobs), rTab))
				{
					GetTabControl()->ClientToScreen(rTab);
					if (rTab.PtInRect(GetCurrentMessage()->pt))
					{
						CAudioDevice::AlertBySound();
						*pResult = TRUE;
						return TRUE;
					}
				}
			}
		}
	}
	return CDisplayPropertySheetDialog::OnNotify(wParam, lParam, pResult);
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::OnDataExchange(HWND hPage, CONST CTCOnBoardMemoryImagesPrintJobs &pJobs)
{
	return(((hPage == m_pagePrinting.GetSafeHwnd() && m_pagePrintJobs.OnDataExchange(pJobs)) || (hPage == m_pagePrintJobs.GetSafeHwnd() && m_pagePrinting.OnDataExchange(pJobs))) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	ReportEvent((!GetParentDisplay()->OnCloseSettingsDialog(IDOK)) ? SYSTEM_WARNING_TCONBOARDMEMORYIMAGES_SETUP_FAILURE : SYSTEM_NOERROR);
	CDisplayPropertySheetDialog::OnOK();
}

void CTCOnBoardMemoryImagesSettingsDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->OnCloseSettingsDialog(IDCANCEL);
	CDisplayPropertySheetDialog::OnCancel();
}

BOOL CTCOnBoardMemoryImagesSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTablePropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesTablePropertiesDialog, CDisplayDialog)

CTCOnBoardMemoryImagesTablePropertiesDialog::CTCOnBoardMemoryImagesTablePropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesTablePropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesTablePropertiesDialog::Create(CWnd *pParentWnd, LOGFONT *plfTitleFont, LOGFONT *plfItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor)
{
	INT  nResult;

	for (CopyMemory(&m_lfTable[0][0], plfTitleFont, sizeof(LOGFONT)), CopyMemory(&m_lfTable[1][0], plfTitleFont, sizeof(LOGFONT)), CopyMemory(&m_lfTable[0][1], plfItemsFont, sizeof(LOGFONT)), CopyMemory(&m_lfTable[1][1], plfItemsFont, sizeof(LOGFONT)), m_nTableFontColors[0][0] = m_nTableFontColors[1][0] = nTitleFontColor, m_nTableFontColors[0][1] = m_nTableFontColors[1][1] = nItemsFontColor, m_nTableColors[0][0] = m_nTableColors[1][0] = nTitleBackgroundColor, m_nTableColors[0][1] = m_nTableColors[1][1] = nItemsBackgroundColor; (nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardMemoryImagesTablePropertiesDialog::IDD)) == IDOK; )
	{
		CopyMemory(plfTitleFont, &m_lfTable[0][0], sizeof(LOGFONT));
		CopyMemory(plfItemsFont, &m_lfTable[0][1], sizeof(LOGFONT));
		nTitleBackgroundColor = m_nTableColors[0][0];
		nItemsBackgroundColor = m_nTableColors[0][1];
		nTitleFontColor = m_nTableFontColors[0][0];
		nItemsFontColor = m_nTableFontColors[0][1];
		break;
	}
	return nResult;
}

CTCOnBoardMemoryImagesSettingsLayoutPage *CTCOnBoardMemoryImagesTablePropertiesDialog::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesSettingsLayoutPage *)CDisplayDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesTablePropertiesDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardMemoryImagesTablePropertiesDialog::ShowFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CStringTools  cStringTools;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_RESETCONTENT); (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE) && cFontTools.EnumerateFont(m_lfTable[0][0].lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS) && cFontTools.EnumerateFont(m_lfTable[0][1].lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE))
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfTable[0][0])), 0));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfTable[0][0])), max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfTable[1][0])), 0)));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[0][0]);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS))
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfTable[0][1])), 0));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfTable[0][1])), max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfTable[1][1])), 0)));
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[0][1]);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesTablePropertiesDialog::ShowFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

VOID CTCOnBoardMemoryImagesTablePropertiesDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, bCheck);
}

BOOL CTCOnBoardMemoryImagesTablePropertiesDialog::IsModified() CONST
{
	CFontTools  cFontTools;

	return((lstrcmp(m_lfTable[0][0].lfFaceName, m_lfTable[1][0].lfFaceName) || (m_lfTable[0][0].lfHeight != m_lfTable[1][0].lfHeight  &&  cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfTable[0][0])) != cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfTable[1][0]))) || m_lfTable[0][0].lfWeight != m_lfTable[1][0].lfWeight || m_lfTable[0][0].lfItalic != m_lfTable[1][0].lfItalic || lstrcmp(m_lfTable[0][1].lfFaceName, m_lfTable[1][1].lfFaceName) || (m_lfTable[0][1].lfHeight != m_lfTable[1][1].lfHeight  &&  cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfTable[0][1])) != cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfTable[1][1]))) || m_lfTable[0][1].lfWeight != m_lfTable[1][1].lfWeight || m_lfTable[0][1].lfItalic != m_lfTable[1][1].lfItalic || GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[0][0]) != GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[1][0]) || GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[0][1]) != GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[1][1]) || GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[0][0]) != GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[1][0]) || GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[0][1]) != GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nTableFontColors[1][1])) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTablePropertiesDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->GetWindowTextLength() > 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesTablePropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesTablePropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesTablePropertiesDialog)
	ON_WM_PAINT()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE, OnTitleFont)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS, OnItemsFont)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, OnSelchangeFontColor)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, OnSelchangeTitleBackgroundColor)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, OnSelchangeKeysBackgroundColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTablePropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesTablePropertiesDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfTable[0][0].lfFaceName));
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CCB_INSERTCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CB_GETCOUNT) - 1, (LPARAM)VGA_COLOR_WHITE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, CCB_INSERTCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, CB_GETCOUNT) - 1, (LPARAM)VGA_COLOR_WHITE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, CCB_INSERTCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, CB_GETCOUNT) - 1, (LPARAM)VGA_COLOR_WHITE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[0][0]);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nTableColors[0][1]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS)->EnableWindow();
	ShowFontDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE)) ? &m_lfTable[0][0] : &m_lfTable[0][1]); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE)) ? m_nTableFontColors[0][0] : m_nTableFontColors[0][1]) : GetSysColor(COLOR_GRAYTEXT));
			cDC.FillSolidRect(rSampleText, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE)) ? m_nTableColors[0][0] : GetSysColor(COLOR_3DFACE)) : GetSysColor(COLOR_3DFACE));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnTitleFont()
{
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfTable[0][0].lfFaceName));
	ShowFontDetails();
	ShowFontSample();
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnItemsFont()
{
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfTable[0][1].lfFaceName));
	ShowFontDetails();
	ShowFontSample();
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE))
	{
		_tcscpy_s(m_lfTable[0][0].lfFaceName, sizeof(m_lfTable[0][0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS))
	{
		_tcscpy_s(m_lfTable[0][1].lfFaceName, sizeof(m_lfTable[0][1].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_NAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfTable[0][0].lfWeight, m_lfTable[0][0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfTable[0][0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfTable[0][0]);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfTable[0][1].lfWeight, m_lfTable[0][1].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfTable[0][1].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfTable[0][1]);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeFontStyle()
{
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfTable[0][0].lfWeight, m_lfTable[0][0].lfItalic);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfTable[0][1].lfWeight, m_lfTable[0][1].lfItalic);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeFontSize()
{
	CString  szSize;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfTable[0][0].lfHeight);
	}
	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS))
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfTable[0][1].lfHeight);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeFontColor()
{
	for (; IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_TITLE); )
	{
		m_nTableFontColors[0][0] = (COLORREF)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CB_GETCURSEL));
		break;
	}
	for (; IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_ITEMS); )
	{
		m_nTableFontColors[0][1] = (COLORREF)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_FONTS_COLOR, CB_GETCURSEL));
		break;
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeTitleBackgroundColor()
{
	for (m_nTableColors[0][0] = (COLORREF)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_TITLE, CB_GETCURSEL)); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnSelchangeKeysBackgroundColor()
{
	for (m_nTableColors[0][1] = (COLORREF)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_TABLEPROPERTIES_COLORS_KEYS, CB_GETCURSEL)); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	EndDialog(IDCANCEL);
}

BOOL CTCOnBoardMemoryImagesTablePropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESTABLEPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesTablePropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESTABLEPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesLoggingOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesLoggingOptionsDialog, CDisplayDialog)

CTCOnBoardMemoryImagesLoggingOptionsDialog::CTCOnBoardMemoryImagesLoggingOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesLoggingOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesLoggingOptionsDialog::Create(CWnd *pParentWnd, CString &szArchivalFileName, UINT &nArchivalPolicy, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName)
{
	INT  nResult;

	for (m_nArchivalPolicy[0] = m_nArchivalPolicy[1] = nArchivalPolicy, m_szArchivalFileName[0] = m_szArchivalFileName[1] = szArchivalFileName, m_dwArchivalRetention[0] = m_dwArchivalRetention[1] = dwArchivalRetention, m_tArchivalRetention[0] = m_tArchivalRetention[1] = tArchivalRetention, m_szRetrievalFileName[0] = m_szRetrievalFileName[1] = szRetrievalFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardMemoryImagesLoggingOptionsDialog::IDD)) == IDOK; )
	{
		szRetrievalFileName = m_szRetrievalFileName[0];
		szArchivalFileName = m_szArchivalFileName[0];
		dwArchivalRetention = m_dwArchivalRetention[0];
		tArchivalRetention = m_tArchivalRetention[0];
		nArchivalPolicy = m_nArchivalPolicy[0];
		break;
	}
	return nResult;
}

CTCOnBoardMemoryImagesLoggingPage *CTCOnBoardMemoryImagesLoggingOptionsDialog::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesLoggingPage *)CDisplayDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesLoggingOptionsDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardMemoryImagesLoggingOptionsDialog::ShowLoggingOptions()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DISABLED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME) != LOGFILE_POLICY_RETENTIONBYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) != LOGFILE_POLICY_CYCLICMODE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) != LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS), m_tArchivalRetention[0].GetTotalSeconds() / SECONDSPERDAY);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM), m_dwArchivalRetention[0] / 1024);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME)->SetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED));
}

VOID CTCOnBoardMemoryImagesLoggingOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DISABLED, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_RESET, bCheck);
}

BOOL CTCOnBoardMemoryImagesLoggingOptionsDialog::IsModified() CONST
{
	return((m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1])) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesLoggingOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szArchivalFileName[0].IsEmpty() && !m_szRetrievalFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesLoggingOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesLoggingOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesLoggingOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_RETRIEVALS, OnRetrievals)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, OnOverwriteLogs)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, OnOverwriteOldLogs)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, OnOverwriteNoLogs)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_RESET, OnResetSize)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS, OnSpinchangeDays)
	ON_CONTROL(SBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM, OnSpinchangeSize)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesLoggingOptionsDialog message handlers

BOOL CTCOnBoardMemoryImagesLoggingOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS), TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_MINIMUMDAYS, TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_MAXIMUMDAYS);
	Spinbox_SetRange(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM), TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_MINIMUMSIZE, TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_MAXIMUMSIZE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_RETRIEVALS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_RESET)->EnableWindow();
	ShowLoggingOptions();
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnRetrievals()
{
	CTCOnBoardMemoryImagesRetrievalOptionsDialog  cRetrievalOptions;

	cRetrievalOptions.Create(this, m_szRetrievalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME)->SetWindowText((m_szArchivalFileName[0] = cFileBrowseDialog.GetPathName()));
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnOverwriteLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnOverwriteOldLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = SECONDSPERDAY*TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_DEFAULTDAYS).GetTotalSeconds() / SECONDSPERDAY);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnOverwriteNoLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_NONCYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_NOOVERWRITE, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnUnlimitedSize()
{
	m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 0));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnLimitedSize()
{
	m_nArchivalPolicy[0] |= LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 1024 * TCONBOARDMEMORYIMAGESLOGGINGOPTIONS_DEFAULTSIZE) / 1024);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnResetSize()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_RESET)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_RESET) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnDisabled()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_DISABLED)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_DISABLED) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnSpinchangeDays()
{
	m_tArchivalRetention[0] = SECONDSPERDAY*Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_POLICY_DAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnSpinchangeSize()
{
	m_dwArchivalRetention[0] = 1024 * Spinbox_GetPos(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_SIZE_MAXIMUM));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_LOGGINGOPTIONS_FILENAME)->GetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesLoggingOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesLoggingOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesRetrievalOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesRetrievalOptionsDialog, CDisplayDialog)

CTCOnBoardMemoryImagesRetrievalOptionsDialog::CTCOnBoardMemoryImagesRetrievalOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesRetrievalOptionsDialog::Create(CWnd *pParentWnd, CString &szFileName)
{
	INT  nResult;

	for (m_szFileName[0] = m_szFileName[1] = szFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCOnBoardMemoryImagesRetrievalOptionsDialog::IDD)) == IDOK; )
	{
		szFileName = m_szFileName[0];
		break;
	}
	return nResult;
}

CTCOnBoardMemoryImagesLoggingOptionsDialog *CTCOnBoardMemoryImagesRetrievalOptionsDialog::GetParentDialog() CONST
{
	return((CTCOnBoardMemoryImagesLoggingOptionsDialog *)CDisplayDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesRetrievalOptionsDialog::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCOnBoardMemoryImagesRetrievalOptionsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME, CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
}

BOOL CTCOnBoardMemoryImagesRetrievalOptionsDialog::IsModified() CONST
{
	return((m_szFileName[0].CompareNoCase(m_szFileName[1])) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesRetrievalOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCOnBoardMemoryImagesRetrievalOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesRetrievalOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesRetrievalOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesRetrievalOptionsDialog message handlers

BOOL CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME)->SetWindowText(m_szFileName[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	AdjustToPrivileges();
	return TRUE;
}

void CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_RETRIEVALOPTIONS_FILENAME)->GetWindowText(m_szFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesRetrievalOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesToolBar

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesToolBar, CDisplayToolBar)

CTCOnBoardMemoryImagesToolBar::CTCOnBoardMemoryImagesToolBar() : CDisplayToolBar()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesToolBar, CDisplayToolBar)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesToolBar)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesToolBar message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesStatusBar

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesStatusBar, CDisplayStatusBar)

CTCOnBoardMemoryImagesStatusBar::CTCOnBoardMemoryImagesStatusBar() : CDisplayStatusBar()
{
	m_szToolTipText.Empty();
	m_bToolTipText = FALSE;
}

BOOL CTCOnBoardMemoryImagesStatusBar::SetIndicators(CONST UINT *pPanesID, INT nCount)
{
	INT  nIndex;
	CRect  rPane;
	CString  szPane;
	CToolInfo  cToolInfo;
	CDisplayLock  cLock(this);

	if (CDisplayStatusBar::SetIndicators(pPanesID, nCount))
	{
		if (CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE) >= 0)
		{
			szPane.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_DATAMESSAGE), (UINT)-1);
			SetPaneInfo(CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE), ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE, SBPS_NOBORDERS | SBPS_STRETCH, CalcPaneWidth(szPane));
		}
		if (!IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			m_wndToolTip.Create(this, TTS_ALWAYSTIP | TTS_NOPREFIX | TTS_BALLOON);
			SetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE, GetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE) | CS_DROPSHADOW);
		}
		if (IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			if ((nIndex = CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE);
					break;
				}
			}
			m_wndToolTip.SetMaxTipWidth(GetSystemMetrics(SM_CXSCREEN));
			m_wndToolTip.Activate(TRUE);
		}
		return TRUE;
	}
	return FALSE;
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesStatusBar::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)CDisplayStatusBar::GetParent());
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesStatusBar, CDisplayStatusBar)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesStatusBar)
	ON_WM_CREATE()
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipNotify)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesStatusBar message handlers

int CTCOnBoardMemoryImagesStatusBar::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CDisplayStatusBar::OnCreate(lpCreateStruct) != -1)
	{
		SetTimer(TCONBOARDMEMORYIMAGESSTATUSBAR_UPDATE_TIMERID, TCONBOARDMEMORYIMAGESSTATUSBAR_UPDATE_TIMEOUT, NULL);
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesStatusBar::OnPaint()
{
	INT  nIndex;
	RECT  rPane;
	CToolInfo  cToolInfo;

	for (CDisplayStatusBar::OnPaint(); IsWindow(m_wndToolTip.GetSafeHwnd()); )
	{
		if ((nIndex = CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		break;
	}
}

void CTCOnBoardMemoryImagesStatusBar::OnMouseMove(UINT nFlags, CPoint point)
{
	MSG  sMsg;

	if (IsWindow(m_wndToolTip.GetSafeHwnd()))
	{
		CopyMemory(&sMsg, GetCurrentMessage(), sizeof(MSG));
		m_wndToolTip.RelayEvent(&sMsg);
	}
	CDisplayStatusBar::OnMouseMove(nFlags, point);
}

void CTCOnBoardMemoryImagesStatusBar::OnTimer(UINT_PTR nEventID)
{
	BOOL  bToolTipText;
	CString  szToolTipText;

	if (nEventID == TCONBOARDMEMORYIMAGESSTATUSBAR_UPDATE_TIMERID)
	{
		for (szToolTipText = GetParent()->GetDBMSDetails(), bToolTipText = GetParent()->IsDBMSOnline(); m_szToolTipText != szToolTipText || m_bToolTipText != bToolTipText; )
		{
			m_szToolTipText = szToolTipText;
			m_bToolTipText = bToolTipText;
			GetParent()->UpdateBars();
			break;
		}
	}
	CDisplayStatusBar::OnTimer(nEventID);
}

BOOL CTCOnBoardMemoryImagesStatusBar::OnToolTipNotify(UINT nID, NMHDR *pNotifyInfo, LRESULT *pResult)
{
	TOOLTIPTEXT  *pToolTipInfo = (TOOLTIPTEXT *)pNotifyInfo;

	switch (pNotifyInfo->idFrom)
	{
	case ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE);
	return TRUE;
	}
	case ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)((m_szToolTipText.IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE) : (LPCTSTR)m_szToolTipText);
	return TRUE;
	}
	}
	return FALSE;
}

void CTCOnBoardMemoryImagesStatusBar::OnDestroy()
{
	KillTimer(TCONBOARDMEMORYIMAGESSTATUSBAR_UPDATE_TIMEOUT);
	CDisplayStatusBar::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesToolTip

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesToolTip, CDisplayToolTip)

CTCOnBoardMemoryImagesToolTip::CTCOnBoardMemoryImagesToolTip() : CDisplayToolTip()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesToolTip, CDisplayToolTip)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesToolTip)
	// NOTE - the ClassWizard will add and remove member functions here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesToolTip message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTableViewUndoItem

CTCOnBoardMemoryImagesTableViewUndoItem::CTCOnBoardMemoryImagesTableViewUndoItem() : CObject()
{
	Clear();
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetInfo(LPCTSTR pszTable, CONST POINT &ptCell, INT nAlignment, LPCTSTR pszText, LPCTSTR pszInitialText, INT nStartPos, INT nEndPos)
{
	m_szTable = pszTable;
	m_szText[0] = pszText;
	m_szText[1] = pszInitialText;
	m_nAlignment = nAlignment;
	m_nSel[0] = nStartPos;
	m_nSel[1] = nEndPos;
	m_ptCell = ptCell;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::GetInfo(CString &szTable, CPoint &ptCell, INT &nAlignment, CString &szText, CString &szInitialText, INT &nStartPos, INT &nEndPos) CONST
{
	szTable = m_szTable;
	szText = m_szText[0];
	szInitialText = m_szText[1];
	nAlignment = m_nAlignment;
	nStartPos = m_nSel[0];
	nEndPos = m_nSel[1];
	ptCell = m_ptCell;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetCell(LPCTSTR pszTable, CONST POINT &ptCell)
{
	m_szTable = pszTable;
	m_ptCell = ptCell;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::GetCell(CString &szTable, CPoint &ptCell) CONST
{
	ptCell = m_ptCell;
	szTable = m_szTable;
	return !szTable.IsEmpty();
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetContext(LPCTSTR pszContext)
{
	m_szContext = pszContext;
}

CString CTCOnBoardMemoryImagesTableViewUndoItem::GetContext() CONST
{
	return m_szContext;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetText(LPCTSTR pszText)
{
	m_szText[0] = pszText;
}

CString CTCOnBoardMemoryImagesTableViewUndoItem::GetText() CONST
{
	return m_szText[0];
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetInitialText(LPCTSTR pszText)
{
	m_szText[1] = pszText;
}

CString CTCOnBoardMemoryImagesTableViewUndoItem::GetInitialText() CONST
{
	return m_szText[1];
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetSel(INT nStartPos, INT nEndPos)
{
	m_nSel[0] = nStartPos;
	m_nSel[1] = nEndPos;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::GetSel(INT &nStartPos, INT &nEndPos) CONST
{
	nStartPos = m_nSel[0];
	nEndPos = m_nSel[1];
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::SetAlignment(INT nAlignment)
{
	m_nAlignment = nAlignment;
}

INT CTCOnBoardMemoryImagesTableViewUndoItem::GetAlignment() CONST
{
	return m_nAlignment;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::AllowUpdates(BOOL bEnable)
{
	m_bUpdates = bEnable;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::CanUpdate() CONST
{
	return m_bUpdates;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::AllowActivation(BOOL bEnable)
{
	m_bActivation = bEnable;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::CanActivate() CONST
{
	return m_bActivation;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::AllowSelection(BOOL bEnable)
{
	m_bSelection = bEnable;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::CanSelect() CONST
{
	return m_bSelection;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::Collect(BOOL bEnable)
{
	m_bCollected = bEnable;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::IsCollected() CONST
{
	return m_bCollected;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::Clear()
{
	m_szTable.Empty();
	m_szContext.Empty();
	m_szText[0].Empty();
	m_szText[1].Empty();
	m_nAlignment = -1;
	m_ptCell.x = -1;
	m_ptCell.y = -1;
	m_nSel[0] = -1;
	m_nSel[1] = -1;
	m_bUpdates = FALSE;
	m_bActivation = FALSE;
	m_bSelection = TRUE;
	m_bCollected = FALSE;
}

VOID CTCOnBoardMemoryImagesTableViewUndoItem::Copy(CONST CTCOnBoardMemoryImagesTableViewUndoItem *pItem)
{
	m_szTable = pItem->m_szTable;
	m_szContext = pItem->m_szContext;
	m_szText[0] = pItem->m_szText[0];
	m_szText[1] = pItem->m_szText[1];
	m_nAlignment = pItem->m_nAlignment;
	m_nSel[0] = pItem->m_nSel[0];
	m_nSel[1] = pItem->m_nSel[1];
	m_ptCell = pItem->m_ptCell;
	m_bUpdates = pItem->m_bUpdates;
	m_bActivation = pItem->m_bActivation;
	m_bSelection = pItem->m_bSelection;
	m_bCollected = pItem->m_bCollected;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoItem::Compare(CONST CTCOnBoardMemoryImagesTableViewUndoItem *pItem) CONST
{
	return((pItem->m_szTable == m_szTable  &&  pItem->m_szContext == m_szContext  &&  pItem->m_szText[0] == m_szText[0] && pItem->m_szText[1] == m_szText[1] && pItem->m_nAlignment == m_nAlignment  &&  pItem->m_ptCell == m_ptCell  &&  pItem->m_nSel[0] == m_nSel[0] && pItem->m_nSel[1] == m_nSel[1] && pItem->m_bUpdates == m_bUpdates  &&  pItem->m_bActivation == m_bActivation  &&  pItem->m_bSelection == m_bSelection  &&  pItem->m_bCollected == m_bCollected) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTableViewUndoList

CTCOnBoardMemoryImagesTableViewUndoList::CTCOnBoardMemoryImagesTableViewUndoList() : CPtrArray()
{
	m_nIndex = -1;
	m_nCount = -1;
	m_bUndoing = FALSE;
	m_bCollecting = FALSE;
	m_nLocks = 0;
}

CTCOnBoardMemoryImagesTableViewUndoList::~CTCOnBoardMemoryImagesTableViewUndoList()
{
	Reset();
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::Add(CONST CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bUpdates)
{
	INT  nItem;
	INT  nItems;
	CPoint  ptCell[2];
	CString  szTable[2];
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem[2];

	if (!IsLocked())
	{
		if (((pUndoItem[0] = GetAt(m_nIndex)) && (!pUndoItem[0]->Compare(pItem) || !pItem->GetCell(szTable[0], ptCell[0]) || (ptCell[0].x == -1 || ptCell[0].y == -1))) || m_nIndex < 0)
		{
			for (nItem = (m_nIndex >= 0) ? ((!m_bUndoing) ? (m_nIndex + 1) : m_nIndex) : (m_nIndex + 1), nItems = (INT)GetSize(); nItem < nItems; nItem++)
			{
				delete GetAt(nItem);
				RemoveAt(nItem);
				nItems--;
				nItem--;
			}
			if ((pUndoItem[0] = new CTCOnBoardMemoryImagesTableViewUndoItem))
			{
				for (pUndoItem[0]->Copy(pItem), pUndoItem[0]->Collect(pUndoItem[0]->IsCollected() || m_bCollecting); CPtrArray::Add(pUndoItem[0]) >= 0; )
				{
					if ((pUndoItem[1] = (bUpdates) ? GetAt((INT)(GetUpperBound() - 1)) : (CTCOnBoardMemoryImagesTableViewUndoItem *)NULL) && pUndoItem[0]->GetCell(szTable[0], ptCell[0]) && pUndoItem[1]->GetCell(szTable[1], ptCell[1]) && szTable[0] == szTable[1] && ptCell[0].x == ptCell[1].x  &&  ptCell[0].y == ptCell[1].y) pUndoItem[1]->AllowUpdates();
					for (m_nIndex = (INT)GetUpperBound(); m_nCount > 0; )
					{
						m_bCollecting = (--m_nCount == 0) ? TRUE : FALSE;
						break;
					}
					m_bUndoing = FALSE;
					return TRUE;
				}
				delete pUndoItem[0];
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::Undo(CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bFocus)
{
	BOOL  bStep;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	if ((pUndoItem = ((bStep = (bFocus  &&  IsCellAction(m_nIndex)) || m_bUndoing)) ? GetAt(m_nIndex - 1) : GetAt(m_nIndex)))
	{
		pItem->Copy(pUndoItem);
		m_nIndex -= bStep;
		m_bUndoing = TRUE;
		return TRUE;
	}
	m_nIndex = -1;
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableViewUndoList::Undo(CONST CTableViewCell *pCell, CString &szText)
{
	CPoint  ptCell;
	CString  szTable;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	for (szText.Empty(); (pUndoItem = GetAt(0)) && pUndoItem->GetCell(szTable, ptCell) && pCell->x == ptCell.x && pCell->y == ptCell.y; )
	{
		szText = pUndoItem->GetInitialText();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::CanUndo(BOOL bFocus) CONST
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	for (nItem = ((bFocus && IsCellAction(m_nIndex)) || m_bUndoing) ? (m_nIndex - 1) : m_nIndex, nItems = (INT)GetSize(); nItem >= 0; nItem--)
	{
		if ((pUndoItem = GetAt(nItem)) && !pUndoItem->IsCollected()) break;
		continue;
	}
	return((!m_nIndex  &&  bFocus) || nItem >= 0);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::CanCollectUndo() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	return(((pUndoItem = GetAt(m_nIndex)) && pUndoItem->IsCollected()) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::Redo(CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bFocus)
{
	BOOL  bStep;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	if ((pUndoItem = ((bStep = (IsCellAction(m_nIndex) || !m_bUndoing))) ? GetAt(m_nIndex + 1) : GetAt((m_nIndex = max(m_nIndex, 0)))))
	{
		pItem->Copy(pUndoItem);
		m_nIndex += bStep;
		m_bUndoing = FALSE;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableViewUndoList::Redo(CONST CTableViewCell *pCell, CString &szText)
{
	CPoint  ptCell;
	CString  szTable;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	for (szText.Empty(); (pUndoItem = (GetSize() > 1) ? GetAt((INT)(GetUpperBound())) : (CTCOnBoardMemoryImagesTableViewUndoItem *)NULL) && pUndoItem->GetCell(szTable, ptCell) && pCell->x == ptCell.x && pCell->y == ptCell.y; )
	{
		szText = pUndoItem->GetText();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::CanRedo(BOOL bFocus) CONST
{
	INT  nItem;
	INT  nItems;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	for (nItem = (IsCellAction(m_nIndex) && !m_bUndoing) ? (m_nIndex + 1) : max(m_nIndex, 0), nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		if ((pUndoItem = GetAt(nItem)) && !pUndoItem->IsCollected()) break;
		continue;
	}
	return(nItem < nItems);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::CanCollectRedo() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	return(((pUndoItem = GetAt(m_nIndex + 1)) && pUndoItem->IsCollected()) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesTableViewUndoList::Collect(BOOL bEnable, INT nAfter)
{
	if (!IsLocked())
	{
		if (bEnable)
		{
			if (m_bCollecting)
			{
				m_nCount = 0;
				return;
			}
			if ((m_nCount = nAfter) <= 0)
			{
				m_bCollecting = TRUE;
				m_nCount = 0;
			}
			return;
		}
		m_bCollecting = bEnable;
		m_nCount = -1;
	}
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::IsCollecting() CONST
{
	return m_bCollecting;
}

CTCOnBoardMemoryImagesTableViewUndoItem *CTCOnBoardMemoryImagesTableViewUndoList::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesTableViewUndoItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesTableViewUndoItem *)NULL);
}

CTCOnBoardMemoryImagesTableViewUndoItem *CTCOnBoardMemoryImagesTableViewUndoList::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesTableViewUndoItem *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesTableViewUndoItem *)NULL);
}

VOID CTCOnBoardMemoryImagesTableViewUndoList::Reset()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(), m_nIndex = -1, m_bUndoing = FALSE, m_bCollecting = FALSE; nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		RemoveAt(nItem);
		nItems--;
		nItem--;
	}
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::Lock()
{
	if (m_nLocks < UINT_MAX)
	{
		m_nLocks++;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::IsLocked() CONST
{
	return((m_nLocks > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::Unlock()
{
	if (m_nLocks > 0)
	{
		m_nLocks--;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoList::IsCellAction(INT nIndex) CONST
{
	CPoint  ptCell;
	CString  szTable;
	CTCOnBoardMemoryImagesTableViewUndoItem  *pUndoItem;

	return(((pUndoItem = GetAt(nIndex)) && pUndoItem->GetCell(szTable, ptCell)) ? (ptCell.x >= 0 && ptCell.y >= 0) : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTableViewUndoLists

CTCOnBoardMemoryImagesTableViewUndoLists::CTCOnBoardMemoryImagesTableViewUndoLists() : CPtrArray()
{
	return;
}

CTCOnBoardMemoryImagesTableViewUndoLists::~CTCOnBoardMemoryImagesTableViewUndoLists()
{
	RemoveAll();
}

INT CTCOnBoardMemoryImagesTableViewUndoLists::Add(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion, CTCOnBoardMemoryImagesTableViewUndoList *pUndoList)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pszMemoryArea, pszMemoryImage, pszImageVersion, TRUE)) >= 0)
	{
		m_szKeys.InsertAt(nIndex, ConstructKey(pszMemoryArea, pszMemoryImage, pszImageVersion));
		InsertAt(nIndex, pUndoList, 1);
	}
	return nIndex;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Remove(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pszMemoryArea, pszMemoryImage, pszImageVersion)) >= 0)
	{
		m_szKeys.RemoveAt(nIndex);
		delete GetAt(nIndex);
		RemoveAt(nIndex);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Select(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion)
{
	INT  nIndex;
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	for (; (pUndoList = ((nIndex = (lstrlen(pszMemoryImage) > 0 && lstrlen(pszImageVersion) > 0) ? FindIndex(pszMemoryArea, pszMemoryImage, pszImageVersion) : 0) < 0) ? new CTCOnBoardMemoryImagesTableViewUndoList : (CTCOnBoardMemoryImagesTableViewUndoList *)NULL); )
	{
		if ((nIndex = Add(pszMemoryArea, pszMemoryImage, pszImageVersion, pUndoList)) >= 0) break;
		delete pUndoList;
		break;
	}
	if (nIndex >= 0)
	{
		m_szKey[0] = pszMemoryArea;
		m_szKey[1] = pszMemoryImage;
		m_szKey[2] = pszImageVersion;
		return TRUE;
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableViewUndoLists::Find(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion) CONST
{
	return FindIndex(pszMemoryArea, pszMemoryImage, pszImageVersion);
}

CTCOnBoardMemoryImagesTableViewUndoList *CTCOnBoardMemoryImagesTableViewUndoLists::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesTableViewUndoList *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesTableViewUndoList *)NULL);
}

CTCOnBoardMemoryImagesTableViewUndoList *CTCOnBoardMemoryImagesTableViewUndoLists::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCOnBoardMemoryImagesTableViewUndoList *)CPtrArray::GetAt(nIndex) : (CTCOnBoardMemoryImagesTableViewUndoList *)NULL);
}

VOID CTCOnBoardMemoryImagesTableViewUndoLists::RemoveAll()
{
	INT  nList;
	INT  nLists;
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	for (nList = 0, nLists = (INT)GetSize(), m_szKeys.RemoveAll(), m_szKey[0].Empty(), m_szKey[1].Empty(), m_szKey[2].Empty(); nList < nLists; nList++)
	{
		if ((pUndoList = GetAt(nList)))
		{
			delete pUndoList;
			continue;
		}
	}
	CPtrArray::RemoveAll();
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Add(CONST CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bUpdates)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Add(pItem, bUpdates) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Undo(CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bFocus)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Undo(pItem, bFocus) : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Undo(CONST CTableViewCell *pCell, CString &szText)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Undo(pCell, szText) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::CanUndo(BOOL bFocus) CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->CanUndo(bFocus) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::CanCollectUndo() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->CanCollectUndo() : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Redo(CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bFocus)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Redo(pItem, bFocus) : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Redo(CONST CTableViewCell *pCell, CString &szText)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Redo(pCell, szText) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::CanRedo(BOOL bFocus) CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->CanRedo(bFocus) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::CanCollectRedo() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->CanCollectRedo() : FALSE);
}

VOID CTCOnBoardMemoryImagesTableViewUndoLists::Collect(BOOL bEnable, INT nAfter)
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	if ((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2]))))
	{
		pUndoList->Collect(bEnable, nAfter);
		return;
	}
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::IsCollecting() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->IsCollecting() : FALSE);
}

VOID CTCOnBoardMemoryImagesTableViewUndoLists::Reset()
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	if ((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2]))))
	{
		pUndoList->Reset();
		return;
	}
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Lock()
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Lock() : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::IsLocked() CONST
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->IsLocked() : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableViewUndoLists::Unlock()
{
	CTCOnBoardMemoryImagesTableViewUndoList  *pUndoList;

	return(((pUndoList = GetAt(Find(m_szKey[0], m_szKey[1], m_szKey[2])))) ? pUndoList->Unlock() : FALSE);
}

INT CTCOnBoardMemoryImagesTableViewUndoLists::FindIndex(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CString  szKey;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex = (nMinIndex + nMaxIndex) / 2, szKey = ConstructKey(pszMemoryArea, pszMemoryImage, pszImageVersion); nMinIndex != nMaxIndex; nIndex = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = (m_szKeys.GetAt(nIndex) <= szKey) ? (nIndex + 1) : nMinIndex;
		nMaxIndex = (nMinIndex != nIndex + 1) ? nIndex : nMaxIndex;
	}
	return((((!bInsert  &&  m_szKeys.GetSize() > 0 && m_szKeys.GetAt((nIndex = max(nIndex - 1, 0))) == szKey) || (bInsert && (!m_szKeys.GetSize() || (m_szKeys.GetAt(max(nIndex - 1, 0)) != szKey  &&  m_szKeys.GetAt(min(nIndex, GetUpperBound())) != szKey)))) && !szKey.IsEmpty()) ? nIndex : -1);
}

CString CTCOnBoardMemoryImagesTableViewUndoLists::ConstructKey(LPCTSTR pszMemoryArea, LPCTSTR pszMemoryImage, LPCTSTR pszImageVersion) CONST
{
	return CString(pszMemoryArea) + TAB + CString(pszMemoryImage) + TAB + CString(pszImageVersion);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDocument

IMPLEMENT_DYNAMIC(CTCOnBoardMemoryImagesDocument, CDocument)

CTCOnBoardMemoryImagesDocument::CTCOnBoardMemoryImagesDocument() : CDocument()
{
	return;
}

CTCOnBoardMemoryImagesDocument::~CTCOnBoardMemoryImagesDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTableView

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesTableView, CDatabaseTableView)

CTCOnBoardMemoryImagesTableView::CTCOnBoardMemoryImagesTableView() : CDatabaseTableView(DATABASE_COMPONENT_NONE | DATABASE_SUBCOMPONENT_NONE)
{
	CFontTools  cTitleFont(&m_lfTable[0]);
	CFontTools  cItemsFont(&m_lfTable[1]);

	m_nTableColors[0] = GetSysColor(COLOR_WINDOWTEXT);
	m_nTableColors[1] = GetSysColor(COLOR_3DFACE);
	m_nTableFontColors[0] = GetSysColor(COLOR_WINDOW);
	m_nTableFontColors[1] = GetSysColor(COLOR_WINDOWTEXT);
	m_lfTable[0].lfWeight = FW_BOLD;
	m_lfTable[1].lfWeight = FW_NORMAL;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
	m_bShowAll = FALSE;
	m_bUndo[0] = FALSE;
	m_bUndo[1] = FALSE;
	m_bUpdate = TRUE;
	m_bImage = FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::Create(CWnd *pParentWnd, CONST RECT &rect, LPCTSTR pszTable)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable[2];
	INT  nTables[2];
	BOOL  bResize;
	BOOL  bVisible;
	CString  szName;
	CString  szTitle;
	LOGFONT  lfFont[2];
	CUIntArray  nIDs;
	CUIntArray  nTypes;
	CUIntArray  nFormats;
	CStringArray  szItems;
	CStringArray  szRow[3];
	CStringArray  szColumns[2];
	CTableViewCell  *pCell;
	CTableViewCells  pCells;
	CTableViewObject  *pTable;

	for (SetName(pszTable); CDatabaseTableView::Create(pParentWnd, rect); )
	{
		for (nTable[0] = 0, nTables[0] = EnumTables(m_szTables, nTypes, FALSE); nTable[0] < nTables[0]; nTable[0]++)
		{
			if (GetTableTitle(m_szTables.GetAt(nTable[0]), szTitle) && GetTableContents(m_szTables.GetAt(nTable[0]), pszTable, -1, szRow[0], szRow[1], szRow[2], nFormats, nIDs, bResize, bVisible))
			{
				if ((pTable = new CTableViewObject) != (CTableViewObject *)NULL)
				{
					for (pTable->SetName(m_szTables.GetAt(nTable[0])), pTable->SetTitle(szTitle), pTable->SetType(nTypes.GetAt(nTable[0])), pTable->EnableResize(bResize), pTable->MakeVisible(bVisible); pTable->GetType() == TAS_TABLE_LIST; )
					{
						if (!szRow[0].GetSize()) szRow[0].Add(EMPTYSTRING);
						break;
					}
					for (nCol = 0, nCols = (!szTitle.IsEmpty()) ? ExtractTextItems(szTitle, szColumns[0]) : 0, GetTableOutlineFonts(pTable->GetName(), &lfFont[0], &lfFont[1]); nCol < nCols; nCol++)
					{
						if ((pCell = new CTableViewCell) != (CTableViewCell *)NULL)
						{
							pCell->SetFormat(TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
							pCell->SetTextStyle(TRANSPARENT, m_nTableFontColors[0], m_nTableColors[0]);
							pCell->SetText(szColumns[0].GetAt(nCol), FALSE);
							pCell->SetFont(&lfFont[0]);
							pCell->x = nCol;
							pCell->y = 0;
							if (pCells.Add(pCell) >= 0) continue;
							delete pCell;
						}
						break;
					}
					for (nRow = 0, nRows = (nCol == nCols) ? (INT)szRow[0].GetSize() : -1; nRow < nRows; nRow++)
					{
						for (nCol = 0, nCols = (ExtractTextItems(szRow[0].GetAt(nRow), szColumns[1]) >= 0 && szTitle.IsEmpty()) ? (INT)szColumns[1].GetSize() : nCols; nCol < nCols; nCol++)
						{
							if ((pCell = new CTableViewCell) != (CTableViewCell *)NULL)
							{
								if (pTable->GetType() == TAS_TABLE_NORMAL)
								{
									for (pCell->SetFormat(TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER); !nCol; )
									{
										pCell->SetFormat(TAS_TYPE_TEXT | TAS_ALIGN_RIGHT | TAS_ALIGN_VCENTER);
										break;
									}
									if (nCol == nCols - 1)
									{
										if (nRow < nFormats.GetSize()) pCell->SetFormat(nFormats.GetAt(nRow));
										if (nRow < nIDs.GetSize()) pCell->SetControlID(nIDs.GetAt(nRow));
									}
								}
								if (pTable->GetType() == TAS_TABLE_LIST)
								{
									if (nCol < nFormats.GetSize()) pCell->SetFormat(nFormats.GetAt(nCol));
									if (nCol < nIDs.GetSize()) pCell->SetControlID(nIDs.GetAt(nCol));
								}
								for (pCell->x = nCol, pCell->y = nRow, pCell->SetFont(&lfFont[1]), pCell->SetTextStyle(TRANSPARENT, m_nTableFontColors[1], m_nTableColors[1]), pCell->SetText((nCol < szColumns[1].GetSize()) ? (LPCTSTR)szColumns[1].GetAt(nCol) : EMPTYSTRING, FALSE); !szTitle.IsEmpty(); )
								{
									pCell->y = nRow + 1;
									break;
								}
								if (pCells.Add(pCell) >= 0) continue;
								delete pCell;
							}
							break;
						}
					}
					if (nRows >= 0)
					{
						if (pTable->SetCells(pCells))
						{
							if (AddTable(pTable, FALSE))
							{
								for (nRow = 0, nRows = (pTable->GetType() == TAS_TABLE_NORMAL) ? (INT)szRow[0].GetSize() : 0; nRow < nRows; nRow++)
								{
									if ((pCell = pTable->FindCell((pTable->HasTitle()) ? (nRow + 1) : nRow, (INT)max(szColumns[0].GetSize() - 1, 0))))
									{
										ExtractTextItems(szRow[0].GetAt(nRow), szColumns[1]);
										EnumTableCellValues(pTable, pCell, szColumns[1].GetAt(0));
										LimitTableCellValues(pTable, pCell, szColumns[1].GetAt(0));
									}
								}
								for (nCol = 0, nCols = (pTable->GetType() == TAS_TABLE_LIST) ? (INT)max(szColumns[0].GetSize(), szColumns[1].GetSize()) : 0; nCol < nCols; nCol++)
								{
									for (nRow = 0, nRows = (INT)szRow[0].GetSize(); nRow < nRows; nRow++)
									{
										if ((pCell = pTable->FindCell((pTable->HasTitle()) ? (nRow + 1) : nRow, nCol)))
										{
											EnumTableCellValues(pTable, pCell, (nCol < szColumns[0].GetSize()) ? szColumns[0].GetAt(nCol) : EMPTYSTRING);
											LimitTableCellValues(pTable, pCell, (nCol < szColumns[0].GetSize()) ? szColumns[0].GetAt(nCol) : EMPTYSTRING);
										}
									}
								}
								pTable->EnableResize();
								szColumns[0].RemoveAll();
								szColumns[1].RemoveAll();
								pCells.RemoveAll();
								continue;
							}
						}
					}
					delete pTable;
				}
			}
			break;
		}
		for (nTable[1] = 0, nTables[1] = nTables[0], ArrangeTables(); nTable[1] < nTables[1]; nTable[1]++)
		{
			if ((pTable = m_pTables->GetAt(m_pTables->Find(m_szTables.GetAt(nTable[1])))))
			{
				if (GetTableUpdateContents(pTable->GetName(), -1, GetName(), szName, szItems))
				{
					UpdateTableContents(pTable, szItems);
					continue;
				}
				ProtectTableFieldData(pTable->GetName());
			}
		}
		ArrangeTables(0);
		return((nTable[0] == nTables[0]) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::SetTableContents()
{
	return SetTableContents(EMPTYSTRING, EMPTYSTRING, EMPTYSTRING);
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(CONST CMemoryDump *pDump)
{
	INT  nPos;
	INT  nDump;
	INT  nDumps;
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps;

	for (nDump = 0, nDumps = (m_cItem[0].GetMemoryDumps(pMemoryDumps)) ? (INT)pMemoryDumps.GetSize() : -1; nDump < nDumps; nDump++)
	{
		if ((pMemoryDump = pMemoryDumps.GetAt(nDump)) && pMemoryDump->GetName() == pDump->GetName())
		{
			pMemoryDump->SetDumpInfo(pDump, -1);
			break;
		}
	}
	return((nDump < nDumps) ? (SetTableContents(pMemoryDumps) && SetTableContents(EMPTYSTRING, ((nPos = pDump->GetName().Find(TAB)) >= 0) ? pDump->GetName().Left(nPos) : pDump->GetName(), pDump->GetDumpVersion())) : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(CONST CMemoryDumps &pDumps)
{
	return m_cItem[0].SetMemoryDumps(pDumps) && m_cItem[1].SetMemoryDumps(pDumps);
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	return(m_cItem[0].Copy(pItem) && (!bAll || m_cItem[1].Copy(pItem)));
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	if (!m_cItem[0].GetName().Compare(pszProcessor))
	{
		for (m_cItem[0].SetLastDumpTime((tLastDumpTime >= 0) ? tLastDumpTime : m_cItem[0].GetLastDumpTime()), m_cItem[1].SetLastDumpTime((tLastDumpTime >= 0) ? tLastDumpTime : m_cItem[1].GetLastDumpTime()); tLastPatchTime >= 0; )
		{
			m_cItem[0].SetLastPatchTime(tLastPatchTime);
			m_cItem[1].SetLastPatchTime(tLastPatchTime);
			break;
		}
		return((tLastDumpTime > 0 || tLastPatchTime > 0) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete)
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nIndex[2];
	INT  nMemoryDump;
	INT  nMemoryDumps;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nAddressBytes;
	CString  szVersion;
	CTimeKey  tMemoryDump;
	CTimeTag  tDownloadTime;
	CByteArray  nDumpData[2];
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps;
	CStringTools  cStringTools;
	CDatabaseTMPacket  *pPacket;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue[2];
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry[2];

	for (nItem = 0, nItems = (!m_cItem[nItem].GetName().Compare(pszProcessor)) ? (sizeof(m_cItem) / sizeof(m_cItem[nItem])) : -1, nCount = 0; nItem < nItems; nItem++)
	{
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))) != (CDatabaseOBProcessor *)NULL)
		{
			if ((pMemoryImage = (pImage != (CONST CDatabaseOBProcessorMemoryImage *) NULL) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), nIndex[0] = -1; (pMemoryArea[1] = ((pMemoryArea[0] = pProcessor->GetAt(pProcessor->Find(pImage->GetName()))) && (nIndex[0] = m_cItem[nItem].Find(pImage->GetName())) < 0 && !bDelete) ? new CDatabaseOBProcessorMemoryArea : (CDatabaseOBProcessorMemoryArea *)NULL); )
				{
					if (pMemoryArea[1]->Copy(pMemoryArea[0]) && m_cItem[nItem].Add(pMemoryArea[1]) >= 0)
					{
						pMemoryArea[1]->SetMemoryImage(pImage);
						break;
					}
					delete pMemoryArea[1];
					break;
				}
				if ((pMemoryArea[1] = (!pMemoryArea[0]) ? m_cItem[nItem].GetAt((nIndex[0] = m_cItem[nItem].Find(pImage->GetName()))) : (CDatabaseOBProcessorMemoryArea *)NULL))
				{
					m_cItem[nItem].RemoveAt(nIndex[0]);
					delete pMemoryArea[1];
					nIndex[0] = -1;
				}
				if ((pMemoryArea[1] = m_cItem[nItem].GetAt(m_cItem[nItem].Find(pImage->GetName()))))
				{
					for (nMemoryBlock = nIndex[1] = ((pImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) < 0 && pMemoryArea[1]->GetMemoryImage(pMemoryImage)) || (pImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) >= 0 && pMemoryImage->Copy(pImage))) ? pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) : -1, nMemoryBlocks = (INT)pMemoryImage->GetSize(), szVersion.Empty(), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0, nDumpData[0].RemoveAll(); nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && (szVersion.IsEmpty() || pMemoryImageBlock[0]->GetVersion() == szVersion) && (nMemoryBlock > nIndex[1] || pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1])) && pMemoryImageBlock[0]->GetAddress(nAddress[1][0], nAddress[1][1]))
						{
							if ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (ULONGLONG)((nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes) == (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])
							{
								if (pMemoryImageBlock[0]->GetData(nDumpData[1]) >= 0)
								{
									szVersion = pMemoryImageBlock[0]->GetVersion();
									nDumpData[0].Append(nDumpData[1]);
									continue;
								}
							}
						}
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetVersion() != szVersion  &&  !szVersion.IsEmpty())
						{
							nMemoryBlock = nMemoryBlocks - 1;
							continue;
						}
						break;
					}
					for (nMemoryDump = 0, nMemoryDumps = (m_cItem[nItem].GetMemoryDumps(pMemoryDumps) > 0) ? (INT)pMemoryDumps.GetSize() : 0; nMemoryDump < nMemoryDumps; nMemoryDump++)
					{
						if ((pMemoryDump = pMemoryDumps.GetAt(nMemoryDump)) != (CMemoryDump *)NULL  &&  pMemoryDump->GetName().Find(pImage->GetName() + TAB) == 0)
						{
							pMemoryDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / ((ULONGLONG)nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % ((ULONGLONG)nRange[1][1] - nRange[1][0]))), pMemoryDump->SetDataAddressBitWidth(4 * cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength());
							m_cItem[nItem].SetMemoryDumps(pMemoryDumps);
							break;
						}
					}
					if ((pMemoryDump = (nMemoryDump == nMemoryDumps) ? new CMemoryDump : (CMemoryDump *)NULL))
					{
						for (pMemoryDump->SetName(pImage->GetName() + TAB + tMemoryDump.FormatGmt()), pMemoryDump->SetDataSource(GetMemoryDumpsServiceSupport()->DetermineMemoryDumpSource(((pPacket = GetDatabase()->GetTMPackets()->GetAt(pProcessor->GetDumpPacketRef()))) ? pPacket->GetTag() : EMPTYSTRING)), pMemoryDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / ((ULONGLONG)nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % ((ULONGLONG)nRange[1][1] - nRange[1][0]))), pMemoryDump->SetDataAddressBitWidth(4 * cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength()), pMemoryDump->SetDataBitWidth(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth(), 8 * sizeof(BYTE))); pMemoryDumps.Add(pMemoryDump) < 0; )
						{
							delete pMemoryDump;
							break;
						}
						m_cItem[nItem].SetMemoryDumps(pMemoryDumps);
					}
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), pMemoryArea[1]->SetAttributes(pMemoryArea[0]->GetAttributes()), pMemoryArea[1]->SetMemoryImage(pMemoryImage), szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock)) && (szVersion.IsEmpty() || pMemoryImageBlock[0]->GetVersion() != szVersion))
						{
							if ((pMemoryAreaCatalogue[0] = new CDatabaseOBProcessorMemoryAreaCatalogue) != (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL)
							{
								if ((pMemoryAreaCatalogue[1] = new CDatabaseOBProcessorMemoryAreaCatalogue) != (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL)
								{
									if ((pMemoryAreaCatalogueEntry[0] = (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue[0])) ? pMemoryAreaCatalogue[0]->GetAt(pMemoryAreaCatalogue[0]->Find(pMemoryImageBlock[0]->GetVersion())) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
									{
										if ((pMemoryAreaCatalogueEntry[1] = (pMemoryArea[1]->GetCatalogue(pMemoryAreaCatalogue[1])) ? pMemoryAreaCatalogue[1]->GetAt(pMemoryAreaCatalogue[1]->Find(pMemoryImageBlock[0]->GetVersion())) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
										{
											m_cItem[nItem].SetLastDumpTime(((tDownloadTime = 1000000 * CTimeKey(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? tDownloadTime : m_cItem[nItem].GetLastDumpTime());
											pMemoryAreaCatalogueEntry[1]->Copy(pMemoryAreaCatalogueEntry[0]);
										}
										else
										{
											if ((pMemoryAreaCatalogueEntry[1] = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
											{
												for (m_cItem[nItem].SetLastDumpTime(((tDownloadTime = 1000000 * CTimeKey(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? tDownloadTime : m_cItem[nItem].GetLastDumpTime()), pMemoryAreaCatalogueEntry[1]->Copy(pMemoryAreaCatalogueEntry[0]); pMemoryAreaCatalogue[1]->Add(pMemoryAreaCatalogueEntry[1]) < 0; )
												{
													delete pMemoryAreaCatalogueEntry[1];
													break;
												}
											}
										}
									}
									pMemoryArea[1]->SetCatalogue(pMemoryAreaCatalogue[1]);
									delete pMemoryAreaCatalogue[1];
								}
								delete pMemoryAreaCatalogue[0];
							}
							szVersion = pMemoryImageBlock[0]->GetVersion();
						}
					}
				}
				if ((pMemoryArea[1] = m_cItem[nItem].GetAt((nIndex[0] = m_cItem[nItem].Find(pImage->GetName())))) && pMemoryArea[1]->GetMemoryImage(pMemoryImage))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryImage->GetName() == pImage->GetName()) ? (INT)pImage->GetSize() : 0, pMemoryImage->SetAttributes(pImage->GetAttributes()); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[1] = pImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
						{
							while ((nIndex[1] = pMemoryImage->Find(pMemoryImageBlock[1]->GetVersion())) >= 0 && (bOverwrite || bDelete))
							{
								delete pMemoryImage->GetAt(nIndex[1]);
								pMemoryImage->RemoveAt(nIndex[1]);
							}
							while (nIndex[1] < 0 && !bDelete)
							{
								if ((pMemoryImageBlock[0] = new CDatabaseOBProcessorMemoryImageBlock))
								{
									pMemoryImageBlock[0]->Copy(pMemoryImageBlock[1]);
									if (pMemoryImage->Add(pMemoryImageBlock[0]) >= 0)
									{
										if ((pMemoryImageBlock[1] = pImage->GetAt(nMemoryBlock + 1)) && pMemoryImageBlock[0]->GetVersion() == pMemoryImageBlock[1]->GetVersion())
										{
											nMemoryBlock++;
											continue;
										}
										break;
									}
									delete pMemoryImageBlock[0];
								}
								break;
							}
						}
					}
					if ((pMemoryArea[1]->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) && !pMemoryImage->GetSize() && bDelete)
					{
						for (nMemoryDump = 0, nMemoryDumps = (m_cItem[nItem].GetMemoryDumps(pMemoryDumps) > 0) ? (INT)pMemoryDumps.GetSize() : 0; nMemoryDump < nMemoryDumps; nMemoryDump++)
						{
							if ((pMemoryDump = pMemoryDumps.GetAt(nMemoryDump)) && pMemoryDump->GetName().Find(pMemoryImage->GetName() + TAB) == 0)
							{
								pMemoryDumps.RemoveAt(nMemoryDump);
								delete pMemoryDump;
								break;
							}
						}
						m_cItem[nItem].SetMemoryDumps(pMemoryDumps);
						m_cItem[nItem].RemoveAt(nIndex[0]);
						delete pMemoryArea[1];
					}
					pMemoryArea[1]->SetMemoryImage(pMemoryImage);
				}
				delete pMemoryImage;
				nCount++;
			}
			for (m_cItem[nItem].SetMasterImageRef(pProcessor->GetMasterImageRef()), m_szLastError = (!bDelete) ? m_szLastError : EMPTYSTRING; !pImage; )
			{
				nCount++;
				break;
			}
		}
		if (pImage != (CDatabaseOBProcessorMemoryImage *)NULL && (pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) && (pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED))
		{
			nItems--;
			break;
		}
	}
	return((nCount == nItems) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::SetTableContents(LPCTSTR pszMemoryArea, LPCTSTR pszImage, LPCTSTR pszVersion, LPCTSTR pszComparedImage, LPCTSTR pszComparedVersion, BOOL bShowAll, BOOL bUpdate)
{
	INT  nTable;
	INT  nTables;
	CWnd  *pControl;
	CRect  rCell[2];
	CString  szTable;
	CString  szError;
	CString  szDescription;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nTable = 0, nTables = (m_szMemoryArea.Compare(pszMemoryArea) || m_szImage[0][0].Compare(pszImage) || m_szImage[0][1].Compare(pszVersion) || m_szImage[1][0].Compare(pszComparedImage) || m_szImage[1][1].Compare(pszComparedVersion) || m_bShowAll != bShowAll || bUpdate) ? EnumTableUpdates(-1, szTables) : 0, m_szMemoryArea = pszMemoryArea, m_szImage[0][0] = pszImage, m_szImage[0][1] = pszVersion, m_szImage[1][0] = pszComparedImage, m_szImage[1][1] = pszComparedVersion, m_bShowAll = bShowAll, m_bUpdate = bUpdate; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))) != (CTableViewObject *)NULL)
		{
			if (pTable->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME) && bUpdate)
			{
				if ((pMemoryArea = m_cItem[0].GetAt(m_cItem[0].Find(pszMemoryArea))) && pMemoryArea->GetMemoryImage().IsEmpty())
				{
					if ((pMemoryImage = (!lstrcmp(pszMemoryArea, pszImage) && lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
					{
						pMemoryImage->SetName(pszMemoryArea);
						pMemoryArea->SetMemoryImage(pMemoryImage);
						delete pMemoryImage;
					}
				}
				UpdateTableFieldData(TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)), ((pCell = pTable->FindCell(pTable->GetSelRow(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)))) ? pCell->GetText() : EMPTYSTRING);
			}
			if (pTable->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && bUpdate)
			{
				if ((pMemoryArea = (m_cItem[0].Find(pszImage) < 0 && lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0) ? new CDatabaseOBProcessorMemoryArea : (CDatabaseOBProcessorMemoryArea *)NULL))
				{
					for (pMemoryArea->SetName(pszImage), pMemoryArea->SetAttributes(OBPROCESSORMEMORYAREA_TYPE_IMAGE), szDescription.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYAREA_DESCRIPTION_FORMAT), pszImage), pMemoryArea->SetDescription(szDescription); m_cItem[0].Add(pMemoryArea) < 0; )
					{
						delete pMemoryArea;
						break;
					}
				}
				UpdateTableFieldData(TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)), ((pCell = pTable->FindCell(pTable->GetSelRow(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)))) ? pCell->GetText() : EMPTYSTRING);
			}
			if ((pCell = GetActiveCell()))
			{
				if ((pControl = pCell->GetControl()))
				{
					for (pCell->UpdateText((UINT)TAS_ACTION_NORMAL), rCell[0] = pCell->GetPosition(), RecalcTableRow(pTable, pCell->y, FALSE), rCell[1] = pCell->GetPosition(); !rCell[1].IsRectEmpty(); )
					{
						pTable->SetRect(pTable->left, pTable->top, pTable->right, pTable->bottom + rCell[1].Height() - rCell[0].Height());
						break;
					}
					pCell->Activate(this, FALSE);
				}
			}
			for (pTable->SetSelCell(), m_pTable = (CTableViewObject *)NULL, m_pCell = (CTableViewCell *)NULL; GetTableUpdateContents(GetName(), 0, pTable->GetName(), szTable, szItems) || !lstrlen(pszImage) || !lstrlen(pszVersion); )
			{
				UpdateTableContents(pTable, szItems);
				break;
			}
			ProtectTableFieldData(pTable->GetName());
		}
	}
	for (m_cUndoLists.Select(pszMemoryArea, pszImage, pszVersion); nTables > 0; )
	{
		ArrangeTables(0);
		DrawTables();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(CString &szMemoryArea, CString &szImage, CString &szVersion, CString &szComparedImage, CString &szComparedVersion) CONST
{
	szImage = m_szImage[0][0];
	szVersion = m_szImage[0][1];
	szMemoryArea = m_szMemoryArea;
	szComparedImage = m_szImage[1][0];
	szComparedVersion = m_szImage[1][1];
	return(!m_cItem[0].GetName().IsEmpty());
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(CDatabaseOBProcessorMemoryImage *pMemoryImage, BOOL bComparedImage) CONST
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((pMemoryArea = (!bComparedImage) ? m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0])) : m_cItem[1].GetAt(m_cItem[1].Find(m_szImage[0][0]))))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : -1; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() != m_szImage[0][1])
			{
				pMemoryImage->RemoveAt(nMemoryBlock);
				delete pMemoryImageBlock;
				nMemoryBlocks--;
				nMemoryBlock--;
			}
		}
		return((pMemoryImage->GetSize() > 0 && nMemoryBlocks >= 0) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(CDatabaseOBProcessorMemoryArea *pMemoryArea, BOOL bComparedArea) CONST
{
	INT  nIndex;

	return((!bComparedArea) ? (((nIndex = m_cItem[0].Find(m_szImage[0][0])) >= 0) ? pMemoryArea->Copy(m_cItem[0].GetAt(nIndex)) : FALSE) : (((nIndex = m_cItem[1].Find(m_szImage[0][0])) >= 0) ? pMemoryArea->Copy(m_cItem[1].GetAt(nIndex)) : FALSE));
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(CMemoryDump *pDump) CONST
{
	INT  nDump;
	INT  nDumps;
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps;

	for (nDump = 0, nDumps = (m_cItem[0].GetMemoryDumps(pMemoryDumps)) ? (INT)pMemoryDumps.GetSize() : -1; nDump < nDumps; nDump++)
	{
		if ((pMemoryDump = pMemoryDumps.GetAt(nDump)) && !pMemoryDump->GetName().Find(m_szImage[0][0] + TAB))
		{
			pDump->Copy(pMemoryDump, TRUE);
			break;
		}
	}
	return((nDump < nDumps) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(CMemoryDumps &pDumps) CONST
{
	return m_cItem[0].GetMemoryDumps(pDumps);
}
UINT CTCOnBoardMemoryImagesTableView::GetTableContents(CString &szContents) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCount;
	INT  nPos[3];
	INT  nCol[2];
	INT  nCols[2];
	CString  szData;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	if ((pTable = m_pTables->GetAt(m_pTables->Find(GetName()))))
	{
		for (nRow = 0, nRows = pTable->GetRows(), szContents.Empty(); nRow < nRows; nRow++)
		{
			for (nCol[0] = 0, nCols[0] = pTable->GetColumns(); nCol[0] < nCols[0]; nCol[0]++)
			{
				if ((pCell = (!IsTableRowEmpty(pTable, nRow)) ? pTable->FindCell(nRow, nCol[0]) : (CTableViewCell *)NULL))
				{
					for (szContents += (nRow > 0 && !nCol[0]) ? (CString(CR) + CString(EOL)) : EMPTYSTRING, szData = pCell->GetText(); (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && pTable->GetCellText(0, nCol[0]) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME) && pTable->GetCellText(0, nCol[0]) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA)); )
					{
						for (nPos[0] = nPos[1] = 0, nCount = 1; nPos[0] < szData.GetLength(); nPos[0] += nPos[1] + 1)
						{
							if ((nPos[1] = szData.Mid(nPos[0]).Find(SPACE)) >= 0)
							{
								if (nCount < 16)
								{
									nCount++;
									continue;
								}
								szData = szData.Left(nPos[0] + nPos[1]) + CR + EOL + CString(TAB, nCol[0]) + szData.Mid(nPos[0] + nPos[1] + 1);
								nCount = 1;
								continue;
							}
							break;
						}
						break;
					}
					szContents += (nCol[0] > 0) ? (TAB + szData) : szData;
					continue;
				}
				nRows = nRow;
				break;
			}
		}
		return((!szContents.IsEmpty()) ? nRows : 0);
	}
	return FALSE;
}
CTCOnBoardMemoryImagesProcessorItem *CTCOnBoardMemoryImagesTableView::GetTableContents() CONST
{
	return((CTCOnBoardMemoryImagesProcessorItem *)&m_cItem[0]);
}

VOID CTCOnBoardMemoryImagesTableView::SetTableFonts(CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont)
{
	INT  nTable;
	INT  nTables;
	LOGFONT  lfTable[2];
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (memcmp(&m_lfTable[0], plfTitleFont, sizeof(LOGFONT)) || memcmp(&m_lfTable[1], plfItemsFont, sizeof(LOGFONT))) ? (INT)m_pTables->GetSize() : 0, CopyMemory(&m_lfTable[0], plfTitleFont, sizeof(LOGFONT)), CopyMemory(&m_lfTable[1], plfItemsFont, sizeof(LOGFONT)); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && GetTableFonts(pTable, &lfTable[0], &lfTable[1]))
		{
			SetTableFonts(pTable, &lfTable[0], &lfTable[1]);
			RecalcTable(pTable, FALSE, TRUE, FALSE);
		}
	}
	RepositionTables();
}
VOID CTCOnBoardMemoryImagesTableView::SetTableFonts(CTableViewObject *pTable, CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	CTableViewCell  *pCell;

	for (nRow = 0, nRows = pTable->GetRows(); nRow < nRows; nRow++)
	{
		for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
		{
			if ((pCell = pTable->FindCell(nRow, nCol)))
			{
				if (pTable->HasTitle() && !nRow)
				{
					pCell->SetFont(plfTitleFont);
					continue;
				}
				pCell->SetFont(plfItemsFont);
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableFonts(LOGFONT *plfTitleFont, LOGFONT *plfItemsFont) CONST
{
	CopyMemory(plfTitleFont, &m_lfTable[0], sizeof(LOGFONT));
	CopyMemory(plfItemsFont, &m_lfTable[1], sizeof(LOGFONT));
	return TRUE;
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableFonts(CONST CTableViewObject *pTable, LOGFONT *plfTitleFont, LOGFONT *plfItemsFont) CONST
{
	return GetTableOutlineFonts(GetName(), plfTitleFont, plfItemsFont);
}

VOID CTCOnBoardMemoryImagesTableView::SetTableFontColors(COLORREF nTitleColor, COLORREF nItemsColor)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nMode;
	INT  nTable;
	INT  nTables;
	COLORREF  nColors[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (m_nTableFontColors[0] != nTitleColor || m_nTableFontColors[1] != nItemsColor) ? (INT)m_pTables->GetSize() : 0, m_nTableFontColors[0] = nTitleColor, m_nTableFontColors[1] = nItemsColor, ProtectTableFieldData(GetName()); nTable < nTables; nTable++)
	{
		for (nRow = 0, nRows = ((pTable = m_pTables->GetAt(nTable))) ? pTable->GetRows() : 0; nRow < nRows; nRow++)
		{
			for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(nRow, nCol)))
				{
					pCell->GetTextStyle(nMode, nColors[0], nColors[1]);
					pCell->SetTextStyle(nMode, (pTable->HasTitle() && !nRow) ? nTitleColor : nItemsColor, nColors[1]);
				}
			}
		}
	}
}

VOID CTCOnBoardMemoryImagesTableView::GetTableFontColors(COLORREF &nTitleColor, COLORREF &nItemsColor) CONST
{
	nTitleColor = m_nTableFontColors[0];
	nItemsColor = m_nTableFontColors[1];
}

VOID CTCOnBoardMemoryImagesTableView::SetTableColors(COLORREF nTitleBackground, COLORREF nKeysBackground)
{
	INT  nTable;
	INT  nTables;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (m_nTableColors[0] != nTitleBackground || m_nTableColors[1] != nKeysBackground) ? (INT)m_pTables->GetSize() : 0, m_nTableColors[0] = nTitleBackground, m_nTableColors[1] = nKeysBackground, ProtectTableFieldData(GetName()); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->HasTitle())
		{
			pTable->SetRowBackgroundColor(0, nTitleBackground);
			continue;
		}
	}
}

VOID CTCOnBoardMemoryImagesTableView::GetTableColors(COLORREF &nTitleBackground, COLORREF &nKeysBackground) CONST
{
	nTitleBackground = m_nTableColors[0];
	nKeysBackground = m_nTableColors[1];
}

VOID CTCOnBoardMemoryImagesTableView::SetTableError(LPCTSTR pszError)
{
	m_szLastError = pszError;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableError(CString &szError) CONST
{
	szError = m_szLastError;
	return !szError.IsEmpty();
}

BOOL CTCOnBoardMemoryImagesTableView::DoSaveTable()
{
	CTableViewObject  *pTable;

	return(((pTable = GetActiveTable())) ? GetDatabase()->SaveTables(this, TranslateTableNameToComponent(pTable->GetName())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::CanSaveTable() CONST
{
	CTableViewObject  *pTable;

	return(((pTable = GetActiveTable())) ? GetDatabase()->CanSaveTables(this, TranslateTableNameToComponent(pTable->GetName())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoDeleteTable()
{
	CTableViewObject  *pTable;

	return(((pTable = GetActiveTable())) ? GetDatabase()->DeleteTables(this, TranslateTableNameToComponent(pTable->GetName())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::CanDeleteTable() CONST
{
	CTableViewObject  *pTable;

	return(((pTable = GetActiveTable())) ? GetDatabase()->CanDeleteTables(this, TranslateTableNameToComponent(pTable->GetName())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoImportTables()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanImportTables() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoExportTables()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanExportTables() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoDiscardTables()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanDiscardTables() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoDiscardAllTables()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanDiscardAllTables() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoResetTables()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanResetTables() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoInsertTableRowAbove()
{
	INT  nRow;
	INT  nCol;
	INT  nTable;
	INT  nTables;
	BOOL  bSuccess;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), bSuccess = FALSE; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST  &&  pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows() && !pTable->GetSelCell(nRow, nCol))
		{
			for (m_cUndoLists.Collect(TRUE, 1), SetActiveCell(); InsertTableRow(pTable, (nRow = pTable->GetSelRow())); )
			{
				ProtectTableFieldData(pTable->GetName(), TRUE);
				RecalcTable(pTable, FALSE, TRUE, FALSE);
				SelectTableFieldData(pTable->GetName(), CPoint(-1, nRow));
				break;
			}
			m_cUndoLists.Collect(FALSE);
			ArrangeTables(0);
			break;
		}
	}
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesTableView::CanInsertTableRowAbove() CONST
{
	INT  nRow;
	INT  nCol;
	INT  nTable;
	INT  nTables;
	INT  nLimits[2];
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? (INT)m_pTables->GetSize() : -1; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST  &&  pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows() && !pTable->GetSelCell(nRow, nCol))
		{
			if (!GetTableOutlineLimits(pTable->GetName(), nLimits[0], nLimits[1]) || pTable->GetRows() < nLimits[1])
			{
				if ((nRow = pTable->GetSelRow()) > 0 || !pTable->HasTitle())
				{
					if (IsTableRowEmpty(pTable, nRow)) nTable = nTables;
					break;
				}
			}
		}
	}
	return((nTable < nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoInsertTableRowBelow()
{
	INT  nRow;
	INT  nCol;
	INT  nTable;
	INT  nTables;
	BOOL  bSuccess;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), bSuccess = FALSE; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST && ((pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows()) || (pTable->GetRows() == 1 && pTable->GetSelRow() == pTable->GetRows())) && !pTable->GetSelCell(nRow, nCol))
		{
			for (m_cUndoLists.Collect(TRUE, 1), SetActiveCell(); InsertTableRow(pTable, (nRow = min(max(pTable->GetSelRow() + 1, 0), pTable->GetRows()))); )
			{
				ProtectTableFieldData(pTable->GetName(), TRUE);
				RecalcTable(pTable, FALSE, TRUE, FALSE);
				SelectTableFieldData(pTable->GetName(), CPoint(-1, nRow));
				break;
			}
			m_cUndoLists.Collect(FALSE);
			ArrangeTables(0);
			break;
		}
	}
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesTableView::CanInsertTableRowBelow() CONST
{
	INT  nRow;
	INT  nCol;
	INT  nTable;
	INT  nTables;
	INT  nLimits[2];
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? (INT)m_pTables->GetSize() : -1; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST && ((pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows()) || (pTable->GetRows() == 1 && pTable->GetSelRow() == pTable->GetRows())) && !pTable->GetSelCell(nRow, nCol))
		{
			if (!GetTableOutlineLimits(pTable->GetName(), nLimits[0], nLimits[1]) || pTable->GetRows() < nLimits[1])
			{
				if ((nRow = min(max(pTable->GetSelRow(), 0), pTable->GetRows() - 1)) > 0 || !pTable->HasTitle())
				{
					if (IsTableRowEmpty(pTable, nRow)) nTable = nTables;
					break;
				}
			}
		}
	}
	return((nTable < nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoInsertTableColumnBefore()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanInsertTableColumnBefore() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoInsertTableColumnAfter()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanInsertTableColumnAfter() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoClearTableRow()
{
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CRect  rTable;
	CString  szText;
	CString  szItem;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[2];
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem[2];

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = m_pTables->GetAt(nTable)) && ((!pTable[0]->HasTitle() && pTable[0]->GetSelRow() >= 0) || (pTable[0]->HasTitle() && pTable[0]->GetSelRow() > 0)) && pTable[0]->GetSelRow() < pTable[0]->GetRows())
		{
			for (nCol = 0, nCols = pTable[0]->GetColumns(), m_cUndoLists.Collect(TRUE, 1), SetActiveCell(), ConvertUndoItem(pTable[0]->GetName(), &cUndoItem[0]), ConvertUndoItem(pTable[0]->GetName(), &cUndoItem[1]); nCol < nCols; nCol++)
			{
				for (cUndoItem[0].SetCell(pTable[0]->GetName(), CPoint(nCol, pTable[0]->GetSelRow())), cUndoItem[1].SetCell(pTable[0]->GetName(), CPoint(nCol, pTable[0]->GetSelRow())), cUndoItem[0].SetText(pTable[0]->GetCellText(pTable[0]->GetSelRow(), nCol)), cUndoItem[1].SetText(EMPTYSTRING), cUndoItem[0].SetSel(0, cUndoItem[0].GetText().GetLength()), cUndoItem[1].SetSel(0, cUndoItem[1].GetText().GetLength()); (pCell = pTable[0]->FindCell(pTable[0]->GetSelRow(), nCol)); )
				{
					if ((pCell->GetFormat() & (TAS_TYPE_TEXT | TAS_TYPE_SUBTABLE)) == 0)
					{
						m_cUndoLists.Add(&cUndoItem[0]);
						m_cUndoLists.Add(&cUndoItem[1]);
					}
					break;
				}
			}
			for (nCol = 0; nCol < nCols; nCol++)
			{
				if ((pCell = pTable[0]->FindCell(pTable[0]->GetSelRow(), nCol)))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pCell->GetControlID(), szTables), pCell->SetText((szText = EMPTYSTRING), FALSE), UpdateTableFieldData(pCell->GetControlID(), szText); nTable < nTables; nTable++)
					{
						if (GetTableUpdateContents(szTables.GetAt(nTable), pCell->GetControlID(), pCell->GetText(), szItem, szItems))
						{
							if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))))
							{
								UpdateTableContents(pTable[1], szItems);
								continue;
							}
						}
					}
				}
			}
			m_cUndoLists.Collect(FALSE);
			ArrangeTables(0);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanClearTableRow() CONST
{
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CString  szTitle;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? (INT)m_pTables->GetSize() : -1; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST && ((((szTitle = pTable->GetTitle()).GetLength() > 0 && pTable->GetSelRow() > 0) || (szTitle.IsEmpty() && pTable->GetRows() > 1)) && pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows()))
		{
			for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(pTable->GetSelRow(), nCol)))
				{
					if (pCell->GetFormat() & TAS_TYPE_TEXT) continue;
					if (!pCell->GetText().IsEmpty()) break;
				}
			}
			return((nCol < nCols) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoDeleteTableRow()
{
	INT  nRow;
	INT  nTable;
	INT  nTables;
	BOOL  bSuccess;
	CRect  rTable;
	CString  szTitle;
	CString  szTable;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), bSuccess = FALSE; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST  &&  GetTableTitle(pTable->GetName(), szTitle) && (((!szTitle.IsEmpty() && pTable->GetSelRow() > 0) || (szTitle.IsEmpty() && pTable->GetRows() > 1)) && pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows()))
		{
			for (m_cUndoLists.Collect(TRUE, 1), SetActiveCell(); (bSuccess = RemoveTableRow(pTable, (nRow = pTable->GetSelRow())) && DeleteTableFieldData((szTable = pTable->GetName()), nRow)); )
			{
				ProtectTableFieldData(szTable, TRUE);
				RecalcTable(pTable, FALSE, TRUE, FALSE);
				SelectTableFieldData(szTable, CPoint(-1, -1));
				break;
			}
			m_cUndoLists.Collect(FALSE);
			ArrangeTables(0);
			break;
		}
	}
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesTableView::CanDeleteTableRow() CONST
{
	INT  nTable;
	INT  nTables;
	INT  nLimits[2];
	CString  szTitle;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? (INT)m_pTables->GetSize() : -1; nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && pTable->GetType() == TAS_TABLE_LIST && ((((szTitle = pTable->GetTitle()).GetLength() > 0 && pTable->GetSelRow() > 0) || (szTitle.IsEmpty() && pTable->GetRows() > 1)) && pTable->GetSelRow() >= 0 && pTable->GetSelRow() < pTable->GetRows()))
		{
			if (!GetTableOutlineLimits(pTable->GetName(), nLimits[0], nLimits[1]) || pTable->GetRows() > nLimits[0]) break;
			continue;
		}
	}
	return((nTable < nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoDeleteTableColumn()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanDeleteTableColumn() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DoCopyTableRow()
{
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	LPSTR  pszText;
	HANDLE  hGlobal;
	CString  szRow;
	CString  szCol;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && ((!pTable->HasTitle() && pTable->GetSelRow() >= 0) || (pTable->HasTitle() && pTable->GetSelRow() > 0)) && pTable->GetSelRow() < pTable->GetRows() && !IsTableRowEmpty(pTable, pTable->GetSelRow()))
		{
			for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				szCol = pTable->GetCellText(pTable->GetSelRow(), nCol);
				szRow += (nCol > 0) ? (TAB + szCol) : szCol;
			}
			if (::OpenClipboard(GetSafeHwnd()))
			{
				if ((hGlobal = GlobalAlloc(GHND, (szRow.GetLength() + 1))))
				{
					if ((pszText = (LPSTR)GlobalLock(hGlobal)) != (LPSTR)NULL)
					{
#ifndef UNICODE
						strcpy_s(pszText, szRow.GetLength() + 1, szRow);
#else
						WideCharToMultiByte(CP_ACP, 0, szRow, szRow.GetLength(), pszText, szRow.GetLength() + 1, (LPCSTR)NULL, (LPBOOL)NULL);
#endif
						if (SetClipboardData(CF_TEXT, hGlobal))
						{
							GlobalUnlock(hGlobal);
							::CloseClipboard();
							return TRUE;
						}
						GlobalUnlock(hGlobal);
					}
					GlobalFree(hGlobal);
				}
				::CloseClipboard();
			}
			break;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanCopyTableRow() CONST
{
	INT  nTable;
	INT  nTables;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)) && ((!pTable->HasTitle() && pTable->GetSelRow() >= 0) || (pTable->HasTitle() && pTable->GetSelRow() > 0)) && pTable->GetSelRow() < pTable->GetRows() && !IsTableRowEmpty(pTable, pTable->GetSelRow())) break;
		continue;
	}
	return((nTable < nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::DoPasteTableRow()
{
	INT  nPos;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	LPSTR  pszText;
	HANDLE  hGlobal;
	CString  szText;
	CString  szRow[2];
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[2];
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem[2];

	if (::OpenClipboard(GetSafeHwnd()))
	{
		if ((hGlobal = GetClipboardData(CF_TEXT)))
		{
			if ((pszText = (LPSTR)GlobalLock(hGlobal)))
			{
#ifndef UNICODE
				szRow[0] = szRow[1] = pszText;
#else
				MultiByteToWideChar(CP_ACP, 0, pszText, -1, szRow[0].GetBufferSetLength((INT)strlen(pszText)), (INT)strlen(pszText) + 1);
				szRow[0].ReleaseBuffer();
				szRow[1] = szRow[0];
#endif
				for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = m_pTables->GetAt(nTable)) && ((!pTable[0]->HasTitle() && pTable[0]->GetSelRow() >= 0) || (pTable[0]->HasTitle() && pTable[0]->GetSelRow() > 0)) && pTable[0]->GetSelRow() < pTable[0]->GetRows())
					{
						for (nCol = 0, nCols = pTable[0]->GetColumns(), SetActiveCell(), ConvertUndoItem(pTable[0]->GetName(), &cUndoItem[0]), ConvertUndoItem(pTable[0]->GetName(), &cUndoItem[1]); nCol < nCols; nCol++)
						{
							for (cUndoItem[0].SetCell(pTable[0]->GetName(), CPoint(nCol, pTable[0]->GetSelRow())), cUndoItem[1].SetCell(pTable[0]->GetName(), CPoint(nCol, pTable[0]->GetSelRow())), cUndoItem[0].SetText(pTable[0]->GetCellText(pTable[0]->GetSelRow(), nCol)), cUndoItem[1].SetText((szText = ((nPos = szRow[0].Find(TAB)) >= 0) ? szRow[0].Left(nPos) : szRow[0])), cUndoItem[0].SetSel(0, cUndoItem[0].GetText().GetLength()), cUndoItem[1].SetSel(0, cUndoItem[1].GetText().GetLength()), cUndoItem[0].Collect(nCol > 0), cUndoItem[1].Collect(TRUE), szRow[0] = (nPos >= 0) ? szRow[0].Mid(nPos + 1) : EMPTYSTRING; (pCell = pTable[0]->FindCell(pTable[0]->GetSelRow(), nCol)); )
							{
								if ((pCell->GetFormat() & (TAS_TYPE_TEXT | TAS_TYPE_SUBTABLE)) == 0)
								{
									m_cUndoLists.Add(&cUndoItem[0]);
									m_cUndoLists.Add(&cUndoItem[1]);
								}
								break;
							}
						}
						for (nCol = 0, m_cUndoLists.Collect(); nCol < nCols; nCol++)
						{
							if ((pCell = pTable[0]->FindCell(pTable[0]->GetSelRow(), nCol)))
							{
								for (nTable = 0, nTables = EnumTableUpdates(pCell->GetControlID(), szTables), pCell->SetText((szText = ((nPos = szRow[1].Find(TAB)) >= 0) ? szRow[1].Left(nPos) : szRow[1]), FALSE), UpdateTableFieldData(pCell->GetControlID(), szText), szRow[1] = (nPos >= 0) ? szRow[1].Mid(nPos + 1) : EMPTYSTRING; nTable < nTables; nTable++)
								{
									if (GetTableUpdateContents(szTables.GetAt(nTable), pCell->GetControlID(), pCell->GetText(), GetName(), szItems))
									{
										if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))))
										{
											UpdateTableContents(pTable[1], szItems);
											continue;
										}
									}
								}
							}
						}
						m_cUndoLists.Collect(FALSE);
						GlobalUnlock(hGlobal);
						::CloseClipboard();
						ArrangeTables(0);
						return TRUE;
					}
				}
				GlobalUnlock(hGlobal);
			}
		}
		::CloseClipboard();
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CanPasteTableRow() CONST
{
	INT  nTable;
	INT  nTables;
	UINT  nFormat[2];
	CTableViewObject  *pTable;

	if (::OpenClipboard(GetSafeHwnd()))
	{
		for (nFormat[0] = 0; (nFormat[1] = EnumClipboardFormats(nFormat[0])); nFormat[0] = nFormat[1])
		{
			if (nFormat[1] == CF_TEXT) break;
			continue;
		}
		for (nTable = 0, nTables = (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty() && nFormat[1] == CF_TEXT) ? (INT)m_pTables->GetSize() : 0; nTable < nTables; nTable++)
		{
			if ((pTable = m_pTables->GetAt(nTable)) && ((!pTable->HasTitle() && pTable->GetSelRow() >= 0) || (pTable->HasTitle() && pTable->GetSelRow() > 0)) && pTable->GetSelRow() < pTable->GetRows())
			{
				::CloseClipboard();
				return TRUE;
			}
		}
		::CloseClipboard();
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::EnumTables(CStringArray &szTables, CUIntArray &nTypes, BOOL bMenu, BOOL bResetable) CONST
{
	for (szTables.RemoveAll(), nTypes.RemoveAll(); !GetName().IsEmpty(); )
	{
		szTables.Add(GetName());
		nTypes.Add(TAS_TABLE_LIST);
		break;
	}
	return((INT)szTables.GetSize());
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableTitle(LPCTSTR pszTable, CString &szTitle) CONST
{
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TITLE);
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_TITLE);
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TITLE);
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_TITLE);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableLayout(LPCTSTR pszTable, CUIntArray &nWidths) CONST
{
	return GetTableLayout(pszTable, EMPTYSTRING, nWidths);
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableLayout(LPCTSTR pszTable, LPCTSTR pszItem, CUIntArray &nWidths) CONST
{
	INT  nPos;
	INT  nLow;
	INT  nHigh;
	UINT  nRange[2][2];
	CString  szTitle;
	CString  szColumns;
	CStringTools  cStringTools;

	for (nWidths.RemoveAll(); !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)) && GetTableTitle(pszTable, szTitle); )
	{
		for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
		{
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER))
			{
				nWidths.Add(3 * max(GetDatabase()->GetOBProcessorMemoryAreaBlockTMParameterLength(), GetDatabase()->GetTMParameterTagLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TCPARAMETER))
			{
				nWidths.Add(3 * max(GetDatabase()->GetOBProcessorMemoryAreaBlockTCParameterLength(), GetDatabase()->GetTCParameterTagLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_DESCRIPTION))
			{
				nWidths.Add(max(GetDatabase()->GetOBProcessorMemoryAreaBlockDescriptionLength(), GetDatabase()->GetTMParameterDescriptionLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_ADDRESS))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nRange[0][1], nRange[1][1]).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(5 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITOFFSET))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow, nHigh))
				{
					nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh))
				{
					nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(nHigh / 3);
					continue;
				}
				nWidths.Add(4 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			szColumns = szColumns.Mid(nPos + 1);
			nWidths.Add(-1);
			continue;
		}
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) && GetTableTitle(pszTable, szTitle))
	{
		for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
		{
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS))
			{
				if (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nRange[0][1], nRange[1][1]).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(6 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE))
			{
				if (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * cStringTools.ConvertLongUIntToString((ULONGLONG)nRange[0][1] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nRange[1][1] - (ULONGLONG)nRange[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nRange[1][0] + 1).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(2 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))
			{
				nWidths.Add(max(GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / 14, 24 * sizeof(UINT)));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			szColumns = szColumns.Mid(nPos + 1);
			nWidths.Add(-1);
			continue;
		}
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)) && GetTableTitle(pszTable, szTitle))
	{
		for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
		{
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER))
			{
				nWidths.Add(3 * max(GetDatabase()->GetOBProcessorMemoryAreaBlockTMParameterLength(), GetDatabase()->GetTMParameterTagLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TCPARAMETER))
			{
				nWidths.Add(3 * max(GetDatabase()->GetOBProcessorMemoryAreaBlockTCParameterLength(), GetDatabase()->GetTCParameterTagLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_DESCRIPTION))
			{
				nWidths.Add(max(GetDatabase()->GetOBProcessorMemoryAreaBlockDescriptionLength(), GetDatabase()->GetTMParameterDescriptionLength()));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_ADDRESS))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nRange[0][1], nRange[1][1]).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(5 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITOFFSET))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow, nHigh))
				{
					nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITWIDTH))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh))
				{
					nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE) || szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE))
			{
				if (GetDatabase()->GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(nHigh / 3);
					continue;
				}
				nWidths.Add(4 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			szColumns = szColumns.Mid(nPos + 1);
			nWidths.Add(-1);
			continue;
		}
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) && GetTableTitle(pszTable, szTitle))
	{
		for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
		{
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS))
			{
				if (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nRange[0][1], nRange[1][1]).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(5 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_SIZE))
			{
				if (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
				{
					nWidths.Add(2 * cStringTools.ConvertLongUIntToString((ULONGLONG)nRange[0][1] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nRange[1][1] - (ULONGLONG)nRange[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nRange[1][0] + 1).GetLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				nWidths.Add(2 * sizeof(UINT));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			if (szColumns.Left(nPos) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))
			{
				nWidths.Add(max(GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / 14, 24 * sizeof(UINT)));
				szColumns = szColumns.Mid(nPos + 1);
				continue;
			}
			szColumns = szColumns.Mid(nPos + 1);
			nWidths.Add(-1);
			continue;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTablePosition(LPCTSTR pszTable, CString &szTable, CRect &rPosition) CONST
{
	szTable.Empty();
	rPosition.SetRectEmpty();
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesTableView::SetTableFloatingAlignment(LPCTSTR pszTable, INT nRow)
{
	CTableViewObject  *pTable;

	if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
	{
		pTable->SetFloatingAlignment(nRow);
		return TRUE;
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::GetTableFloatingAlignment(LPCTSTR pszTable) CONST
{
	CTableViewObject  *pTable;

	return(((pTable = m_pTables->GetAt(m_pTables->Find(pszTable)))) ? pTable->GetFloatingAlignment() : -1);
}

BOOL CTCOnBoardMemoryImagesTableView::AlignFloatingTable(LPCTSTR pszTable)
{
	INT  nRow;
	CRect  rTable;
	CString  szTable;
	CTableViewObject  *pTable;

	if ((nRow = GetTableFloatingAlignment(pszTable)) >= 0 && GetTablePosition(pszTable, szTable, rTable))
	{
		for (SelectTableFieldData(szTable, CPoint(-1, nRow)); (pTable = m_pTables->GetAt(m_pTables->Find(szTable))); )
		{
			pTable->SetSelRow();
			break;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableOutline(LPCTSTR pszTable, COLORREF &nTitleRowColor, COLORREF &nFirstRowColor, COLORREF &nFirstColumnColor, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, INT &nOuterBorderSize, INT &nOuterBorderStyle, COLORREF &nOuterBorderColor, INT &nInnerBorderSize, INT &nInnerBorderStyle, COLORREF &nInnerBorderColor) CONST
{
	nTitleRowColor = m_nTableColors[0];
	nFirstRowColor = GetSysColor(COLOR_WINDOW);
	nFirstColumnColor = GetSysColor(COLOR_WINDOW);
	nTitleFontColor = m_nTableFontColors[0];
	nItemsFontColor = m_nTableFontColors[1];
	nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
	nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
	nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
	nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
	nOuterBorderStyle = PS_SOLID;
	nInnerBorderStyle = PS_DOT;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableOutlineFonts(LPCTSTR pszTable, LOGFONT *plfTitleFont, LOGFONT *plfItemsFont) CONST
{
	for (CopyMemory(plfTitleFont, &m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6, plfTitleFont->lfPitchAndFamily = FIXED_PITCH | FF_DONTCARE; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
	{
		_tcscpy_s(plfTitleFont->lfFaceName, sizeof(plfTitleFont->lfFaceName) / sizeof(TCHAR), EMPTYSTRING);
		break;
	}
	for (CopyMemory(plfItemsFont, &m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6, plfItemsFont->lfPitchAndFamily = FIXED_PITCH | FF_DONTCARE; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
	{
		_tcscpy_s(plfItemsFont->lfFaceName, sizeof(plfItemsFont->lfFaceName) / sizeof(TCHAR), EMPTYSTRING);
		break;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableOutlineLimits(LPCTSTR pszTable, INT &nMinRows, INT &nMaxRows) CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableContents(LPCTSTR pszTable, LPCTSTR pszItem, INT nRows, CStringArray &szContents, CStringArray &szDescriptions, CStringArray &szDataTypes, CUIntArray &nFormats, CUIntArray &nIDs, BOOL &bResize, BOOL &bVisible) CONST
{
	INT  nByte;
	INT  nBytes;
	INT  nOffset[2];
	INT  nImageBlock;
	INT  nImageBlocks;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	UINT  nRange[2][2];
	UINT  nAddress[3][2];
	UINT  nAddressBytes;
	UINT  nImageBlockData[2];
	BOOL  bImageBlockData[2];
	BOOL  bImageBlockAddress;
	CString  szImageData;
	CString  szImageBlock;
	CString  szImageBlocks;
	CString  szMemoryBlock;
	ULONGLONG  nBlockData[2];
	CByteArray  nImageData[6];
	CMemoryDump  *pMemoryDump;
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pTMParameter;
	CDatabaseTCParameter  *pTCParameter;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), bResize = bVisible = FALSE; !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)); )
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szMemoryArea))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (nRows >= 0) ? (INT)min(pMemoryArea[0]->GetSize(), nRows) : (INT)pMemoryArea[0]->GetSize(), GetDatabase()->GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryAreaBlockAddressWidth() / 8, 1); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryAreaBlock *)NULL)
					{
						szMemoryBlock = ((pTMParameter = GetDatabase()->GetTMParameters()->GetAt(pMemoryAreaBlock->GetTMParameterRef()))) ? pTMParameter->GetTag() : EMPTYSTRING;
						szMemoryBlock += ((pTCParameter = GetDatabase()->GetTCParameters()->GetAt(pMemoryAreaBlock->GetTCParameterRef()))) ? (CString(TAB) + pTCParameter->GetTag() + CString(TAB) + pMemoryAreaBlock->GetDescription()) : (CString(TAB) + CString(TAB) + pMemoryAreaBlock->GetDescription());
						szMemoryBlock += (pMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nAddress[0][0], nAddress[0][1])) : CString(TAB);
						szMemoryBlock += (pMemoryAreaBlock->GetBitOffset() >= 0) ? (TAB + cStringTools.ConvertIntToString(pMemoryAreaBlock->GetBitOffset())) : CString(TAB);
						szMemoryBlock += (pMemoryAreaBlock->GetBitWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pMemoryAreaBlock->GetBitWidth())) : CString(TAB);
						if ((pMemoryArea[1] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))) && pMemoryArea[1]->GetMemoryImage(pMemoryImage[0]))
						{
							for (nImageBlock = 0, nImageBlocks = (INT)pMemoryImage[0]->GetSize(); nImageBlock < nImageBlocks; nImageBlock++)
							{
								if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
								{
									if (!m_szImage[0][1].Compare(pMemoryImageBlock[0]->GetVersion()))
									{
										if (pMemoryImageBlock[0]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[0]->GetData(nImageData[0]) > 0 && pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0 && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] >= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + (nImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes)
										{
											for (nByte = (INT)((((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] - (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nAddress[1][1])*nAddressBytes * 8 + pMemoryAreaBlock->GetBitOffset()) / 8), nBytes = nByte + (pMemoryAreaBlock->GetBitWidth() + 7) / 8, nImageData[2].RemoveAll(), nImageData[3].RemoveAll(); nByte < nBytes && nBytes <= nImageData[0].GetSize(); nByte++)
											{
												for (nImageData[2].Add(nImageData[0].GetAt(nByte)); nByte < nImageData[1].GetSize(); )
												{
													nImageData[3].Add(nImageData[1].GetAt(nByte));
													break;
												}
											}
											if (nByte == nBytes &&  nBytes > 0)
											{
												szMemoryBlock += TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[2], nImageData[3], TRUE);
												break;
											}
											if (nBytes <= nImageData[0].GetSize())
											{
												szMemoryBlock += TAB;
												break;
											}
										}
									}
								}
							}
							szMemoryBlock += (nImageBlock == nImageBlocks) ? CString(TAB) : EMPTYSTRING;
							szContents.Add(szMemoryBlock);
							continue;
						}
						szContents.Add(szMemoryBlock + TAB);
					}
				}
				delete pMemoryImage[0];
			}
		}
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TCPARAMETER)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_DESCRIPTION)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_ADDRESS)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITOFFSET)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TCPARAMETER)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TCPARAMETER)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_DESCRIPTION)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_DESCRIPTION)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_ADDRESS)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_ADDRESS)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITOFFSET)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITOFFSET)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)));
		bResize = bVisible = TRUE;
		break;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? ((nRows >= 0) ? (INT)min(pMemoryImage[0]->GetSize(), nRows) : (INT)pMemoryImage[0]->GetSize()) : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
					{
						if (pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1])
						{
							szImageBlock = (pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nAddress[0][0], nAddress[0][1]) : EMPTYSTRING;
							szImageBlock += (pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0) ? (TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[0].GetSize() + max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) - 1) / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)))) : CString(TAB);
							szImageBlock += (pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], FALSE)) : CString(TAB);
							szContents.Add(szImageBlock);
						}
					}
				}
				delete pMemoryImage[0];
			}
		}
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)));
		bResize = bVisible = TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)))
	{
		for (; (pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL; )
		{
			if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))) != (CDatabaseOBProcessorMemoryArea *)NULL)
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? (INT)pMemoryImage[0]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)) && pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1]) break;
					continue;
				}
				if (nImageBlock < nImageBlocks) break;
			}
			delete pMemoryImage[0];
			pMemoryImage[0] = (CDatabaseOBProcessorMemoryImage *)NULL;
			break;
		}
		for (; (pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage); )
		{
			if ((pMemoryArea[1] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[1][0]))))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[1]->GetMemoryImage(pMemoryImage[1])) ? (INT)pMemoryImage[1]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nImageBlock)) && pMemoryImageBlock[1]->GetVersion() == m_szImage[1][1]) break;
					continue;
				}
				if (nImageBlock < nImageBlocks) break;
			}
			delete pMemoryImage[1];
			pMemoryImage[1] = (CDatabaseOBProcessorMemoryImage *)NULL;
			break;
		}
		for (nImageBlock = 0, nImageBlocks = (pMemoryImage[0] != (CDatabaseOBProcessorMemoryImage *)NULL && pMemoryImage[1] != (CDatabaseOBProcessorMemoryImage *)NULL) ? (INT)pMemoryImage[0]->GetSize() : 0, GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0, nAddressBytes = min(max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1), sizeof(nImageBlockData[0])), nImageData[0].RemoveAll(), nImageData[1].RemoveAll(), bImageBlockAddress = FALSE; nImageBlock < nImageBlocks; nImageBlock++)
		{
			if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)) && pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1] && pMemoryImageBlock[0]->GetAddress(nAddress[2][0], nAddress[2][1]) && pMemoryImageBlock[0]->GetData(nImageData[4]) >= 0 && pMemoryImageBlock[0]->GetMask(nImageData[5]) >= 0)
			{
				nAddress[0][0] = (!bImageBlockAddress) ? nAddress[2][0] : nAddress[0][0];
				nAddress[0][1] = (!bImageBlockAddress) ? nAddress[2][1] : nAddress[0][1];
				nImageData[0].Append(nImageData[4]);
				nImageData[1].Append(nImageData[5]);
				bImageBlockAddress = TRUE;
			}
		}
		for (nImageBlock = 0, nImageBlocks = (pMemoryImage[0] != (CDatabaseOBProcessorMemoryImage *)NULL && pMemoryImage[1] != (CDatabaseOBProcessorMemoryImage *)NULL) ? (INT)pMemoryImage[1]->GetSize() : 0, nImageData[2].RemoveAll(), nImageData[3].RemoveAll(), bImageBlockAddress = FALSE; nImageBlock < nImageBlocks; nImageBlock++)
		{
			if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nImageBlock)) && pMemoryImageBlock[1]->GetVersion() == m_szImage[1][1] && pMemoryImageBlock[1]->GetAddress(nAddress[2][0], nAddress[2][1]) && pMemoryImageBlock[1]->GetData(nImageData[4]) >= 0 && pMemoryImageBlock[1]->GetMask(nImageData[5]) >= 0)
			{
				nAddress[1][0] = (!bImageBlockAddress) ? nAddress[2][0] : nAddress[1][0];
				nAddress[1][1] = (!bImageBlockAddress) ? nAddress[2][1] : nAddress[1][1];
				nImageData[2].Append(nImageData[4]);
				nImageData[3].Append(nImageData[5]);
				bImageBlockAddress = TRUE;
			}
		}
		nOffset[0] = (INT)max((LONGLONG)nAddress[0][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (LONGLONG)nAddress[0][1] - (LONGLONG)nAddress[1][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (LONGLONG)nAddress[1][1], 0)*nAddressBytes;
		nOffset[1] = (INT)max((LONGLONG)nAddress[1][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (LONGLONG)nAddress[1][1] - (LONGLONG)nAddress[0][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (LONGLONG)nAddress[0][1], 0)*nAddressBytes;
		for (nByte = 0, nBytes = (INT)max(nOffset[0] + nImageData[0].GetSize(), nOffset[1] + nImageData[2].GetSize()), szImageBlocks.Empty(), nImageBlockData[0] = nImageBlockData[1] = 0; nByte < nBytes && (nRows > szContents.GetSize() || nRows < 0); nByte++)
		{
			nImageBlockData[0] = ((bImageBlockData[0] = (nByte >= nOffset[0] && nByte - nOffset[0] < nImageData[0].GetSize() && (nByte - nOffset[0] >= nImageData[1].GetSize() || nImageData[1].GetAt(nByte - nOffset[0]) == MEMORYDUMP_DATATYPE_NORMAL)))) ? (nImageBlockData[0] << 8) : nImageBlockData[0];
			nImageBlockData[1] = ((bImageBlockData[1] = (nByte >= nOffset[1] && nByte - nOffset[1] < nImageData[2].GetSize() && (nByte - nOffset[1] >= nImageData[3].GetSize() || nImageData[3].GetAt(nByte - nOffset[1]) == MEMORYDUMP_DATATYPE_NORMAL)))) ? (nImageBlockData[1] << 8) : nImageBlockData[1];
			nImageBlockData[0] += (bImageBlockData[0]) ? nImageData[0].GetAt(nByte - nOffset[0]) : 0;
			nImageBlockData[1] += (bImageBlockData[1]) ? nImageData[2].GetAt(nByte - nOffset[1]) : 0;
			if ((nByte + 1) % nAddressBytes == 0 && nByte != 0)
			{
				if ((nImageBlockData[0] != nImageBlockData[1] || !bImageBlockData[0] || !bImageBlockData[1] || m_bShowAll) && (bImageBlockData[0] || bImageBlockData[1]))
				{
					for (nMemoryArea = 0, nMemoryAreas = (bImageBlockData[0] || bImageBlockData[1]) ? (INT)m_cItem[0].GetSize() : 0, nMemoryBlock = nMemoryBlocks = 0; nMemoryArea < nMemoryAreas; nMemoryArea++)
					{
						if ((pMemoryArea[0] = m_cItem[0].GetAt(nMemoryArea)) && (pMemoryArea[0]->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY) == OBPROCESSORMEMORYAREA_TYPE_MEMORY)
						{
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / nAddressBytes < min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1])) continue;
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt((INT)pMemoryArea[0]->GetUpperBound())) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] > max((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1] + (nImageData[0].GetSize() - 1) / nAddressBytes, (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1] + (nImageData[2].GetSize() - 1) / nAddressBytes)) continue;
							break;
						}
					}
					if ((pMemoryArea[0] = (nMemoryArea < nMemoryAreas) ? m_cItem[0].GetAt(nMemoryArea) : (CDatabaseOBProcessorMemoryArea *)NULL))
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryArea[0]->GetSize(), szImageData.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]))
							{
								if (min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes == (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] || min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes == (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / (8 * nAddressBytes))
								{
									for (nBlockData[0] = nBlockData[1] = 0, szImageData.Empty(); szImageBlocks.Find(cStringTools.ConvertIntToString(nMemoryBlock) + TAB) < 0 && ((!bImageBlockData[0] || ExtractData(nImageData[0], (INT)(nAddressBytes*((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] - min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]))), pMemoryAreaBlock->GetBitOffset(), pMemoryAreaBlock->GetBitWidth(), nBlockData[0])) && (!bImageBlockData[1] || ExtractData(nImageData[2], (INT)(nAddressBytes*((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] - min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]))), pMemoryAreaBlock->GetBitOffset(), pMemoryAreaBlock->GetBitWidth(), nBlockData[1]))) && (nBlockData[0] != nBlockData[1] || !bImageBlockData[0] || !bImageBlockData[1] || m_bShowAll); )
									{
										szImageData = ((pTMParameter = GetDatabase()->GetTMParameters()->GetAt(pMemoryAreaBlock->GetTMParameterRef()))) ? pTMParameter->GetTag() : EMPTYSTRING;
										szImageData += ((pTCParameter = GetDatabase()->GetTCParameters()->GetAt(pMemoryAreaBlock->GetTCParameterRef()))) ? (TAB + pTCParameter->GetTag()) : (TAB + CString(EMPTYSTRING));
										szImageData += CString(TAB) + pMemoryAreaBlock->GetDescription() + CString(TAB) + GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nAddress[2][0], nAddress[2][1]) + CString(TAB) + cStringTools.ConvertUIntToString(pMemoryAreaBlock->GetBitOffset()) + CString(TAB) + cStringTools.ConvertUIntToString(pMemoryAreaBlock->GetBitWidth());
										szImageData += (bImageBlockData[0]) ? (TAB + cStringTools.ConvertLongUIntToPaddedString(nBlockData[0], max(pMemoryAreaBlock->GetBitWidth() / 4, 1), 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
										szImageData += (nBlockData[0] == nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_EQUALVALUE))) : EMPTYSTRING;
										szImageData += (nBlockData[0] < nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_SMALLERVALUE))) : EMPTYSTRING;
										szImageData += (nBlockData[0] > nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_BIGGERVALUE))) : EMPTYSTRING;
										szImageData += (!bImageBlockData[0] || !bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE))) : EMPTYSTRING;
										szImageData += (bImageBlockData[1]) ? (TAB + cStringTools.ConvertLongUIntToPaddedString(nBlockData[1], max(pMemoryAreaBlock->GetBitWidth() / 4, 1), 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
										szImageBlocks += cStringTools.ConvertIntToString(nMemoryBlock) + TAB;
										szContents.Add(szImageData);
										break;
									}
									szImageData = (!szImageData.IsEmpty()) ? szImageData : SPACE;
									continue;
								}
								if (min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes < (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1]) break;
							}
						}
						if (!szImageData.IsEmpty() || nMemoryBlock < nMemoryBlocks) continue;
					}
					szImageData = CString(EMPTYSTRING) + TAB + CString(EMPTYSTRING);
					szImageData += CString(TAB) + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NODESCRIPTION));
					szImageData += CString(TAB) + GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress((!nOffset[0]) ? (nAddress[0][0] + (nByte / nAddressBytes) / (nRange[1][1] - nRange[1][0] + 1)) : (nAddress[1][0] + (nByte / nAddressBytes) / (nRange[1][1] - nRange[1][0] + 1)), (!nOffset[0]) ? ((nAddress[0][1] + nByte / nAddressBytes) % (nRange[1][1] - nRange[1][0] + 1)) : ((nAddress[1][1] + nByte / nAddressBytes) % (nRange[1][1] - nRange[1][0] + 1))) + CString(TAB) + cStringTools.ConvertUIntToString(0) + CString(TAB) + cStringTools.ConvertUIntToString(8 * nAddressBytes);
					szImageData += (bImageBlockData[0]) ? (TAB + cStringTools.ConvertUIntToPaddedString(nImageBlockData[0], 2 * nAddressBytes, 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
					szImageData += (nImageBlockData[0] == nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_EQUALVALUE))) : EMPTYSTRING;
					szImageData += (nImageBlockData[0] < nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_SMALLERVALUE))) : EMPTYSTRING;
					szImageData += (nImageBlockData[0] > nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_BIGGERVALUE))) : EMPTYSTRING;
					szImageData += (!bImageBlockData[0] || !bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE))) : EMPTYSTRING;
					szImageData += (bImageBlockData[1]) ? (TAB + cStringTools.ConvertUIntToPaddedString(nImageBlockData[1], 2 * nAddressBytes, 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
					szContents.Add(szImageData);
				}
				nImageBlockData[0] = 0;
				nImageBlockData[1] = 0;
			}
		}
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TCPARAMETER)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_DESCRIPTION)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_ADDRESS)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITOFFSET)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITWIDTH)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VERSUS)), TAS_TYPE_TEXT | TAS_ALIGN_HCENTER | TAS_ALIGN_VCENTER);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TCPARAMETER)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TCPARAMETER)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_DESCRIPTION)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_DESCRIPTION)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_ADDRESS)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_ADDRESS)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITOFFSET)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITOFFSET)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITWIDTH)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_BITWIDTH)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VERSUS)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VERSUS)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE)));
		bResize = bVisible = TRUE;
		delete pMemoryImage[1];
		delete pMemoryImage[0];
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? ((nRows >= 0) ? (INT)min(pMemoryImage[0]->GetSize(), nRows) : (INT)pMemoryImage[0]->GetSize()) : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
					{
						if (pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1])
						{
							szImageBlock = (pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nAddress[0][0], nAddress[0][1]) : EMPTYSTRING;
							szImageBlock += (pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0) ? (TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[0].GetSize() + max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) - 1) / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)))) : CString(TAB);
							szImageBlock += (pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], FALSE)) : CString(TAB);
							szContents.Add(szImageBlock);
						}
					}
				}
				if ((pMemoryDump = (!szContents.GetSize()) ? new CMemoryDump : (CMemoryDump *)NULL))
				{
					for (nImageBlock = 0, nImageBlocks = (GetTableContents(pMemoryDump) && pMemoryDump->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1])) ? ((pMemoryDump->GetDumpData(nImageData[0]) - 1) / GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() + 1) : 0, nImageBlocks = min(nImageBlocks, nRows), pMemoryDump->GetDumpMask(nImageData[1]), nAddressBytes = max(pMemoryDump->GetDataBitWidth() / 8, 1); nImageBlock < nImageBlocks; nImageBlock++)
					{
						nImageData[2].SetSize(min(nImageData[0].GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()));
						nImageData[3].SetSize(min(nImageData[1].GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()));
						CopyMemory(nImageData[2].GetData(), nImageData[0].GetData() + nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength(), nImageData[2].GetSize());
						CopyMemory(nImageData[3].GetData(), nImageData[1].GetData() + nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength(), nImageData[3].GetSize());
						szImageBlock = GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress((UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (ULONGLONG)((nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() + nAddressBytes - 1) / nAddressBytes)) / ((ULONGLONG)1 << pMemoryDump->GetDataAddressBitWidth())), (UINT)(((ULONGLONG)nAddress[0][1] + (ULONGLONG)((nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() + nAddressBytes - 1) / nAddressBytes)) % ((ULONGLONG)1 << pMemoryDump->GetDataAddressBitWidth())));
						szImageBlock += TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[2].GetSize() + nAddressBytes - 1) / nAddressBytes));
						szImageBlock += TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[2], nImageData[3], FALSE);
						szContents.Add(szImageBlock);
					}
					delete pMemoryDump;
				}
				delete pMemoryImage[0];
			}
		}
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_SIZE)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nFormats.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_SIZE)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_SIZE)));
		nIDs.SetAtGrow(TranslateTableFieldToIndex(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA)), TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA)));
		bResize = bVisible = TRUE;
	}
	return(((!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)) || !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) || !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)) || !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME))) && nFormats.GetSize() == nIDs.GetSize()) ? TRUE : FALSE);
}

INT CTCOnBoardMemoryImagesTableView::EnumTableFieldValues(LPCTSTR pszTable, LPCTSTR pszField, CStringArray &szValues, CLongUIntArray &nValues) CONST
{
	nValues.RemoveAll();
	szValues.RemoveAll();
	return((INT)szValues.GetSize());
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableFieldLimits(LPCTSTR pszTable, LPCTSTR pszField, INT &nLow, INT &nHigh) CONST
{
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableFieldLimits(LPCTSTR pszTable, LPCTSTR pszField, UINT &uLow, UINT &uHigh) CONST
{
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::GetTableFieldLimits(LPCTSTR pszTable, LPCTSTR pszField, double &fLow, double &fHigh) CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableContext(LPCTSTR pszTable, CString &szTable, UINT &nControlID, CString &szValue) CONST
{
	szTable.Empty();
	szValue.Empty();
	nControlID = (UINT)-1;
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::EnumTableUpdates(UINT nControlID, CStringArray &szTables) CONST
{
	for (szTables.RemoveAll(); nControlID == (UINT)-1; )
	{
		szTables.Add(GetName());
		break;
	}
	return((INT)szTables.GetSize());
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableUpdateContents(LPCTSTR pszTable, UINT nControlID, LPCTSTR pszValue, CString &szItem, CStringArray &szContents) CONST
{
	INT  nByte;
	INT  nBytes;
	INT  nOffset[2];
	INT  nImageBlock;
	INT  nImageBlocks;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	UINT  nRange[2][2];
	UINT  nAddress[3][2];
	UINT  nAddressBytes;
	UINT  nImageBlockData[2];
	BOOL  bImageBlockData[2];
	BOOL  bImageBlockAddress;
	CString  szImageData;
	CString  szImageBlock;
	CString  szImageBlocks;
	CString  szMemoryBlock;
	ULONGLONG  nBlockData[2];
	CByteArray  nImageData[6];
	CMemoryDump  *pMemoryDump;
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pTMParameter;
	CDatabaseTCParameter  *pTCParameter;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	for (szContents.RemoveAll(), bImageBlockData[0] = bImageBlockData[1] = FALSE; !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)) && (nControlID == TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)) || nControlID == (UINT)-1 || !nControlID); )
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szMemoryArea))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryArea[0]->GetSize(), GetDatabase()->GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryAreaBlockAddressWidth() / 8, 1); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryAreaBlock *)NULL)
					{
						szMemoryBlock = ((pTMParameter = GetDatabase()->GetTMParameters()->GetAt(pMemoryAreaBlock->GetTMParameterRef()))) ? pTMParameter->GetTag() : EMPTYSTRING;
						szMemoryBlock += ((pTCParameter = GetDatabase()->GetTCParameters()->GetAt(pMemoryAreaBlock->GetTCParameterRef()))) ? (CString(TAB) + pTCParameter->GetTag() + CString(TAB) + pMemoryAreaBlock->GetDescription()) : (CString(TAB) + CString(TAB) + pMemoryAreaBlock->GetDescription());
						szMemoryBlock += (pMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nAddress[0][0], nAddress[0][1])) : CString(TAB);
						szMemoryBlock += (pMemoryAreaBlock->GetBitOffset() >= 0) ? (TAB + cStringTools.ConvertIntToString(pMemoryAreaBlock->GetBitOffset())) : CString(TAB);
						szMemoryBlock += (pMemoryAreaBlock->GetBitWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pMemoryAreaBlock->GetBitWidth())) : CString(TAB);
						if ((pMemoryArea[1] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))) && pMemoryArea[1]->GetMemoryImage(pMemoryImage[0]))
						{
							for (nImageBlock = 0, nImageBlocks = (INT)pMemoryImage[0]->GetSize(); nImageBlock < nImageBlocks; nImageBlock++)
							{
								if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
								{
									if (!m_szImage[0][1].Compare(pMemoryImageBlock[0]->GetVersion()))
									{
										if (pMemoryImageBlock[0]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[0]->GetData(nImageData[0]) > 0 && pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0 && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] >= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + (nImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes)
										{
											for (nByte = (INT)((((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] - (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nAddress[1][1])*nAddressBytes * 8 + pMemoryAreaBlock->GetBitOffset()) / 8), nBytes = nByte + (pMemoryAreaBlock->GetBitWidth() + 7) / 8, nImageData[2].RemoveAll(), nImageData[3].RemoveAll(); nByte < nBytes && nBytes <= nImageData[0].GetSize(); nByte++)
											{
												for (nImageData[2].Add(nImageData[0].GetAt(nByte)); nByte < nImageData[1].GetSize(); )
												{
													nImageData[3].Add(nImageData[1].GetAt(nByte));
													break;
												}
											}
											if (nByte == nBytes &&  nBytes > 0)
											{
												szMemoryBlock += TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[2], nImageData[3], TRUE);
												break;
											}
											if (nBytes <= nImageData[0].GetSize())
											{
												szMemoryBlock += TAB;
												break;
											}
										}
										bImageBlockData[0] = TRUE;
									}
								}
							}
							if (nImageBlock < nImageBlocks)
							{
								szContents.Add(szMemoryBlock);
								bImageBlockData[0] = TRUE;
								continue;
							}
						}
						szContents.Add(szMemoryBlock + TAB);
					}
				}
				delete pMemoryImage[0];
			}
		}
		if (!szContents.GetSize())
		{
			szMemoryBlock.Empty();
			szContents.Add(szMemoryBlock);
		}
		return((!nControlID) ? bImageBlockData[0] : TRUE);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) && (nControlID == TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)) || nControlID == TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)) || nControlID == TranslateTableFieldToID(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)) || nControlID == (UINT)-1 || !nControlID))
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? (INT)pMemoryImage[0]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
					{
						if (pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1])
						{
							szImageBlock = (pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nAddress[0][0], nAddress[0][1]) : EMPTYSTRING;
							szImageBlock += (pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0) ? (TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[0].GetSize() + max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) - 1) / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)))) : CString(TAB);
							szImageBlock += (pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], FALSE)) : CString(TAB);
							szContents.Add(szImageBlock);
							bImageBlockData[0] = TRUE;
						}
					}
				}
				delete pMemoryImage[0];
			}
		}
		if (!szContents.GetSize())
		{
			szImageBlock.Empty();
			szContents.Add(szImageBlock);
		}
		return(((nControlID != 0 && nControlID != (UINT)-1 && szContents.GetSize() == 1 && szContents.GetAt(0).IsEmpty()) || !nControlID) ? bImageBlockData[0] : TRUE);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)) && (nControlID == (UINT)-1 || !nControlID))
	{
		for (; (pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL; )
		{
			if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))) != (CDatabaseOBProcessorMemoryArea *)NULL)
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? (INT)pMemoryImage[0]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)) && pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1]) break;
					continue;
				}
				if (nImageBlock < nImageBlocks) break;
			}
			delete pMemoryImage[0];
			pMemoryImage[0] = (CDatabaseOBProcessorMemoryImage *)NULL;
			break;
		}
		for (; (pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage); )
		{
			if ((pMemoryArea[1] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[1][0]))))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[1]->GetMemoryImage(pMemoryImage[1])) ? (INT)pMemoryImage[1]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nImageBlock)) && pMemoryImageBlock[1]->GetVersion() == m_szImage[1][1]) break;
					continue;
				}
				if (nImageBlock < nImageBlocks) break;
			}
			delete pMemoryImage[1];
			pMemoryImage[1] = (CDatabaseOBProcessorMemoryImage *)NULL;
			break;
		}
		for (nImageBlock = 0, nImageBlocks = (pMemoryImage[0] != (CDatabaseOBProcessorMemoryImage *)NULL && pMemoryImage[1] != (CDatabaseOBProcessorMemoryImage *)NULL) ? (INT)pMemoryImage[0]->GetSize() : 0, GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0, nAddressBytes = min(max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1), sizeof(nImageBlockData[0])), nImageData[0].RemoveAll(), nImageData[1].RemoveAll(), bImageBlockAddress = FALSE; nImageBlock < nImageBlocks; nImageBlock++)
		{
			if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)) && pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1] && pMemoryImageBlock[0]->GetAddress(nAddress[2][0], nAddress[2][1]) && pMemoryImageBlock[0]->GetData(nImageData[4]) >= 0 && pMemoryImageBlock[0]->GetMask(nImageData[5]) >= 0)
			{
				nAddress[0][0] = (!bImageBlockAddress) ? nAddress[2][0] : nAddress[0][0];
				nAddress[0][1] = (!bImageBlockAddress) ? nAddress[2][1] : nAddress[0][1];
				nImageData[0].Append(nImageData[4]);
				nImageData[1].Append(nImageData[5]);
				bImageBlockAddress = TRUE;
			}
		}
		for (nImageBlock = 0, nImageBlocks = (pMemoryImage[0] != (CDatabaseOBProcessorMemoryImage *)NULL && pMemoryImage[1] != (CDatabaseOBProcessorMemoryImage *)NULL) ? (INT)pMemoryImage[1]->GetSize() : 0, nImageData[2].RemoveAll(), nImageData[3].RemoveAll(), bImageBlockAddress = FALSE; nImageBlock < nImageBlocks; nImageBlock++)
		{
			if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nImageBlock)) && pMemoryImageBlock[1]->GetVersion() == m_szImage[1][1] && pMemoryImageBlock[1]->GetAddress(nAddress[2][0], nAddress[2][1]) && pMemoryImageBlock[1]->GetData(nImageData[4]) >= 0 && pMemoryImageBlock[1]->GetMask(nImageData[5]) >= 0)
			{
				nAddress[1][0] = (!bImageBlockAddress) ? nAddress[2][0] : nAddress[1][0];
				nAddress[1][1] = (!bImageBlockAddress) ? nAddress[2][1] : nAddress[1][1];
				nImageData[2].Append(nImageData[4]);
				nImageData[3].Append(nImageData[5]);
				bImageBlockAddress = TRUE;
			}
		}
		nOffset[0] = (INT)max((LONGLONG)nAddress[0][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (LONGLONG)nAddress[0][1] - (LONGLONG)nAddress[1][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (LONGLONG)nAddress[1][1], 0)*nAddressBytes;
		nOffset[1] = (INT)max((LONGLONG)nAddress[1][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (LONGLONG)nAddress[1][1] - (LONGLONG)nAddress[0][0] * (LONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (LONGLONG)nAddress[0][1], 0)*nAddressBytes;
		for (nByte = 0, nBytes = (INT)max(nOffset[0] + nImageData[0].GetSize(), nOffset[1] + nImageData[2].GetSize()), szImageBlocks.Empty(), nImageBlockData[0] = nImageBlockData[1] = 0; nByte < nBytes; nByte = nByte + 1)
		{
			for (nImageBlockData[0] = ((bImageBlockData[0] = (nByte >= nOffset[0] && nByte - nOffset[0] < nImageData[0].GetSize() && (nByte - nOffset[0] >= nImageData[1].GetSize() || nImageData[1].GetAt(nByte - nOffset[0]) == MEMORYDUMP_DATATYPE_NORMAL)))) ? (nImageBlockData[0] << 8) : 0, nImageBlockData[1] = ((bImageBlockData[1] = (nByte >= nOffset[1] && nByte - nOffset[1] < nImageData[2].GetSize() && (nByte - nOffset[1] >= nImageData[3].GetSize() || nImageData[3].GetAt(nByte - nOffset[1]) == MEMORYDUMP_DATATYPE_NORMAL)))) ? (nImageBlockData[1] << 8) : 0, nImageBlockData[0] += (bImageBlockData[0]) ? nImageData[0].GetAt(nByte - nOffset[0]) : 0, nImageBlockData[1] += (bImageBlockData[1]) ? nImageData[2].GetAt(nByte - nOffset[1]) : 0; nAddressBytes < (UINT) sizeof(nImageBlockData[0]); )
			{
				nImageBlockData[0] %= (1 << (8 * nAddressBytes));
				nImageBlockData[1] %= (1 << (8 * nAddressBytes));
				break;
			}
			if ((nByte + 1) % nAddressBytes == 0 && nByte != 0)
			{
				if ((nImageBlockData[0] != nImageBlockData[1] || !bImageBlockData[0] || !bImageBlockData[1] || m_bShowAll) && (bImageBlockData[0] || bImageBlockData[1]))
				{
					for (nMemoryArea = 0, nMemoryAreas = (bImageBlockData[0] || bImageBlockData[1]) ? (INT)m_cItem[0].GetSize() : 0, nMemoryBlock = nMemoryBlocks = 0; nMemoryArea < nMemoryAreas; nMemoryArea++)
					{
						if ((pMemoryArea[0] = m_cItem[0].GetAt(nMemoryArea)) && (pMemoryArea[0]->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY) == OBPROCESSORMEMORYAREA_TYPE_MEMORY)
						{
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / nAddressBytes < min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1])) continue;
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt((INT)pMemoryArea[0]->GetUpperBound())) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] > max((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1] + (nImageData[0].GetSize() - 1) / nAddressBytes, (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1] + (nImageData[2].GetSize() - 1) / nAddressBytes)) continue;
							break;
						}
					}
					if ((pMemoryArea[0] = (nMemoryArea < nMemoryAreas) ? m_cItem[0].GetAt(nMemoryArea) : (CDatabaseOBProcessorMemoryArea *)NULL))
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryArea[0]->GetSize(), szImageData.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryAreaBlock = pMemoryArea[0]->GetAt(nMemoryBlock)) && pMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]))
							{
								if (min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes == (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] || min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes == (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / (8 * nAddressBytes))
								{
									for (nBlockData[0] = nBlockData[1] = 0, szImageData.Empty(); szImageBlocks.Find(cStringTools.ConvertIntToString(nMemoryBlock) + TAB) < 0 && ((!bImageBlockData[0] || ExtractData(nImageData[0], (INT)(nAddressBytes*((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] - min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]))), pMemoryAreaBlock->GetBitOffset(), pMemoryAreaBlock->GetBitWidth(), nBlockData[0])) && (!bImageBlockData[1] || ExtractData(nImageData[2], (INT)(nAddressBytes*((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] - min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]))), pMemoryAreaBlock->GetBitOffset(), pMemoryAreaBlock->GetBitWidth(), nBlockData[1]))) && (nBlockData[0] != nBlockData[1] || !bImageBlockData[0] || !bImageBlockData[1] || m_bShowAll); )
									{
										szImageData = ((pTMParameter = GetDatabase()->GetTMParameters()->GetAt(pMemoryAreaBlock->GetTMParameterRef()))) ? pTMParameter->GetTag() : EMPTYSTRING;
										szImageData += ((pTCParameter = GetDatabase()->GetTCParameters()->GetAt(pMemoryAreaBlock->GetTCParameterRef()))) ? (TAB + pTCParameter->GetTag()) : (TAB + CString(EMPTYSTRING));
										szImageData += CString(TAB) + pMemoryAreaBlock->GetDescription() + CString(TAB) + GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress(nAddress[2][0], nAddress[2][1]) + CString(TAB) + cStringTools.ConvertUIntToString(pMemoryAreaBlock->GetBitOffset()) + CString(TAB) + cStringTools.ConvertUIntToString(pMemoryAreaBlock->GetBitWidth());
										szImageData += (bImageBlockData[0]) ? (TAB + cStringTools.ConvertLongUIntToPaddedString(nBlockData[0], max(pMemoryAreaBlock->GetBitWidth() / 4, 1), 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
										szImageData += (nBlockData[0] == nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_EQUALVALUE))) : EMPTYSTRING;
										szImageData += (nBlockData[0] < nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_SMALLERVALUE))) : EMPTYSTRING;
										szImageData += (nBlockData[0] > nBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_BIGGERVALUE))) : EMPTYSTRING;
										szImageData += (!bImageBlockData[0] || !bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE))) : EMPTYSTRING;
										szImageData += (bImageBlockData[1]) ? (TAB + cStringTools.ConvertLongUIntToPaddedString(nBlockData[1], max(pMemoryAreaBlock->GetBitWidth() / 4, 1), 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
										szImageBlocks += cStringTools.ConvertIntToString(nMemoryBlock) + TAB;
										szContents.Add(szImageData);
										break;
									}
									szImageData = (!szImageData.IsEmpty()) ? szImageData : SPACE;
									continue;
								}
								if (min((ULONGLONG)nAddress[!bImageBlockData[0]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[0]][1], (ULONGLONG)nAddress[!bImageBlockData[1]][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[!bImageBlockData[1]][1]) + nByte / nAddressBytes < (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1]) break;
							}
						}
						if (!szImageData.IsEmpty() || nMemoryBlock < nMemoryBlocks) continue;
					}
					szImageData = CString(EMPTYSTRING) + TAB + CString(EMPTYSTRING);
					szImageData += TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NODESCRIPTION));
					szImageData += TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress((!nOffset[0]) ? (nAddress[0][0] + (nByte / nAddressBytes) / (nRange[1][1] - nRange[1][0] + 1)) : (nAddress[1][0] + (nByte / nAddressBytes) / (nRange[1][1] - nRange[1][0] + 1)), (!nOffset[0]) ? ((nAddress[0][1] + nByte / nAddressBytes) % (nRange[1][1] - nRange[1][0] + 1)) : ((nAddress[1][1] + nByte / nAddressBytes) % (nRange[1][1] - nRange[1][0] + 1)));
					szImageData += TAB + cStringTools.ConvertUIntToString(0) + TAB + cStringTools.ConvertUIntToString(8 * nAddressBytes);
					szImageData += (bImageBlockData[0]) ? (TAB + cStringTools.ConvertUIntToPaddedString(nImageBlockData[0], 2 * nAddressBytes, 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
					szImageData += (nImageBlockData[0] == nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_EQUALVALUE))) : EMPTYSTRING;
					szImageData += (nImageBlockData[0] < nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_SMALLERVALUE))) : EMPTYSTRING;
					szImageData += (nImageBlockData[0] > nImageBlockData[1] && bImageBlockData[0] && bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_BIGGERVALUE))) : EMPTYSTRING;
					szImageData += (!bImageBlockData[0] || !bImageBlockData[1]) ? (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE))) : EMPTYSTRING;
					szImageData += (bImageBlockData[1]) ? (TAB + cStringTools.ConvertUIntToPaddedString(nImageBlockData[1], 2 * nAddressBytes, 16)) : (TAB + CString(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_NOVALUE)));
					szContents.Add(szImageData);
				}
				nImageBlockData[0] = 0;
				nImageBlockData[1] = 0;
			}
		}
		if (!szContents.GetSize())
		{
			szImageBlock.Empty();
			szContents.Add(szImageBlock);
		}
		delete pMemoryImage[1];
		delete pMemoryImage[0];
		return TRUE;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) && (nControlID == (UINT)-1 || !nControlID))
	{
		if ((pMemoryArea[0] = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
			{
				for (nImageBlock = 0, nImageBlocks = (pMemoryArea[0]->GetMemoryImage(pMemoryImage[0])) ? (INT)pMemoryImage[0]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nImageBlock)))
					{
						if (pMemoryImageBlock[0]->GetVersion() == m_szImage[0][1])
						{
							szImageBlock = (pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1 && nAddress[0][1] != (UINT)-1) ? GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nAddress[0][0], nAddress[0][1]) : EMPTYSTRING;
							szImageBlock += (pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0) ? (TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[0].GetSize() + max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) - 1) / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)))) : CString(TAB);
							szImageBlock += (pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? (TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], FALSE)) : CString(TAB);
							szContents.Add(szImageBlock);
						}
					}
				}
				if ((pMemoryDump = (!szContents.GetSize()) ? new CMemoryDump : (CMemoryDump *)NULL))
				{
					for (nImageBlock = 0, nImageBlocks = (GetTableContents(pMemoryDump) && pMemoryDump->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1])) ? ((pMemoryDump->GetDumpData(nImageData[0]) - 1) / GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() + 1) : 0, pMemoryDump->GetDumpMask(nImageData[1]), nAddressBytes = max(pMemoryDump->GetDataBitWidth() / 8, 1); nImageBlock < nImageBlocks; nImageBlock++)
					{
						nImageData[2].SetSize(min(nImageData[0].GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()));
						nImageData[3].SetSize(min(nImageData[1].GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()));
						CopyMemory(nImageData[2].GetData(), nImageData[0].GetData() + nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength(), nImageData[2].GetSize());
						CopyMemory(nImageData[3].GetData(), nImageData[1].GetData() + nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength(), nImageData[3].GetSize());
						szImageBlock = GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress((UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (ULONGLONG)((nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()) / nAddressBytes)) / ((ULONGLONG)1 << pMemoryDump->GetDataAddressBitWidth())), (UINT)(((ULONGLONG)nAddress[0][1] + (ULONGLONG)((nImageBlock*GetDatabase()->GetOBProcessorMemoryImageBlockDataLength()) / nAddressBytes)) % ((ULONGLONG)1 << pMemoryDump->GetDataAddressBitWidth())));
						szImageBlock += TAB + cStringTools.ConvertUIntToString((UINT)((nImageData[2].GetSize() + nAddressBytes - 1) / nAddressBytes));
						szImageBlock += TAB + GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData[2], nImageData[3], FALSE);
						szContents.Add(szImageBlock);
					}
					delete pMemoryDump;
				}
				delete pMemoryImage[0];
			}
		}
		if (!szContents.GetSize())
		{
			szImageBlock.Empty();
			szContents.Add(szImageBlock);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::UpdateTableFieldData(UINT nControlID, LPCTSTR pszValue, LPCTSTR pszOldValue)
{
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  cbMemoryBlock;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CByteArray  nImageData;
	CByteArray  nImageMask;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	TABLEVIEWCELLVALUE  sValue;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pTable = (nControlID == TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))) ? m_pTables->GetAt(m_pTables->Find(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME))) : (CTableViewObject *)NULL) && m_bUpdate; )
	{
		if ((pMemoryImage = ((pMemoryArea = m_cItem[0].GetAt(m_cItem[0].Find(m_szMemoryArea)))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL) && pMemoryArea->GetMemoryImage(pMemoryImage))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryImage->Find(m_szImage[0][1]) < 0) ? (INT)pMemoryArea->GetSize() : -1, nCount = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock = nMemoryBlock + 1)
			{
				if ((pMemoryAreaBlock = pMemoryArea->GetAt(nMemoryBlock)) && (nMemoryBlock > 0 || pMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1])) && pMemoryAreaBlock->GetAddress(nAddress[1][0], nAddress[1][1]))
				{
					for (cbMemoryBlock = (UINT)(((ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] - (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nAddress[0][1])*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / 8 + 1), nImageData.SetSize(cbMemoryBlock); nCount < (INT)((cbMemoryBlock - 1) / (GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / 2) + 1); )
					{
						if ((pMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
						{
							pMemoryImageBlock->SetAddress(nAddress[1][0], nAddress[1][1]);
							pMemoryImageBlock->SetVersion(m_szImage[0][1]);
							if (pMemoryImage->Add(pMemoryImageBlock) >= 0)
							{
								nAddress[0][0] = nAddress[1][0];
								nAddress[0][1] = nAddress[1][1];
								nCount++;
								break;
							}
							delete pMemoryImageBlock;
						}
						pMemoryImageBlock = (CDatabaseOBProcessorMemoryImageBlock *)NULL;
						break;
					}
					if ((pCell = (pMemoryImageBlock) ? pTable->FindCell(nMemoryBlock + 1, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)) : (CTableViewCell *)NULL))
					{
						CollectData(nImageData, GetDatabase()->ParseValue(pCell->GetText(), 16), (INT)(((ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] - (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nAddress[0][1])*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)), pMemoryAreaBlock->GetBitOffset() % 8, pMemoryAreaBlock->GetBitWidth());
						pMemoryImageBlock->SetData(nImageData);
					}
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = ((pMemoryAreaBlock = (nMemoryBlocks < 0) ? pMemoryArea->GetAt(pTable->GetSelRow() - 1) : (CDatabaseOBProcessorMemoryAreaBlock *)NULL) && pMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1])) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == m_szImage[0][1] && pMemoryImageBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock->GetData(nImageData) > 0)
				{
					if ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] >= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] && ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1])*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) + (pMemoryAreaBlock->GetBitOffset() + pMemoryAreaBlock->GetBitWidth() - 1) / 8 < ((ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) + nImageData.GetSize())
					{
						if (CollectData(nImageData, GetDatabase()->ParseValue(pszValue, 16), (INT)(((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] - (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) - (ULONGLONG)nAddress[1][1])*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)), pMemoryAreaBlock->GetBitOffset() % 8, pMemoryAreaBlock->GetBitWidth()))
						{
							pMemoryImageBlock->SetData(nImageData);
							break;
						}
					}
				}
			}
			GetTCService()->CalculateTCOnBoardMemoryImageCRC(&m_cItem[0], pMemoryImage, m_szImage[0][1]);
			pMemoryArea->SetMemoryImage(pMemoryImage);
			delete pMemoryImage;
			return TRUE;
		}
		delete pMemoryImage;
		break;
	}
	if ((pTable = ((nControlID == TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)) || nControlID == TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)) || nControlID == TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))) && m_bUpdate) ? m_pTables->GetAt(m_pTables->Find(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME))) : (CTableViewObject *)NULL))
	{
		if ((pMemoryArea = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
		{
			if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
			{
				if (pMemoryArea->GetMemoryImage(pMemoryImage))
				{
					if (pMemoryImage->Find(m_szImage[0][1]) < 0)
					{
						for (nMemoryBlock = 1, nMemoryBlocks = pTable->GetRows(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if (!InsertTableFieldData(pTable->GetName(), nMemoryBlock)) break;
							continue;
						}
						for (nMemoryBlock = (pMemoryArea->GetMemoryImage(pMemoryImage) && nMemoryBlock == nMemoryBlocks) ? (nMemoryBlock - 1) : -1, nMemoryBlocks = 0; nMemoryBlock > 0; nMemoryBlock--)
						{
							if ((pMemoryImageBlock = pMemoryImage->GetAt(pMemoryImage->Find(m_szImage[0][1]) + nMemoryBlock - 1)))
							{
								for (nColumn = 0, nColumns = pTable->GetColumns(); nColumn < nColumns; nColumn = nColumn + 1)
								{
									if (pTable->GetCellText(0, nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS))
									{
										for (; GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(pTable->GetCellText(nMemoryBlock, nColumn), nAddress[0][0], nAddress[0][1]); )
										{
											pMemoryImageBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
											break;
										}
									}
									if (pTable->GetCellText(0, nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))
									{
										for (nImageData.RemoveAll(), nImageMask.RemoveAll(); m_szImage[0][1] == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
										{
											if (pTable->GetCellValue(nMemoryBlock, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE), sValue) && sValue.Value.nValue > 0)
											{
												nImageMask.InsertAt(0, MEMORYDUMP_DATATYPE_TEMPLATE, (INT_PTR)(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)*max(sValue.Value.nValue, 0)));
												nImageData.SetSize((INT_PTR)(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)*max(sValue.Value.nValue, 0)));
											}
											pMemoryImageBlock->SetData(nImageData);
											pMemoryImageBlock->SetMask(nImageMask);
											break;
										}
										if (m_szImage[0][1] != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
										{
											if (GetDatabase()->TranslateOBProcessorMemoryImageBlockData(pTable->GetCellText(nMemoryBlock, nColumn), nImageData, nImageMask, FALSE) >= 0)
											{
												pMemoryImageBlock->SetData(nImageData);
												pMemoryImageBlock->SetMask(nImageMask);
											}
										}
									}
								}
							}
						}
					}
					else
					{
						if (InsertTableFieldData(pTable->GetName(), pTable->GetSelRow()))
						{
							for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : -1; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
							{
								if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == m_szImage[0][1]) break;
								continue;
							}
							if ((pMemoryImageBlock = (nMemoryBlock < nMemoryBlocks) ? pMemoryImage->GetAt((nIndex = nMemoryBlock + max(pTable->GetSelRow() - 1, 0))) : (CDatabaseOBProcessorMemoryImageBlock *)NULL) && pTable->GetSelRow() > 0)
							{
								if (nControlID == TranslateTableFieldToID(pTable->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)))
								{
									for (; GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(pszValue, nAddress[0][0], nAddress[0][1]); )
									{
										pMemoryImageBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
										break;
									}
								}
								if ((nControlID == TranslateTableFieldToID(pTable->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)) && m_szImage[0][1] == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) || nControlID == TranslateTableFieldToID(pTable->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)))
								{
									for (nImageData.RemoveAll(), nImageMask.RemoveAll(); m_szImage[0][1] == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
									{
										if (nControlID == TranslateTableFieldToID(pTable->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)) && _ttoi(pszValue) > 0)
										{
											for (nImageData.SetSize(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)*max(_ttoi(pszValue), 0)), nImageMask.InsertAt(0, MEMORYDUMP_DATATYPE_TEMPLATE, max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)*max(_ttoi(pszValue), 0)); pTable->SetCellText(nIndex + 1, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA), GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData, nImageMask, FALSE)); )
											{
												pMemoryImageBlock->SetData(nImageData);
												pMemoryImageBlock->SetMask(nImageMask);
												break;
											}
										}
										break;
									}
									if (m_szImage[0][1] != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
									{
										if (GetDatabase()->TranslateOBProcessorMemoryImageBlockData(pszValue, nImageData, nImageMask, FALSE) >= 0)
										{
											pMemoryImageBlock->SetData(nImageData);
											pMemoryImageBlock->SetMask(nImageMask);
										}
									}
									RecalcTableRow(pTable, pTable->GetSelRow());
									RecalcTable(pTable, FALSE, TRUE, FALSE);
									ArrangeTables(0);
								}
								nMemoryBlock = nMemoryBlocks;
							}
						}
					}
					if ((pMemoryArea = (nMemoryBlock == nMemoryBlocks) ? m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0])) : (CDatabaseOBProcessorMemoryArea *)NULL))
					{
						GetTCService()->CalculateTCOnBoardMemoryImageCRC(&m_cItem[0], pMemoryImage, (m_szImage[0][1] != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) ? m_szImage[0][1] : EMPTYSTRING);
						pMemoryArea->SetMemoryImage(pMemoryImage);
						RecalcTableRow(pTable, pTable->GetSelRow(), FALSE);
						RepositionTables();
						delete pMemoryImage;
						return TRUE;
					}
				}
				delete pMemoryImage;
			}
		}
		if ((pCell = (nControlID == TranslateTableFieldToID(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE))) ? pTable->FindCell(pTable->GetSelRow(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE)) : (CTableViewCell *)NULL))
		{
			for (nImageData.SetSize(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)*max(_ttoi(pszValue), 0)), nImageMask.RemoveAll(); nImageData.GetSize() > 0; )
			{
				nImageMask.InsertAt(0, MEMORYDUMP_DATATYPE_TEMPLATE, nImageData.GetSize());
				break;
			}
			pTable->SetCellText(pTable->GetSelRow(), STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA), GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nImageData, nImageMask, FALSE));
		}
		RecalcTableRow(pTable, pTable->GetSelRow(), FALSE);
		RepositionTables();
		return TRUE;
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::InsertTableFieldData(LPCTSTR pszTable, LPCTSTR pszValue)
{
	return -1;
}
BOOL CTCOnBoardMemoryImagesTableView::InsertTableFieldData(LPCTSTR pszTable, INT nRow, INT nCol)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryBlockCount;
	CTableViewObject  *pTable;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))) != (CTableViewObject *)NULL)
		{
			if ((pMemoryArea = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
			{
				if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					if (pMemoryArea->GetMemoryImage(pMemoryImage))
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), nMemoryBlockCount = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)))
							{
								if (pMemoryImageBlock->GetVersion() == m_szImage[0][1])
								{
									nMemoryBlockCount++;
									continue;
								}
								if (pMemoryImageBlock->GetVersion() > m_szImage[0][1]) break;
							}
						}
						for (pMemoryImage->SetName(pMemoryArea->GetName()); (pMemoryImageBlock = (nMemoryBlockCount < pTable->GetRows() - 1 && nRow > 0) ? new CDatabaseOBProcessorMemoryImageBlock : (CDatabaseOBProcessorMemoryImageBlock *)NULL); )
						{
							pMemoryImage->InsertAt(nMemoryBlock - nMemoryBlockCount + nRow - 1, pMemoryImageBlock, 1);
							pMemoryImageBlock->SetVersion(m_szImage[0][1]);
							break;
						}
						pMemoryArea->SetMemoryImage(pMemoryImage);
						delete pMemoryImage;
						return TRUE;
					}
					delete pMemoryImage;
				}
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CheckTableFieldData(LPCTSTR pszTable, BOOL bModified, BOOL bExist) CONST
{
	CString  szError;

	return((CheckTableFieldData(pszTable, szError, bModified)) ? szError.IsEmpty() : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::CheckTableFieldData(LPCTSTR pszTable, CString &szError, BOOL bModified) CONST
{
	INT  nRow;
	INT  nRows;
	BOOL  bCheck[2][2];
	UINT  nBlockSize;
	UINT  nRange[2][2];
	UINT  nAddress[4][2];
	CByteArray  nImageData;
	CByteArray  nImageMask;
	CTableViewCell  *pCell[3];
	CTableViewObject  *pTable;
	TABLEVIEWCELLVALUE  sValue[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue[2];
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry[2];

	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)))
	{
		for (nRow = 1, nRows = ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable)))) ? ((!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? pTable->GetRows() : 0) : -1, szError.Empty(); nRow < nRows; nRow++)
		{
			if ((pCell[0] = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))) != (CTableViewCell *)NULL)
			{
				if ((pCell[1] = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH))) != (CTableViewCell *)NULL)
				{
					if (!pCell[0]->GetValue(sValue[0]) || pCell[1]->GetText().IsEmpty() || (ULONGLONG)sValue[0].Value.uValue >= ((ULONGLONG)1 << _ttoi(pCell[1]->GetText())))
					{
						for (pCell[0]->SetBackgroundColor(((bCheck[0][0] = m_szImage[0][0].IsEmpty() || m_szImage[0][1].IsEmpty())) ? m_nTableColors[1] : VGA_COLOR_LTYELLOW); !bCheck[0][0] && szError.IsEmpty(); )
						{
							szError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYAREA_ILLEGALVALUE), pCell[0]->y);
							break;
						}
						continue;
					}
					pCell[0]->SetBackgroundColor(m_nTableColors[1]);
				}
			}
		}
		if (bModified  &&  szError.IsEmpty())
		{
			if ((pMemoryArea[0] = new CDatabaseOBProcessorMemoryArea))
			{
				if ((pMemoryArea[1] = new CDatabaseOBProcessorMemoryArea))
				{
					if (GetTableContents(pMemoryArea[0], FALSE) && (!GetTableContents(pMemoryArea[1], TRUE) || pMemoryArea[0]->GetAttributes() != pMemoryArea[1]->GetAttributes()))
					{
						delete pMemoryArea[0];
						delete pMemoryArea[1];
						return TRUE;
					}
					if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
					{
						if ((pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
						{
							if (GetTableContents(pMemoryImage[0], FALSE) && (!GetTableContents(pMemoryImage[1], TRUE) || !pMemoryImage[0]->Compare(pMemoryImage[1])))
							{
								delete pMemoryImage[0];
								delete pMemoryImage[1];
								delete pMemoryArea[0];
								delete pMemoryArea[1];
								return TRUE;
							}
							if ((pMemoryAreaCatalogue[0] = new CDatabaseOBProcessorMemoryAreaCatalogue))
							{
								if ((pMemoryAreaCatalogue[1] = new CDatabaseOBProcessorMemoryAreaCatalogue))
								{
									if (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue[0]) && pMemoryArea[1]->GetCatalogue(pMemoryAreaCatalogue[1]))
									{
										if ((pMemoryAreaCatalogueEntry[0] = pMemoryAreaCatalogue[0]->GetAt(pMemoryAreaCatalogue[0]->Find(m_szImage[0][1]))))
										{
											if ((pMemoryAreaCatalogueEntry[1] = pMemoryAreaCatalogue[1]->GetAt(pMemoryAreaCatalogue[1]->Find(m_szImage[0][1]))))
											{
												if (pMemoryAreaCatalogueEntry[0]->Compare(pMemoryAreaCatalogueEntry[1]))
												{
													delete pMemoryAreaCatalogue[0];
													delete pMemoryAreaCatalogue[1];
													delete pMemoryImage[0];
													delete pMemoryImage[1];
													delete pMemoryArea[0];
													delete pMemoryArea[1];
													return FALSE;
												}
											}
											delete pMemoryAreaCatalogue[0];
											delete pMemoryAreaCatalogue[1];
											delete pMemoryImage[0];
											delete pMemoryImage[1];
											delete pMemoryArea[0];
											delete pMemoryArea[1];
											return TRUE;
										}
									}
									delete pMemoryAreaCatalogue[1];
								}
								delete pMemoryAreaCatalogue[0];
							}
							delete pMemoryImage[1];
						}
						delete pMemoryImage[0];
					}
					delete pMemoryArea[1];
				}
				delete pMemoryArea[0];
			}
			return FALSE;
		}
		return((szError.IsEmpty()) ? TRUE : FALSE);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) || !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		for (nRow = 1, nRows = ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable)))) ? ((!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty()) ? pTable->GetRows() : 0) : -1, m_cItem[0].GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]), GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); nRow < nRows; nRow++)
		{
			if ((pCell[0] = pTable->FindCell(nRow, (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME))) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))) != (CTableViewCell *)NULL)
			{
				if ((pCell[1] = pTable->FindCell(nRow, (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME))) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_SIZE))) != (CTableViewCell *)NULL)
				{
					if ((pCell[2] = pTable->FindCell(nRow, (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME))) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS))) != (CTableViewCell *)NULL)
					{
						for (pCell[0]->SetBackgroundColor(m_nTableColors[1]); pCell[1]->GetValue(sValue[0]) && (GetDatabase()->TranslateOBProcessorMemoryImageBlockData(pCell[0]->GetText(), nImageData, nImageMask, FALSE) != sValue[0].Value.nValue*max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1) || (m_szImage[0][1] != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && (memchr(nImageMask.GetData(), MEMORYDUMP_DATATYPE_TEMPLATE, nImageMask.GetSize()) || memchr(nImageMask.GetData(), MEMORYDUMP_DATATYPE_ILLEGAL, nImageMask.GetSize()))) || (m_szImage[0][1] == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && (memchr(nImageMask.GetData(), MEMORYDUMP_DATATYPE_NORMAL, nImageMask.GetSize()) || memchr(nImageMask.GetData(), MEMORYDUMP_DATATYPE_ILLEGAL, nImageMask.GetSize())))); )
						{
							if (szError.IsEmpty()) szError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYIMAGE_ILLEGALDATA), pCell[0]->y);
							pCell[0]->SetBackgroundColor(VGA_COLOR_LTYELLOW);
							break;
						}
						for (pCell[1]->SetBackgroundColor(GetSysColor(COLOR_WINDOW)); !(bCheck[0][0] = (((!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) && pCell[1]->GetValue(sValue[1])) || (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) && (sValue[1].Value.nValue = _ttoi(pCell[1]->GetText())) >= 0)) && sValue[1].Value.nValue >= 0 && sValue[1].Value.nValue <= (INT)(GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)))); )
						{
							if (szError.IsEmpty()) szError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYIMAGE_ILLEGALDATASIZE), pCell[1]->y);
							pCell[1]->SetBackgroundColor(VGA_COLOR_LTYELLOW);
							break;
						}
						for (pCell[2]->SetBackgroundColor(GetSysColor(COLOR_WINDOW)); !(bCheck[0][1] = bCheck[0][0] && GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(pCell[2]->GetText(), nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] && (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + 1 >= (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + sValue[1].Value.nValue); )
						{
							if (szError.IsEmpty()) szError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYIMAGE_ILLEGALADDRESS), pCell[2]->y);
							pCell[2]->SetBackgroundColor(VGA_COLOR_LTYELLOW);
							break;
						}
						if (bCheck[0][0] && bCheck[0][1])
						{
							if (nRow > 1 && bCheck[1][0] && bCheck[1][1])
							{
								if ((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] != (ULONGLONG)nAddress[3][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[3][1] + nBlockSize)
								{
									if (szError.IsEmpty()) szError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYIMAGE_NONCONTIGUOUSADDRESS), pCell[2]->y);
									pCell[2]->SetBackgroundColor(VGA_COLOR_LTYELLOW);
								}
							}
							nBlockSize = (UINT)sValue[1].Value.nValue;
							nAddress[3][0] = nAddress[2][0];
							nAddress[3][1] = nAddress[2][1];
						}
						bCheck[1][0] = bCheck[0][0];
						bCheck[1][1] = bCheck[0][1];
					}
				}
			}
		}
		if (bModified  &&  szError.IsEmpty())
		{
			if ((pMemoryArea[0] = new CDatabaseOBProcessorMemoryArea))
			{
				if ((pMemoryArea[1] = new CDatabaseOBProcessorMemoryArea))
				{
					if (GetTableContents(pMemoryArea[0], FALSE) && (!GetTableContents(pMemoryArea[1], TRUE) || pMemoryArea[0]->GetAttributes() != pMemoryArea[1]->GetAttributes()))
					{
						delete pMemoryArea[0];
						delete pMemoryArea[1];
						return TRUE;
					}
					if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
					{
						if ((pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
						{
							if (GetTableContents(pMemoryImage[0], FALSE) && (!GetTableContents(pMemoryImage[1], TRUE) || !pMemoryImage[0]->Compare(pMemoryImage[1])))
							{
								delete pMemoryImage[0];
								delete pMemoryImage[1];
								delete pMemoryArea[0];
								delete pMemoryArea[1];
								return TRUE;
							}
							if ((pMemoryAreaCatalogue[0] = new CDatabaseOBProcessorMemoryAreaCatalogue))
							{
								if ((pMemoryAreaCatalogue[1] = new CDatabaseOBProcessorMemoryAreaCatalogue))
								{
									if (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue[0]) && pMemoryArea[1]->GetCatalogue(pMemoryAreaCatalogue[1]))
									{
										if ((pMemoryAreaCatalogueEntry[0] = pMemoryAreaCatalogue[0]->GetAt(pMemoryAreaCatalogue[0]->Find(m_szImage[0][1]))))
										{
											if ((pMemoryAreaCatalogueEntry[1] = pMemoryAreaCatalogue[1]->GetAt(pMemoryAreaCatalogue[1]->Find(m_szImage[0][1]))))
											{
												if (pMemoryAreaCatalogueEntry[0]->Compare(pMemoryAreaCatalogueEntry[1]))
												{
													delete pMemoryAreaCatalogue[0];
													delete pMemoryAreaCatalogue[1];
													delete pMemoryImage[0];
													delete pMemoryImage[1];
													delete pMemoryArea[0];
													delete pMemoryArea[1];
													return FALSE;
												}
											}
											delete pMemoryAreaCatalogue[0];
											delete pMemoryAreaCatalogue[1];
											delete pMemoryImage[0];
											delete pMemoryImage[1];
											delete pMemoryArea[0];
											delete pMemoryArea[1];
											return TRUE;
										}
									}
									delete pMemoryAreaCatalogue[1];
								}
								delete pMemoryAreaCatalogue[0];
							}
							delete pMemoryImage[1];
						}
						delete pMemoryImage[0];
					}
					delete pMemoryArea[1];
				}
				delete pMemoryArea[0];
			}
			return FALSE;
		}
		return((szError.IsEmpty()) ? TRUE : FALSE);
	}
	return((!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME))) ? !bModified : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::CheckTableFieldData(LPCTSTR pszTable, CStringArray &szIssues) CONST
{
	szIssues.RemoveAll();
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::SelectTableFieldData(LPCTSTR pszTable, CONST POINT &pt)
{
	CTableViewObject  *pTable;

	if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
	{
		pTable->SetSelRow(pt.y);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::SelectTableFieldData(LPCTSTR pszTable, LPCTSTR pszValue)
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::SaveTableFieldData(LPCTSTR pszTable, BOOL bPrompt)
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::ProtectTableFieldData(LPCTSTR pszTable, BOOL bUndo)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nBitWidth;
	UINT  nRange[2][2];
	CString  szAddress;
	LOGFONT  sLogFont;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CTableViewEditCtrl  *pEditCtrl;
	CTableViewRawNumberEditCtrl  *pRawNumberEditCtrl;

	for (m_cUndoLists.Lock(); !lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)); )
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
		{
			for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))))
				{
					for (pCell->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell->SetFont(&sLogFont); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(0, (UINT)(((ULONGLONG)1 << nBitWidth) - 1), ((nBitWidth = _ttoi(pTable->GetCellText(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_BITWIDTH)))) - 1) / 4 + 1, TRUE);
						break;
					}
					pCell->SetBackgroundColor((pCell->GetBackgroundColor() != GetSysColor(COLOR_WINDOW)) ? pCell->GetBackgroundColor() : m_nTableColors[1]);
					EnableTableCellValue(pTable, pCell, EMPTYSTRING, !m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty());
				}
			}
			m_cUndoLists.Unlock();
			return TRUE;
		}
		break;
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))) != (CTableViewObject *)NULL)
		{
			for (nRow = 1, nRows = pTable->GetRows(), GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szAddress = GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(nRange[0][1], nRange[1][1]); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS))))
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell->GetControl())) pEditCtrl->LimitText(szAddress.GetLength());
					EnableTableCellValue(pTable, pCell, EMPTYSTRING, !m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty());
				}
				if ((pCell = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_SIZE))))
				{
					if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell->GetControl()) != (CTableViewRawNumberEditCtrl *)NULL)
					{
						pRawNumberEditCtrl->SetRange(0, GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1));
						pRawNumberEditCtrl->SetRadix(10);
					}
					EnableTableCellValue(pTable, pCell, EMPTYSTRING, !m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty());
				}
				if ((pCell = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))))
				{
					for (pCell->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell->SetFont(&sLogFont); (pEditCtrl = (CTableViewEditCtrl *)pCell->GetControl()); )
					{
						pEditCtrl->LimitText(5 * GetDatabase()->GetOBProcessorMemoryImageBlockDataLength() / 2);
						break;
					}
					pCell->SetBackgroundColor((pCell->GetBackgroundColor() != GetSysColor(COLOR_WINDOW)) ? pCell->GetBackgroundColor() : m_nTableColors[1]);
					EnableTableCellValue(pTable, pCell, pCell->GetText(), (!m_szImage[0][0].IsEmpty() && !m_szImage[0][1].IsEmpty() && m_szImage[0][1] != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) ? TRUE : FALSE);
				}
			}
			m_cUndoLists.Unlock();
			return TRUE;
		}
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)))
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
		{
			for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				if (pTable->GetCellText(0, nCol) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE) || pTable->GetCellText(0, nCol) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE))
				{
					for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
					{
						if ((pCell = pTable->FindCell(nRow, nCol)))
						{
							for (pCell->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell->SetFont(&sLogFont); pCell->GetBackgroundColor() != m_nTableColors[1]; )
							{
								pCell->SetBackgroundColor((pCell->GetBackgroundColor() != GetSysColor(COLOR_WINDOW)) ? pCell->GetBackgroundColor() : m_nTableColors[1]);
								break;
							}
						}
					}
				}
			}
			m_cUndoLists.Unlock();
			return TRUE;
		}
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
		{
			for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))))
				{
					for (pCell->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell->SetFont(&sLogFont); TRUE; )
					{
						pCell->SetBackgroundColor((pCell->GetBackgroundColor() != GetSysColor(COLOR_WINDOW)) ? pCell->GetBackgroundColor() : m_nTableColors[1]);
						break;
					}
				}
			}
			m_cUndoLists.Unlock();
			return TRUE;
		}
	}
	m_cUndoLists.Unlock();
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DeleteTableFieldData(LPCTSTR pszTable)
{
	return FALSE;
}
INT CTCOnBoardMemoryImagesTableView::DeleteTableFieldData(LPCTSTR pszTable, LPCTSTR pszValue)
{
	return -1;
}
BOOL CTCOnBoardMemoryImagesTableView::DeleteTableFieldData(LPCTSTR pszTable, INT nRow, INT nCol)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryBlockCount;
	CTableViewObject  *pTable;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))) != (CTableViewObject *)NULL)
		{
			if ((pMemoryArea = m_cItem[0].GetAt(m_cItem[0].Find(m_szImage[0][0]))))
			{
				if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					if (pMemoryArea->GetMemoryImage(pMemoryImage))
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), nMemoryBlockCount = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)))
							{
								if (pMemoryImageBlock->GetVersion() == m_szImage[0][1])
								{
									nMemoryBlockCount++;
									continue;
								}
								if (pMemoryImageBlock->GetVersion() > m_szImage[0][1]) break;
							}
						}
						if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock - nMemoryBlockCount + nRow)) && pTable->GetRows() == nMemoryBlockCount + 1)
						{
							pMemoryImage->RemoveAt(nRow);
							pMemoryArea->SetMemoryImage(pMemoryImage);
							delete pMemoryImageBlock;
							delete pMemoryImage;
							return TRUE;
						}
						delete pMemoryImage;
						return((pTable->GetRows() > pMemoryImage->GetSize() + 1) ? TRUE : FALSE);
					}
					delete pMemoryImage;
				}
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::GetTableFieldFlag(LPCTSTR pszTable, INT nRow, INT nCol, CString &szFlag) CONST
{
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::EnumTableDropTargets(ULONGLONG nComponent, CStringArray &szTables, CStringArray &szFields) CONST
{
	return 0;
}

BOOL CTCOnBoardMemoryImagesTableView::FindTableDropTargetCell(LPCTSTR pszTable, LPCTSTR pszField, ULONGLONG nComponent, LPCTSTR pszItem, CString &szItem, INT &nRow, INT &nCol) CONST
{
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::EnumPrintTables(LPCTSTR pszTable, CStringArray &szTables) CONST
{
	return EnumPrintTables(pszTable, 0, szTables);
}
INT CTCOnBoardMemoryImagesTableView::EnumPrintTables(LPCTSTR pszTable, UINT nFlags, CStringArray &szTables) CONST
{
	szTables.RemoveAll();
	szTables.Add(GetName());
	return((INT)szTables.GetSize());
}

BOOL CTCOnBoardMemoryImagesTableView::GetPrintTableContents(LPCTSTR pszTable, LPCTSTR pszItem, CStringArray &szContents) CONST
{
	return GetPrintTableContents(pszTable, -1, -1, szContents);
}
BOOL CTCOnBoardMemoryImagesTableView::GetPrintTableContents(LPCTSTR pszTable, UINT nFirstRow, UINT nLastRow, CStringArray &szContents) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	CString  szItem;
	CString  szTable;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	if ((pTable = m_pTables->GetAt(m_pTables->Find(pszTable))))
	{
		for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), nRow = (nFirstRow != (UINT)-1) ? ((nLastRow != (UINT)-1) ? nFirstRow : nRow) : ((nLastRow != (UINT)-1) ? max(nRows - (INT)nLastRow, 0) : nRow), nRows = (nLastRow != (UINT)-1) ? ((nFirstRow != (UINT)-1) ? (nLastRow + 1) : nRows) : ((nFirstRow != (UINT)-1) ? (nFirstRow + 1) : nRows), szContents.RemoveAll(); nRow < nRows; nRow++)
		{
			for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
				{
					szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
					continue;
				}
				szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
			}
			szContents.Add(szItem);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::PrintTable(LPCTSTR pszTable, LPCTSTR pszItem, CMetaFileDC &cMetaDC)
{
	return PrintTable(pszTable, -1, -1, cMetaDC);
}
BOOL CTCOnBoardMemoryImagesTableView::PrintTable(LPCTSTR pszTable, UINT nFirstRow, UINT nLastRow, CMetaFileDC &cMetaDC)
{
	INT  nTable;
	INT  nTables;
	CPoint  ptTable;
	LOGFONT  lfTable[2];
	CStringArray  szContents;
	CTableViewObject  *pTable[2];
	CTableViewObjects  pTables;

	for (nTable = 0, nTables = (pTables.Copy(m_pTables)) ? (INT)pTables.GetSize() : -1; nTable < nTables; nTable++)
	{
		if ((pTable[0] = ((pTable[1] = m_pTables->GetAt(nTable)) ? pTables.GetAt(nTable) : (CTableViewObject *)NULL)) && GetTableFonts(pTable[1], &lfTable[0], &lfTable[1]))
		{
			SetTableFonts(pTable[0], &lfTable[0], &lfTable[1]);
			continue;
		}
	}
	if ((pTable[0] = (nTables >= 0) ? pTables.GetAt(pTables.Find(pszTable)) : (CTableViewObject *)NULL))
	{
		for (pTable[0]->MakeVisible(), ptTable.x = pTable[0]->GetCellsBounds().left, ptTable.y = pTable[0]->GetCellsBounds().top, pTable[0]->OffsetCells(CSize(-ptTable)), pTable[0]->OffsetRect(-ptTable); GetPrintTableContents(pszTable, nFirstRow, nLastRow, szContents); )
		{
			UpdateTableContents(&pTables, pTable[0], GetName(), szContents);
			break;
		}
		RepositionTables(&pTables);
		DrawTables(&cMetaDC, &pTables, TRUE);
		return TRUE;
	}
	return FALSE;
}

ULONGLONG CTCOnBoardMemoryImagesTableView::TranslateTableNameToComponent(LPCTSTR pszTable) CONST
{
	return DATABASE_COMPONENT_NONE;
}

CString CTCOnBoardMemoryImagesTableView::TranslateComponentToTableName(ULONGLONG nComponent) CONST
{
	return EMPTYSTRING;
}

INT CTCOnBoardMemoryImagesTableView::TranslateTableFieldToIndex(LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	INT  nField;
	INT  nFields;

	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSAREASPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSAREASPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? (nField - MINTCONBOARDMEMORYIMAGESDETAILSAREASPAGETABLEFIELDID) : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSIMAGESPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSIMAGESPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? (nField - MINTCONBOARDMEMORYIMAGESDETAILSIMAGESPAGETABLEFIELDID) : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSANALYSISPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSANALYSISPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? (nField - MINTCONBOARDMEMORYIMAGESDETAILSANALYSISPAGETABLEFIELDID) : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSDOWNLOADSPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSDOWNLOADSPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? (nField - MINTCONBOARDMEMORYIMAGESDETAILSDOWNLOADSPAGETABLEFIELDID) : -1);
	}
	return -1;
}

UINT CTCOnBoardMemoryImagesTableView::TranslateTableFieldToID(LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	UINT  nField;
	UINT  nFields;

	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSAREASPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSAREASPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? nField : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSIMAGESPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSIMAGESPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? nField : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSANALYSISPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSANALYSISPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? nField : -1);
	}
	if (!lstrcmp(pszTable, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)))
	{
		for (nField = MINTCONBOARDMEMORYIMAGESDETAILSDOWNLOADSPAGETABLEFIELDID, nFields = MAXTCONBOARDMEMORYIMAGESDETAILSDOWNLOADSPAGETABLEFIELDID; nField <= nFields; nField++)
		{
			if (!lstrcmp(pszField, STRING(nField))) break;
			continue;
		}
		return((nField <= nFields) ? nField : -1);
	}
	return -1;
}

INT CTCOnBoardMemoryImagesTableView::EnumTables(CTableViewObjects *pTables) CONST
{
	return((pTables->Copy(m_pTables)) ? (INT)pTables->GetSize() : 0);
}

VOID CTCOnBoardMemoryImagesTableView::RepositionTables(CONST CTableViewObjects *pTables)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	INT  nSize[4];
	INT  nStyle[4];
	CRect  rTable[2];
	CString  szTable[2];
	COLORREF  nColor[4];
	CStringArray  szTables;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[2];

	for (nTable = 0, nTables = (INT)m_szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(pTables->Find(m_szTables.GetAt(nTable)))) && pTable[0]->GetType() == TAS_TABLE_NORMAL)
		{
			if (GetTablePosition(pTable[0]->GetName(), szTable[0], rTable[0]) && !szTable[0].IsEmpty() && rTable[0].IsRectEmpty())
			{
				pTable[0]->OffsetCells(-pTable[0]->left, -pTable[0]->top);
				pTable[0]->OffsetRect(-pTable[0]->left, -pTable[0]->top);
			}
		}
	}
	for (nTable = 0; nTable < nTables; nTable++)
	{
		if (GetTablePosition((szTable[0] = m_szTables.GetAt(nTable)), szTable[1], rTable[0]) && !szTable[1].IsEmpty())
		{
			if ((pTable[0] = pTables->GetAt(pTables->Find(szTable[0]))))
			{
				if ((pTable[1] = pTables->GetAt(pTables->Find(szTable[1]))))
				{
					if (rTable[0].left > 0 && !rTable[0].top  &&  !rTable[0].bottom)
					{
						if ((pCell[0] = pTable[1]->FindCell(rTable[0].left, 0)))
						{
							rTable[1].SetRect(pTable[1]->left - pTable[0]->Width() - DATABASETABLEVIEW_TABLE_DISTANCE, pCell[0]->GetPosition().top, pTable[1]->left - DATABASETABLEVIEW_TABLE_DISTANCE, pCell[0]->GetPosition().top + pTable[0]->Height());
							pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
							pTable[0]->SetRect(rTable[1].left, rTable[1].top, rTable[1].right, rTable[1].bottom);
						}
					}
					else if (rTable[0].right > 0 && !rTable[0].top  &&  !rTable[0].bottom)
					{
						if ((pCell[0] = pTable[1]->FindCell(rTable[0].right, pTable[1]->GetColumns() - 1)))
						{
							rTable[1].SetRect(pTable[1]->right + DATABASETABLEVIEW_TABLE_DISTANCE, pCell[0]->GetPosition().top, pTable[1]->right + DATABASETABLEVIEW_TABLE_DISTANCE + pTable[0]->Width(), pCell[0]->GetPosition().top + pTable[0]->Height());
							pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
							pTable[0]->SetRect(rTable[1].left, rTable[1].top, rTable[1].right, rTable[1].bottom);
						}
					}
					else if (rTable[0].top > 0 && !rTable[0].left  &&  !rTable[0].right)
					{
						if ((pCell[0] = pTable[1]->FindCell(0, rTable[0].top - 1)) != (CTableViewCell *)NULL)
						{
							rTable[1].SetRect(pCell[0]->GetPosition().left, pTable[1]->top - DATABASETABLEVIEW_TABLE_DISTANCE - pTable[0]->Height(), pCell[0]->GetPosition().left + pTable[0]->Width(), pTable[1]->top - DATABASETABLEVIEW_TABLE_DISTANCE);
							pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
							pTable[0]->SetRect(rTable[1].left, rTable[1].top, rTable[1].right, rTable[1].bottom);
						}
					}
					else if (rTable[0].bottom > 0 && !rTable[0].left  &&  !rTable[0].right)
					{
						if ((pCell[0] = pTable[1]->FindCell(pTable[1]->GetRows() - 1, rTable[0].bottom - 1)))
						{
							rTable[1].SetRect(pCell[0]->GetPosition().left, pTable[1]->bottom + DATABASETABLEVIEW_TABLE_DISTANCE, pCell[0]->GetPosition().left + pTable[0]->Width(), pTable[1]->bottom + DATABASETABLEVIEW_TABLE_DISTANCE + pTable[0]->Height());
							pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
							pTable[0]->SetRect(rTable[1].left, rTable[1].top, rTable[1].right, rTable[1].bottom);
						}
					}
					else if (rTable[0].left > 0 && rTable[0].top > 0 && !rTable[0].right  &&  !rTable[0].bottom)
					{
						if ((pCell[0] = pTable[1]->FindCell(rTable[0].left, rTable[0].top - 1)))
						{
							if ((pCell[0]->GetFormat() & TAS_TYPE_SUBTABLE) == TAS_TYPE_SUBTABLE)
							{
								pCell[0]->GetBorder(TAS_BORDER_LEFT, nSize[0], nStyle[0], nColor[0]);
								pCell[0]->GetBorder(TAS_BORDER_TOP, nSize[1], nStyle[1], nColor[1]);
								pCell[0]->GetBorder(TAS_BORDER_RIGHT, nSize[2], nStyle[2], nColor[2]);
								pCell[0]->GetBorder(TAS_BORDER_BOTTOM, nSize[3], nStyle[3], nColor[3]);
								pTable[1]->SetColumnWidth(pCell[0]->x, (pTable[0]->IsVisible()) ? max(CalcDefaultTableWidth(pTable[0]), pCell[0]->GetPosition().Width()) : pCell[0]->GetPosition().Width());
								pTable[1]->SetRowHeight(pCell[0]->y, (pTable[0]->IsVisible()) ? max(CalcDefaultTableHeight(pTable[0]), pCell[0]->GetPosition().Height()) : CalcDefaultCellHeight(pCell[0], pCell[0]->GetPosition().Width()));
								for (pTable[1]->SetRect(pTable[1]->GetCellsBounds().TopLeft(), pTable[1]->GetCellsBounds().BottomRight()), rTable[1].SetRect(pCell[0]->GetPosition().left + (nSize[0] - 1) / 2 + 1, pCell[0]->GetPosition().top + (nSize[1] - 1) / 2 + 1, pCell[0]->GetPosition().right - nSize[2] / 2, pCell[0]->GetPosition().bottom - nSize[3] / 2); rTable[1].TopLeft() != pTable[0]->TopLeft(); )
								{
									pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
									pTable[0]->OffsetRect(rTable[1].left - pTable[0]->left, rTable[1].top - pTable[0]->top);
									break;
								}
								for (nRow = 0, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
								{
									if ((pCell[1] = pTable[0]->FindCell(nRow, pTable[0]->GetColumns() - 1)) && pCell[1]->GetPosition().right != rTable[1].right)
									{
										pCell[1]->SetPosition(CRect(pCell[1]->GetPosition().left, pCell[1]->GetPosition().top, rTable[1].right, pCell[1]->GetPosition().bottom));
										pCell[1]->SetInnerPosition(CRect(pCell[1]->GetInnerPosition().left, pCell[1]->GetInnerPosition().top, pCell[0]->GetInnerPosition().right, pCell[1]->GetInnerPosition().bottom));
									}
								}
								for (nCol = 0, nCols = pTable[0]->GetColumns(); nCol < nCols; nCol++)
								{
									if ((pCell[1] = pTable[0]->FindCell(pTable[0]->GetRows() - 1, nCol)) && pCell[1]->GetPosition().bottom != rTable[1].bottom)
									{
										pCell[1]->SetPosition(CRect(pCell[1]->GetPosition().left, pCell[1]->GetPosition().top, pCell[1]->GetPosition().right, rTable[1].bottom));
										pCell[1]->SetInnerPosition(CRect(pCell[1]->GetInnerPosition().left, pCell[1]->GetInnerPosition().top, pCell[1]->GetInnerPosition().right, pCell[0]->GetInnerPosition().bottom));
									}
								}
								pTable[0]->SetRect(pTable[0]->GetCellsBounds().TopLeft(), pTable[0]->GetCellsBounds().BottomRight());
							}
						}
					}
					else if (rTable[0].right > 0 && rTable[0].bottom > 0 && !rTable[0].left  &&  !rTable[0].top)
					{
						if ((pCell[0] = pTable[1]->FindCell(rTable[0].right, rTable[0].bottom - 1)))
						{
							if ((pCell[0]->GetFormat() & TAS_TYPE_SUBTABLE) == TAS_TYPE_SUBTABLE)
							{
								pCell[0]->GetBorder(TAS_BORDER_LEFT, nSize[0], nStyle[0], nColor[0]);
								pCell[0]->GetBorder(TAS_BORDER_TOP, nSize[1], nStyle[1], nColor[1]);
								pCell[0]->GetBorder(TAS_BORDER_RIGHT, nSize[2], nStyle[2], nColor[2]);
								pCell[0]->GetBorder(TAS_BORDER_BOTTOM, nSize[3], nStyle[3], nColor[3]);
								pTable[1]->SetColumnWidth(pCell[0]->x, (pTable[0]->IsVisible()) ? max(CalcDefaultTableWidth(pTable[0]), pCell[0]->GetPosition().Width()) : pCell[0]->GetPosition().Width());
								pTable[1]->SetRowHeight(pCell[0]->y, (pTable[0]->IsVisible()) ? max(CalcDefaultTableHeight(pTable[0]), pCell[0]->GetPosition().Height()) : CalcDefaultCellHeight(pCell[0], pCell[0]->GetPosition().Width()));
								for (pTable[1]->SetRect(pTable[1]->GetCellsBounds().TopLeft(), pTable[1]->GetCellsBounds().BottomRight()), rTable[1].SetRect(pCell[0]->GetPosition().left + (nSize[0] - 1) / 2 + 1, pCell[0]->GetPosition().top + (nSize[1] - 1) / 2 + 1, pCell[0]->GetPosition().right - nSize[2] / 2, pCell[0]->GetPosition().bottom - nSize[3] / 2); rTable[1].TopLeft() != pTable[0]->TopLeft(); )
								{
									pTable[0]->OffsetCells(rTable[1].TopLeft() - pTable[0]->TopLeft());
									pTable[0]->OffsetRect(rTable[1].left - pTable[0]->left, rTable[1].top - pTable[0]->top);
									break;
								}
								for (nRow = 0, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
								{
									if ((pCell[1] = pTable[0]->FindCell(nRow, pTable[0]->GetColumns() - 1)) && pCell[1]->GetPosition().right != rTable[1].right)
									{
										pCell[1]->SetPosition(CRect(pCell[1]->GetPosition().left, pCell[1]->GetPosition().top, rTable[1].right, pCell[1]->GetPosition().bottom));
										pCell[1]->SetInnerPosition(CRect(pCell[1]->GetInnerPosition().left, pCell[1]->GetInnerPosition().top, pCell[0]->GetInnerPosition().right, pCell[1]->GetInnerPosition().bottom));
									}
								}
								for (nCol = 0, nCols = pTable[0]->GetColumns(); nCol < nCols; nCol++)
								{
									if ((pCell[1] = pTable[0]->FindCell(pTable[0]->GetRows() - 1, nCol)) && pCell[1]->GetPosition().bottom != rTable[1].bottom)
									{
										pCell[1]->SetPosition(CRect(pCell[1]->GetPosition().left, pCell[1]->GetPosition().top, pCell[1]->GetPosition().right, rTable[1].bottom));
										pCell[1]->SetInnerPosition(CRect(pCell[1]->GetInnerPosition().left, pCell[1]->GetInnerPosition().top, pCell[1]->GetInnerPosition().right, pCell[0]->GetInnerPosition().bottom));
									}
								}
								pTable[0]->SetRect(pTable[0]->GetCellsBounds().TopLeft(), pTable[0]->GetCellsBounds().BottomRight());
							}
						}
					}
				}
			}
		}
	}
	for (nTable = 0, nTables = (INT)m_szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(pTables->Find(m_szTables.GetAt(nTable)))) && pTable[0]->GetType() == TAS_TABLE_NORMAL)
		{
			RepositionTables(pTables, pTable[0]->GetName(), szTables);
			break;
		}
	}
	for (nTable = 0, rTable[0].SetRectEmpty(), rTable[1].SetRectEmpty(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(nTable)))
		{
			rTable[1].UnionRect(pTable[0], rTable[0]);
			rTable[0] = rTable[1];
		}
	}
	for (nTable = 0, nTables = (rTable[0].left < 0 || rTable[0].top < 0) ? nTables : 0, rTable[0].OffsetRect(-DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN, -DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(nTable)) != (CTableViewObject *)NULL)
		{
			pTable[0]->OffsetCells(-rTable[0].left, -rTable[0].top);
			pTable[0]->OffsetRect(-rTable[0].TopLeft());
		}
	}
	if ((pCell[0] = GetActiveCell())) pCell[0]->ResizeControl();
	RecalcScrollSizes();
	DrawTables();
}
VOID CTCOnBoardMemoryImagesTableView::RepositionTables()
{
	RepositionTables(m_pTables);
}

VOID CTCOnBoardMemoryImagesTableView::ArrangeTables()
{
	GetDatabase()->ArrangeTables(this);
}
VOID CTCOnBoardMemoryImagesTableView::ArrangeTables(UINT nControlID)
{
	GetDatabase()->ArrangeTables(this, nControlID);
}

BOOL CTCOnBoardMemoryImagesTableView::ActivateTable()
{
	INT  nTable;
	INT  nTables;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(m_pTables->Find(m_szTables.GetAt(nTable)))) && pTable->GetType() == TAS_TABLE_NORMAL  &&  pTable->IsVisible())
		{
			if (ActivateTable(pTable)) break;
			continue;
		}
	}
	return((nTable < nTables) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesTableView::ActivateTable(CTableViewObject *pTable, BOOL bPrevious)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pSubTable;

	if (pTable->IsVisible())
	{
		for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
		{
			m_pTables->GetAt(nTable)->SetSelCell();
			continue;
		}
		for (nRow = (bPrevious) ? (pTable->GetRows() - 1) : 0, nRows = pTable->GetRows(); nRow >= 0 && nRow < nRows; nRow = (!bPrevious) ? (nRow + 1) : (nRow - 1))
		{
			for (nCol = (bPrevious) ? (pTable->GetColumns() - 1) : 0, nCols = pTable->GetColumns(); nCol >= 0 && nCol < nCols; nCol = (!bPrevious) ? (nCol + 1) : (nCol - 1))
			{
				if ((pCell = pTable->FindCell(nRow, nCol)))
				{
					if (pCell->GetControl() != (CWnd *)NULL)
					{
						for (; pTable->GetType() == TAS_TABLE_LIST; )
						{
							pTable->SetSelRow(pCell->y);
							break;
						}
						SetActiveCell(pTable, pCell);
						break;
					}
					if (pCell->GetFormat() & TAS_TYPE_SUBTABLE)
					{
						if ((pSubTable = m_pTables->GetAt(m_pTables->Find(pCell->GetSubTable()))))
						{
							if (ActivateTable(pSubTable, bPrevious)) break;
							continue;
						}
					}
				}
			}
			if (nCol >= 0 && nCol < nCols) break;
		}
		return((nRow >= 0 && nRow < nRows) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::ActivateNextTable(BOOL bPrevious)
{
	INT  nTable[2];
	INT  nTables[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[2];

	if ((pCell = GetActiveCell(pTable[0])))
	{
		for (nTable[0] = 0, nTables[0] = (INT)m_szTables.GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(m_szTables.GetAt(nTable[0])))) && pTable[0]->GetName() == pTable[1]->GetName())
			{
				for (nTable[1] = (!bPrevious) ? (nTable[0] + 1) : (nTable[0] - 1), nTable[1] = (nTable[1] < 0) ? (nTables[0] - 1) : nTable[1], nTable[1] = (nTable[1] < nTables[0]) ? nTable[1] : 0, nTables[1] = 0; nTables[0] > nTables[1]; nTable[1] = (!bPrevious) ? (nTable[1] + 1) : (nTable[1] - 1), nTable[1] = (nTable[1] < 0) ? (nTables[0] - 1) : nTable[1], nTable[1] = (nTable[1] < nTables[0]) ? nTable[1] : 0, nTables[1]++)
				{
					if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(m_szTables.GetAt(nTable[1])))) && pTable[1]->IsVisible())
					{
						if (ActivateTable(pTable[1], bPrevious)) break;
						continue;
					}
				}
				return((nTables[0] > nTables[1]) ? TRUE : FALSE);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::ActivateNextTableCell(BOOL bPrevious)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CTableViewCell  *pCell[3];
	CTableViewObject  *pTable[3];

	if ((pCell[0] = GetActiveCell(pTable[0])))
	{
		for (nRow = pCell[0]->y, nRows = pTable[0]->GetRows(); nRow >= 0 && nRow < nRows; nRow = (!bPrevious) ? (nRow + 1) : (nRow - 1))
		{
			for (nCol = (nRow == pCell[0]->y) ? ((!bPrevious) ? (pCell[0]->x + 1) : (pCell[0]->x - 1)) : ((bPrevious) ? (pTable[0]->GetColumns() - 1) : 0), nCols = pTable[0]->GetColumns(); nCol >= 0 && nCol < nCols; nCol = (!bPrevious) ? (nCol + 1) : (nCol - 1))
			{
				if ((pCell[1] = pTable[0]->FindCell(nRow, nCol)) && pCell[1]->IsEnabled() && pCell[1]->GetControl())
				{
					for (; pTable[0]->GetType() == TAS_TABLE_LIST; )
					{
						pTable[0]->SetSelRow(pCell[1]->y);
						break;
					}
					SetActiveCell(pTable[0], pCell[1]);
					return TRUE;
				}
				if (pCell[1]->GetFormat() & TAS_TYPE_SUBTABLE)
				{
					if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(pCell[1]->GetSubTable()))))
					{
						if (ActivateTable(pTable[1], bPrevious)) return TRUE;
						continue;
					}
				}
			}
		}
		for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
		{
			if ((pTable[1] = m_pTables->GetAt(nTable)) != (CTableViewObject *)NULL)
			{
				if ((pCell[1] = pTable[1]->FindCell(pCell[0]->GetPosition().CenterPoint())))
				{
					if ((pCell[1]->GetFormat() & TAS_TYPE_SUBTABLE) && !pCell[1]->GetSubTable().Compare(pTable[0]->GetName()))
					{
						for (nRow = pCell[1]->y; nRow >= 0 && nRow < pTable[1]->GetRows(); nRow = (!bPrevious) ? (nRow + 1) : (nRow - 1))
						{
							for (nCol = (nRow == pCell[1]->y) ? ((!bPrevious) ? (pCell[1]->x + 1) : (pCell[1]->x - 1)) : ((bPrevious) ? (pTable[1]->GetColumns() - 1) : 0); nCol >= 0 && nCol < pTable[1]->GetColumns(); nCol = (!bPrevious) ? (nCol + 1) : (nCol - 1))
							{
								if ((pCell[2] = pTable[1]->FindCell(nRow, nCol)) && pCell[2]->IsEnabled() && pCell[2]->GetControl())
								{
									for (pTable[0]->SetSelCell(); pTable[1]->GetType() == TAS_TABLE_LIST; )
									{
										pTable[1]->SetSelRow(pCell[2]->y);
										break;
									}
									SetActiveCell(pTable[1], pCell[2]);
									return TRUE;
								}
								if (pCell[2]->GetFormat() & TAS_TYPE_SUBTABLE)
								{
									if ((pTable[2] = m_pTables->GetAt(m_pTables->Find(pCell[2]->GetSubTable()))))
									{
										if (ActivateTable(pTable[2], bPrevious)) return TRUE;
										continue;
									}
								}
							}
						}
					}
				}
			}
		}
		for (nRow = (bPrevious) ? (nRows - 1) : 0; nRow >= 0 && nRow < nRows; nRow = (!bPrevious) ? (nRow + 1) : (nRow - 1))
		{
			for (nCol = (bPrevious) ? (nCols - 1) : 0; nCol >= 0 && nCol < nCols; nCol = (!bPrevious) ? (nCol + 1) : (nCol - 1))
			{
				if ((pCell[1] = pTable[0]->FindCell(nRow, nCol)) && pCell[1]->IsEnabled() && pCell[1]->GetControl())
				{
					for (; pTable[0]->GetType() == TAS_TABLE_LIST; )
					{
						pTable[0]->SetSelRow(pCell[1]->y);
						break;
					}
					SetActiveCell(pTable[0], pCell[1]);
					return TRUE;
				}
				if (pCell[1]->GetFormat() & TAS_TYPE_SUBTABLE)
				{
					if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(pCell[1]->GetSubTable()))))
					{
						if (ActivateTable(pTable[1], bPrevious)) return TRUE;
						continue;
					}
				}
			}
		}
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesTableView::RecalcTable(CTableViewObject *pTable, BOOL bWidth, BOOL bAdjust, BOOL bRedraw)
{
	CUIntArray  nWidths;

	if (!bWidth || GetTableLayout(pTable->GetName(), nWidths))
	{
		RecalcTable(m_pTables, pTable, nWidths, bAdjust, bRedraw);
		return;
	}
}
VOID CTCOnBoardMemoryImagesTableView::RecalcTable(CTableViewObject *pTable, CONST CUIntArray &nWidths, BOOL bAdjust, BOOL bRedraw)
{
	RecalcTable(m_pTables, pTable, nWidths, bAdjust, bRedraw);
}
VOID CTCOnBoardMemoryImagesTableView::RecalcTable(CONST CTableViewObjects *pTables, CTableViewObject *pTable, CONST CUIntArray &nWidths, BOOL bAdjust, BOOL bRedraw)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nCell;
	INT  nCells;
	INT  nIndex;
	INT  nCount;
	INT  nMargin;
	INT  nExtent;
	INT  nSize[2];
	INT  nStyle[2];
	INT  nWidth[2];
	INT  nHeight[3];
	INT  nOffset[2];
	CRect  rCell[2];
	CRect  rTable;
	CString  szTable;
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CPtrArray  pCells;
	CUIntArray  nColumns;
	CTableViewCell  *pCell;
	CTableViewObject  *pSubTable;

	if ((pSubTable = (GetTablePosition(pTable->GetName(), szTable, rTable) && (!nWidths.GetSize() || GetTableLayout(szTable, nColumns)) && IsSubTable(pTable) && bAdjust) ? pTables->GetAt(pTables->Find(szTable)) : (CTableViewObject *)NULL))
	{
		RecalcTable(pTables, pSubTable, nColumns, bAdjust, bRedraw);
		return;
	}
	if (GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]))
	{
		for (pTable->SetOuterBorder(nSize[0], nStyle[0], nColor[0]), pTable->SetInnerBorder(nSize[1], nStyle[1], nColor[1]); pTable->GetType() == TAS_TABLE_NORMAL; )
		{
			pTable->SetRowBackgroundColor(1, nFirstRowColor);
			break;
		}
		for (; pTable->GetType() == TAS_TABLE_LIST; )
		{
			pTable->SetColumnBackgroundColor(0, nFirstColumnColor);
			break;
		}
		for (; pTable->HasTitle(); )
		{
			pTable->SetRowBackgroundColor(0, nTitleRowColor);
			break;
		}
		for (nCol = 0, nCols = pTable->GetColumns(), nMargin = CalcDefaultTableMargin(pTable), nExtent = 0; nCol < nCols; nCol++)
		{
			for (nRow = 0, nRows = pTable->GetRows(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, nCol)))
				{
					if (pCell->GetFormat() & TAS_TYPE_SUBTABLE)
					{
						if ((pSubTable = pTables->GetAt(pTables->Find(pCell->GetSubTable()))))
						{
							for (nColumns.RemoveAll(); GetTableLayout(pSubTable->GetName(), nColumns); )
							{
								RecalcTable(pTables, pSubTable, nColumns, FALSE, FALSE);
								break;
							}
						}
					}
				}
			}
			for (nRow = 0, nRows = (nCol < nWidths.GetSize()) ? pTable->GetRows() : -1, nWidth[0] = 0; nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, nCol)))
				{
					pCell->SetInnerPosition(CRect(0, 0, 0, 0));
					for (rCell[0] = CalcTableCellExtent(pCell); !nCol || nCol == nCols - 1; )
					{
						nWidth[1] = max(nSize[0] + 2 * nMargin + rCell[0].Width(), nWidth[0]);
						nWidth[1] = CalcDefaultCellWidth(pCell, nWidths.GetAt(nCol), (pTable->GetType() != TAS_TABLE_NORMAL || (pCell->GetFormat() & TAS_TYPE_SUBTABLE) || !nCol) ? nWidth[1] : 0);
						nWidth[0] = max(nWidth[0], nWidth[1]);
						break;
					}
					if (nCol > 0 && nCol < nCols - 1)
					{
						nWidth[1] = max(nSize[1] + 3 * nMargin + rCell[0].Width(), nWidth[0]);
						nWidth[1] = CalcDefaultCellWidth(pCell, nWidths.GetAt(nCol), nWidth[1]);
						nWidth[0] = max(nWidth[0], nWidth[1]);
					}
				}
			}
			if (nRows >= 0)
			{
				pTable->SetColumnWidth(nCol, nWidth[0]);
				continue;
			}
		}
		for (nRow = 0, nRows = pTable->GetRows(); nRow < nRows; nRow++)
		{
			for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
				{
					for (rCell[0] = pCell->GetPosition(); !nCol || nCol == nCols - 1; )
					{
						rCell[0].SetRect((!nCol) ? (rCell[0].left + nSize[0] + nMargin) : (rCell[0].left + nMargin), rCell[0].top + nSize[1], (nCol > 0) ? (rCell[0].right - nSize[0] - nMargin) : (rCell[0].right - nMargin), (nRow == nRows - 1) ? (rCell[0].bottom - nSize[0] / 2 - 1) : (rCell[0].bottom - nSize[1] / 2 - 1));
						pCell->SetInnerPosition(rCell[0]);
						break;
					}
					if (nCol > 0 && nCol < nCols - 1)
					{
						rCell[0].DeflateRect(nMargin, nSize[1], nMargin, (nRow == nRows - 1) ? (nSize[0] / 2 + 1) : (nSize[1] / 2 + 1));
						pCell->SetInnerPosition(rCell[0]);
					}
				}
			}
		}
		for (nCell = 0, nCells = pTable->GetCellCount(), nOffset[0] = 0; nCell < nCells; nCell++)
		{
			if ((pCell = pTable->FindCell(nCell)))
			{
				for (; pCell->x == 0; )
				{
					pCells.RemoveAll();
					break;
				}
				for (nHeight[0] = CalcDefaultCellHeight(m_pTables, pCell, pCell->GetInnerPosition().Width()), nHeight[1] = (pCell->x > 0) ? max(nHeight[0], nHeight[1]) : nHeight[0], nHeight[2] = (pCell->x > 0) ? max(pCell->GetPosition().Height(), nHeight[2]) : pCell->GetPosition().Height(), nHeight[0] = (!nWidths.GetSize() && !bAdjust) ? max(nHeight[1], nHeight[2]) : nHeight[1], pCells.Add(pCell); pCell->x == pTable->GetColumns() - 1; )
				{
					for (nIndex = 0, nCount = (INT)pCells.GetSize(); nIndex < nCount; nIndex++)
					{
						if ((pCell = (CTableViewCell *)pCells.GetAt(nIndex)) != (CTableViewCell *)NULL)
						{
							for (rCell[0] = pCell->GetPosition(), rCell[0].OffsetRect(0, nOffset[0]), rCell[0].InflateRect(0, 0, 0, (nOffset[1] = nHeight[0] - rCell[0].Height())), pCell->SetPosition(rCell[0]); pCell->HasInnerPosition(); )
							{
								rCell[1] = pCell->GetInnerPosition();
								rCell[1].OffsetRect(0, nOffset[0]);
								rCell[1].InflateRect(0, 0, 0, nOffset[1]);
								pCell->SetInnerPosition(rCell[1]);
								break;
							}
						}
					}
					nOffset[0] += nOffset[1];
					break;
				}
			}
		}
		for (pTable->OffsetCells((!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN - pTable->GetCellsBounds().left) : (-pTable->GetCellsBounds().left), (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN - pTable->GetCellsBounds().top) : (-pTable->GetCellsBounds().top)), rTable = pTable->GetCellsBounds(), rTable.InflateRect(rTable.left, rTable.top, (pTable->GetType() == TAS_TABLE_LIST && !IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : rTable.left, (pTable->GetType() == TAS_TABLE_LIST && !IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : rTable.top), pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom); bRedraw; )
		{
			DrawTables();
			break;
		}
	}
}

VOID CTCOnBoardMemoryImagesTableView::RecalcTableRow(CTableViewObject *pTable, INT nRow, BOOL bAdjust)
{
	RecalcTableRow(m_pTables, pTable, nRow, bAdjust);
}
VOID CTCOnBoardMemoryImagesTableView::RecalcTableRow(CONST CTableViewObjects *pTables, CTableViewObject *pTable, INT nRow, BOOL bAdjust)
{
	INT  nCol;
	INT  nCols;
	INT  nHeight[3];
	CTableViewCell  *pCell;

	for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
	{
		if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
		{
			for (nHeight[0] = CalcDefaultCellHeight(pTables, pCell, pCell->GetInnerPosition().Width()), nHeight[1] = (nCol > 0) ? max(nHeight[0], nHeight[1]) : nHeight[0], nHeight[2] = (nCol > 0) ? max(pCell->GetPosition().Height(), nHeight[2]) : pCell->GetPosition().Height(); nCol == nCols - 1; )
			{
				pTable->SetRowHeight(nRow, (!bAdjust) ? max(nHeight[1], nHeight[2]) : nHeight[1]);
				break;
			}
		}
	}
}

VOID CTCOnBoardMemoryImagesTableView::UpdateTableContents(CTableViewObject *pTable, CONST CStringArray &szContents)
{
	UpdateTableContents(m_pTables, pTable, GetName(), szContents);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableContents(CONST CTableViewObjects *pTables, CTableViewObject *pTable, LPCTSTR pszTable, CONST CStringArray &szContents)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nCell;
	INT  nCells;
	INT  nIndex;
	INT  nSize[2];
	INT  nStyle[2];
	BOOL  bWidth;
	BOOL  bResize;
	BOOL  bVisible;
	CString  szItem;
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CTableViewCell  *pCell;
	CStringArray  szColumns;
	CStringArray  szDataTypes;
	CStringArray  szDescriptions;
	CUIntArray  nFormats;
	CUIntArray  nWidths;
	CUIntArray  nIDs;

	for (BeginTableUpdate(); GetTableLayout(pTable->GetName(), nWidths) && GetTableContents(pTable->GetName(), GetName(), 0, szColumns, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible) && GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]); )
	{
		for (bWidth = FALSE; pTable->GetType() == TAS_TABLE_LIST; )
		{
			for (nRow = pTable->GetRows(), nRows = (pTable->HasTitle()) ? (INT)(szContents.GetSize() + 1) : (INT)szContents.GetSize(), bWidth = (nRow != nRows); nRow < nRows; nRow++)
			{
				InsertTableRow(pTable, nRow);
				continue;
			}
			for (nRow = (pTable->HasTitle()) ? (INT)(szContents.GetSize() + 1) : (INT)szContents.GetSize(), nRows = pTable->GetRows(); nRow < nRows; nRow++)
			{
				DeleteTableRow(pTable, pTable->GetRows() - 1);
				nRows--;
				nRow--;
			}
			for (nCol = pTable->GetColumns(), nCols = (INT)nWidths.GetSize(), bWidth |= (nCol != nCols); nCol < nCols; nCol++)
			{
				InsertTableColumn(pTable, nCol);
				continue;
			}
			for (nCol = (INT)nWidths.GetSize(), nCols = pTable->GetColumns(); nCol < nCols; nCol++)
			{
				DeleteTableColumn(pTable, pTable->GetColumns() - 1);
				nCols--;
				nCol--;
			}
			break;
		}
		for (nRows = (pTable->HasTitle()) ? (INT)(szContents.GetSize() + 1) : (INT)szContents.GetSize(), nCell = (pTable->GetType() == TAS_TABLE_NORMAL) ? (pTable->GetColumns() - 1) : 0, nCell += (pTable->HasTitle() && nCell >= 0) ? pTable->GetColumns() : 0, nCells = nRows*(nCols = pTable->GetColumns()), nCells = (nCell >= 0) ? nCells : -1; nCell < nCells; nCell = (pTable->GetType() == TAS_TABLE_NORMAL) ? (nCell + nCols) : (nCell + 1))
		{
			if ((pCell = pTable->FindCell(nCell)) && ((pTable->GetType() == TAS_TABLE_LIST  &&  pCell->x > 0) || ExtractTextItems(((nIndex = (pTable->HasTitle()) ? (pCell->y - 1) : pCell->y) < szContents.GetSize()) ? szContents.GetAt(nIndex) : EMPTYSTRING, szColumns) >= 0))
			{
				if (pTable->GetType() == TAS_TABLE_NORMAL  &&  szColumns.GetSize() > 0)
				{
					for (szItem = szColumns.GetAt(0); pCell->GetText() != szItem; )
					{
						pCell->SetText(szItem, FALSE);
						break;
					}
					continue;
				}
				if (pTable->GetType() == TAS_TABLE_LIST  &&  pCell->x < szColumns.GetSize())
				{
					for (szItem = szColumns.GetAt(pCell->x); pCell->GetText() != szItem; )
					{
						pCell->SetText(szItem, FALSE);
						break;
					}
					continue;
				}
				pCell->SetText(EMPTYSTRING, FALSE);
				continue;
			}
			break;
		}
		if (pTable->GetType() == TAS_TABLE_LIST)
		{
			for (; (!pTable->HasTitle() && max(nRows, 1) < pTable->GetRows()) || (pTable->HasTitle() && max(nRows, 2) < pTable->GetRows()); )
			{
				pTable->RemoveRow(pTable->GetRows() - 1);
				continue;
			}
			for (nCol = 0, nCols = pTable->GetColumns(); !szContents.GetSize() && pTable->GetRows() > nRows && nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(pTable->GetRows() - 1, nCol)))
				{
					pCell->SetText(EMPTYSTRING, FALSE);
					continue;
				}
			}
		}
		pTable->SetOuterBorder(nSize[0], nStyle[0], nColor[0]);
		pTable->SetInnerBorder(nSize[1], nStyle[1], nColor[1]);
		RecalcTable(pTables, pTable, nWidths, TRUE, FALSE);
		ProtectTableFieldData(pTable->GetName());
		break;
	}
	EndTableUpdate();
}

BOOL CTCOnBoardMemoryImagesTableView::EnumTableCellValues(CTableViewObject *pTable, CTableViewCell *pCell, LPCTSTR pszItem)
{
	CStringArray  szValues;
	CLongUIntArray  nValues;

	if ((pCell->GetFormat() & TAS_TYPE_COMBOLISTBOX) || (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX))
	{
		EnumTableFieldValues(pTable->GetName(), pszItem, szValues, nValues);
		return EnumTableCellValues(pTable, pCell, szValues, nValues);
	}
	return TRUE;
}
BOOL CTCOnBoardMemoryImagesTableView::EnumTableCellValues(CTableViewObject *pTable, CTableViewCell *pCell, CONST CStringArray &szValues, CUIntArray &nValues)
{
	CLongUIntArray  lValues;

	return EnumTableCellValues(pTable, pCell, szValues, (lValues = nValues));
}
BOOL CTCOnBoardMemoryImagesTableView::EnumTableCellValues(CTableViewObject *pTable, CTableViewCell *pCell, CONST CStringArray &szValues, CLongUIntArray &nValues)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nTable;
	INT  nTables;
	BOOL  bValue;
	DWORD  dwSel;
	CString  szValue;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewComboBoxListCtrl  *pComboListCtrl;
	CTableViewComboBoxEditCtrl  *pComboEditCtrl;

	if (pCell->GetFormat() & TAS_TYPE_COMBOLISTBOX)
	{
		if ((pComboListCtrl = (CTableViewComboBoxListCtrl *)pCell->GetControl()))
		{
			for (szValue = pCell->GetText(), bValue = pComboListCtrl->HasValue(szValue), pComboListCtrl->SetValues(szValues, nValues); IsWindow(pComboListCtrl->GetSafeHwnd()); )
			{
				for (nItem = 0, nItems = (INT)szValues.GetSize(), pComboListCtrl->ResetContent(); nItem < nItems; nItem++)
				{
					pComboListCtrl->SendMessage(CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValues.GetAt(nItem));
					continue;
				}
				break;
			}
			for (pCell->SetText(szValue, bValue); pCell->GetText() != szValue; )
			{
				for (nRow = pTable->GetSelRow(); pTable->SetSelRow(pCell->y); )
				{
					UpdateTableFieldData(pCell->GetControlID(), pCell->GetText());
					break;
				}
				for (nTable = 0, nTables = EnumTableUpdates(pCell->GetControlID(), szTables); nTable < nTables; nTable++)
				{
					if (GetTableUpdateContents(szTables.GetAt(nTable), pCell->GetControlID(), pCell->GetText(), szValue, szItems))
					{
						UpdateTableContents(m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable))), szItems);
						continue;
					}
				}
				for (pTable->SetSelRow(nRow); nTables > 0; )
				{
					ClearUndo();
					break;
				}
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
	{
		if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell->GetControl()))
		{
			for (szValue = pCell->GetText(), bValue = pComboEditCtrl->HasValue(szValue), pComboEditCtrl->SetValues(szValues, nValues); IsWindow(pComboEditCtrl->GetSafeHwnd()); )
			{
				for (nItem = 0, nItems = (INT)szValues.GetSize(), dwSel = pComboEditCtrl->GetEditSel(), pComboEditCtrl->ResetContent(); nItem < nItems; nItem++)
				{
					pComboEditCtrl->SendMessage(CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValues.GetAt(nItem));
					continue;
				}
				break;
			}
			for (pCell->SetText(szValue, bValue); pCell->GetText() != szValue; )
			{
				for (nRow = pTable->GetSelRow(); pTable->SetSelRow(pCell->y); )
				{
					UpdateTableFieldData(pCell->GetControlID(), pCell->GetText());
					break;
				}
				for (nTable = 0, nTables = EnumTableUpdates(pCell->GetControlID(), szTables); nTable < nTables; nTable++)
				{
					if (GetTableUpdateContents(szTables.GetAt(nTable), pCell->GetControlID(), pCell->GetText(), szValue, szItems))
					{
						UpdateTableContents(m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable))), szItems);
						continue;
					}
				}
				for (pTable->SetSelRow(nRow); nTables > 0; )
				{
					ClearUndo();
					break;
				}
				break;
			}
			for (; IsWindow(pComboEditCtrl->GetSafeHwnd()); )
			{
				pComboEditCtrl->SetEditSel(LOWORD(dwSel), HIWORD(dwSel));
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesTableView::LimitTableCellValues(CONST CTableViewObject *pTable, CTableViewCell *pCell, LPCTSTR pszItem)
{
	INT  nLow;
	INT  nHigh;
	UINT  uLow;
	UINT  uHigh;
	double  fLow;
	double  fHigh;
	CTableViewSpinCtrl  *pSpinCtrl;
	CTableViewDecNumberEditCtrl  *pDecNumberEditCtrl;
	CTableViewRawNumberEditCtrl  *pRawNumberEditCtrl;

	if (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT)
	{
		if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell->GetControl()))
		{
			if (GetTableFieldLimits(pTable->GetName(), pszItem, nLow, nHigh))
			{
				pDecNumberEditCtrl->SetRange((LONGLONG)nLow, (LONGLONG)nHigh);
				return TRUE;
			}
			if (GetTableFieldLimits(pTable->GetName(), pszItem, uLow, uHigh))
			{
				pDecNumberEditCtrl->SetRange((ULONGLONG)uLow, (ULONGLONG)uHigh);
				return TRUE;
			}
			for (; GetTableFieldLimits(pTable->GetName(), pszItem, fLow, fHigh); )
			{
				pDecNumberEditCtrl->SetRange(fLow, fHigh);
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	if (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT)
	{
		if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell->GetControl()))
		{
			if (GetTableFieldLimits(pTable->GetName(), pszItem, nLow, nHigh))
			{
				pRawNumberEditCtrl->SetRange((ULONGLONG)max(nLow, 0), (ULONGLONG)max(nHigh, 0));
				return TRUE;
			}
			if (GetTableFieldLimits(pTable->GetName(), pszItem, uLow, uHigh))
			{
				pRawNumberEditCtrl->SetRange(uLow, uHigh);
				return TRUE;
			}
			return TRUE;
		}
		return FALSE;
	}
	if (pCell->GetFormat() & TAS_TYPE_SPINBOX)
	{
		if ((pSpinCtrl = (CTableViewSpinCtrl *)pCell->GetControl()))
		{
			if (GetTableFieldLimits(pTable->GetName(), pszItem, nLow, nHigh))
			{
				pSpinCtrl->SetRange(nLow, nHigh);
				return TRUE;
			}
			if (GetTableFieldLimits(pTable->GetName(), pszItem, uLow, uHigh))
			{
				if (uLow <= INT_MAX  &&  uHigh <= INT_MAX)
				{
					pSpinCtrl->SetRange(uLow, uHigh);
					return TRUE;
				}
			}
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

VOID CTCOnBoardMemoryImagesTableView::UpdateTableCellValue(CONST CTableViewObject *pTable, CTableViewCell *pCell, LPCTSTR pszValue)
{
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem[2];

	if (!IsUndoing() && !IsRedoing())
	{
		ConvertUndoItem(pTable->GetName(), &cUndoItem[0]);
		ConvertUndoItem(pTable->GetName(), &cUndoItem[1]);
		cUndoItem[0].SetCell(pTable->GetName(), CPoint(pCell->x, pCell->y));
		cUndoItem[1].SetCell(pTable->GetName(), CPoint(pCell->x, pCell->y));
		cUndoItem[0].SetText(pTable->GetCellText(pCell->y, pCell->x));
		cUndoItem[1].SetText(pszValue);
		cUndoItem[0].SetSel(0, cUndoItem[0].GetText().GetLength());
		cUndoItem[1].SetSel(0, cUndoItem[1].GetText().GetLength());
		cUndoItem[0].AllowSelection(FALSE);
		cUndoItem[1].AllowSelection(FALSE);
		cUndoItem[0].Collect(FALSE);
		cUndoItem[1].Collect(TRUE);
		m_cUndoLists.Add(&cUndoItem[0]);
		m_cUndoLists.Add(&cUndoItem[1]);
		pCell->SetText(pszValue);
	}
}

VOID CTCOnBoardMemoryImagesTableView::EnableTableCellValue(CONST CTableViewObject *pTable, CTableViewCell *pCell, LPCTSTR pszDefault, BOOL bEnable)
{
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem[2];

	if (!bEnable)
	{
		if ((pCell->GetFormat() & (TAS_TYPE_TEXT & TAS_TYPE_SUBTABLE)) == 0)
		{
			if (IsUndoing() || IsRedoing())
			{
				pCell->Enable(FALSE);
				return;
			}
			ConvertUndoItem(pTable->GetName(), &cUndoItem[0]);
			ConvertUndoItem(pTable->GetName(), &cUndoItem[1]);
			cUndoItem[0].SetCell(pTable->GetName(), CPoint(pCell->x, pCell->y));
			cUndoItem[1].SetCell(pTable->GetName(), CPoint(pCell->x, pCell->y));
			cUndoItem[0].SetText(pTable->GetCellText(pCell->y, pCell->x));
			cUndoItem[1].SetText((pCell->GetFormat() & (TAS_TYPE_EDIT | TAS_TYPE_MULTILINEEDIT | TAS_TYPE_DECNUMBEREDIT | TAS_TYPE_RAWNUMBEREDIT | TAS_TYPE_DPLEDIT | TAS_TYPE_MDLEDIT | TAS_TYPE_TPLEDIT | TAS_TYPE_COMBOLISTBOX | TAS_TYPE_COMBOEDITBOX)) ? pszDefault : EMPTYSTRING);
			cUndoItem[0].SetSel(0, cUndoItem[0].GetText().GetLength());
			cUndoItem[1].SetSel(0, cUndoItem[1].GetText().GetLength());
			cUndoItem[0].AllowSelection(FALSE);
			cUndoItem[1].AllowSelection(FALSE);
			cUndoItem[0].Collect(FALSE);
			cUndoItem[1].Collect(TRUE);
			m_cUndoLists.Add(&cUndoItem[0]);
			m_cUndoLists.Add(&cUndoItem[1]);
			pCell->SetText(cUndoItem[1].GetText());
			pCell->Enable(FALSE);
		}
		return;
	}
	pCell->Enable();
}

BOOL CTCOnBoardMemoryImagesTableView::IsTableRowEmpty(CONST CTableViewObject *pTable, INT nRow) CONST
{
	INT  nCol;
	INT  nCols;
	INT  nSubRow;
	INT  nSubRows;
	CTableViewCell  *pCell;
	CTableViewObject  *pSubTable;

	for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
	{
		if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
		{
			if ((pCell->GetFormat() & TAS_TYPE_SUBTABLE) == TAS_TYPE_SUBTABLE)
			{
				if ((pSubTable = FindTable(pCell->GetSubTable())) != (CTableViewObject *)NULL)
				{
					for (nSubRow = 0, nSubRows = pSubTable->GetRows(); nSubRow < nSubRows; nSubRow++)
					{
						if (!IsTableRowEmpty(pSubTable, nSubRow)) break;
						continue;
					}
					if (nSubRow < nSubRows) break;
				}
				continue;
			}
			if ((pCell->GetFormat() & TAS_TYPE_TEXT) != TAS_TYPE_TEXT  &&  !pCell->GetText().IsEmpty()) break;
		}
	}
	return((nCol == nCols) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::IsTableRowFull(CONST CTableViewObject *pTable, INT nRow) CONST
{
	INT  nCol;
	INT  nCols;
	CTableViewCell  *pCell;

	for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
	{
		if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
		{
			if ((pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE && (pCell->GetFormat() & TAS_TYPE_TEXT) != TAS_TYPE_TEXT  &&  pCell->GetText().IsEmpty()) break;
			continue;
		}
	}
	return((nCol == nCols) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::IsSubTable(CONST CTableViewObject *pTable) CONST
{
	CRect  rTable;
	CString  szTable;

	return((GetTablePosition(pTable->GetName(), szTable, rTable) && !szTable.IsEmpty() && (rTable.left*rTable.top != 0 || rTable.right*rTable.bottom != 0)) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacket *pDatabaseTMPacket, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacketIdentification *pDatabaseTMPacketIdentification, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacketIdentificationCriterion *pDatabaseTMPacketIdentificationCriterion, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMPacketGroup *pDatabaseTMPacketGroup, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCFunction *pDatabaseTCFunction, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCPacket *pDatabaseTCPacket, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCExeVerStage *pDatabaseTCExeVerStage, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCParameterValueSet *pDatabaseTCParameterValueSet, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCFunctionRoutingPath *pDatabaseTCFunctionRoutingPath, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCSequence *pDatabaseTCSequence, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMParameter *pDatabaseTMParameter, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTMParameterGroup *pDatabaseTMParameterGroup, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCParameter *pDatabaseTCParameter, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CANDLayout *pLayout, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CGRDLayout *pLayout, INT nIndex, BOOL bDelete)
{
	return;
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTableForms(CONST CPODLayout *pLayout, INT nIndex, BOOL bDelete)
{
	return;
}

VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseTMPackets &pDatabaseTMPackets)
{
	GetDatabase()->UpdateTables(this, pDatabaseTMPackets);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseTCFunctions &pDatabaseTCFunctions)
{
	GetDatabase()->UpdateTables(this, pDatabaseTCFunctions);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseTCSequences &pDatabaseTCSequences)
{
	GetDatabase()->UpdateTables(this, pDatabaseTCSequences);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseOBProcessors &pDatabaseOBProcessors)
{
	GetDatabase()->UpdateTables(this, pDatabaseOBProcessors);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseTMParameters &pDatabaseTMParameters)
{
	GetDatabase()->UpdateTables(this, pDatabaseTMParameters);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CDatabaseTCParameters &pDatabaseTCParameters)
{
	GetDatabase()->UpdateTables(this, pDatabaseTCParameters);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CANDLayouts &pANDLayouts)
{
	GetDatabase()->UpdateTables(this, pANDLayouts);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CGRDLayouts &pGRDLayouts)
{
	GetDatabase()->UpdateTables(this, pGRDLayouts);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(CONST CPODLayouts &pPODLayouts)
{
	GetDatabase()->UpdateTables(this, pPODLayouts);
}
BOOL CTCOnBoardMemoryImagesTableView::UpdateTables(ULONGLONG nComponent, LPCTSTR pszName, BOOL bDelete)
{
	CString  szName;

	for (szName = GetName(); GetDatabase()->UpdateTables(this, nComponent, pszName, bDelete); )
	{
		if (DATABASECOMPONENTFROMCODE(nComponent) == GetComponent() && DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE  &&  !szName.Compare(pszName))
		{
			for (ClearUndo(); bDelete; )
			{
				DoResetTables();
				break;
			}
			return TRUE;
		}
		break;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::UpdateTables(ULONGLONG nComponent, INT nID, BOOL bDelete)
{
	return GetDatabase()->UpdateTables(this, nComponent, nID, bDelete);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables(ULONGLONG nComponent)
{
	GetDatabase()->UpdateTables(this, nComponent);
}
VOID CTCOnBoardMemoryImagesTableView::UpdateTables()
{
	UpdateTables(GetComponent());
}

BOOL CTCOnBoardMemoryImagesTableView::EnableTablesAlignment(BOOL bEnable, BOOL bRealign)
{
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::EnableTablesAlignment(BOOL bEnable)
{
	return FALSE;
}

VOID CTCOnBoardMemoryImagesTableView::DrawTables()
{
	CDC  *pDC;

	if ((pDC = (IsWindow(GetSafeHwnd()) && !m_cUndoLists.IsCollecting() && !IsUndoing() && !IsRedoing() && !m_bImage) ? GetDC() : (CDC *)NULL))
	{
		pDC->SetViewportOrg(-GetScrollPosition());
		DrawTables(pDC);
		ReleaseDC(pDC);
	}
}
VOID CTCOnBoardMemoryImagesTableView::DrawTables(CDC *pDC)
{
	CDC  cDC;
	CDC  *pcDC;
	CRect  rView;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;

	for (GetClientRect(rView); (pcDC = (m_bImage) ? GetDC() : (CDC *)NULL); )
	{
		if ((pOldBitmap = (cDC.CreateCompatibleDC(pDC)) ? cDC.SelectObject(&m_cImage) : (CBitmap *)NULL))
		{
			pcDC->BitBlt(0, 0, rView.Width(), rView.Height(), &cDC, 0, 0, SRCCOPY);
			cDC.SelectObject(pOldBitmap);
			cDC.DeleteDC();
			ReleaseDC(pcDC);
			return;
		}
		cDC.DeleteDC();
		ReleaseDC(pcDC);
		break;
	}
	if (cDC.CreateCompatibleDC(pDC))
	{
		if (cBitmap.CreateCompatibleBitmap(pDC, rView.Width(), rView.Height()))
		{
			if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
			{
				cDC.FillSolidRect(rView, GetSysColor(COLOR_WINDOW));
				cDC.SetViewportOrg(-GetScrollPosition());
				DrawTables(&cDC, m_pTables, FALSE);
				pDC->BitBlt(GetScrollPosition().x, GetScrollPosition().y, rView.Width(), rView.Height(), &cDC, GetScrollPosition().x, GetScrollPosition().y, SRCCOPY);
				cDC.SelectClipRgn((CRgn *)NULL);
				cDC.SelectObject(pOldBitmap);
			}
			cBitmap.DeleteObject();
		}
		cDC.DeleteDC();
	}
}
VOID CTCOnBoardMemoryImagesTableView::DrawTables(CDC *pDC, CONST CTableViewObjects *pTables, BOOL bPrinting)
{
	INT  nLine;
	INT  nLines;
	INT  nIndex;
	INT  nCount;
	INT  nTable;
	INT  nTables;
	BOOL  bTables;
	CPen  cLinePen;
	CPen  *pOldPen;
	CRgn  rgClip;
	CRect  rClip;
	CRect  rTable;
	CPoint  ptLine[2];
	CString  szTable[2];
	LOGBRUSH  sPenBrush;
	CUIntArray  nXPt[2];
	CUIntArray  nYPt[2];
	CStringArray  szTables;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[2];

	for (nTable = 0, nTables = (INT)pTables->GetSize(), bTables = EnableTablesAlignment(bPrinting); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(nTable)) && pTable[0]->IsVisible())
		{
			szTables.Add(pTable[0]->GetName());
			DrawTable(pDC, pTable[0], bPrinting);
		}
	}
	for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(pTables->Find(szTables.GetAt(nTable)))))
		{
			rClip = pTable[0]->GetCellsBounds();
			pDC->ExcludeClipRect(rClip);
		}
	}
	for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
	{
		if (GetTablePosition((szTable[0] = szTables.GetAt(nTable)), szTable[1], rTable))
		{
			if ((pTable[0] = pTables->GetAt(pTables->Find(szTable[0]))))
			{
				if ((pTable[1] = pTables->GetAt(pTables->Find(szTable[1]))))
				{
					if (rTable.left > 0 && rTable.top == 0)
					{
						if ((pCell[0] = pTable[0]->FindCell(0, pTable[0]->GetColumns() - 1)))
						{
							if ((pCell[1] = pTable[1]->FindCell(rTable.left, 0)) != (CTableViewCell *)NULL)
							{
								if (pCell[1]->GetPosition().CenterPoint().y <= pCell[0]->GetPosition().top || pCell[1]->GetPosition().CenterPoint().y >= pCell[0]->GetPosition().bottom)
								{
									nXPt[0].Add(pCell[1]->GetPosition().left);
									nXPt[1].Add(pCell[0]->GetPosition().right);
									nYPt[0].Add(pCell[1]->GetPosition().CenterPoint().y);
									nYPt[1].Add(pCell[0]->GetPosition().CenterPoint().y);
								}
							}
						}
					}
					if (rTable.top > 0 && !rTable.left)
					{
						if ((pCell[0] = pTable[0]->FindCell(pTable[0]->GetRows() - 1, 0)))
						{
							if ((pCell[1] = pTable[1]->FindCell(0, rTable.top - 1)) != (CTableViewCell *)NULL)
							{
								if (pCell[1]->GetPosition().CenterPoint().x <= pCell[0]->GetPosition().left || pCell[1]->GetPosition().CenterPoint().x >= pCell[0]->GetPosition().right)
								{
									nXPt[0].Add(pCell[1]->GetPosition().CenterPoint().x);
									nXPt[1].Add(pCell[0]->GetPosition().CenterPoint().x);
									nYPt[0].Add(pCell[1]->GetPosition().top);
									nYPt[1].Add(pCell[0]->GetPosition().bottom);
								}
							}
						}
					}
					if (rTable.right > 0 && !rTable.bottom)
					{
						if ((pCell[0] = pTable[0]->FindCell(0, 0)))
						{
							if ((pCell[1] = pTable[1]->FindCell(rTable.right, pTable[1]->GetColumns() - 1)))
							{
								if (pCell[1]->GetPosition().CenterPoint().y <= pCell[0]->GetPosition().top || pCell[1]->GetPosition().CenterPoint().y >= pCell[0]->GetPosition().bottom)
								{
									nXPt[0].Add(pCell[1]->GetPosition().right);
									nXPt[1].Add(pCell[0]->GetPosition().left);
									nYPt[0].Add(pCell[1]->GetPosition().CenterPoint().y);
									nYPt[1].Add(pCell[0]->GetPosition().CenterPoint().y);
								}
							}
						}
					}
					if (rTable.bottom > 0 && !rTable.right)
					{
						if ((pCell[0] = pTable[0]->FindCell(0, 0)))
						{
							if ((pCell[1] = pTable[1]->FindCell(pTable[1]->GetRows() - 1, rTable.bottom - 1)))
							{
								if (pCell[1]->GetPosition().CenterPoint().x <= pCell[0]->GetPosition().left || pCell[1]->GetPosition().CenterPoint().x >= pCell[0]->GetPosition().right)
								{
									nXPt[0].Add(pCell[1]->GetPosition().CenterPoint().x);
									nXPt[1].Add(pCell[0]->GetPosition().CenterPoint().x);
									nYPt[0].Add(pCell[1]->GetPosition().bottom);
									nYPt[1].Add(pCell[0]->GetPosition().top);
								}
							}
						}
					}
				}
			}
		}
	}
	for (sPenBrush.lbStyle = PS_SOLID, sPenBrush.lbHatch = (ULONG_PTR)NULL, sPenBrush.lbColor = GetSysColor(COLOR_WINDOWTEXT); cLinePen.CreatePen(PS_SOLID | PS_GEOMETRIC | PS_ENDCAP_SQUARE, DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE, &sPenBrush); )
	{
		if ((pOldPen = (CPen *)pDC->SelectObject(&cLinePen)))
		{
			for (nTable = 0; nTable < nTables; nTable = nTable + 1)
			{
				if (GetTablePosition((szTable[0] = szTables.GetAt(nTable)), szTable[1], rTable))
				{
					if ((pTable[0] = pTables->GetAt(pTables->Find(szTable[0]))))
					{
						if ((pTable[1] = pTables->GetAt(pTables->Find(szTable[1]))))
						{
							if (rTable.left > 0 && rTable.top == 0)
							{
								if ((pCell[0] = pTable[0]->FindCell(0, pTable[0]->GetColumns() - 1)))
								{
									if ((pCell[1] = pTable[1]->FindCell(rTable.left, 0)) != (CTableViewCell *)NULL)
									{
										if (pCell[1]->GetPosition().CenterPoint().y <= pCell[0]->GetPosition().top || pCell[1]->GetPosition().CenterPoint().y >= pCell[0]->GetPosition().bottom)
										{
											for (nLine = 0, nLines = (INT)nXPt[0].GetSize(), ptLine[0].x = pCell[1]->GetPosition().left, ptLine[0].y = pCell[1]->GetPosition().CenterPoint().y, ptLine[1].x = pCell[0]->GetPosition().right, ptLine[1].y = pCell[0]->GetPosition().CenterPoint().y, nCount = 0; nLine < nLines; nLine++)
											{
												if (min(ptLine[0].x, ptLine[1].x) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine)) || max(ptLine[0].x, ptLine[1].x) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) continue;
												if (min(ptLine[0].y, ptLine[1].y) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine)) || max(ptLine[0].y, ptLine[1].y) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) continue;
												if (ptLine[0].x == nXPt[0].GetAt(nLine) && ptLine[0].y == nYPt[0].GetAt(nLine) && nIndex > 0) continue;
												nIndex = (min(ptLine[0].y, ptLine[1].y) <= (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) ? (nIndex + 1) : nIndex;
												nCount++;
											}
											pDC->MoveTo(ptLine[0]);
											pDC->LineTo(ptLine[0].x - ((ptLine[0].x - ptLine[1].x)*nIndex) / (nCount + 1), ptLine[0].y);
											pDC->LineTo(ptLine[0].x - ((ptLine[0].x - ptLine[1].x)*nIndex) / (nCount + 1), ptLine[1].y);
											pDC->LineTo(ptLine[1]);
										}
										else
										{
											pDC->MoveTo(pCell[1]->GetPosition().left, pCell[1]->GetPosition().CenterPoint().y);
											pDC->LineTo(pCell[0]->GetPosition().right, pCell[1]->GetPosition().CenterPoint().y);
										}
									}
								}
							}
							if (rTable.top > 0 && !rTable.left)
							{
								if ((pCell[0] = pTable[0]->FindCell(pTable[0]->GetRows() - 1, 0)))
								{
									if ((pCell[1] = pTable[1]->FindCell(0, rTable.top - 1)) != (CTableViewCell *)NULL)
									{
										if (pCell[1]->GetPosition().CenterPoint().x <= pCell[0]->GetPosition().left || pCell[1]->GetPosition().CenterPoint().x >= pCell[0]->GetPosition().right)
										{
											for (nLine = 0, nLines = (INT)nYPt[0].GetSize(), ptLine[0].x = pCell[1]->GetPosition().CenterPoint().x, ptLine[0].y = pCell[1]->GetPosition().top, ptLine[1].x = pCell[0]->GetPosition().CenterPoint().x, ptLine[1].y = pCell[0]->GetPosition().bottom, nCount = 0, nIndex = 0; nLine < nLines; nLine++)
											{
												if (min(ptLine[0].x, ptLine[1].x) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine)) || max(ptLine[0].x, ptLine[1].x) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) continue;
												if (min(ptLine[0].y, ptLine[1].y) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine)) || max(ptLine[0].y, ptLine[1].y) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) continue;
												if (ptLine[0].x == nXPt[0].GetAt(nLine) && ptLine[0].y == nYPt[0].GetAt(nLine) && nIndex > 0) continue;
												nIndex = (min(ptLine[0].x, ptLine[1].x) <= (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) ? (nIndex + 1) : nIndex;
												nCount++;
											}
											pDC->MoveTo(ptLine[0]);
											pDC->LineTo(ptLine[0].x, ptLine[0].y - ((ptLine[0].y - ptLine[1].y)*nIndex) / (nCount + 1));
											pDC->LineTo(ptLine[1].x, ptLine[0].y - ((ptLine[0].y - ptLine[1].y)*nIndex) / (nCount + 1));
											pDC->LineTo(ptLine[1]);
										}
										else
										{
											pDC->MoveTo(pCell[1]->GetPosition().CenterPoint().x, pCell[1]->GetPosition().top);
											pDC->LineTo(pCell[1]->GetPosition().CenterPoint().x, pCell[0]->GetPosition().bottom);
										}
									}
								}
							}
							if (rTable.right > 0 && !rTable.bottom)
							{
								if ((pCell[0] = pTable[0]->FindCell(0, 0)))
								{
									if ((pCell[1] = pTable[1]->FindCell(rTable.right, pTable[1]->GetColumns() - 1)))
									{
										if (pCell[1]->GetPosition().CenterPoint().y <= pCell[0]->GetPosition().top || pCell[1]->GetPosition().CenterPoint().y >= pCell[0]->GetPosition().bottom)
										{
											for (nLine = 0, nLines = (INT)nXPt[0].GetSize(), ptLine[0].x = pCell[1]->GetPosition().right, ptLine[0].y = pCell[1]->GetPosition().CenterPoint().y, ptLine[1].x = pCell[0]->GetPosition().left, ptLine[1].y = pCell[0]->GetPosition().CenterPoint().y, nCount = 0, nIndex = 0; nLine < nLines; nLine++)
											{
												if (min(ptLine[0].x, ptLine[1].x) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine)) || max(ptLine[0].x, ptLine[1].x) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) continue;
												if (min(ptLine[0].y, ptLine[1].y) - DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE >(INT) max(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine)) || max(ptLine[0].y, ptLine[1].y) + DATABASETABLEVIEW_TABLE_CONNECTIONLINESIZE < (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) continue;
												if (ptLine[0].x == nXPt[0].GetAt(nLine) && ptLine[0].y == nYPt[0].GetAt(nLine) && nIndex > 0) continue;
												nIndex = (min(ptLine[0].y, ptLine[1].y) <= (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) ? (nIndex + 1) : nIndex;
												nCount++;
											}
											pDC->MoveTo(ptLine[0]);
											pDC->LineTo(ptLine[0].x + ((ptLine[1].x - ptLine[0].x)*nIndex) / (nCount + 1), ptLine[0].y);
											pDC->LineTo(ptLine[0].x + ((ptLine[1].x - ptLine[0].x)*nIndex) / (nCount + 1), ptLine[1].y);
											pDC->LineTo(ptLine[1]);
										}
										else
										{
											pDC->MoveTo(pCell[1]->GetPosition().right, pCell[1]->GetPosition().CenterPoint().y);
											pDC->LineTo(pCell[0]->GetPosition().left, pCell[1]->GetPosition().CenterPoint().y);
										}
									}
								}
							}
							if (rTable.bottom > 0 && !rTable.right)
							{
								if ((pCell[0] = pTable[0]->FindCell(0, 0)))
								{
									if ((pCell[1] = pTable[1]->FindCell(pTable[1]->GetRows() - 1, rTable.bottom - 1)))
									{
										if (pCell[1]->GetPosition().CenterPoint().x <= pCell[0]->GetPosition().left || pCell[1]->GetPosition().CenterPoint().x >= pCell[0]->GetPosition().right)
										{
											for (nLine = 0, nLines = (INT)nYPt[0].GetSize(), ptLine[0].x = pCell[1]->GetPosition().CenterPoint().x, ptLine[0].y = pCell[1]->GetPosition().bottom, ptLine[1].x = pCell[0]->GetPosition().CenterPoint().x, ptLine[1].y = pCell[0]->GetPosition().top, nCount = 0, nIndex = 0; nLine < nLines; nLine++)
											{
												if (min(ptLine[0].x, ptLine[1].x) >(INT) max(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine)) || max(ptLine[0].x, ptLine[1].x) < (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) continue;
												if (min(ptLine[0].y, ptLine[1].y) > (INT)max(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine)) || max(ptLine[0].y, ptLine[1].y) < (INT)min(nYPt[0].GetAt(nLine), nYPt[1].GetAt(nLine))) continue;
												if (ptLine[0].x == nXPt[0].GetAt(nLine) && ptLine[0].y == nYPt[0].GetAt(nLine) && nIndex > 0) continue;
												nIndex = (min(ptLine[0].x, ptLine[1].x) <= (INT)min(nXPt[0].GetAt(nLine), nXPt[1].GetAt(nLine))) ? (nIndex + 1) : nIndex;
												nCount++;
											}
											pDC->MoveTo(ptLine[0]);
											pDC->LineTo(ptLine[0].x, ptLine[0].y + ((ptLine[1].y - ptLine[0].y)*nIndex) / (nCount + 1));
											pDC->LineTo(ptLine[1].x, ptLine[0].y + ((ptLine[1].y - ptLine[0].y)*nIndex) / (nCount + 1));
											pDC->LineTo(ptLine[1]);
										}
										else
										{
											pDC->MoveTo(pCell[1]->GetPosition().CenterPoint().x, pCell[1]->GetPosition().bottom);
											pDC->LineTo(pCell[1]->GetPosition().CenterPoint().x, pCell[0]->GetPosition().top);
										}
									}
								}
							}
						}
					}
				}
			}
			pDC->SelectObject(pOldPen);
		}
		cLinePen.DeleteObject();
		break;
	}
	for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable[0] = pTables->GetAt(pTables->Find(szTables.GetAt(nTable)))))
		{
			for (rClip = pTable[0]->GetCellsBounds(); rgClip.CreateRectRgn(rClip.left, rClip.top, rClip.right, rClip.bottom); )
			{
				pDC->SelectClipRgn(&rgClip, RGN_OR);
				rgClip.DeleteObject();
				break;
			}
		}
	}
	EnableTablesAlignment(bTables);
}

VOID CTCOnBoardMemoryImagesTableView::DrawTable(CDC *pDC, CONST CTableViewObject *pTable, BOOL bPrinting)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nSel[2];
	INT  nBorderSize;
	INT  nBorderStyle;
	CPen  cBorderPen;
	CPen  *pOldPen;
	CRect  rView;
	CRect  rClip;
	CRect  rCell;
	LOGBRUSH  sPen;
	COLORREF  nBkgndColor;
	COLORREF  nBorderColor;
	CTableViewCell  *pCell;

	GetClientRect(rView);
	rView.OffsetRect(GetScrollPosition());
	for (nRow = 0, nRows = (rClip.IntersectRect(rView, pTable) || bPrinting) ? pTable->GetRows() : 0; nRow < nRows; nRow++)
	{
		for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
		{
			if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
			{
				if (((rCell = pCell->GetPosition()).bottom >= rView.top  &&  rCell.top <= rView.bottom  &&  rCell.right >= rView.left  &&  rCell.left <= rView.right) || bPrinting)
				{
					for (pCell->GetBorder(TAS_BORDER_LEFT, nBorderSize, nBorderStyle, nBorderColor), sPen.lbStyle = PS_SOLID, sPen.lbColor = nBorderColor, sPen.lbHatch = (ULONG_PTR)NULL, pDC->FillSolidRect(rCell.left, rCell.top, 1, rCell.Height(), (nBkgndColor = (pCell != GetActiveCell() || (pCell->GetFormat() & TAS_TYPE_TEXT) || (pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_SPINBOX) || (pCell->GetFormat() & TAS_TYPE_TIMESPINBOX) || (pCell->GetFormat() & TAS_TYPE_SUBTABLE)) ? ((pCell != GetActiveCell() || (pCell->GetFormat() & TAS_TYPE_TEXT) || (pCell->GetFormat() & TAS_TYPE_SUBTABLE)) ? ((pTable->GetSelRow() == pCell->y || pTable->GetSelColumn() == pCell->x || (pTable->GetSelCell(nSel[0], nSel[1]) && pCell->x == nSel[1] && pCell->y == nSel[0])) ? pTable->GetSelColor() : pCell->GetBackgroundColor()) : GetSysColor(COLOR_WINDOW)) : GetSysColor(COLOR_3DFACE))), pDC->FillSolidRect(rCell.left, rCell.top, rCell.Width(), 1, nBkgndColor), pDC->FillSolidRect(rCell.right - 1, rCell.top, 1, rCell.Height(), nBkgndColor), pDC->FillSolidRect(rCell.left, rCell.bottom - 1, rCell.Width(), 1, nBkgndColor), pDC->FillSolidRect(((pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE) ? rCell : CRect(0, 0, 0, 0), nBkgndColor); cBorderPen.CreatePen(nBorderStyle | PS_GEOMETRIC | PS_ENDCAP_SQUARE, nBorderSize, &sPen); )
					{
						if ((pOldPen = (CPen *)pDC->SelectObject(&cBorderPen)))
						{
							pDC->MoveTo(rCell.left, rCell.bottom);
							pDC->LineTo(rCell.left, rCell.top);
							pDC->SelectObject(pOldPen);
						}
						cBorderPen.DeleteObject();
						break;
					}
					for (pCell->GetBorder(TAS_BORDER_TOP, nBorderSize, nBorderStyle, nBorderColor), sPen.lbStyle = PS_SOLID, sPen.lbColor = nBorderColor, sPen.lbHatch = (ULONG_PTR)NULL; cBorderPen.CreatePen(nBorderStyle | PS_GEOMETRIC | PS_ENDCAP_SQUARE, nBorderSize, &sPen); )
					{
						if ((pOldPen = (CPen *)pDC->SelectObject(&cBorderPen)))
						{
							pDC->MoveTo(rCell.left, rCell.top);
							pDC->LineTo(rCell.right, rCell.top);
							pDC->SelectObject(pOldPen);
						}
						cBorderPen.DeleteObject();
						break;
					}
					for (pCell->GetBorder(TAS_BORDER_RIGHT, nBorderSize, nBorderStyle, nBorderColor), sPen.lbStyle = PS_SOLID, sPen.lbColor = nBorderColor, sPen.lbHatch = (ULONG_PTR)NULL; cBorderPen.CreatePen(nBorderStyle | PS_GEOMETRIC | PS_ENDCAP_SQUARE, nBorderSize, &sPen); )
					{
						if ((pOldPen = (CPen *)pDC->SelectObject(&cBorderPen)))
						{
							pDC->MoveTo(rCell.right, rCell.top);
							pDC->LineTo(rCell.right, rCell.bottom);
							pDC->SelectObject(pOldPen);
						}
						cBorderPen.DeleteObject();
						break;
					}
					for (pCell->GetBorder(TAS_BORDER_BOTTOM, nBorderSize, nBorderStyle, nBorderColor), sPen.lbStyle = PS_SOLID, sPen.lbColor = nBorderColor, sPen.lbHatch = (ULONG_PTR)NULL; cBorderPen.CreatePen(nBorderStyle | PS_GEOMETRIC | PS_ENDCAP_SQUARE, nBorderSize, &sPen); )
					{
						if ((pOldPen = (CPen *)pDC->SelectObject(&cBorderPen)))
						{
							pDC->MoveTo(rCell.left, rCell.bottom);
							pDC->LineTo(rCell.right, rCell.bottom);
							pDC->SelectObject(pOldPen);
						}
						cBorderPen.DeleteObject();
						break;
					}
					if (pCell != GetActiveCell()) pCell->Draw(pDC);
					continue;
				}
				if (rCell.top > rView.bottom  &&  !bPrinting) break;
			}
		}
		if (nCol < nCols) break;
	}
}

VOID CTCOnBoardMemoryImagesTableView::DoSelectAll()
{
	return;
}

BOOL CTCOnBoardMemoryImagesTableView::CanSelectAll() CONST
{
	return FALSE;
}

VOID CTCOnBoardMemoryImagesTableView::UnSelectAll()
{
	INT  nTable;
	INT  nTables;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), SetActiveCell(); nTable < nTables; nTable++)
	{
		if ((pTable = m_pTables->GetAt(nTable)))
		{
			pTable->SetSelCell();
			continue;
		}
	}
	DrawTables();
}

VOID CTCOnBoardMemoryImagesTableView::DoCutSel()
{
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->Cut();
				return;
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				pRichEditCtrl->Cut();
				return;
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				pComboBox->Cut();
				return;
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::CanCutSel() CONST
{
	INT  nSel[2];
	WORD  wSel[1];
	DWORD  dwSel[1];
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->GetSel(nSel[0], nSel[1]);
				return((nSel[0] < nSel[1]) ? CheckPrivilege() : FALSE);
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				wSel[0] = pRichEditCtrl->GetSelectionType();
				return((wSel[0] != SEL_EMPTY) ? CheckPrivilege() : FALSE);
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				dwSel[0] = pComboBox->GetEditSel();
				return((LOWORD(dwSel[0]) < HIWORD(dwSel[0])) ? CheckPrivilege() : FALSE);
			}
		}
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesTableView::DoCopySel()
{
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->Copy();
				return;
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				pRichEditCtrl->Copy();
				return;
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				pComboBox->Copy();
				return;
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::CanCopySel() CONST
{
	INT  nSel[2];
	WORD  wSel[1];
	DWORD  dwSel[1];
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->GetSel(nSel[0], nSel[1]);
				return((nSel[0] < nSel[1]) ? CheckPrivilege() : FALSE);
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				wSel[0] = pRichEditCtrl->GetSelectionType();
				return((wSel[0] != SEL_EMPTY) ? CheckPrivilege() : FALSE);
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				dwSel[0] = pComboBox->GetEditSel();
				return((LOWORD(dwSel[0]) < HIWORD(dwSel[0])) ? CheckPrivilege() : FALSE);
			}
		}
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesTableView::DoPasteSel()
{
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->Paste();
				return;
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				pRichEditCtrl->Paste();
				return;
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				pComboBox->Paste();
				return;
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::CanPasteSel() CONST
{
	CTableViewCell  *pCell;

	return(((pCell = GetActiveCell()) && ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)) && IsClipboardFormatAvailable(CF_TEXT)) ? CheckPrivilege() : FALSE);
}

VOID CTCOnBoardMemoryImagesTableView::DoDeleteSel()
{
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->Clear();
				return;
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				pRichEditCtrl->Clear();
				return;
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				pComboBox->Clear();
				return;
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::CanDeleteSel() CONST
{
	INT  nSel[2];
	WORD  wSel[1];
	DWORD  dwSel[1];
	CEdit  *pEdit;
	CComboBox  *pComboBox;
	CRichEditCtrl  *pRichEditCtrl;
	CTableViewCell  *pCell;

	if ((pCell = GetActiveCell()))
	{
		if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
		{
			if ((pEdit = (CEdit *)pCell->GetControl()))
			{
				pEdit->GetSel(nSel[0], nSel[1]);
				return((nSel[0] < nSel[1]) ? CheckPrivilege() : FALSE);
			}
		}
		if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
		{
			if ((pRichEditCtrl = (CRichEditCtrl *)pCell->GetControl()))
			{
				wSel[0] = pRichEditCtrl->GetSelectionType();
				return((wSel[0] != SEL_EMPTY) ? CheckPrivilege() : FALSE);
			}
		}
		if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
		{
			if ((pComboBox = (CComboBox *)pCell->GetControl()))
			{
				dwSel[0] = pComboBox->GetEditSel();
				return((LOWORD(dwSel[0]) < HIWORD(dwSel[0])) ? CheckPrivilege() : FALSE);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::EnableUndo(BOOL bEnable)
{
	return((!bEnable  &&  m_cUndoLists.Lock()) || (bEnable  &&  m_cUndoLists.Unlock()));
}

VOID CTCOnBoardMemoryImagesTableView::DoUndo()
{
	INT  nCount;
	BOOL  bFocus;
	CString  szText;
	CTableViewCell  *pCell;
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (m_cUndoLists.Lock(), m_bUndo[0] = TRUE, nCount = ((bFocus = (GetActiveCell() != (CTableViewCell *)NULL))) ? 0 : -1; m_cUndoLists.CanUndo(bFocus); )
	{
		do
		{
			if (m_cUndoLists.Undo(&cUndoItem, bFocus))
			{
				for (ConvertUndoItem(&cUndoItem, TRUE); nCount >= 0; )
				{
					nCount++;
					break;
				}
				bFocus = TRUE;
				continue;
			}
			break;
		} while (m_cUndoLists.CanCollectUndo());
		if (nCount > 1)
		{
			nCount = -1;
			continue;
		}
		break;
	}
	for (m_bUndo[0] = FALSE; !CanUndo(); )
	{
		if ((pCell = GetActiveCell()) && m_cUndoLists.Undo(pCell, szText)) SetActiveCell(szText);
		break;
	}
	m_cUndoLists.Unlock();
	DrawTables();
}

BOOL CTCOnBoardMemoryImagesTableView::IsUndoing() CONST
{
	return m_bUndo[0];
}

BOOL CTCOnBoardMemoryImagesTableView::CanUndo() CONST
{
	return((m_cUndoLists.CanUndo(GetActiveCell() != (CTableViewCell *)NULL)) ? CheckPrivilege() : FALSE);
}

VOID CTCOnBoardMemoryImagesTableView::DoRedo()
{
	BOOL  bFocus;
	CString  szText;
	CTableViewCell  *pCell;
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (m_cUndoLists.Lock(), m_bUndo[1] = TRUE; m_cUndoLists.CanRedo((bFocus = (GetActiveCell() != (CTableViewCell *)NULL))); )
	{
		do
		{
			if (m_cUndoLists.Redo(&cUndoItem, bFocus))
			{
				ConvertUndoItem(&cUndoItem, FALSE);
				bFocus = TRUE;
				continue;
			}
			break;
		} while (m_cUndoLists.CanCollectRedo());
		break;
	}
	for (m_bUndo[1] = FALSE; !CanRedo(); )
	{
		if ((pCell = GetActiveCell()) && m_cUndoLists.Redo(pCell, szText)) SetActiveCell(szText);
		break;
	}
	m_cUndoLists.Unlock();
	DrawTables();
}

BOOL CTCOnBoardMemoryImagesTableView::IsRedoing() CONST
{
	return m_bUndo[1];
}

BOOL CTCOnBoardMemoryImagesTableView::CanRedo() CONST
{
	return((m_cUndoLists.CanRedo(GetActiveCell() != (CTableViewCell *)NULL)) ? CheckPrivilege() : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::ClearUndo(LPCTSTR pszMemoryArea, LPCTSTR pszImage, LPCTSTR pszVersion)
{
	return m_cUndoLists.Remove(pszMemoryArea, pszImage, pszVersion);
}
VOID CTCOnBoardMemoryImagesTableView::ClearUndo()
{
	m_cUndoLists.Reset();
}

BOOL CTCOnBoardMemoryImagesTableView::DoEmpty()
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CRect  rTable;
	CUIntArray  nTypes;
	CUIntArray  nWidths;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = EnumTables(szTables, nTypes, FALSE, TRUE), SetName(EMPTYSTRING), SetActiveCell(), ClearUndo(), EnableUndo(FALSE); nTable < nTables; nTable++)
	{
		if ((pTable = FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
		{
			for (nRow = 0, nRows = pTable->GetRows(), pTable->SetSelCell(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						if (((pTable->GetType() == TAS_TABLE_NORMAL && (pCell->GetFormat() & TAS_TYPE_TEXT) != TAS_TYPE_TEXT) || pTable->GetType() == TAS_TABLE_LIST) && (pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE && (!pTable->HasTitle() || nRow > 0))
						{
							pCell->SetText(EMPTYSTRING);
							continue;
						}
					}
				}
				if (pTable->GetType() == TAS_TABLE_LIST && ((pTable->HasTitle() && pTable->GetRows() > 2 && nRow > 0) || (!pTable->HasTitle() && pTable->GetRows() > 1)) && pTable->RemoveRow(nRow))
				{
					nRows--;
					nRow--;
				}
			}
		}
	}
	for (nTable = 0; nTable < nTables; nTable++)
	{
		if ((pTable = FindTable(szTables.GetAt(nTable))))
		{
			if (GetTableLayout(pTable->GetName(), nWidths))
			{
				ProtectTableFieldData(pTable->GetName());
				RecalcTable(pTable, nWidths, TRUE, FALSE);
				continue;
			}
		}
		break;
	}
	ArrangeTables(0);
	EnableUndo(TRUE);
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::IsEmpty() CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	CUIntArray  nTypes;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = EnumTables(szTables, nTypes, FALSE, TRUE); nTable < nTables; nTable++)
	{
		if ((pTable = FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
		{
			for (nRow = 0, nRows = pTable->GetRows(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						if (pCell->GetFormat() & TAS_TYPE_SUBTABLE) continue;
						if (pCell->GetFormat() & TAS_TYPE_TEXT) continue;
						if (!pCell->GetText().IsEmpty()) break;
					}
				}
				if (nCol < nCols) break;
			}
			if (nRow < nRows) break;
		}
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::Print(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CMetaFileDC &cMetaDC)
{
	UINT  nCount;
	UINT  nRange[2];

	return((pJobInfo->GetPrintByRange(nRange[0], nRange[1])) ? PrintTable(GetName(), nRange[0], nRange[1], cMetaDC) : ((pJobInfo->GetPrintBySide(nCount)) ? PrintTable(GetName(), (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) ? nCount : -1, (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) ? nCount : -1, cMetaDC) : PrintTable(GetName(), -1, -1, cMetaDC)));
}

BOOL CTCOnBoardMemoryImagesTableView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesTableView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCOnBoardMemoryImagesTableView::Check(CString &szError) CONST
{
	return CheckTableFieldData(GetName(), szError, FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::IsModified() CONST
{
	CString  szError;

	return CheckTableFieldData(GetName(), szError, TRUE);
}

CLocaleDialog *CTCOnBoardMemoryImagesTableView::GetParent() CONST
{
	return((CLocaleDialog *)CTableView::GetParent());
}

VOID CTCOnBoardMemoryImagesTableView::BeginTableUpdate()
{
	CDC  cDC;
	CRect  rView;
	CBitmap  *pOldBitmap;
	CClientDC  cClientDC(this);

	for (; GetName() != STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME); )
	{
		BeginWaitCursor();
		break;
	}
	for (GetClientRect(rView), m_cImage.DeleteObject(), m_bImage = FALSE, m_cUndoLists.Lock(); cDC.CreateCompatibleDC(&cClientDC); )
	{
		if (m_cImage.CreateCompatibleBitmap(&cClientDC, rView.Width(), rView.Height()))
		{
			if ((pOldBitmap = cDC.SelectObject(&m_cImage)) != (CBitmap *)NULL)
			{
				cDC.BitBlt(0, 0, rView.Width(), rView.Height(), &cClientDC, 0, 0, SRCCOPY);
				cDC.SelectObject(pOldBitmap);
				cDC.DeleteDC();
				m_bImage = TRUE;
				return;
			}
			m_cImage.DeleteObject();
		}
		cDC.DeleteDC();
		break;
	}
}

VOID CTCOnBoardMemoryImagesTableView::EndTableUpdate()
{
	if (m_bImage)
	{
		m_cImage.DeleteObject();
		m_bImage = FALSE;
	}
	for (m_cUndoLists.Unlock(); GetName() != STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME); )
	{
		EndWaitCursor();
		break;
	}
}

VOID CTCOnBoardMemoryImagesTableView::RefreshTables(BOOL bAll)
{
	RefreshTables(m_szTables, bAll);
}
VOID CTCOnBoardMemoryImagesTableView::RefreshTables(CONST CStringArray &szTables, BOOL bAll)
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
	{
		RefreshTable(szTables.GetAt(nTable), (bAll) ? -1 : 0);
		continue;
	}
	ArrangeTables(0);
}
VOID CTCOnBoardMemoryImagesTableView::RefreshTables(CONST CTableViewObject *pTable, BOOL bAll)
{
	INT  nTable;
	INT  nTables;
	CRect  rTable;
	CString  szTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
	{
		if (GetTablePosition(m_pTables->GetAt(nTable)->GetName(), szTable, rTable) && pTable->GetName() == szTable)
		{
			RefreshTable(m_pTables->GetAt(nTable), GetName(), (bAll) ? -1 : 0);
			continue;
		}
	}
	ArrangeTables(0);
}
VOID CTCOnBoardMemoryImagesTableView::RefreshTables(UINT nControlID)
{
	CStringArray  szTables;

	if (EnumTableUpdates(nControlID, szTables) > 0)
	{
		RefreshTables(szTables, nControlID);
		return;
	}
}
VOID CTCOnBoardMemoryImagesTableView::RefreshTables(CONST CStringArray &szTables, UINT nControlID)
{
	INT  nTable;
	INT  nTables;
	CString  szValue;
	CTableViewObject  *pTable;
	CTableViewCell  *pCell;

	for (nTable = 0, nTables = (nControlID != 0 && nControlID != (UINT)-1) ? (INT)m_szTables.GetSize() : 0; nTable < nTables; nTable++)
	{
		if ((pCell = ((pTable = FindTable(m_szTables.GetAt(nTable)))) ? pTable->FindCell(nControlID) : (CTableViewCell *)NULL))
		{
			szValue = (pTable->GetType() == TAS_TABLE_LIST) ? (((pCell = pTable->FindCell(max(pTable->GetSelRow(), (pTable->HasTitle()) ? 1 : 0), pCell->x))) ? pCell->GetText() : EMPTYSTRING) : pCell->GetText();
			break;
		}
	}
	for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
		{
			RefreshTable(pTable, (!nControlID || nControlID == (UINT)-1) ? GetName() : szValue, nControlID);
			continue;
		}
	}
	ArrangeTables(0);
}

VOID CTCOnBoardMemoryImagesTableView::RefreshTable(LPCTSTR pszTable, BOOL bAll)
{
	CTableViewObject  *pTable;

	if ((pTable = FindTable(pszTable)))
	{
		RefreshTable(pTable, GetName(), (bAll) ? -1 : 0);
		return;
	}
}
VOID CTCOnBoardMemoryImagesTableView::RefreshTable(CTableViewObject *pTable, LPCTSTR pszValue, UINT nControlID)
{
	CString  szTable;
	CStringArray  szContents;

	for (EnableUndo(FALSE); GetTableUpdateContents(pTable->GetName(), nControlID, pszValue, szTable, szContents); )
	{
		UpdateTableContents(pTable, szContents);
		break;
	}
	EnableUndo(TRUE);
}

VOID CTCOnBoardMemoryImagesTableView::RepositionTables(CONST CTableViewObjects *pTables, LPCTSTR pszTable, INT nOffset)
{
	INT  nTable;
	INT  nTables;
	CRect  rTable;
	CString  szTable;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = (nOffset != 0) ? (INT)pTables->GetSize() : 0; nTable < nTables; nTable++)
	{
		if ((pTable = pTables->GetAt(nTable)) && GetTablePosition(pTable->GetName(), szTable, rTable) && !szTable.Compare(pszTable))
		{
			RepositionTables(pTables, pTable->GetName(), nOffset);
			pTable->OffsetCells(0, nOffset);
			pTable->OffsetRect(0, nOffset);
		}
	}
}
VOID CTCOnBoardMemoryImagesTableView::RepositionTables(CONST CTableViewObjects *pTables, LPCTSTR pszTable, CStringArray &szTables)
{
	INT  nTable;
	INT  nTables;
	INT  nOffset;
	CRect  rTable[3];
	CString  szTable;
	CTableViewObject  *pTable[2];

	if ((pTable[0] = pTables->GetAt(pTables->Find(pszTable))))
	{
		for (nTable = 0, nTables = (INT)szTables.GetSize(); nTable < nTables; nTable++)
		{
			if (!szTables.GetAt(nTable).Compare(pszTable)) break;
			continue;
		}
		for (; nTable == nTables; )
		{
			szTables.Add(pszTable);
			break;
		}
		for (nTable = 0, nTables = (INT)szTables.GetSize(), rTable[0].SetRect(pTable[0]->TopLeft(), pTable[0]->BottomRight()), rTable[0].InflateRect(DATABASETABLEVIEW_TABLE_DISTANCE / 2 - 1, DATABASETABLEVIEW_TABLE_DISTANCE / 2 - 1); nTable < nTables; nTable++)
		{
			if ((pTable[1] = pTables->GetAt(pTables->Find(szTables.GetAt(nTable)))) && pTable[0]->GetName() != pTable[1]->GetName() && pTable[1]->IsVisible())
			{
				rTable[1].SetRect(pTable[1]->TopLeft(), pTable[1]->BottomRight());
				rTable[1].InflateRect(DATABASETABLEVIEW_TABLE_DISTANCE / 2 - 1, 0);
				rTable[1].InflateRect(0, DATABASETABLEVIEW_TABLE_DISTANCE / 2 - 1);
				if (rTable[2].IntersectRect(rTable[0], rTable[1]))
				{
					if (CalcTableOrder(pTables, pTable[0]->GetName()) > CalcTableOrder(pTables, pTable[1]->GetName()))
					{
						if ((nOffset = pTable[1]->bottom - pTable[0]->top + DATABASETABLEVIEW_TABLE_DISTANCE) != 0)
						{
							RepositionTables(pTables, pTable[0]->GetName(), nOffset);
							pTable[0]->OffsetCells(0, nOffset);
							pTable[0]->OffsetRect(0, nOffset);
							rTable[0].OffsetRect(0, nOffset);
							nTable = -1;
						}
						continue;
					}
					RepositionTables(pTables, pTable[1]->GetName(), szTables);
				}
			}
		}
		for (nTable = 0, nTables = (INT)m_szTables.GetSize(); nTable < nTables; nTable++)
		{
			if ((pTable[1] = pTables->GetAt(pTables->Find(m_szTables.GetAt(nTable)))) && pTable[0]->GetName() != pTable[1]->GetName() && pTable[1]->IsVisible())
			{
				if (GetTablePosition(pTable[1]->GetName(), szTable, rTable[2]) && !szTable.Compare(pszTable) && rTable[2].left*rTable[2].top == 0 && rTable[2].right*rTable[2].bottom == 0)
				{
					RepositionTables(pTables, pTable[1]->GetName(), szTables);
					continue;
				}
			}
		}
	}
}

BOOL CTCOnBoardMemoryImagesTableView::InsertTableRow(CTableViewObject *pTable, INT nRow)
{
	INT  nCol;
	INT  nCols;
	INT  nRows;
	INT  nMargin;
	INT  nSize[2];
	INT  nStyle[2];
	BOOL  bResize;
	BOOL  bVisible;
	CRect  rTable;
	CRect  rCell[2];
	LOGFONT  lfFont[2];
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CUIntArray  nIDs;
	CUIntArray  nFormats;
	CStringArray  szItems[2];
	CStringArray  szDataTypes;
	CStringArray  szDescriptions;
	CTableViewCell  *pCell[2];
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (GetTableOutlineFonts(pTable->GetName(), &lfFont[0], &lfFont[1]); pTable->InsertRow(nRow) && GetTableContents(pTable->GetName(), GetName(), 1, szItems[0], szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible) && GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]); )
	{
		for (nCol = 0, nCols = pTable->GetColumns(), nRows = pTable->GetRows(), RecalcTableRow(pTable, nRow); nCol < nCols; nCol++)
		{
			if ((pCell[1] = ((pCell[0] = pTable->FindCell(0, nCol))) ? pTable->FindCell(nRow, nCol) : (CTableViewCell *)NULL))
			{
				if (pTable->GetType() == TAS_TABLE_LIST)
				{
					for (pCell[1]->SetFormat(nFormats.GetAt(nCol)), pCell[1]->SetControlID(nIDs.GetAt(nCol)), pCell[1]->SetBackgroundColor((nCol > 0) ? pCell[1]->GetBackgroundColor() : nFirstColumnColor); (pCell[1]->GetFormat() & TAS_TYPE_TIMESPINBOX) && szItems[0].GetSize() > 0 && nCol < ExtractTextItems(szItems[0].GetAt(0), szItems[1]); )
					{
						pCell[1]->SetText(szItems[1].GetAt(nCol));
						break;
					}
					if (pCell[1]->CreateControl())
					{
						EnumTableCellValues(pTable, pCell[1], pCell[0]->GetText());
						LimitTableCellValues(pTable, pCell[1], pCell[0]->GetText());
					}
				}
				for (; pTable->GetType() == TAS_TABLE_NORMAL; )
				{
					pCell[1]->SetBackgroundColor((nRow != 1) ? pCell[1]->GetBackgroundColor() : nFirstRowColor);
					break;
				}
				for (pCell[1]->SetBackgroundColor((!pTable->HasTitle() || nRow > 0) ? pCell[1]->GetBackgroundColor() : nTitleRowColor), pCell[1]->SetBorder(TAS_BORDER_LEFT, (!nCol) ? nSize[0] : nSize[1], (!nCol) ? nStyle[0] : nStyle[1], (!nCol) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_TOP, (!nRow) ? nSize[0] : nSize[1], (!nRow) ? nStyle[0] : nStyle[1], (!nRow) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_RIGHT, (nCol == nCols - 1) ? nSize[0] : nSize[1], (nCol == nCols - 1) ? nStyle[0] : nStyle[1], (nCol == nCols - 1) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_BOTTOM, (nRow == nRows - 1) ? nSize[0] : nSize[1], (nRow == nRows - 1) ? nStyle[0] : nStyle[1], (nRow == nRows - 1) ? nColor[0] : nColor[1]), pCell[1]->SetFont(&lfFont[1]), rCell[0] = pCell[0]->GetPosition(), rCell[1] = pCell[1]->GetPosition(), rCell[1].SetRect(rCell[0].left, rCell[1].top, rCell[0].right, rCell[1].bottom), pCell[1]->SetPosition(rCell[1]), nMargin = CalcDefaultTableMargin(pTable); !nCol || nCol == nCols - 1; )
				{
					rCell[1].SetRect((!nCol) ? (rCell[1].left + nSize[0] + nMargin) : (rCell[1].left + nMargin), rCell[1].top + nSize[1], (nCol > 0) ? (rCell[1].right - nSize[0] - nMargin) : (rCell[1].right - nMargin), (nRow == nRows - 1) ? (rCell[1].bottom - (nSize[0] + 1) / 2) : (rCell[1].bottom - nSize[1]));
					pCell[1]->SetInnerPosition(rCell[1]);
					break;
				}
				if (nCol > 0 && nCol < nCols - 1)
				{
					rCell[1].DeflateRect(nMargin, nSize[1], nMargin, (nRow == nRows - 1) ? ((nSize[0] + 1) / 2) : nSize[1]);
					pCell[1]->SetInnerPosition(rCell[1]);
				}
				continue;
			}
			break;
		}
		rTable = pTable->GetCellsBounds();
		rTable.InflateRect(0, 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0);
		pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom);
		cUndoItem.SetCell(pTable->GetName(), CPoint(-1, nRow + 1));
		m_cUndoLists.Add(&cUndoItem);
		return(nCol == nCols);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::RemoveTableRow(CTableViewObject *pTable, INT nRow)
{
	INT  nIndex;
	INT  nCount;
	INT  nTable;
	INT  nTables;
	INT  nMinRows;
	INT  nMaxRows;
	CRect  rTable;
	CString  szTable;
	CTableViewObject  *pFloatingTable;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
	{
		if ((pFloatingTable = m_pTables->GetAt(nTable)) && pFloatingTable->GetType() == TAS_TABLE_LIST  &&  GetTablePosition(pFloatingTable->GetName(), szTable, rTable) && pTable->GetName() == szTable && ((rTable.left == nRow  &&  !rTable.top) || (rTable.right == nRow  &&  !rTable.bottom)))
		{
			for (nIndex = 0, nCount = pFloatingTable->GetRows(), GetTableOutlineLimits(pFloatingTable->GetName(), nMinRows, nMaxRows); (!pFloatingTable->HasTitle() && nIndex < nCount) || (pFloatingTable->HasTitle() && nIndex < nCount - 1); nIndex++)
			{
				RemoveTableRow(pFloatingTable, nCount - nIndex - 1);
				nIndex--;
				nCount--;
			}
			for (nIndex = 0, nCount = nMinRows; nIndex < nCount - 1; nIndex++)
			{
				if (!InsertTableRow(pFloatingTable, (pFloatingTable->HasTitle()) ? (nIndex + 1) : nIndex)) break;
				continue;
			}
		}
	}
	DeleteTableFieldData(pTable->GetName(), (pTable->HasTitle()) ? (nRow - 1) : nRow);
	return DeleteTableRow(pTable, nRow);
}

BOOL CTCOnBoardMemoryImagesTableView::DeleteTableRow(CTableViewObject *pTable, INT nRow)
{
	INT  nCol;
	INT  nCols;
	INT  nSize[2];
	INT  nStyle[2];
	CRect  rTable;
	CString  szRow;
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CTableViewCell  *pCell;
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
	{
		if ((pCell = pTable->FindCell(nRow, nCol)))
		{
			for (; pCell == GetActiveCell(); )
			{
				SetActiveCell();
				break;
			}
			szRow += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
		}
	}
	if (pTable->RemoveRow(nRow))
	{
		if (GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]))
		{
			pTable->SetOuterBorder(nSize[0], nStyle[0], nColor[0]);
			pTable->SetInnerBorder(nSize[1], nStyle[1], nColor[1]);
			rTable = pTable->GetCellsBounds();
			rTable.InflateRect(0, 0, (!IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : 0, (!IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : 0);
			pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom);
			cUndoItem.SetInfo(pTable->GetName(), CPoint(-1, -nRow - 1), GetTableFloatingAlignment(pTable->GetName()), szRow, EMPTYSTRING);
			m_cUndoLists.Add(&cUndoItem);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::ResizeTableColumns(CTableViewObject *pTable, INT nCount)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nMargin;
	INT  nSize[2];
	INT  nStyle[2];
	BOOL  bResize;
	BOOL  bVisible;
	CRect  rTable;
	CRect  rCell[2];
	CString  szTitle;
	LOGFONT  lfFont[2];
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CUIntArray  nIDs;
	CUIntArray  nFormats;
	CStringArray  szItems[3];
	CStringArray  szDataTypes;
	CStringArray  szDescriptions;
	CTableViewCell  *pCell[2];

	for (nCol = pTable->GetColumns(), nCols = (GetTableTitle(pTable->GetName(), szTitle) && GetTableContents(pTable->GetName(), GetName(), -1, szItems[0], szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible) && GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1])) ? nCount : -1, GetTableOutlineFonts(pTable->GetName(), &lfFont[0], &lfFont[1]); nCol < nCols; nCol++)
	{
		for (nRow = 0, nRows = (pTable->InsertColumn(nCol)) ? pTable->GetRows() : -1, RecalcTableRow(pTable, nRow); nRow < nRows; nRow++)
		{
			if ((pCell[1] = ((pCell[0] = pTable->FindCell(0, nCol))) ? pTable->FindCell(nRow, nCol) : (CTableViewCell *)NULL))
			{
				if (nRow == 0 && szTitle.GetLength() > 0)
				{
					pCell[1]->SetFormat(TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
					pCell[1]->SetTextStyle(TRANSPARENT, m_nTableFontColors[0], m_nTableColors[0]);
					pCell[1]->SetText((nCol < szItems[1].GetSize()) ? szItems[1].GetAt(nCol) : EMPTYSTRING);
				}
				if (nRow > 0 || szTitle.IsEmpty())
				{
					if (pTable->GetType() == TAS_TABLE_LIST)
					{
						for (pCell[1]->SetFormat(nFormats.GetAt(nCol)), pCell[1]->SetControlID(nIDs.GetAt(nCol)), pCell[1]->SetBackgroundColor((nCol > 0) ? pCell[1]->GetBackgroundColor() : nFirstColumnColor); (pCell[1]->GetFormat() & TAS_TYPE_TIMESPINBOX) && nRow < szItems[0].GetSize() && nCol < ExtractTextItems(szItems[0].GetAt(nRow), szItems[2]); )
						{
							pCell[1]->SetText(szItems[2].GetAt(nCol));
							break;
						}
						if (pCell[1]->CreateControl())
						{
							EnumTableCellValues(pTable, pCell[1], pCell[0]->GetText());
							LimitTableCellValues(pTable, pCell[1], pCell[0]->GetText());
						}
					}
					for (; pTable->GetType() == TAS_TABLE_NORMAL; )
					{
						pCell[1]->SetBackgroundColor((nRow != 1) ? pCell[1]->GetBackgroundColor() : nFirstRowColor);
						break;
					}
				}
				for (pCell[1]->SetBackgroundColor((!pTable->HasTitle() || nRow > 0) ? pCell[1]->GetBackgroundColor() : nTitleRowColor), pCell[1]->SetBorder(TAS_BORDER_LEFT, (!nCol) ? nSize[0] : nSize[1], (!nCol) ? nStyle[0] : nStyle[1], (!nCol) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_TOP, (!nRow) ? nSize[0] : nSize[1], (!nRow) ? nStyle[0] : nStyle[1], (!nRow) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_RIGHT, (nCol == nCols - 1) ? nSize[0] : nSize[1], (nCol == nCols - 1) ? nStyle[0] : nStyle[1], (nCol == nCols - 1) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_BOTTOM, (nRow == nRows - 1) ? nSize[0] : nSize[1], (nRow == nRows - 1) ? nStyle[0] : nStyle[1], (nRow == nRows - 1) ? nColor[0] : nColor[1]), pCell[1]->SetFont(&lfFont[1]), rCell[0] = pCell[0]->GetPosition(), rCell[1] = pCell[1]->GetPosition(), rCell[1].SetRect(rCell[0].left, rCell[1].top, rCell[0].right, rCell[1].bottom), pCell[1]->SetPosition(rCell[1]), nMargin = CalcDefaultTableMargin(pTable); !nCol || nCol == nCols - 1; )
				{
					rCell[1].SetRect((!nCol) ? (rCell[1].left + nSize[0] + nMargin) : (rCell[1].left + nMargin), rCell[1].top + nSize[1], (nCol > 0) ? (rCell[1].right - nSize[0] - nMargin) : (rCell[1].right - nMargin), (nRow == nRows - 1) ? (rCell[1].bottom - (nSize[0] + 1) / 2) : (rCell[1].bottom - nSize[1]));
					pCell[1]->SetInnerPosition(rCell[1]);
					break;
				}
				if (nCol > 0 && nCol < nCols - 1)
				{
					rCell[1].DeflateRect(nMargin, nSize[1], nMargin, (nRow == nRows - 1) ? ((nSize[0] + 1) / 2) : nSize[1]);
					pCell[1]->SetInnerPosition(rCell[1]);
				}
				continue;
			}
			break;
		}
		if (nRow != nRows) break;
	}
	for (nCols = (nCol == nCols) ? pTable->GetColumns() : -1; nCols > nCount; nCol = nCols = nCols - 1)
	{
		if (!pTable->RemoveColumn(nCols - 1))
		{
			nCols = -1;
			break;
		}
	}
	rTable = pTable->GetCellsBounds();
	rTable.InflateRect(0, 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0);
	pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom);
	return((nCol == nCols) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesTableView::InsertTableColumn(CTableViewObject *pTable, INT nCol)
{
	INT  nRow;
	INT  nRows;
	INT  nCols;
	INT  nMargin;
	INT  nSize[2];
	INT  nStyle[2];
	BOOL  bResize;
	BOOL  bVisible;
	CRect  rTable;
	CRect  rCell[2];
	CString  szTitle;
	LOGFONT  lfFont[2];
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CUIntArray  nIDs;
	CUIntArray  nFormats;
	CStringArray  szItems[3];
	CStringArray  szDataTypes;
	CStringArray  szDescriptions;
	CTableViewCell  *pCell[2];
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (GetTableOutlineFonts(pTable->GetName(), &lfFont[0], &lfFont[1]); pTable->InsertColumn(nCol) && GetTableTitle(pTable->GetName(), szTitle) && GetTableContents(pTable->GetName(), GetName(), -1, szItems[0], szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible) && GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]); )
	{
		for (nRow = 0, nRows = pTable->GetRows(), nCols = pTable->GetColumns(), RecalcTableRow(pTable, nRow), ExtractTextItems(szTitle, szItems[1]); nRow < nRows; nRow++)
		{
			if ((pCell[1] = ((pCell[0] = pTable->FindCell(0, nCol))) ? pTable->FindCell(nRow, nCol) : (CTableViewCell *)NULL))
			{
				if (nRow == 0 && szTitle.GetLength() > 0)
				{
					pCell[1]->SetFormat(TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
					pCell[1]->SetTextStyle(TRANSPARENT, m_nTableFontColors[0], m_nTableColors[0]);
					pCell[1]->SetText((nCol < szItems[1].GetSize()) ? szItems[1].GetAt(nCol) : EMPTYSTRING);
				}
				if (nRow > 0 || szTitle.IsEmpty())
				{
					if (pTable->GetType() == TAS_TABLE_LIST)
					{
						for (pCell[1]->SetFormat((nCol < nFormats.GetSize()) ? nFormats.GetAt(nCol) : ((nFormats.GetSize() > 0) ? nFormats.GetAt(nFormats.GetUpperBound()) : pCell[1]->GetFormat())), pCell[1]->SetControlID((nCol < nIDs.GetSize()) ? nIDs.GetAt(nCol) : ((nIDs.GetSize() > 0) ? nIDs.GetAt(nIDs.GetUpperBound()) : 0)), pCell[1]->SetBackgroundColor((nCol > 0) ? pCell[1]->GetBackgroundColor() : nFirstColumnColor); (pCell[1]->GetFormat() & TAS_TYPE_TIMESPINBOX) && nRow < szItems[0].GetSize() && nCol < ExtractTextItems(szItems[0].GetAt(nRow), szItems[2]); )
						{
							pCell[1]->SetText(szItems[2].GetAt(nCol));
							break;
						}
						if (pCell[1]->CreateControl())
						{
							EnumTableCellValues(pTable, pCell[1], pCell[0]->GetText());
							LimitTableCellValues(pTable, pCell[1], pCell[0]->GetText());
						}
					}
					for (; pTable->GetType() == TAS_TABLE_NORMAL; )
					{
						pCell[1]->SetBackgroundColor((nRow != 1) ? pCell[1]->GetBackgroundColor() : nFirstRowColor);
						break;
					}
				}
				for (pCell[1]->SetBackgroundColor((!pTable->HasTitle() || nRow > 0) ? pCell[1]->GetBackgroundColor() : nTitleRowColor), pCell[1]->SetBorder(TAS_BORDER_LEFT, (!nCol) ? nSize[0] : nSize[1], (!nCol) ? nStyle[0] : nStyle[1], (!nCol) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_TOP, (!nRow) ? nSize[0] : nSize[1], (!nRow) ? nStyle[0] : nStyle[1], (!nRow) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_RIGHT, (nCol == nCols - 1) ? nSize[0] : nSize[1], (nCol == nCols - 1) ? nStyle[0] : nStyle[1], (nCol == nCols - 1) ? nColor[0] : nColor[1]), pCell[1]->SetBorder(TAS_BORDER_BOTTOM, (nRow == nRows - 1) ? nSize[0] : nSize[1], (nRow == nRows - 1) ? nStyle[0] : nStyle[1], (nRow == nRows - 1) ? nColor[0] : nColor[1]), pCell[1]->SetFont(&lfFont[1]), rCell[0] = pCell[0]->GetPosition(), rCell[1] = pCell[1]->GetPosition(), rCell[1].SetRect(rCell[0].left, rCell[1].top, rCell[0].right, rCell[1].bottom), pCell[1]->SetPosition(rCell[1]), nMargin = CalcDefaultTableMargin(pTable); !nCol || nCol == nCols - 1; )
				{
					rCell[1].SetRect((!nCol) ? (rCell[1].left + nSize[0] + nMargin) : (rCell[1].left + nMargin), rCell[1].top + nSize[1], (nCol > 0) ? (rCell[1].right - nSize[0] - nMargin) : (rCell[1].right - nMargin), (nRow == nRows - 1) ? (rCell[1].bottom - (nSize[0] + 1) / 2) : (rCell[1].bottom - nSize[1]));
					pCell[1]->SetInnerPosition(rCell[1]);
					break;
				}
				if (nCol > 0 && nCol < nCols - 1)
				{
					rCell[1].DeflateRect(nMargin, nSize[1], nMargin, (nRow == nRows - 1) ? ((nSize[0] + 1) / 2) : nSize[1]);
					pCell[1]->SetInnerPosition(rCell[1]);
				}
				continue;
			}
			break;
		}
		rTable = pTable->GetCellsBounds();
		rTable.InflateRect(0, 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0, (!IsSubTable(pTable)) ? (DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN + (DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE + 1) / 2) : 0);
		pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom);
		cUndoItem.SetCell(pTable->GetName(), CPoint(nCol + 1, -1));
		m_cUndoLists.Add(&cUndoItem);
		return(nRow == nRows);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::DeleteTableColumn(CTableViewObject *pTable, INT nCol)
{
	INT  nRow;
	INT  nRows;
	INT  nSize[2];
	INT  nStyle[2];
	CRect  rTable;
	CString  szCol;
	COLORREF  nColor[2];
	COLORREF  nTitleRowColor;
	COLORREF  nFirstRowColor;
	COLORREF  nFirstColumnColor;
	COLORREF  nTitleFontColor;
	COLORREF  nItemsFontColor;
	CTableViewCell  *pCell;
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	for (nRow = 0, nRows = pTable->GetRows(); nRow < nRows; nRow++)
	{
		if ((pCell = pTable->FindCell(nRow, nCol)))
		{
			for (; pCell == GetActiveCell(); )
			{
				SetActiveCell();
				break;
			}
			szCol += (nRow > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
		}
	}
	if (pTable->RemoveColumn(nCol))
	{
		if (GetTableOutline(pTable->GetName(), nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nSize[0], nStyle[0], nColor[0], nSize[1], nStyle[1], nColor[1]))
		{
			pTable->SetOuterBorder(nSize[0], nStyle[0], nColor[0]);
			pTable->SetInnerBorder(nSize[1], nStyle[1], nColor[1]);
			rTable = pTable->GetCellsBounds();
			rTable.InflateRect(0, 0, (!IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : 0, (!IsSubTable(pTable)) ? DATABASETABLEVIEW_TABLE_OUTERBORDERMARGIN : 0);
			pTable->SetRect(rTable.left, rTable.top, rTable.right, rTable.bottom);
			cUndoItem.SetInfo(pTable->GetName(), CPoint(-nCol - 1, -1), GetTableFloatingAlignment(pTable->GetName()), szCol, EMPTYSTRING);
			m_cUndoLists.Add(&cUndoItem);
			return TRUE;
		}
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesTableView::CalcTableOrder(CONST CTableViewObjects *pTables, LPCTSTR pszTable) CONST
{
	INT  nOrder;

	CalcTableOrder(pTables, pszTable, (nOrder = 0));
	return nOrder;
}
VOID CTCOnBoardMemoryImagesTableView::CalcTableOrder(CONST CTableViewObjects *pTables, LPCTSTR pszTable, INT &nOrder) CONST
{
	for (nOrder = 0; nOrder < (INT)m_szTables.GetSize(); nOrder++)
	{
		if (m_szTables.GetAt(nOrder) == pszTable) break;
		continue;
	}
}

INT CTCOnBoardMemoryImagesTableView::CalcDefaultTableWidth(CONST CTableViewObject *pTable)
{
	INT  nCol;
	INT  nCols;
	INT  nWidth;
	INT  nBorderSize[2];
	INT  nBorderStyle[2];
	COLORREF  nColor[7];
	CUIntArray  nWidths;
	CTableViewCell  *pCell;

	for (nCol = 0, nCols = (GetTableLayout(pTable->GetName(), nWidths) && GetTableOutline(pTable->GetName(), nColor[0], nColor[1], nColor[2], nColor[3], nColor[4], nBorderSize[0], nBorderStyle[0], nColor[5], nBorderSize[1], nBorderStyle[1], nColor[6])) ? (INT)min(pTable->GetColumns(), nWidths.GetSize()) : 0, nWidth = 2 * nBorderSize[0]; nCol < nCols; nCol++)
	{
		if ((pCell = pTable->FindCell(0, nCol)) != (CTableViewCell *)NULL)
		{
			nWidth += CalcDefaultCellWidth(pCell, nWidths.GetAt(nCol), 0);
			continue;
		}
	}
	return nWidth;
}

INT CTCOnBoardMemoryImagesTableView::CalcDefaultTableHeight(CONST CTableViewObject *pTable)
{
	INT  nRow;
	INT  nRows;
	INT  nHeight;
	INT  nBorderSize[2];
	INT  nBorderStyle[2];
	COLORREF  nColor[7];
	CUIntArray  nWidths;
	CTableViewCell  *pCell;

	for (nRow = 0, nRows = (GetTableLayout(pTable->GetName(), nWidths) && GetTableOutline(pTable->GetName(), nColor[0], nColor[1], nColor[2], nColor[3], nColor[4], nBorderSize[0], nBorderStyle[0], nColor[5], nBorderSize[1], nBorderStyle[1], nColor[6])) ? pTable->GetRows() : 0, nHeight = 2 * nBorderSize[0]; nRow < nRows; nRow++)
	{
		nHeight += ((pCell = pTable->FindCell(nRow, 0))) ? CalcDefaultCellHeight(pCell, pCell->GetInnerPosition().Width()) : 0;
		continue;
	}
	return nHeight;
}

INT CTCOnBoardMemoryImagesTableView::CalcDefaultTableMargin(CONST CTableViewObject *pTable)
{
	CDC  *pDC;
	CFont  cFont;
	CFont  *pOldFont;
	LOGFONT  lfFont[2];
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		for (GetTableOutlineFonts(pTable->GetName(), &lfFont[0], &lfFont[1]); cFont.CreateFontIndirect(&lfFont[0]); )
		{
			if ((pOldFont = pDC->SelectObject(&cFont)))
			{
				pDC->GetTextMetrics(&tmFont);
				pDC->SelectObject(pOldFont);
				cFont.DeleteObject();
				ReleaseDC(pDC);
				return tmFont.tmHeight / 4;
			}
			cFont.DeleteObject();
			break;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

INT CTCOnBoardMemoryImagesTableView::CalcDefaultCellWidth(CONST CTableViewCell *pCell, UINT nColumnWidth, INT nWidth)
{
	CDC  *pDC;
	CFont  cFont;
	CFont  *pOldFont;
	LOGFONT  lfFont[1];
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		for (pCell->GetFont(&lfFont[0]), ZeroMemory(&tmFont, sizeof(tmFont)); cFont.CreateFontIndirect(&lfFont[0]); )
		{
			if ((pOldFont = pDC->SelectObject(&cFont)))
			{
				pDC->GetTextMetrics(&tmFont);
				pDC->SelectObject(pOldFont);
			}
			break;
		}
		ReleaseDC(pDC);
		return((nColumnWidth != (UINT)-1) ? (((pCell->GetFormat() & TAS_TYPE_COMBOLISTBOX) || (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX) || (pCell->GetFormat() & TAS_TYPE_COMBOCOLORSBOX) || (pCell->GetFormat() & TAS_TYPE_COMBOLINESTYLESBOX) || (pCell->GetFormat() & TAS_TYPE_COMBOLINESYMBOLSBOX)) ? max(GetSystemMetrics(SM_CXVSCROLL) + (INT)nColumnWidth*tmFont.tmAveCharWidth, nWidth) : max((INT)nColumnWidth*tmFont.tmAveCharWidth, nWidth)) : nWidth);
	}
	return nWidth;
}

INT CTCOnBoardMemoryImagesTableView::CalcDefaultCellHeight(CONST CTableViewCell *pCell, INT nWidth)
{
	return CalcDefaultCellHeight(m_pTables, pCell, nWidth);
}
INT CTCOnBoardMemoryImagesTableView::CalcDefaultCellHeight(CONST CTableViewObjects *pTables, CONST CTableViewCell *pCell, INT nWidth)
{
	CDC  *pDC;
	INT  nSize[2];
	INT  nStyle[2];
	INT  nHeight[2];
	CRect  rCell[3];
	CFont  cFont[1];
	CFont  *pOldFont;
	LOGFONT  lfFont[1];
	COLORREF  nColor[2];
	TEXTMETRIC  tmFont;
	CTableViewObject  *pTable;

	if ((pDC = GetDC()))
	{
		for (pCell->GetFont(&lfFont[0]), ZeroMemory(&tmFont, sizeof(tmFont)), nHeight[0] = nHeight[1] = 0; cFont[0].CreateFontIndirect(&lfFont[0]); )
		{
			if ((pTable = (pCell->GetFormat() & TAS_TYPE_SUBTABLE) ? pTables->GetAt(pTables->Find(pCell->GetSubTable())) : (CTableViewObject *)NULL) && pTable->IsVisible())
			{
				pCell->GetBorder(TAS_BORDER_TOP, nSize[0], nStyle[0], nColor[0]);
				pCell->GetBorder(TAS_BORDER_BOTTOM, nSize[1], nStyle[1], nColor[1]);
				nHeight[0] = pTable->Height() + max(nSize[0] - 1, 0) / 2 + nSize[1] / 2 + 1;
				ReleaseDC(pDC);
				return nHeight[0];
			}
			if ((pOldFont = pDC->SelectObject(&cFont[0])))
			{
				for (rCell[0] = pCell->GetPosition(), rCell[1] = pCell->GetInnerPosition(), pCell->GetBorder(TAS_BORDER_TOP, nSize[0], nStyle[0], nColor[0]), pCell->GetBorder(TAS_BORDER_BOTTOM, nSize[1], nStyle[1], nColor[1]), pDC->GetTextMetrics(&tmFont), pDC->DrawText(((pCell->GetFormat() & TAS_TYPE_TIMESPINBOX) != TAS_TYPE_TIMESPINBOX) ? pCell->GetText() : EMPTYSTRING, (rCell[2] = CRect(0, 0, nWidth, 0)), ((pCell->GetFormat() & TAS_ALIGN_LEFT) ? DT_LEFT : 0) | ((pCell->GetFormat() & TAS_ALIGN_RIGHT) ? DT_RIGHT : 0) | ((pCell->GetFormat() & TAS_ALIGN_HCENTER) ? DT_CENTER : 0) | DT_CALCRECT | DT_TOP | DT_EXPANDTABS | DT_WORDBREAK | DT_WORD_ELLIPSIS | DT_NOPREFIX), nHeight[0] = (nWidth <= 0) ? CalcTableCellExtent(pCell).Height() : rCell[2].Height(), nHeight[0] = max(tmFont.tmHeight, nHeight[0]); TRUE; )
				{
					nHeight[1] = 2 * DATABASETABLEVIEW_TABLE_INNERBORDERMARGIN + max(nSize[0] - 1, 0) / 2 + nSize[1] / 2 + nHeight[0] + 1;
					nHeight[1] += rCell[1].top - rCell[0].top + rCell[0].bottom - rCell[1].bottom;
					break;
				}
				pDC->SelectObject(pOldFont);
			}
			nHeight[1] = max(pCell->GetMinHeight(), nHeight[1]);
			break;
		}
		ReleaseDC(pDC);
		return nHeight[1];
	}
	return 0;
}

INT CTCOnBoardMemoryImagesTableView::CalcCellTextFromPoint(CONST CTableViewCell *pCell, CONST POINT &ptCell)
{
	INT  nPos;
	CDC  *pDC;
	CRect  rText;
	CFont  cFont;
	CFont  *pOldFont;
	CSize  sizeText;
	CString  szText;
	LOGFONT  lfFont;

	if ((pDC = GetDC()))
	{
		for (pCell->GetFont(&lfFont), rText = pCell->GetInnerPosition(); (pOldFont = (cFont.CreateFontIndirect(&lfFont)) ? pDC->SelectObject(&cFont) : (CFont *)NULL); )
		{
			for (sizeText = ((nPos = (szText = pCell->GetText()).Find(SPACE)) >= 0) ? pDC->GetTextExtent(szText.Left(min(nPos + 1, szText.GetLength()))) : CSize(0, 0); sizeText.cx > 0 && sizeText.cy > 0 && (ptCell.x - rText.left) % sizeText.cx < (nPos*sizeText.cx) / (nPos + 1) && rText.left + sizeText.cx*((rText.Width() + sizeText.cx / (nPos + 1)) / sizeText.cx) > ptCell.x && rText.right > ptCell.x; )
			{
				if ((nPos = (((ptCell.y - rText.top) / sizeText.cy)*((rText.Width() + sizeText.cx / (nPos + 1)) / sizeText.cx) + (ptCell.x - rText.left) / sizeText.cx)*(nPos + 1)) < szText.GetLength())
				{
					pDC->SelectObject(pOldFont);
					ReleaseDC(pDC);
					return nPos;
				}
				break;
			}
			pDC->SelectObject(pOldFont);
			break;
		}
		ReleaseDC(pDC);
	}
	return -1;
}

VOID CTCOnBoardMemoryImagesTableView::AdjustCellStyle(CONST CTableViewObject *pTable, CTableViewCell *pCell)
{
	INT  nMode;
	COLORREF  nColor[2];

	if (pTable->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME) && pTable->GetCellText(0, pCell->x) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VERSUS))
	{
		for (pCell->GetTextStyle(nMode, nColor[0], nColor[1]), nColor[0] = (pCell->GetText() != STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE) && !pCell->GetText().IsEmpty() && pTable->GetSelRow() != pCell->y) ? VGA_COLOR_WHITE : GetSysColor(COLOR_WINDOWTEXT), nColor[1] = (pCell->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_UNCOMAPRABLEVALUE)) ? VGA_COLOR_LTYELLOW : nColor[1], nColor[1] = (pCell->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_EQUALVALUE)) ? VGA_COLOR_GREEN : nColor[1], nColor[1] = (pCell->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_SMALLERVALUE) || pCell->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_BIGGERVALUE)) ? VGA_COLOR_LTRED : nColor[1]; pCell->GetText().IsEmpty(); )
		{
			nColor[1] = GetSysColor(COLOR_WINDOW);
			break;
		}
		pCell->SetTextStyle(nMode, nColor[0], nColor[1]);
		pCell->SetBackgroundColor(nColor[1]);
	}
}

BOOL CTCOnBoardMemoryImagesTableView::ConvertUndoItem(LPCTSTR pszTable, CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bUpdates) CONST
{
	UINT  nControlID;
	CString  szTable;
	CString  szValue;

	if (GetTableContext(pszTable, szTable, nControlID, szValue))
	{
		pItem->SetAlignment(GetTableFloatingAlignment(pszTable));
		pItem->AllowUpdates(bUpdates);
		pItem->AllowActivation(FALSE);
		pItem->SetContext(szValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::ConvertUndoItem(CWnd *pControl, CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bUpdates) CONST
{
	INT  nTable;
	INT  nTables;
	INT  nSel[2];
	UINT  nControlID;
	DWORD  dwSel[2];
	CPoint  ptCell;
	CString  szItem;
	CString  szTable;
	CString  szValue;
	CHARRANGE  sRange;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CStringTools  cStringTools;

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), pItem->Clear(), pItem->AllowUpdates(bUpdates), pItem->AllowActivation(); nTable < nTables; nTable++)
	{
		if ((pCell = ((pTable = m_pTables->GetAt(nTable))) ? pTable->FindCell(pControl) : (CTableViewCell *)NULL) != (CTableViewCell *)NULL)
		{
			for (pItem->SetCell(pTable->GetName(), CPoint(pCell->x, pCell->y)); GetTableContext(pTable->GetName(), szTable, nControlID, szValue); )
			{
				pItem->SetContext(szValue);
				break;
			}
			pItem->SetAlignment(GetTableFloatingAlignment(pTable->GetName()));
			break;
		}
	}
	for (pItem->GetCell(szTable, ptCell); (pTable = m_pTables->GetAt(m_pTables->Find(szTable))); )
	{
		if ((pCell = pTable->FindCell(ptCell.y, ptCell.x)) != (CTableViewCell *)NULL)
		{
			if ((pCell->GetFormat() & TAS_TYPE_EDIT) || (pCell->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell->GetFormat() & TAS_TYPE_RAWNUMBEREDIT))
			{
				for (dwSel[0] = 0, dwSel[1] = (DWORD)-1; IsWindow(pControl->GetSafeHwnd()); )
				{
					pControl->SendMessage(EM_GETSEL, (WPARAM)&dwSel[0], (LPARAM)&dwSel[1]);
					break;
				}
				pItem->SetText(pCell->GetText());
				pItem->SetSel(dwSel[0], dwSel[1]);
				return TRUE;
			}
			if ((pCell->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell->GetFormat() & TAS_TYPE_TPLEDIT))
			{
				for (sRange.cpMin = 0, sRange.cpMax = -1; IsWindow(pControl->GetSafeHwnd()); )
				{
					pControl->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange);
					break;
				}
				pItem->SetText(pCell->GetText());
				pItem->SetSel(sRange.cpMin, sRange.cpMax);
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_COMBOLISTBOX)
			{
				pItem->SetText(pCell->GetText());
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_COMBOEDITBOX)
			{
				for (dwSel[0] = 0, dwSel[1] = (DWORD)-1; IsWindow(pControl->GetSafeHwnd()); )
				{
					pControl->SendMessage(CB_GETEDITSEL, (WPARAM)&dwSel[0], (LPARAM)&dwSel[1]);
					break;
				}
				pItem->SetText(pCell->GetText());
				pItem->SetSel(dwSel[0], dwSel[1]);
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_COMBOCOLORSBOX)
			{
				pItem->SetText(pCell->GetText());
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_COMBOLINESTYLESBOX)
			{
				pItem->SetText(pCell->GetText());
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_COMBOLINESYMBOLSBOX)
			{
				pItem->SetText(pCell->GetText());
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_SPINBOX)
			{
				for (nSel[0] = 0, nSel[1] = -1; IsWindow(pControl->GetSafeHwnd()); )
				{
					Spinbox_GetSel(pControl, nSel[0], nSel[1]);
					break;
				}
				pItem->SetInitialText(pCell->GetInitialText());
				pItem->SetText(pCell->GetText());
				pItem->SetSel(nSel[0], nSel[1]);
				return TRUE;
			}
			if (pCell->GetFormat() & TAS_TYPE_TIMESPINBOX)
			{
				for (nSel[0] = 0, nSel[1] = -1; IsWindow(pControl->GetSafeHwnd()); )
				{
					Timespinbox_GetSel(pControl, nSel[0], nSel[1]);
					break;
				}
				pItem->SetInitialText(pCell->GetInitialText());
				pItem->SetText(pCell->GetText());
				pItem->SetSel(nSel[0], nSel[1]);
				return TRUE;
			}
		}
		break;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::ConvertUndoItem(CONST CTCOnBoardMemoryImagesTableViewUndoItem *pItem, BOOL bUndo)
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nTable;
	INT  nTables;
	INT  nSel[2];
	UINT  nControlID;
	CWnd  *pControl;
	CRect  rTable;
	CPoint  ptCell;
	CString  szText;
	CString  szItem;
	CString  szTable;
	CString  szValue;
	CHARRANGE  sRange;
	CStringArray  szRow;
	CStringArray  szItems;
	CStringArray  szTables;
	CStringArray  szColumn;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[3];

	for (pItem->GetCell(szTable, ptCell); (pTable[0] = m_pTables->GetAt(m_pTables->Find(szTable))); )
	{
		if (pItem->GetAlignment() != GetTableFloatingAlignment(pTable[0]->GetName()) && pItem->GetAlignment() >= 0)
		{
			SetTableFloatingAlignment(pTable[0]->GetName(), pItem->GetAlignment());
			AlignFloatingTable(pTable[0]->GetName());
		}
		if ((pCell[0] = pTable[0]->FindCell(ptCell.y, ptCell.x)))
		{
			for (szText = pCell[0]->GetText(); ptCell.y >= pTable[0]->GetRows(); )
			{
				if (!pTable[0]->SetSelRow(pTable[0]->GetRows() - 1)) break;
				if (!DoInsertTableRowBelow()) break;
			}
			if ((pControl = (pCell[0]->IsEnabled() && !pItem->IsCollected() && pItem->CanActivate()) ? pCell[0]->GetControl() : (CWnd *)NULL))
			{
				for (SetActiveCell(pTable[0], pCell[0], (bUndo) ? TAS_ACTION_UNDO : TAS_ACTION_REDO); pTable[0]->GetType() == TAS_TABLE_LIST; )
				{
					SelectTableFieldData(pTable[0]->GetName(), CPoint(pCell[0]->x, pCell[0]->y));
					break;
				}
				for (pControl->ShowWindow(SW_SHOW), pCell[0]->SetText(pItem->GetText(), FALSE); (pCell[0]->GetFormat() & TAS_TYPE_TIMESPINBOX) != TAS_TYPE_TIMESPINBOX; )
				{
					pControl->SetFocus();
					break;
				}
				for (pItem->GetSel(nSel[0], nSel[1]); (pCell[0]->GetFormat() & TAS_TYPE_EDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell[0]->GetFormat() & TAS_TYPE_RAWNUMBEREDIT); )
				{
					pControl->SendMessage(EM_SETSEL, nSel[0], nSel[1]);
					break;
				}
				if ((pCell[0]->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_TPLEDIT))
				{
					sRange.cpMin = nSel[0];
					sRange.cpMax = nSel[1];
					pControl->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
				}
				for (; (pCell[0]->GetFormat() & TAS_TYPE_COMBOEDITBOX); )
				{
					pControl->SendMessage(CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(nSel[0], nSel[1]));
					break;
				}
				for (; pCell[0]->GetFormat() & TAS_TYPE_SPINBOX; )
				{
					Spinbox_SetSel(pControl, nSel[0], nSel[1]);
					break;
				}
				for (; pCell[0]->GetFormat() & TAS_TYPE_TIMESPINBOX; )
				{
					Timespinbox_SetSel(pControl, nSel[0], nSel[1]);
					break;
				}
			}
			if (pItem->IsCollected() || !pItem->CanActivate())
			{
				for (pCell[0]->SetText(pItem->GetText(), FALSE); pTable[0]->GetType() == TAS_TABLE_LIST && pItem->CanSelect(); )
				{
					SelectTableFieldData(pTable[0]->GetName(), CPoint(pCell[0]->x, pCell[0]->y));
					break;
				}
			}
			for (nTable = 0, nTables = pItem->CanUpdate()*EnumTableUpdates(pCell[0]->GetControlID(), szTables), UpdateTableFieldData(pCell[0]->GetControlID(), pItem->GetText()); nTable < nTables; nTable++)
			{
				if (GetTableUpdateContents(szTables.GetAt(nTable), pCell[0]->GetControlID(), pItem->GetText(), szItem, szItems))
				{
					if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))))
					{
						UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
			}
			ArrangeTables(0);
			return TRUE;
		}
		if (ptCell.x == -1)
		{
			for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[1] = m_pTables->GetAt(nTable)))
				{
					pTable[1]->SetSelRow();
					pTable[1]->SetSelColumn();
				}
			}
			for (pTable[0]->SetSelRow(min(pTable[0]->GetRows() - 1, abs(ptCell.y) - 1)), SetActiveCell(); (bUndo && ((ptCell.y < 0 && ((abs(ptCell.y) <= pTable[0]->GetRows() && DoInsertTableRowAbove()) || (abs(ptCell.y) > pTable[0]->GetRows() && DoInsertTableRowBelow()))) || (ptCell.y > 0 && DoDeleteTableRow()))) || (!bUndo && ((ptCell.y > 0 && ((abs(ptCell.y) <= pTable[0]->GetRows() && DoInsertTableRowAbove()) || (abs(ptCell.y) > pTable[0]->GetRows() && DoInsertTableRowBelow()))) || (ptCell.y < 0 && DoDeleteTableRow()))); )
			{
				for (nCol = 0, nCols = ((bUndo && ptCell.y < 0) || (!bUndo && ptCell.y > 0)) ? pTable[0]->GetColumns() : 0, ExtractTextItems(pItem->GetText(), szRow); nCol < nCols; nCol++)
				{
					if ((pCell[0] = pTable[0]->FindCell(abs(ptCell.y) - 1, nCol)) != (CTableViewCell *)NULL)
					{
						for (pCell[0]->SetText((szText = (nCol < szRow.GetSize()) ? (LPCTSTR)szRow.GetAt(nCol) : EMPTYSTRING), FALSE); IsWindow((pControl = pCell[0]->GetControl())->GetSafeHwnd()); )
						{
							for (sRange.cpMin = sRange.cpMax = 0; (pCell[0]->GetFormat() & TAS_TYPE_EDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell[0]->GetFormat() & TAS_TYPE_RAWNUMBEREDIT); )
							{
								pControl->SendMessage(EM_SETSEL, 0, -1);
								break;
							}
							if ((pCell[0]->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_TPLEDIT)) pControl->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
							if (pCell[0]->GetFormat() & TAS_TYPE_COMBOEDITBOX) pControl->SendMessage(CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
							if (pCell[0]->GetFormat() & TAS_TYPE_TIMESPINBOX) Timespinbox_SetSel(pControl, 0, -1);
							if (pCell[0]->GetFormat() & TAS_TYPE_SPINBOX) Spinbox_SetSel(pControl, 0, -1);
							break;
						}
						UpdateTableFieldData(pCell[0]->GetControlID(), szText);
					}
				}
				for (nCol = 0; nCol < nCols; nCol++)
				{
					if ((pCell[0] = pTable[0]->FindCell(abs(ptCell.y) - 1, nCol)))
					{
						for (nTable = 0, nTables = EnumTableUpdates(pCell[0]->GetControlID(), szTables); nTable < nTables; nTable++)
						{
							if (GetTableUpdateContents(szTables.GetAt(nTable), pCell[0]->GetControlID(), pCell[0]->GetText(), szItem, szItems))
							{
								if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))))
								{
									UpdateTableContents(pTable[1], szItems);
									continue;
								}
							}
						}
					}
				}
				for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[1] = m_pTables->GetAt(nTable)) && GetTablePosition(pTable[1]->GetName(), szTable, rTable) && pTable[0]->GetName() == szTable  &&  GetTableFloatingAlignment(pTable[1]->GetName()) >= 0)
					{
						for (GetTableContext(pTable[1]->GetName(), szTable, nControlID, szValue); GetTableUpdateContents(pTable[1]->GetName(), -1, szValue, szItem, szItems); )
						{
							UpdateTableContents(pTable[1], szItems);
							break;
						}
						continue;
					}
				}
				ArrangeTables(0);
				return TRUE;
			}
		}
		if (ptCell.y == -1)
		{
			for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[1] = m_pTables->GetAt(nTable)))
				{
					pTable[1]->SetSelRow();
					pTable[1]->SetSelColumn();
				}
			}
			for (pTable[0]->SetSelCell(0, min(pTable[0]->GetColumns() - 1, abs(ptCell.x) - 1)), SetActiveCell(); (bUndo && ((ptCell.x < 0 && ((abs(ptCell.x) <= pTable[0]->GetColumns() && DoInsertTableColumnBefore()) || (abs(ptCell.x) > pTable[0]->GetColumns() && DoInsertTableColumnAfter()))) || (ptCell.x > 0 && DoDeleteTableColumn()))) || (!bUndo && ((ptCell.x > 0 && ((abs(ptCell.x) <= pTable[0]->GetColumns() && DoInsertTableColumnBefore()) || (abs(ptCell.x) > pTable[0]->GetColumns() && DoInsertTableColumnAfter()))) || (ptCell.x < 0 && DoDeleteTableColumn()))); )
			{
				for (nRow = 0, nRows = ((bUndo && ptCell.x < 0) || (!bUndo && ptCell.x > 0)) ? pTable[0]->GetRows() : 0, ExtractTextItems(pItem->GetText(), szColumn); nRow < nRows; nRow++)
				{
					if ((pCell[0] = pTable[0]->FindCell(nRow, abs(ptCell.x) - 1)) != (CTableViewCell *)NULL)
					{
						for (pCell[0]->SetText((szText = (nRow < szColumn.GetSize()) ? (LPCTSTR)szColumn.GetAt(nRow) : EMPTYSTRING), FALSE); IsWindow((pControl = pCell[0]->GetControl())->GetSafeHwnd()); )
						{
							for (sRange.cpMin = sRange.cpMax = 0; (pCell[0]->GetFormat() & TAS_TYPE_EDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MULTILINEEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_DECNUMBEREDIT) || (pCell[0]->GetFormat() & TAS_TYPE_RAWNUMBEREDIT); )
							{
								pControl->SendMessage(EM_SETSEL, 0, -1);
								break;
							}
							if ((pCell[0]->GetFormat() & TAS_TYPE_DPLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_MDLEDIT) || (pCell[0]->GetFormat() & TAS_TYPE_TPLEDIT)) pControl->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
							if (pCell[0]->GetFormat() & TAS_TYPE_COMBOEDITBOX) pControl->SendMessage(CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
							if (pCell[0]->GetFormat() & TAS_TYPE_TIMESPINBOX) Timespinbox_SetSel(pControl, 0, -1);
							if (pCell[0]->GetFormat() & TAS_TYPE_SPINBOX) Spinbox_SetSel(pControl, 0, -1);
							break;
						}
						UpdateTableFieldData(pCell[0]->GetControlID(), szText);
					}
				}
				for (nRow = 0; nRow < nRows; nRow++)
				{
					if ((pCell[0] = pTable[0]->FindCell(nRow, abs(ptCell.x) - 1)))
					{
						for (nTable = 0, nTables = EnumTableUpdates(pCell[0]->GetControlID(), szTables); nTable < nTables; nTable++)
						{
							if (GetTableUpdateContents(szTables.GetAt(nTable), pCell[0]->GetControlID(), pCell[0]->GetText(), szItem, szItems))
							{
								if ((pTable[1] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable)))))
								{
									UpdateTableContents(pTable[1], szItems);
									continue;
								}
							}
						}
					}
				}
				for (nTable = 0, nTables = (INT)m_pTables->GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[1] = m_pTables->GetAt(nTable)) && GetTablePosition(pTable[1]->GetName(), szTable, rTable) && pTable[0]->GetName() == szTable  &&  GetTableFloatingAlignment(pTable[1]->GetName()) >= 0)
					{
						if (GetTableUpdateContents(pTable[1]->GetName(), -1, GetName(), szItem, szItems))
						{
							UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(0);
				return TRUE;
			}
		}
		return FALSE;
	}
	SetActiveCell();
	ArrangeTables(0);
	return TRUE;
}

INT CTCOnBoardMemoryImagesTableView::ExtractTextItems(LPCTSTR pszText, CStringArray &szItems) CONST
{
	INT  nPos;
	CString  szText;

	for (szText = pszText, szItems.RemoveAll(); (nPos = szText.Find(TAB)) >= 0; szText = szText.Mid(nPos + 1))
	{
		szItems.Add(szText.Left(nPos));
		continue;
	}
	if (!szItems.GetSize() || !szText.IsEmpty()) szItems.Add(szText);
	return((INT)szItems.GetSize());
}

BOOL CTCOnBoardMemoryImagesTableView::CollectData(CByteArray &nData, BYTE nValue, INT nBytePos) CONST
{
	if (nData.GetSize() > nBytePos  &&  nBytePos >= 0)
	{
		nData.SetAt(nBytePos, nValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::CollectData(CByteArray &nData, ULONGLONG nValue, INT nBytePos, INT nBitPos, INT nLength) CONST
{
	INT  nByte;
	INT  nBytes;
	ULONGLONG  nBitMask;
	ULONGLONG  nRawValue;

	if (nData.GetSize() > nBytePos + (nBitPos + nLength - 1) / 8 && nBytePos >= 0 && nBitPos >= 0 && nLength > 0 && 8 * nBytePos + nBitPos + nLength <= (INT)8 * sizeof(nValue))
	{
		for (nByte = nBytePos, nBytes = min((INT)(nByte + sizeof(nValue)), (INT)nData.GetSize()), nBitMask = 0, nBitMask = (~nBitMask >> nBitPos) & (~nBitMask << (8 * sizeof(nValue) - nLength - nBitPos)), nRawValue = (nValue << (8 * sizeof(nValue) - nLength - nBitPos)) & nBitMask, nBitMask = ~nBitMask; nByte < nBytes; nByte++)
		{
			nData.SetAt(nByte, (BYTE)((nData.GetAt(nByte) & (nBitMask >> (8 * (sizeof(nValue) - nByte + nBytePos - 1)))) | (nRawValue >> (8 * (sizeof(nValue) - nByte + nBytePos - 1)))));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::ExtractData(CONST CByteArray &nData, INT nBytePos, BYTE &nValue) CONST
{
	if (nData.GetSize() > nBytePos  &&  nBytePos >= 0)
	{
		nValue = nData.GetAt(nBytePos);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesTableView::ExtractData(CONST CByteArray &nData, INT nBytePos, INT nBitPos, INT nLength, ULONGLONG &nValue) CONST
{
	INT  nByte;
	INT  nBytes;

	if (nData.GetSize() > nBytePos + (nBitPos + nLength - 1) / 8 && nBytePos >= 0 && nBitPos >= 0 && nLength > 0 && 8 * nBytePos + nBitPos + nLength <= (INT)8 * sizeof(nValue))
	{
		for (nByte = 0, nBytes = sizeof(nValue), nValue = 0; nByte < nBytes; nByte++)
		{
			if (nData.GetSize() > nBytePos + nByte) nValue += nData.GetAt(nBytePos + nByte);
			if (nByte < nBytes - 1) nValue <<= 8;
		}
		nValue = (nValue >> (8 * sizeof(nValue) - nBitPos - nLength)) & (((ULONGLONG)-1) >> (8 * sizeof(nValue) - nLength));
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardMemoryImagesTableView::ConstructToolTipTitle(LPCTSTR pszTip, LPCTSTR pszInfo) CONST
{
	INT  nPos;
	UINT  nRange[2][2];
	UINT  nAddress[2];
	CString  szTitle;
	CString  szInfo;
	CString  szAddress;
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pParameter;

	if ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME) && (!lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE)))))
	{
		if ((pParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pszInfo))))
		{
			szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_TITLE), (LPCTSTR)pParameter->GetTag());
			return szTitle;
		}
	}
	if ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))))
	{
		for (nPos = (szInfo = pszInfo).Find(TAB), szAddress = (nPos >= 0) ? szInfo.Left(nPos) : EMPTYSTRING, szInfo = (nPos >= 0) ? szInfo.Mid(nPos + 1) : EMPTYSTRING; GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && GetDatabase()->TranslateOBProcessorMemoryImageBlockAddress(szAddress, nAddress[0], nAddress[1]); )
		{
			nAddress[0] = (UINT)(((ULONGLONG)nAddress[0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1] + _ttoi(szInfo) / (GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 4 + 1)) / (nRange[1][1] - nRange[1][0] + 1));
			nAddress[1] = (UINT)(((ULONGLONG)nAddress[0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1] + _ttoi(szInfo) / (GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 4 + 1)) % (nRange[1][1] - nRange[1][0] + 1));
			szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_IMAGEDATAADDRESS), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
			return szTitle;
		}
	}
	return EMPTYSTRING;
}

CString CTCOnBoardMemoryImagesTableView::ConstructToolTipText(LPCTSTR pszTip, LPCTSTR pszInfo, LPCTSTR pszValue) CONST
{
	INT  nPos;
	INT  nTable;
	INT  nTables;
	BOOL  bOutSet;
	CTMUnit  cTMUnit;
	CString  szType;
	CString  szText;
	CString  szWidth;
	CString  szValue[5];
	CString  szCalTable;
	CString  szDescription;
	ULONGLONG  nValue;
	CUIntArray  nTableRef[2];
	CStringTools  cStringTools;
	CTMParameter  cTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	if ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE))) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME) && (!lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE)) || !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE)))))
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pszInfo))) != (CDatabaseTMParameter *)NULL)
		{
			for (szType.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_TYPE), CDatabaseEngine::TranslateParameterTypeCode(pDatabaseTMParameter->GetAttributes(), FALSE)); szType.GetLength() < lstrlen(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_TYPE)); )
			{
				szType.Empty();
				break;
			}
			for (szDescription.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_DESCRIPTION), (LPCTSTR)pDatabaseTMParameter->GetDescription()), szDescription = (pDatabaseTMParameter->GetDescription().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_NODESCRIPTION) : szDescription, szWidth.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_WIDTH), pDatabaseTMParameter->GetWidth()), cTMParameter.SetTag(pDatabaseTMParameter->GetTag()), cTMParameter.SetAttributes(pDatabaseTMParameter->GetAttributes()), cTMParameter.SetRawValue(&cTMUnit, 0, (nValue = GetDatabase()->ParseValue(pszValue, 16))); (cTMParameter.GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (cTMParameter.GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN); )
			{
				cTMParameter.GetValueAsText(GetDatabase(), 0, (cTMParameter.GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_RADIX_BINARY, -1, szValue[0]);
				szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CODEDVALUE), (LPCTSTR)szValue[0], STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_BITVALUE));
				break;
			}
			if ((cTMParameter.GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (cTMParameter.GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
			{
				cTMParameter.GetValueAsText(GetDatabase(), 0, (cTMParameter.GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_RADIX_DECIMAL, -1, szValue[0]);
				szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CODEDVALUE), (LPCTSTR)szValue[0], (cTMParameter.GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_SIGNEDVALUE) : STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_COMPLEMENTVALUE));
			}
			if (cTMParameter.GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				cTMParameter.GetValueAsText(GetDatabase(), 0, (cTMParameter.GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_RADIX_DECIMAL, -1, szValue[0]);
				szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CODEDVALUE), (LPCTSTR)szValue[0], STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_UNSIGNEDVALUE));
			}
			if (cTMParameter.GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT)
			{
				cTMParameter.GetValueAsText(GetDatabase(), 0, (cTMParameter.GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_RADIX_DECIMAL, -1, szValue[0]);
				szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CODEDVALUE), (LPCTSTR)szValue[0], STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_FLOATINGVALUE));
			}
			if ((cTMParameter.GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_FLOATINGPOINT)) == 0)
			{
				cTMParameter.GetValueAsText(GetDatabase(), 0, TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL, -1, szValue[0]);
				szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CODEDVALUE), (LPCTSTR)szValue[0], STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_UNSIGNEDVALUE));
			}
			for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTableRefs(nTableRef[0], nTableRef[1]), szValue[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_RAWVALUE), nValue), szValue[2].Empty(); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMNumCalTable = (cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(nTableRef[0].GetAt(nTable)) : (CDatabaseTMNumCalTable *)NULL))
				{
					for (cTMParameter.SetRawValue(&cTMUnit, 0, nValue, TMPARAMETER_STATUS_NONE, pDatabaseTMNumCalTable->GetName()); cTMParameter.GetValueAsText(GetDatabase(), 0, cTMParameter.GetAttributes(), -1, szValue[3], bOutSet, FALSE); )
					{
						szValue[4].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CALIBRATEDNUMERICALVALUE), (LPCTSTR)(szValue[3] = (bOutSet) ? ((cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? (szValue[3] + GetDatabase()->GetTMNumCalTablePointOutsideText()) : ((cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? (szValue[3] + GetDatabase()->GetTMTxtCalTablePointOutsideText()) : szValue[3])) : szValue[3]), (LPCTSTR)pDatabaseTMNumCalTable->GetName(), (bOutSet) ? ((cTMParameter.GetAttributes() & TMPARAMETER_INTERPRETATION_EXTRAPOLATE) ? STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_EXTRPOLATEDVALUE) : STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_OUTSETVALUE)) : STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_INSETVALUE));
						szValue[2] += (!szValue[2].IsEmpty()) ? (EOL + szValue[4]) : szValue[4];
						break;
					}
					continue;
				}
				if ((pDatabaseTMTxtCalTable = (cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(nTableRef[0].GetAt(nTable)) : (CDatabaseTMTxtCalTable *)NULL))
				{
					for (cTMParameter.SetRawValue(&cTMUnit, 0, nValue, TMPARAMETER_STATUS_NONE, pDatabaseTMTxtCalTable->GetName()); cTMParameter.GetValueAsText(GetDatabase(), 0, cTMParameter.GetAttributes(), -1, szValue[3], bOutSet, FALSE); )
					{
						szValue[4].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_CALIBRATEDSTATUSVALUE), (LPCTSTR)(szValue[3] = (bOutSet) ? ((cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? (szValue[3] + GetDatabase()->GetTMNumCalTablePointOutsideText()) : ((cTMParameter.GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? (szValue[3] + GetDatabase()->GetTMTxtCalTablePointOutsideText()) : szValue[3])) : szValue[3]), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (bOutSet) ? ((cTMParameter.GetAttributes() & TMPARAMETER_INTERPRETATION_EXTRAPOLATE) ? STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_EXTRPOLATEDVALUE) : STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_OUTSETVALUE)) : STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_INSETVALUE));
						szValue[2] += (!szValue[2].IsEmpty()) ? (EOL + szValue[4]) : szValue[4];
						break;
					}
					continue;
				}
			}
			if (cTMParameter.GetAttributes() & TMPARAMETER_NATURE_CONSTANT)
			{
				for (szValue[3].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_RAWTEXT), (LPCTSTR)pDatabaseTMParameter->GetConstValueAsText()); (cTMParameter.GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_FLOATINGPOINT)) == 0; )
				{
					szValue[0] = szValue[3];
					break;
				}
			}
			szText = (!szType.IsEmpty()) ? (szType + EOL + szWidth + EOL + szDescription + EOL + szValue[0] + EOL + szValue[1]) : (szWidth + EOL + szDescription + EOL + szValue[0] + EOL + szValue[1]);
			szText += (!szValue[2].IsEmpty()) ? (EOL + szValue[2]) : EMPTYSTRING;
			return szText;
		}
	}
	if ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA))) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME) && !lstrcmp(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))))
	{
		if ((nPos = ((nPos = (szValue[0] = pszInfo).Find(TAB)) >= 0) ? _ttoi(szValue[0].Mid(nPos + 1)) : -1) >= 0)
		{
			szValue[0] = (szValue[0] = pszValue).Mid(nPos, GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 4);
			szValue[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_IMAGEDATAHEXADECIMALVALUE), (LPCTSTR)szValue[0]);
			szValue[2].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_IMAGEDATADECIMALVALUE), (LPCTSTR)cStringTools.ConvertLongUIntToString(GetDatabase()->ParseValue(szValue[0], 16)));
			szValue[3].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_IMAGEDATABINARYVALUE), (LPCTSTR)cStringTools.ConvertLongUIntToPaddedString(GetDatabase()->ParseValue(szValue[0], 16), GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth(), 2));
			szText = (GetDatabase()->CheckOBProcessorMemoryImageBlockData(szValue[0], TRUE)) ? (szValue[1] + EOL + szValue[2] + EOL + szValue[3]) : EMPTYSTRING;
			return szText;
		}
	}
	return EMPTYSTRING;
}

BOOL CTCOnBoardMemoryImagesTableView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCOnBoardMemoryImagesTableView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCOnBoardMemoryImagesTableView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesTableView::CheckPrivilege() CONST
{
	return CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE);
}

LRESULT CTCOnBoardMemoryImagesTableView::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
	INT  nTable;
	INT  nTables;
	BOOL  bFocus;
	BOOL  bControl;
	CWnd  *pControl;
	CString  szItem;
	CString  szValue[2];
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CTCOnBoardMemoryImagesTableViewUndoItem  cUndoItem;

	if (message == WM_COMMAND)
	{
		if ((bFocus = (HIWORD(wParam) == CBN_SETFOCUS || HIWORD(wParam) == EN_SETFOCUS || HIWORD(wParam) == SBXN_SETFOCUS || HIWORD(wParam) == TSBXN_SETFOCUS)))
		{
			if ((pControl = ((pCell = GetActiveCell()) && pCell->GetControlID() == LOWORD(wParam)) ? pCell->GetControl() : (CWnd *)NULL) != (CWnd *)NULL)
			{
				for (ConvertUndoItem(pControl, &cUndoItem, FALSE), m_cUndoLists.Add(&cUndoItem), m_cUndoLists.Collect(TRUE), szValue[0] = pCell->GetText(); HIWORD(wParam) == TSBXN_SETFOCUS; )
				{
					UpdateTableFieldData(pCell->GetControlID(), szValue[0]);
					break;
				}
				m_cUndoLists.Collect(FALSE);
			}
		}
		if (HIWORD(wParam) == CBN_SELCHANGE)
		{
			if ((pControl = ((pCell = GetActiveCell(pTable)) && pCell->GetControlID() == LOWORD(wParam)) ? pCell->GetControl() : (CWnd *)NULL))
			{
				for (szValue[0] = Combobox_GetText(pControl, (INT)pControl->SendMessage(CB_GETCURSEL)), pControl->GetWindowText(szValue[1]); (bControl = ((pControl->GetStyle() & (CBS_SIMPLE | CBS_DROPDOWN | CBS_DROPDOWNLIST)) == CBS_SIMPLE || (pControl->GetStyle() & (CBS_SIMPLE | CBS_DROPDOWN | CBS_DROPDOWNLIST)) == CBS_DROPDOWN)); )
				{
					if (EnumTableUpdates(pCell->GetControlID(), szTables) > 0 && !GetTableUpdateContents(pTable->GetName(), 0, GetName(), szItem, szItems))
					{
						for (ConvertUndoItem(pControl, &cUndoItem, TRUE), cUndoItem.SetText(EMPTYSTRING); m_cUndoLists.GetSize() > 0; )
						{
							m_cUndoLists.Reset();
							break;
						}
						m_cUndoLists.Add(&cUndoItem);
					}
					break;
				}
				for (pControl->SetWindowText(Combobox_GetText(pControl, (INT)pControl->SendMessage(CB_GETCURSEL))), ConvertUndoItem(pControl, &cUndoItem, TRUE); bControl; )
				{
					cUndoItem.SetSel(0, cUndoItem.GetText().GetLength());
					break;
				}
				for (nTable = 0, nTables = (!m_cUndoLists.IsLocked()) ? EnumTableUpdates(pCell->GetControlID(), szTables) : 0, m_cUndoLists.Add(&cUndoItem, TRUE), m_cUndoLists.Collect(TRUE), UpdateTableFieldData(LOWORD(wParam), szValue[0], szValue[1]); nTable < nTables; nTable++)
				{
					if ((pTable = (GetTableUpdateContents(szTables.GetAt(nTable), pCell->GetControlID(), szValue[0], szItem, szItems)) ? m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable))) : (CTableViewObject *)NULL)) UpdateTableContents(pTable, szItems);
					if (nTable == nTables - 1) ArrangeTables(0);
				}
				m_cUndoLists.Collect(FALSE);
			}
		}
		if (HIWORD(wParam) == CBN_EDITCHANGE || HIWORD(wParam) == EN_CHANGE || HIWORD(wParam) == SBXN_CHANGE || HIWORD(wParam) == TSBXN_CHANGE)
		{
			if ((pControl = ((pCell = GetActiveCell()) && pCell->GetControlID() == LOWORD(wParam)) ? pCell->GetControl() : (CWnd *)NULL))
			{
				for (ConvertUndoItem(pControl, &cUndoItem, FALSE), m_cUndoLists.Add(&cUndoItem), m_cUndoLists.Collect(TRUE), szValue[0] = pCell->GetText(), m_bUpdate = TRUE; szValue[0].GetLength() >= 0; )
				{
					UpdateTableFieldData(pCell->GetControlID(), szValue[0]);
					break;
				}
				m_cUndoLists.Collect(FALSE);
				m_bUpdate = FALSE;
			}
		}
		if (HIWORD(wParam) == CBN_KILLFOCUS || HIWORD(wParam) == EN_KILLFOCUS || HIWORD(wParam) == SBXN_KILLFOCUS || HIWORD(wParam) == TSBXN_KILLFOCUS)
		{
			if ((pControl = ((pCell = GetActiveCell()) && pCell->GetControlID() == LOWORD(wParam)) ? pCell->GetControl() : (CWnd *)NULL) != (CWnd *)NULL)
			{
				for (nTable = 0, nTables = ((szValue[0] = pCell->GetText()).IsEmpty()) ? EnumTableUpdates(LOWORD(wParam), szTables) : 0; nTable < nTables; nTable++)
				{
					if ((pTable = (GetTableUpdateContents(szTables.GetAt(nTable), LOWORD(wParam), szValue[0], GetName(), szItems)) ? m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable))) : (CTableViewObject *)NULL)) UpdateTableContents(pTable, szItems);
					if (nTable == nTables - 1) ArrangeTables(0);
				}
			}
		}
		for (DrawTables(); !bFocus; )
		{
			if ((pCell = GetActiveCell(pTable)) && !pTable->IsVisible()) SetActiveCell();
			return TRUE;
		}
	}
	return CScrollView::WindowProc(message, wParam, lParam);
}

void CTCOnBoardMemoryImagesTableView::PostNcDestroy()
{
	m_szTables.RemoveAll();
	m_cUndoLists.RemoveAll();
	CTableView::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesTableView, CTableView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesTableView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_LBUTTONDOWN()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_RBUTTONDOWN()
	ON_WM_RBUTTONUP()
	ON_WM_KEYDOWN()
	ON_WM_SETFOCUS()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesTableView message handlers

int CTCOnBoardMemoryImagesTableView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	return((CTableView::OnCreate(lpCreateStruct) != -1 && LoadToolTipCursor()) ? 0 : -1);
}

void CTCOnBoardMemoryImagesTableView::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

BOOL CTCOnBoardMemoryImagesTableView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	POINT  ptCursor;
	CTableViewCell  *pCell[3];
	CTableViewObject  *pTable;

	for (GetCursorPos(&ptCursor), ScreenToClient(&ptCursor), ptCursor.x = ptCursor.x + GetScrollPosition().x, ptCursor.y = ptCursor.y + GetScrollPosition().y; IsToolTipModeEnabled() && nHitTest == HTCLIENT; )
	{
		if ((pTable = (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME) || GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) || GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) ? m_pTables->GetAt(m_pTables->Find(GetName())) : (CTableViewObject *)NULL))
		{
			if ((pCell[1] = ((pCell[0] = (pTable->IsVisible() && pTable->PtInRect(ptCursor)) ? pTable->FindCell(ptCursor) : (CTableViewCell *)NULL) && (!pCell[0]->HasInnerPosition() || pCell[0]->GetInnerPosition().PtInRect(ptCursor)) && pCell[0]->y > 0 && !pCell[0]->GetText().IsEmpty() && pCell[0] != GetActiveCell()) ? pTable->FindCell(0, pCell[0]->x) : (CTableViewCell *)NULL))
			{
				if ((pCell[2] = ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME) && pCell[1]->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_VALUE)) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && pCell[1]->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA)) || (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME) && pCell[1]->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))) ? pTable->FindCell(pCell[0]->y, (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER) : ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA))) : (CTableViewCell *)NULL) && !pCell[2]->GetText().IsEmpty())
				{
					if ((GetName() != STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME) && GetName() != STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) || CalcCellTextFromPoint(pCell[2], ptCursor) >= 0)
					{
						SetCursor(m_hToolTipCursor);
						return TRUE;
					}
				}
			}
		}
		if ((pTable = (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)) ? m_pTables->GetAt(m_pTables->Find(GetName())) : (CTableViewObject *)NULL))
		{
			if ((pCell[1] = ((pCell[0] = (pTable->IsVisible() && pTable->PtInRect(ptCursor)) ? pTable->FindCell(ptCursor) : (CTableViewCell *)NULL) && (!pCell[0]->HasInnerPosition() || pCell[0]->GetInnerPosition().PtInRect(ptCursor)) && pCell[0]->y > 0 && !pCell[0]->GetText().IsEmpty() && pCell[0] != GetActiveCell()) ? pTable->FindCell(0, pCell[0]->x) : (CTableViewCell *)NULL))
			{
				if (pCell[1]->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_VALUE) || pCell[1]->GetText() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_COMPAREDVALUE))
				{
					if ((pCell[2] = pTable->FindCell(pCell[0]->y, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER))) && !pCell[2]->GetText().IsEmpty())
					{
						SetCursor(m_hToolTipCursor);
						return TRUE;
					}
				}
			}
		}
		break;
	}
	return CTableView::OnSetCursor(pWnd, nHitTest, message);
}

void CTCOnBoardMemoryImagesTableView::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nTable;
	INT  nTables;
	BOOL  bTable;
	POINT  ptCursor;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CHourglassCursor  cCursor;

	if (CheckPrivilege())
	{
		for (nTable = 0, nTables = (INT)m_pTables->GetSize(), ptCursor = point + GetScrollPosition(), SetActiveCell(), bTable = FALSE; nTable < nTables; nTable++)
		{
			if ((pTable = m_pTables->GetAt(nTable)) && pTable->IsVisible())
			{
				if (pTable->GetType() == TAS_TABLE_LIST  &&  pTable->PtInRect(ptCursor) && !bTable)
				{
					if ((pCell = pTable->FindCell(ptCursor)) && (!pCell->HasInnerPosition() || pCell->GetInnerPosition().PtInRect(ptCursor)) && (pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE && ((!pTable->HasTitle() && !pCell->y) || pCell->y > 0))
					{
						if (SelectTableFieldData(pTable->GetName(), CPoint(pCell->x, pCell->y)))
						{
							bTable = TRUE;
							continue;
						}
					}
				}
				if (pTable->GetType() == TAS_TABLE_LIST)
				{
					pTable->SetSelCell();
					continue;
				}
			}
		}
		for (nTable = 0, nTables = (!bTable) ? (INT)m_pTables->GetSize() : 0; nTable < nTables; nTable++)
		{
			if ((pTable = m_pTables->GetAt(nTable)) && pTable->IsVisible())
			{
				if (pTable->GetSelColumn() >= 0 || pTable->GetSelRow() >= 0)
				{
					SelectTableFieldData(pTable->GetName(), CPoint(-1, -1));
					continue;
				}
			}
		}
		DrawTables();
	}
	CTableView::OnLButtonDown(nFlags, point);
}

void CTCOnBoardMemoryImagesTableView::OnLButtonDblClk(UINT nFlags, CPoint point)
{
	INT  nTable;
	INT  nTables;
	BOOL  bTable;
	POINT  ptCursor;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CHourglassCursor  cCursor;

	if (CheckPrivilege())
	{
		for (nTable = 0, nTables = (INT)m_pTables->GetSize(), ptCursor = point + GetScrollPosition(), bTable = FALSE; nTable < nTables; nTable++)
		{
			if ((pTable = m_pTables->GetAt(nTable)) != (CTableViewObject *)NULL  &&  pTable->IsVisible())
			{
				if (pTable->GetType() == TAS_TABLE_LIST  &&  pTable->PtInRect(ptCursor) && !bTable)
				{
					if ((pCell = pTable->FindCell(ptCursor)) && (!pCell->HasInnerPosition() || pCell->GetInnerPosition().PtInRect(ptCursor)) && (pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE && ((!pTable->HasTitle() && !pCell->y) || pCell->y > 0))
					{
						if (SelectTableFieldData(pTable->GetName(), CPoint(pCell->x, pCell->y)))
						{
							SetActiveCell(pTable, pCell);
							bTable = TRUE;
							continue;
						}
					}
				}
				if (pTable->GetType() == TAS_TABLE_LIST)
				{
					pTable->SetSelCell();
					DrawTables();
					continue;
				}
				if (pTable->GetType() == TAS_TABLE_NORMAL  &&  pTable->PtInRect(ptCursor) && !bTable)
				{
					if ((pCell = pTable->FindCell(ptCursor)) && (!pCell->HasInnerPosition() || pCell->GetInnerPosition().PtInRect(ptCursor)) && (pCell->GetFormat() & TAS_TYPE_SUBTABLE) != TAS_TYPE_SUBTABLE && ((!pTable->HasTitle() && !pCell->y) || pCell->y > 0))
					{
						SetActiveCell(pTable, pCell);
						bTable = TRUE;
						continue;
					}
				}
			}
		}
	}
	CScrollView::OnLButtonDblClk(nFlags, point);
}

void CTCOnBoardMemoryImagesTableView::OnRButtonDown(UINT nFlags, CPoint point)
{
	INT  nRow;
	INT  nCol;
	INT  nTable[2];
	INT  nTables[2];
	CFont  cFont[2];
	POINT  ptCursor;
	CPoint  ptMenu;
	CString  szTip;
	CString  szInfo;
	CString  szText;
	CString  szTitle;
	LOGFONT  lfFont[2];
	CUIntArray  nTypes;
	CLocaleMenu  cMenu;
	CStringArray  szTables;
	CStringTools  cStringTools;
	CTableViewCell  *pCell[3];
	CTableViewObject  *pTable[3];
	CMFCPopupMenu  *pFloatingMenu;

	if (IsToolTipModeEnabled() && GetCursor() == GetToolTipCursor())
	{
		if ((pTable[0] = m_pTables->GetAt(m_pTables->Find(GetName()))))
		{
			if ((pCell[2] = ((pCell[1] = ((pCell[0] = pTable[0]->FindCell(point + GetScrollPosition())) && (!pCell[0]->HasInnerPosition() || pCell[0]->GetInnerPosition().PtInRect(point + GetScrollPosition())) && pCell[0] != GetActiveCell()) ? pTable[0]->FindCell(0, pCell[0]->x) : (CTableViewCell *)NULL)) ? pTable[0]->FindCell(pCell[0]->y, (pTable[0]->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_TMPARAMETER) : ((pTable[0]->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_DATA) : ((pTable[0]->GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_TMPARAMETER) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_DATA)))) : (CTableViewCell *)NULL))
			{
				for (szTitle = ConstructToolTipTitle((szTip = pCell[1]->GetText()), (szInfo = (GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)) ? (pTable[0]->GetCellText(pCell[0]->y, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_ADDRESS)) + TAB + cStringTools.ConvertIntToString(CalcCellTextFromPoint(pCell[2], point + GetScrollPosition()))) : ((GetName() == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)) ? (pTable[0]->GetCellText(pCell[0]->y, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_ADDRESS)) + TAB + cStringTools.ConvertIntToString(CalcCellTextFromPoint(pCell[2], point + GetScrollPosition()))) : pCell[2]->GetText()))), szText = ConstructToolTipText(szTip, szInfo, pCell[0]->GetText()); !szTitle.IsEmpty() || !szText.IsEmpty(); )
				{
					for (pCell[0]->GetFont(&lfFont[0]), pCell[0]->GetFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
					{
						m_wndToolTip.SetTitleFont(&cFont[0]);
						m_wndToolTip.SetTextFont(&cFont[1]);
						break;
					}
					m_wndToolTip.Create(this, point, szTitle, szText);
					break;
				}
			}
		}
	}
	for (nTable[0] = 0, nTables[0] = (szTitle.IsEmpty() && szText.IsEmpty()) ? EnumTables(szTables, nTypes, TRUE) : 0, ptCursor = point + GetScrollPosition(); nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pTable[0] = m_pTables->GetAt(m_pTables->Find(szTables.GetAt(nTable[0])))) && pTable[0]->IsVisible() && pTable[0]->PtInRect(ptCursor))
		{
			for (nTable[1] = 0, nTables[1] = (INT)m_pTables->GetSize(); nTable[1] < nTables[1]; nTable[1]++)
			{
				if ((pTable[1] = m_pTables->GetAt(nTable[1])) && pTable[0] != pTable[1])
				{
					if ((pCell[0] = GetActiveCell(pTable[2])) && pTable[1] == pTable[2])
					{
						pTable[1]->SetSelCell();
						SetActiveCell();
						break;
					}
					if (pTable[1]->GetSelRow() >= 0)
					{
						pTable[1]->SetSelCell();
						DrawTables();
						break;
					}
				}
			}
			if (!pTable[0]->GetSelCell(nRow, nCol))
			{
				for (nRow = pTable[0]->GetSelRow(); nRow < 0; )
				{
					pTable[0]->SetSelRow(pTable[0]->GetRows());
					break;
				}
			}
			for (ClientToScreen(&(ptMenu = point)); (pFloatingMenu = (cMenu.LoadMenu(IDR_TCONBOARDMEMORYIMAGESFLOATINGMENU)) ? new CMFCPopupMenu : (CMFCPopupMenu *)NULL); )
			{
				pFloatingMenu->Create(GetParentFrame(), ptMenu.x, ptMenu.y, cMenu.Detach());
				break;
			}
			break;
		}
	}
	CTableView::OnRButtonDown(nFlags, point);
}

void CTCOnBoardMemoryImagesTableView::OnRButtonUp(UINT nFlags, CPoint point)
{
	m_wndToolTip.Destroy();
	CTableView::OnRButtonUp(nFlags, point);
}

void CTCOnBoardMemoryImagesTableView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nRow;
	INT  nCol;
	INT  nTable;
	INT  nTables;
	CTableViewObject  *pTable[2];

	for (nTable = 0, nTables = (INT)m_pTables->GetSize(), nRow = nCol = -1; nTable < nTables; nTable++)
	{
		if ((pTable[0] = m_pTables->GetAt(nTable)) && pTable[0]->IsVisible())
		{
			if ((nRow = pTable[0]->GetSelRow()) >= 0)
			{
				if (nChar == VK_DOWN)
				{
					if (nRow < pTable[0]->GetRows() - 1)
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(0, nRow + 1));
						ScrollToTableRow(pTable[0], nRow + 1);
					}
					return;
				}
				if (nChar == VK_UP)
				{
					if ((!pTable[0]->HasTitle() && nRow > 0) || (pTable[0]->HasTitle() && nRow > 1))
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(0, nRow - 1));
						ScrollToTableRow(pTable[0], nRow - 1);
					}
					return;
				}
				if (nChar == VK_NEXT)
				{
					ScrollTableRows(pTable[0], TRUE);
					SelectTableFieldData(pTable[0]->GetName(), CPoint(0, pTable[0]->GetSelRow()));
					return;
				}
				if (nChar == VK_PRIOR)
				{
					ScrollTableRows(pTable[0], FALSE);
					SelectTableFieldData(pTable[0]->GetName(), CPoint(0, pTable[0]->GetSelRow()));
					return;
				}
				if (nChar == VK_END)
				{
					if ((!pTable[0]->HasTitle() && pTable[0]->GetRows() > 0) || (pTable[0]->HasTitle() && pTable[0]->GetRows() > 1))
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(0, pTable[0]->GetRows() - 1));
						ScrollToTableRow(pTable[0], pTable[0]->GetSelRow());
					}
					return;
				}
			}
			if ((nCol = pTable[0]->GetSelColumn()) >= 0)
			{
				if (nChar == VK_RIGHT)
				{
					if (nCol < pTable[0]->GetColumns() - 1)
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(nCol + 1, 0));
						ScrollToTableColumn(pTable[0], nCol + 1);
					}
					return;
				}
				if (nChar == VK_LEFT)
				{
					if (nCol > 0)
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(nCol - 1, 0));
						ScrollToTableColumn(pTable[0], nCol - 1);
					}
					return;
				}
				if (nChar == VK_END)
				{
					if (pTable[0]->GetColumns() > 0)
					{
						SelectTableFieldData(pTable[0]->GetName(), CPoint(pTable[0]->GetColumns() - 1, 0));
						ScrollToTableColumn(pTable[0], pTable[0]->GetSelColumn());
					}
					return;
				}
			}
		}
	}
	CTableView::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCOnBoardMemoryImagesTableView::OnSetFocus(CWnd *pOldWnd)
{
	CWnd  *pControl;
	CTableViewCell  *pCell;

	for (; (pControl = ((pCell = GetActiveCell())) ? pCell->GetControl() : (CWnd *)NULL) && !IsChild(pOldWnd); )
	{
		SetTimer(TCONBOARDMEMORYIMAGESTABLEVIEW_ACTIVATION_TIMERID, TCONBOARDMEMORYIMAGESTABLEVIEW_ACTIVATION_TIMEOUT, NULL);
		break;
	}
	CScrollView::OnSetFocus(pOldWnd);
}

void CTCOnBoardMemoryImagesTableView::OnTimer(UINT_PTR nEventID)
{
	CWnd  *pControl;
	CTableViewCell  *pCell;

	if (nEventID == TCONBOARDMEMORYIMAGESTABLEVIEW_ACTIVATION_TIMEOUT)
	{
		for (m_cUndoLists.Lock(); (pControl = ((pCell = GetActiveCell())) ? pCell->GetControl() : (CWnd *)NULL); )
		{
			pControl->SetFocus();
			break;
		}
		m_cUndoLists.Unlock();
		KillTimer(nEventID);
	}
	CTableView::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesTableView::OnDestroy()
{
	FreeToolTipCursor();
	CTableView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSummaryTextView

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSummaryTextView, CTextView)

CTCOnBoardMemoryImagesSummaryTextView::CTCOnBoardMemoryImagesSummaryTextView() : CTextView()
{
	m_sizeAlertSymbols.cx = 0;
	m_sizeAlertSymbols.cy = 0;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::Create(CWnd *pParentWnd, CONST RECT &rect, DWORD dwStyle)
{
	if (CTextView::Create(pParentWnd, rect, dwStyle))
	{
		SetTextSpacings(1, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetLayout(UINT nColumns)
{
	CUIntArray  nTitleItems;

	nTitleItems.RemoveAll();
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM);
	if (nColumns & TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME);
	return SetLayout(nTitleItems);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::SetLayout(CONST CUIntArray &nColumns)
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nWidths;
	CUIntArray  nTitleItems;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nTitleItems.Copy(nColumns); !nTitleItems.GetSize(); )
	{
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM);
		if (TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME & TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT) nTitleItems.Add(TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME);
		break;
	}
	for (nIndex = 0, nCount = (LookupColumnsName(nTitleItems, szColumns) && CalcColumnsWidth(nTitleItems, nWidths) && SetColumns(szColumns, nWidths)) ? (INT)nTitleItems.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nTitleItems.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (LookupColumnsName(nColumns, szColumns) && SetColumns(szColumns, nWidths)) ? (INT)nColumns.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nColumns.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetLayout(UINT &nColumns) CONST
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nTitleItems;

	for (nIndex = 0, nCount = (GetLayout(nTitleItems)) ? (INT)nTitleItems.GetSize() : -1, nColumns = 0; nIndex < nCount; nIndex++)
	{
		nColumns |= nTitleItems.GetAt(nIndex);
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::GetLayout(CUIntArray &nColumns) CONST
{
	CUIntArray  nWidths;

	return GetLayout(nColumns, nWidths);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (GetColumns(szColumns, nWidths)) ? (INT)szColumns.GetSize() : -1, nColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nColumns.Add(LookupColumnName(szColumns.GetAt(nIndex)));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetTitleFont(CFont *pFont)
{
	return CTextView::SetTitleFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::SetTitleFont(CONST LOGFONT *plfFont)
{
	return CTextView::SetTitleFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetTitleFont(CFont *pFont) CONST
{
	return CTextView::GetTitleFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::GetTitleFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTitleFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetItemsFont(CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetItemsFont(&lfFont) : FALSE);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::SetItemsFont(CONST LOGFONT *plfFont)
{
	CTextViewLock  cLock(this);

	if (CTextView::SetTextFont(plfFont))
	{
		SetTextSpacings(max(LOWORD(GetTextSpacings()), 1), max(HIWORD(GetTextSpacings()), 1));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetItemsFont(CFont *pFont) CONST
{
	return CTextView::GetTextFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::GetItemsFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTextFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetProcessors(CONST CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll)
{
	INT  nItem;
	INT  nItems;
	UINT  nInfo[2];
	UINT  nFormat[2];
	CString  szPrefix[2];
	CTCOnBoardMemoryImagesProcessorItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (bAll) ? (INT)pItems.GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = pItems.GetAt(nItem)) && m_pItems.Find(pItem[0]->GetName()) < 0) ? new CTCOnBoardMemoryImagesProcessorItem : (CTCOnBoardMemoryImagesProcessorItem *)NULL))
		{
			if (pItem[1]->Copy(pItem[0]) && m_pItems.Add(pItem[1]) >= 0) continue;
			delete pItem[1];
		}
	}
	for (nItem = 0, nItems = (!bAll) ? (INT)pItems.GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = pItems.GetAt(nItem))) ? m_pItems.GetAt(m_pItems.Find(pItem[0]->GetName())) : (CTCOnBoardMemoryImagesProcessorItem *)NULL) && pItem[0]->GetMemoryImageVersioning(szPrefix[0], nFormat[0], nInfo[0]) >= 0)
		{
			for (pItem[1]->GetMemoryImageVersioning(szPrefix[1], nFormat[1], nInfo[1]); szPrefix[0] != szPrefix[1] || nFormat[0] != nFormat[1] || nInfo[0] != nInfo[1] || pItem[0]->GetMemoryImageVersionLimit() != pItem[1]->GetMemoryImageVersionLimit(); )
			{
				pItem[1]->SetMemoryImageVersioning(szPrefix[0], nFormat[0], nInfo[0]);
				pItem[1]->SetMemoryImageVersionLimit(pItem[0]->GetMemoryImageVersionLimit());
				LogDumpVersioning(pItem[1]->GetName());
				break;
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems.GetAt(nItem)) && pItems.Find(pItem[0]->GetName()) < 0)
		{
			m_pItems.RemoveAt(nItem);
			delete pItem[0];
			nItems--;
			nItem--;
		}
	}
	UpdateContent();
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetProcessors(CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll) CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nInfo;
	UINT  nFormat;
	CString  szPrefix;
	CTCOnBoardMemoryImagesProcessorItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (bAll) ? ((pItems.Copy(&m_pItems)) ? 0 : -1) : (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems.GetAt(nItem)) && pItem[0]->GetMemoryImageVersioning(szPrefix, nFormat, nInfo) >= 0)
		{
			if ((pItem[1] = new CTCOnBoardMemoryImagesProcessorItem))
			{
				if (pItem[1]->CDatabaseOBProcessor::Copy(pItem[0]))
				{
					pItem[1]->SetMemoryImageVersioning(szPrefix, nFormat, nInfo);
					pItem[1]->SetMemoryImageVersionLimit(pItem[0]->GetMemoryImageVersionLimit());
					pItems.InsertAt(nItem, pItem[1], 1);
					continue;
				}
				delete pItem[1];
			}
		}
		break;
	}
	while (pItems.GetSize() > m_pItems.GetSize())
	{
		if ((pItem[1] = pItems.GetAt((INT)pItems.GetUpperBound())))
		{
			pItems.RemoveAt(pItems.GetUpperBound());
			delete pItem[1];
		}
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetCurProcessor(INT nIndex)
{
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	if (nIndex != GetCurText() && SetCurText(nIndex))
	{
		if ((pItem = m_pItems.GetAt(nIndex)) != (CTCOnBoardMemoryImagesProcessorItem *)NULL)
		{
			GetParentDisplay()->SetCurProcessor(pItem);
			return TRUE;
		}
	}
	return((nIndex == GetCurText()) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	INT  nIndex;
	CTextViewLock  cLock(this);

	return(((nIndex = m_pItems.Find(pItem->GetName())) >= 0 && m_pItems.GetAt(nIndex)->Copy(pItem)) ? SetCurProcessor(nIndex) : FALSE);
}

INT CTCOnBoardMemoryImagesSummaryTextView::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	INT  nIndex;
	CTextViewLock  cLock(this);

	for (nIndex = GetCurText(); pItem != (CTCOnBoardMemoryImagesProcessorItem *)NULL; )
	{
		if (pItem->Copy(m_pItems.GetAt((nIndex = GetCurText())))) return nIndex;
		nIndex = -1;
		break;
	}
	return nIndex;
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::GetCurProcessor(CString &szProcessor) CONST
{
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pItem = m_pItems.GetAt(GetCurText())))
	{
		szProcessor = pItem->GetName();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nItem;
	INT  nItems;
	INT  nIndex[2];
	INT  nMemoryDump;
	INT  nMemoryDumps;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nAddressBytes;
	CString  szVersion;
	CTimeKey  tMemoryDump;
	CTimeTag  tDownloadTime;
	CByteArray  nDumpData[2];
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps;
	CStringTools  cStringTools;
	CDatabaseTMPacket  *pPacket;
	CDatabaseOBProcessor  *pProcessor[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CTCOnBoardMemoryImagesProcessorItem  *pItem[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue[2];
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry[2];
	CTextViewLock  cLock(this);

	if ((pItem[0] = m_pItems.GetAt(m_pItems.Find(pszProcessor))))
	{
		if ((pProcessor[0] = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))))
		{
			if ((pMemoryImage = (pImage != (CONST CDatabaseOBProcessorMemoryImage *) NULL) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), nIndex[0] = -1; (pMemoryArea[1] = ((pMemoryArea[0] = pProcessor[0]->GetAt(pProcessor[0]->Find(pImage->GetName()))) && (nIndex[0] = pItem[0]->Find(pImage->GetName())) < 0 && !bDelete) ? new CDatabaseOBProcessorMemoryArea : (CDatabaseOBProcessorMemoryArea *)NULL); )
				{
					if (pMemoryArea[1]->Copy(pMemoryArea[0]) && pItem[0]->Add(pMemoryArea[1]) >= 0)
					{
						pMemoryArea[1]->SetMemoryImage(pImage);
						break;
					}
					delete pMemoryArea[1];
					break;
				}
				if ((pMemoryArea[1] = (!pMemoryArea[0]) ? pItem[0]->GetAt((nIndex[0] = pItem[0]->Find(pImage->GetName()))) : (CDatabaseOBProcessorMemoryArea *)NULL))
				{
					pItem[0]->RemoveAt(nIndex[0]);
					delete pMemoryArea[1];
					nIndex[0] = -1;
				}
				if ((pMemoryArea[1] = pItem[0]->GetAt(pItem[0]->Find(pImage->GetName()))))
				{
					for (nMemoryBlock = nIndex[1] = ((pImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) < 0 && pMemoryArea[1]->GetMemoryImage(pMemoryImage)) || (pImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) >= 0 && pMemoryImage->Copy(pImage))) ? pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) : -1, nMemoryBlocks = (INT)pMemoryImage->GetSize(), szVersion.Empty(), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0, nDumpData[0].RemoveAll(); nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && (szVersion.IsEmpty() || pMemoryImageBlock[0]->GetVersion() == szVersion) && (nMemoryBlock > nIndex[1] || pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1])) && pMemoryImageBlock[0]->GetAddress(nAddress[1][0], nAddress[1][1]))
						{
							if ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (ULONGLONG)((nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes) == (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])
							{
								if (pMemoryImageBlock[0]->GetData(nDumpData[1]) >= 0)
								{
									szVersion = pMemoryImageBlock[0]->GetVersion();
									nDumpData[0].Append(nDumpData[1]);
									continue;
								}
							}
						}
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetVersion() != szVersion  &&  !szVersion.IsEmpty())
						{
							nMemoryBlock = nMemoryBlocks - 1;
							continue;
						}
						break;
					}
					for (nMemoryDump = 0, nMemoryDumps = (pItem[0]->GetMemoryDumps(pMemoryDumps) > 0) ? (INT)pMemoryDumps.GetSize() : 0; nMemoryDump < nMemoryDumps; nMemoryDump++)
					{
						if ((pMemoryDump = pMemoryDumps.GetAt(nMemoryDump)) != (CMemoryDump *)NULL  &&  pMemoryDump->GetName().Find(pImage->GetName() + TAB) == 0)
						{
							pMemoryDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / ((ULONGLONG)nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % ((ULONGLONG)nRange[1][1] - nRange[1][0])));
							pItem[0]->SetMemoryDumps(pMemoryDumps);
							break;
						}
					}
					if ((pMemoryDump = (nMemoryDump == nMemoryDumps) ? new CMemoryDump : (CMemoryDump *)NULL))
					{
						for (pMemoryDump->SetName(pImage->GetName() + TAB + tMemoryDump.FormatGmt()), pMemoryDump->SetDataSource(GetMemoryDumpsServiceSupport()->DetermineMemoryDumpSource(((pPacket = GetDatabase()->GetTMPackets()->GetAt(pProcessor[0]->GetDumpPacketRef()))) ? pPacket->GetTag() : EMPTYSTRING)), pMemoryDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / ((ULONGLONG)nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % ((ULONGLONG)nRange[1][1] - nRange[1][0]))), pMemoryDump->SetDataAddressBitWidth(4 * cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength()), pMemoryDump->SetDataBitWidth(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth(), 8 * sizeof(BYTE))); pMemoryDumps.Add(pMemoryDump) < 0; )
						{
							delete pMemoryDump;
							break;
						}
						pItem[0]->SetMemoryDumps(pMemoryDumps);
					}
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), pMemoryArea[1]->SetAttributes(pMemoryArea[0]->GetAttributes()), szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock)) && (szVersion.IsEmpty() || pMemoryImageBlock[0]->GetVersion() != szVersion))
						{
							if ((pMemoryAreaCatalogue[0] = new CDatabaseOBProcessorMemoryAreaCatalogue) != (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL)
							{
								if ((pMemoryAreaCatalogue[1] = new CDatabaseOBProcessorMemoryAreaCatalogue) != (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL)
								{
									if ((pMemoryAreaCatalogueEntry[0] = (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue[0])) ? pMemoryAreaCatalogue[0]->GetAt(pMemoryAreaCatalogue[0]->Find(pMemoryImageBlock[0]->GetVersion())) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
									{
										if ((pMemoryAreaCatalogueEntry[1] = (pMemoryArea[1]->GetCatalogue(pMemoryAreaCatalogue[1])) ? pMemoryAreaCatalogue[1]->GetAt(pMemoryAreaCatalogue[1]->Find(pMemoryImageBlock[0]->GetVersion())) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
										{
											pItem[0]->SetLastDumpTime(((tDownloadTime = 1000000 * CTimeKey(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? tDownloadTime : pItem[0]->GetLastDumpTime());
											pMemoryAreaCatalogueEntry[1]->Copy(pMemoryAreaCatalogueEntry[0]);
										}
										else
										{
											if ((pMemoryAreaCatalogueEntry[1] = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
											{
												for (pItem[0]->SetLastDumpTime(((tDownloadTime = 1000000 * CTimeKey(0).ParseGmt(pMemoryAreaCatalogueEntry[0]->GetDate() + SPACE + pMemoryAreaCatalogueEntry[0]->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? tDownloadTime : pItem[0]->GetLastDumpTime()), pMemoryAreaCatalogueEntry[1]->Copy(pMemoryAreaCatalogueEntry[0]); pMemoryAreaCatalogue[1]->Add(pMemoryAreaCatalogueEntry[1]) < 0; )
												{
													delete pMemoryAreaCatalogueEntry[1];
													break;
												}
											}
										}
									}
									pMemoryArea[1]->SetCatalogue(pMemoryAreaCatalogue[1]);
									delete pMemoryAreaCatalogue[1];
								}
								delete pMemoryAreaCatalogue[0];
							}
							szVersion = pMemoryImageBlock[0]->GetVersion();
						}
					}
				}
				if ((pMemoryArea[1] = pItem[0]->GetAt((nIndex[0] = pItem[0]->Find(pImage->GetName())))) && pMemoryArea[1]->GetMemoryImage(pMemoryImage))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryImage->GetName() == pImage->GetName()) ? (INT)pImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[1] = pImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
						{
							while ((nIndex[1] = pMemoryImage->Find(pMemoryImageBlock[1]->GetVersion())) >= 0 && (bOverwrite || bDelete))
							{
								delete pMemoryImage->GetAt(nIndex[1]);
								pMemoryImage->RemoveAt(nIndex[1]);
							}
							while (nIndex[1] < 0 && !bDelete)
							{
								if ((pMemoryImageBlock[0] = new CDatabaseOBProcessorMemoryImageBlock))
								{
									pMemoryImageBlock[0]->Copy(pMemoryImageBlock[1]);
									if (pMemoryImage->Add(pMemoryImageBlock[0]) >= 0)
									{
										if ((pMemoryImageBlock[1] = pImage->GetAt(nMemoryBlock + 1)) && pMemoryImageBlock[0]->GetVersion() == pMemoryImageBlock[1]->GetVersion())
										{
											nMemoryBlock++;
											continue;
										}
										break;
									}
									delete pMemoryImageBlock[0];
								}
								break;
							}
						}
					}
					if ((pMemoryArea[1]->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) && !pMemoryImage->GetSize() && bDelete)
					{
						for (nMemoryDump = 0, nMemoryDumps = (pItem[0]->GetMemoryDumps(pMemoryDumps) > 0) ? (INT)pMemoryDumps.GetSize() : 0; nMemoryDump < nMemoryDumps; nMemoryDump++)
						{
							if ((pMemoryDump = pMemoryDumps.GetAt(nMemoryDump)) && pMemoryDump->GetName().Find(pMemoryImage->GetName() + TAB) == 0)
							{
								pMemoryDumps.RemoveAt(nMemoryDump);
								delete pMemoryDump;
								break;
							}
						}
						pItem[0]->SetMemoryDumps(pMemoryDumps);
						pItem[0]->RemoveAt(nIndex[0]);
						delete pMemoryArea[1];
					}
					pMemoryArea[1]->SetMemoryImage(pMemoryImage);
				}
				delete pMemoryImage;
			}
			for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
			{
				if ((pProcessor[1] = ((pItem[1] = m_pItems.GetAt(nItem))) ? GetDatabase()->GetOBProcessors()->GetAt(nItem) : (CDatabaseOBProcessor *)NULL))
				{
					pItem[1]->SetMasterImageRef(pProcessor[1]->GetMasterImageRef());
					continue;
				}
			}
			UpdateMonitoring(pszProcessor, pItem[0]->GetLastDumpTime(), pItem[0]->GetLastPatchTime());
			return TRUE;
		}
	}
	return FALSE;
}

UINT CTCOnBoardMemoryImagesSummaryTextView::GetProcessorCount() CONST
{
	return GetTextCount();
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::DoAcknowledgeProcessor()
{
	UINT  nAlertType;
	CString  szAlert;
	CTimeKey  tAlert;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pItem = m_pItems.GetAt(GetCurProcessor())))
	{
		if (pItem->GetLastDumpAlert(nAlertType, szAlert, tAlert))
		{
			pItem->SetLastDumpAlert();
			UpdateContent();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::CanAcknowledgeProcessor() CONST
{
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	return(((pItem = m_pItems.GetAt(GetCurProcessor()))) ? (pItem->GetDumpAlerts() > 0) : FALSE);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::StartMonitoring()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nActiveItem;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nAddressBytes;
	CString  szVersion;
	CTimeKey  tMemoryDump;
	CByteArray  nDumpData[4];
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps;
	CStringTools  cStringTools;
	CDatabaseTMPacket  *pPacket;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImages  pMemoryImages;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)GetDatabase()->GetOBProcessors()->GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), GetParentDisplay()->EnumOnBoardMemoryImages(pMemoryImages); nItem < nItems; nItem++)
	{
		if ((pItem = ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(nItem))) ? m_pItems.GetAt(m_pItems.Find(pProcessor->GetName())) : (CTCOnBoardMemoryImagesProcessorItem *)NULL))
		{
			for (nMemoryArea = 0, nMemoryAreas = (pItem->CDatabaseOBProcessor::Copy(pProcessor)) ? (INT)pItem->GetSize() : -1, pMemoryDumps.RemoveAll(); nMemoryArea < nMemoryAreas; nMemoryArea++)
			{
				if ((pMemoryImage = ((pMemoryArea = pItem->GetAt(nMemoryArea))) ? pMemoryImages.GetAt(pMemoryImages.Find(pMemoryArea->GetName())) : (CDatabaseOBProcessorMemoryImage *)NULL))
				{
					for (nMemoryBlock = ((nIndex = pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))) >= 0) ? nIndex : 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), szVersion.Empty(), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0, nDumpData[0].RemoveAll(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && (szVersion.IsEmpty() || pMemoryImageBlock[0]->GetVersion() == szVersion) && ((nMemoryBlock > nIndex  &&  nMemoryBlock > 0) || pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1])) && pMemoryImageBlock[0]->GetAddress(nAddress[1][0], nAddress[1][1]))
						{
							if ((pMemoryAreaCatalogue = (nIndex < 0) ? new CDatabaseOBProcessorMemoryAreaCatalogue : (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL) != (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL)
							{
								if ((pMemoryAreaCatalogueEntry = (pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(pMemoryImageBlock[0]->GetVersion())) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
								{
									if ((pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE) != OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE  &&  pMemoryAreaCatalogueEntry->GetAttributes() != ~(OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE | OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE))
									{
										delete pMemoryAreaCatalogue;
										szVersion.Empty();
										continue;
									}
									if ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (ULONGLONG)((nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes) == (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])
									{
										if ((pMemoryImageBlock[1] = (pMemoryImageBlock[0]->GetData(nDumpData[1]) >= 0) ? new CDatabaseOBProcessorMemoryImageBlock : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
										{
											nDumpData[2].SetSize(nDumpData[1].GetSize());
											nDumpData[3].SetSize(nDumpData[1].GetSize());
											memset(nDumpData[2].GetData(), 0, nDumpData[1].GetSize());
											memset(nDumpData[3].GetData(), MEMORYDUMP_DATATYPE_TEMPLATE, nDumpData[1].GetSize());
											pMemoryImageBlock[1]->Copy(pMemoryImageBlock[0]);
											pMemoryImageBlock[1]->SetData(nDumpData[2]);
											pMemoryImageBlock[1]->SetMask(nDumpData[3]);
											pMemoryImageBlock[1]->SetVersion(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE));
											if (pMemoryImage->Add(pMemoryImageBlock[1]) >= 0)
											{
												szVersion = pMemoryImageBlock[0]->GetVersion();
												nDumpData[0].Append(nDumpData[1]);
												delete pMemoryAreaCatalogue;
												continue;
											}
											delete pMemoryImageBlock[1];
										}
										while ((pMemoryImageBlock[1] = pMemoryImage->GetAt((nIndex = pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))))))
										{
											pMemoryImage->RemoveAt(nIndex);
											delete pMemoryImageBlock[1];
										}
									}
								}
								delete pMemoryAreaCatalogue;
								szVersion.Empty();
								continue;
							}
							if (nIndex >= 0)
							{
								if ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (ULONGLONG)((nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes) == (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])
								{
									if (pMemoryImageBlock[0]->GetData(nDumpData[1]) >= 0)
									{
										szVersion = pMemoryImageBlock[0]->GetVersion();
										nDumpData[0].Append(nDumpData[1]);
										continue;
									}
								}
							}
						}
						if ((pMemoryImageBlock[0] = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetVersion() != szVersion  &&  !szVersion.IsEmpty())
						{
							nMemoryBlock = nMemoryBlocks - 1;
							continue;
						}
						break;
					}
					if ((pMemoryDump = (nMemoryBlock == nMemoryBlocks  &&  nMemoryBlocks > 0 && nDumpData[0].GetSize() > 0) ? new CMemoryDump : (CMemoryDump *)NULL))
					{
						for (pMemoryDump->SetName(pMemoryImage->GetName() + TAB + tMemoryDump.FormatGmt()), pMemoryDump->SetDataSource(GetMemoryDumpsServiceSupport()->DetermineMemoryDumpSource(((pPacket = GetDatabase()->GetTMPackets()->GetAt(pProcessor->GetDumpPacketRef()))) ? pPacket->GetTag() : EMPTYSTRING)), pMemoryDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / ((ULONGLONG)nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + (nDumpData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % ((ULONGLONG)nRange[1][1] - nRange[1][0]))), pMemoryDump->SetDataAddressBitWidth(4 * cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength()), pMemoryDump->SetDataBitWidth(max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth(), 8 * sizeof(BYTE))); pMemoryDumps.Add(pMemoryDump) < 0; )
						{
							delete pMemoryDump;
							break;
						}
					}
					pMemoryArea->SetMemoryImage(pMemoryImage);
				}
			}
			pItem->SetMemoryDumps(pMemoryDumps);
		}
	}
	if (SetProcessors(m_pItems))
	{
		for (nActiveItem = max(m_wndContentCtrl.m_nActiveItem, 0); m_wndContentCtrl.m_nActiveItem >= 0; )
		{
			m_wndContentCtrl.m_nActiveItem = m_wndContentCtrl.m_nActiveColumn = -1;
			break;
		}
		SetCurProcessor(nActiveItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	INT  nRow;
	INT  nCol;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	if ((pItem = (tLastDumpTime > 0 || tLastPatchTime > 0) ? m_pItems.GetAt((nRow = m_pItems.Find(pszProcessor))) : (CTCOnBoardMemoryImagesProcessorItem *)NULL))
	{
		if ((nCol = (tLastDumpTime > 0) ? FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME)) : -1) >= 0)
		{
			pItem->SetLastDumpTime(tLastDumpTime.GetTime());
			SetText(nRow, nCol, tLastDumpTime.FormatGmt());
		}
		if ((nCol = (tLastPatchTime > 0) ? FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME)) : -1) >= 0)
		{
			pItem->SetLastPatchTime(tLastPatchTime.GetTime());
			SetText(nRow, nCol, tLastPatchTime.FormatGmt());
		}
		return TRUE;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesSummaryTextView::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nByte;
	INT  nBytes;
	INT  nError;
	INT  nErrors;
	INT  nDump[2];
	INT  nDumps[2];
	INT  nIndex[2];
	INT  nCount[2];
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	BOOL  bMemoryBlocks;
	UINT  nAddress[2][2][2];
	UINT  nVersioning[2];
	double  fVersioning;
	CString  szVersioning;
	CString  szVersion[2];
	CString  szMessage[2];
	CString  szMemoryDumps;
	CString  szMemoryImage;
	CTimeKey  tMemoryImage[2];
	ULONGLONG  cbDownloadData;
	CPtrArray  pMemoryImageBlocks;
	CUIntArray  nMemoryBlockSizes;
	CByteArray  nDumpData[2][2];
	CMemoryDump  *pMemoryDump[2];
	CMemoryDumps  pMemoryDumps;
	CStringTools  cStringTools;
	CStringArray  szDumpErrors;
	CStringArray  szMemoryImageVersions;
	CStringArray  szMemoryImages;
	CTimeKeyArray  tMemoryImages;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) && pItem->GetMemoryDumps(pMemoryDumps) > 0)
		{
			for (nDump[0] = 0, nDumps[0] = (INT)pMemoryDumps.GetSize(), szMemoryDumps.Empty(); nDump[0] < nDumps[0]; nDump[0]++)
			{
				if ((pMemoryDump[0] = pMemoryDumps.GetAt(nDump[0])) != (CMemoryDump *)NULL)
				{
					if (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_COLLECTING)
					{
						if (pTMEnvironment->GetTMUnit()->GetTimeTag().GetTimeInSeconds() > pMemoryDump[0]->GetDumpTime(FALSE).GetTimeInSeconds() + (pItem->GetDumpInterval().GetTotalSeconds()*(pItem->GetDumpIntervalTolerance() + 100)) / 100)
						{
							for (nDump[1] = 0, nDumps[1] = nDumps[0]; nDump[1] < nDumps[1]; nDump[1]++)
							{
								if ((pMemoryDump[1] = pMemoryDumps.GetAt(nDump[1])) != (CMemoryDump *)NULL)
								{
									if (pMemoryDump[0]->GetDataSourceSubSystem() == pMemoryDump[1]->GetDataSourceSubSystem())
									{
										if (pMemoryDump[0]->GetDataAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]) && pMemoryDump[1]->GetDataAddressRange(nAddress[1][0][0], nAddress[1][0][1], nAddress[1][1][0], nAddress[1][1][1]) && nAddress[0][0][0] == nAddress[1][0][0] && nAddress[0][0][1] == nAddress[1][0][1] && (nAddress[0][1][0] > nAddress[1][1][0] || (nAddress[0][1][0] == nAddress[1][1][0] && nAddress[0][1][1] > nAddress[1][1][1])))
										{
											pMemoryDump[0]->SetDumpInfo(MEMORYDUMP_STATUS_EMPTY);
											break;
										}
									}
								}
							}
							if (nDump[1] == nDumps[1])
							{
								pMemoryDump[0]->SetDumpInfo(MEMORYDUMP_STATUS_INCOMPLETE);
								szMemoryDumps += TAB + pMemoryDump[0]->GetName() + TAB;
							}
						}
					}
				}
			}
			for (nDump[0] = 0, nDumps[0] = (GetTCService()->IsTCOnBoardMemoryImageDump(pTMEnvironment)) ? (INT)((GetMemoryDumpsServiceSupport()->ProcessTMUnit(pTMEnvironment, pMemoryDumps) >= 0) ? (INT)pMemoryDumps.GetSize() : 0) : (INT)(!szMemoryDumps.IsEmpty()*pMemoryDumps.GetSize()); nDump[0] < nDumps[0]; nDump[0]++)
			{
				if ((pMemoryDump[1] = ((pMemoryDump[0] = pMemoryDumps.GetAt(nDump[0]))) ? pTMEnvironment->GetMemoryDumps()->GetAt(pTMEnvironment->GetMemoryDumps()->Find(pMemoryDump[0]->GetName())) : (CMemoryDump *)NULL) && ((pMemoryDump[1]->GetDumpTag() == pTMEnvironment->GetTMUnit()->GetTag() && pMemoryDump[0]->SetDumpInfo(pMemoryDump[1], -1)) || (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_INCOMPLETE  &&  szMemoryDumps.Find(TAB + pMemoryDump[0]->GetName() + TAB) >= 0 && pMemoryDump[1]->SetDumpInfo(pMemoryDump[0], -1))))
				{
					if (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_COMPLETE || pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_INCOMPLETE)
					{
						if ((pMemoryArea = pItem->GetAt(pItem->Find(((nPos = pMemoryDump[0]->GetName().Find(TAB)) >= 0) ? pMemoryDump[0]->GetName().Left(nPos) : pMemoryDump[0]->GetName()))))
						{
							if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
							{
								if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
								{
									if (pMemoryArea->GetMemoryImage(pMemoryImage))
									{
										for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), pMemoryArea->GetCatalogue(pMemoryAreaCatalogue), szMemoryImages.RemoveAll(), tMemoryImages.RemoveAll(), szVersion[0].Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
										{
											if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)))
											{
												if (pMemoryImageBlock->GetVersion() != szVersion[0])
												{
													if ((pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(pMemoryImageBlock->GetVersion()))))
													{
														if ((tMemoryImage[1] = tMemoryImage[0].ParseGmt(pMemoryAreaCatalogueEntry->GetDate() + SPACE + pMemoryAreaCatalogueEntry->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0)
														{
															szMemoryImages.Add(pMemoryImageBlock->GetVersion());
															tMemoryImages.Add(tMemoryImage[1]);
														}
													}
													szVersion[0] = pMemoryImageBlock->GetVersion();
												}
											}
										}
										for (nIndex[0] = 0, nCount[0] = (pItem->GetMemoryImageVersioning(szVersioning, nVersioning[0], nVersioning[1]) || pItem->GetMemoryImageVersionLimit() > 0) ? (INT)(szMemoryImages.GetSize() - max(pItem->GetMemoryImageVersionLimit(), 1) + 1) : (INT)szMemoryImages.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
										{
											for (nIndex[1] = 0, nCount[1] = (INT)tMemoryImages.GetSize(), tMemoryImage[0] = 0, szVersion[0].Empty(); nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if (tMemoryImage[0] == 0 || tMemoryImages.GetAt(nIndex[1]) < tMemoryImage[0])
												{
													tMemoryImage[0] = tMemoryImages.GetAt(nIndex[1]);
													szVersion[0] = szMemoryImages.GetAt(nIndex[1]);
												}
											}
											for (nIndex[1] = pMemoryImage->Find(szVersion[0]), nCount[1] = (INT)pMemoryImage->GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if ((pMemoryImageBlock = pMemoryImage->GetAt(nIndex[1])) && pMemoryImageBlock->GetVersion() == szVersion[0])
												{
													pMemoryImage->RemoveAt(nIndex[1]);
													delete pMemoryImageBlock;
													nIndex[1]--;
													nCount[1]--;
												}
											}
											for (nIndex[1] = 0, nCount[1] = (INT)szMemoryImages.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if (szMemoryImages.GetAt(nIndex[1]) == szVersion[0])
												{
													if (szVersion[0] != STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME))
													{
														szMemoryImage = pItem->GetName();
														szMemoryImage += TAB + pMemoryImage->GetName();
														szMemoryImage += TAB + szVersion[0];
														m_szMemoryImages[0].Add(szMemoryImage);
													}
													szMemoryImages.RemoveAt(nIndex[1]);
													tMemoryImages.RemoveAt(nIndex[1]);
													break;
												}
											}
										}
										for (nMemoryBlock = pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)), nMemoryBlocks = (INT)pMemoryImage->GetSize(), nMemoryBlockSizes.RemoveAll(), nAddress[0][0][0] = nAddress[0][0][1] = nAddress[0][1][0] = nAddress[0][1][1] = 0; nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
										{
											if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && pMemoryImageBlock->GetAddress(nAddress[0][0][0], nAddress[0][0][1]))
											{
												for (nMemoryBlockSizes.Add(pMemoryImageBlock->GetData(nDumpData[0][0])); nMemoryBlockSizes.GetSize() > 1; )
												{
													nMemoryBlockSizes.SetAt(nMemoryBlockSizes.GetUpperBound() - 1, (UINT)((((ULONGLONG)nAddress[0][0][0] << pMemoryDump[0]->GetDataAddressBitWidth()) + (ULONGLONG)nAddress[0][0][1] - ((ULONGLONG)nAddress[0][1][0] << pMemoryDump[0]->GetDataAddressBitWidth()) - (ULONGLONG)nAddress[0][1][1])*(ULONGLONG)max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)));
													break;
												}
												if (nMemoryBlock < nMemoryBlocks - 1)
												{
													nAddress[0][1][0] = nAddress[0][0][0];
													nAddress[0][1][1] = nAddress[0][0][1];
												}
											}
										}
										for (nMemoryBlock = pMemoryImage->Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME)), nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
										{
											if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME))
											{
												pMemoryImage->RemoveAt(nMemoryBlock);
												delete pMemoryImageBlock;
												nMemoryBlocks--;
												nMemoryBlock--;
											}
										}
										for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryDump[0]->GetDataAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]) && pMemoryDump[0]->GetDumpData(nDumpData[0][0]) >= 0 && pMemoryDump[0]->GetDumpMask(nDumpData[1][0]) >= 0) ? 0 : -1, pMemoryDump[1]->SetDumpInfo(pMemoryDump[0]->GetDumpTag(), (szVersion[0] = STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME)), pMemoryDump[0]->GetDumpTime(), nDumpData[0][0], pMemoryDump[0]->GetDumpQuality()), bMemoryBlocks = TRUE; nMemoryBlock < nMemoryBlockSizes.GetSize() && nMemoryBlocks >= 0 && nDumpData[0][0].GetSize() > 0; nMemoryBlock++)
										{
											if ((pMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
											{
												nDumpData[0][1].Copy(nDumpData[0][0]);
												nDumpData[1][1].Copy(nDumpData[1][0]);
												nDumpData[0][1].RemoveAt(min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[0][1].GetSize()), max((INT)(nDumpData[0][1].GetSize() - nMemoryBlockSizes.GetAt(nMemoryBlock)), 0));
												nDumpData[1][1].RemoveAt(min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[1][1].GetSize()), max((INT)(nDumpData[1][1].GetSize() - nMemoryBlockSizes.GetAt(nMemoryBlock)), 0));
												nDumpData[0][0].RemoveAt(0, min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[0][0].GetSize()));
												nDumpData[1][0].RemoveAt(0, min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[1][0].GetSize()));
												pMemoryImageBlock->SetAddress(nAddress[0][0][0], nAddress[0][0][1]);
												pMemoryImageBlock->SetVersion(szVersion[0]);
												pMemoryImageBlock->SetData(nDumpData[0][1]);
												pMemoryImageBlock->SetMask(nDumpData[1][1]);
												if (pMemoryImage->Add(pMemoryImageBlock) >= 0)
												{
													for (bMemoryBlocks &= (!memchr(nDumpData[1][1].GetData(), MEMORYDUMP_DATATYPE_ILLEGAL, nDumpData[1][1].GetSize())) ? TRUE : FALSE; !nMemoryBlock; )
													{
														tMemoryImages.Add(pMemoryDump[0]->GetDumpTime().GetTimeInSeconds());
														szMemoryImages.Add(szVersion[0]);
														break;
													}
													nAddress[0][0][0] += (UINT)((ULONGLONG)nAddress[0][0][1] + (ULONGLONG)(nDumpData[0][1].GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1))) / ((ULONGLONG)1 << pMemoryDump[0]->GetDataAddressBitWidth());
													nAddress[0][0][1] = (UINT)((ULONGLONG)nAddress[0][0][1] + (ULONGLONG)(nDumpData[0][1].GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1))) % ((ULONGLONG)1 << pMemoryDump[0]->GetDataAddressBitWidth());
													continue;
												}
												delete pMemoryImageBlock;
											}
											break;
										}
										for (nIndex[0] = ((nVersioning[0] & TCONBOARDMEMORYIMAGE_VERSIONING_NONUMBER) != TCONBOARDMEMORYIMAGE_VERSIONING_NONUMBER && nCount[0] <= 0) ? (INT)(tMemoryImages.GetSize() - 1) : 0, nCount[0] = (INT)tMemoryImages.GetSize(), szMemoryImageVersions.RemoveAll(), tMemoryImage[0] = 0, fVersioning = 0.0; nIndex[0] < nCount[0] && nIndex[0] >= 0; nIndex[0]++)
										{
											for (szVersion[0].Empty(), szVersion[1].Empty(); nIndex[0] == nCount[0] - 1 && tMemoryImage[0] == 0; )
											{
												tMemoryImage[0] = tMemoryImages.GetAt(nIndex[0]);
												szVersion[0] = szMemoryImages.GetAt(nIndex[0]);
												break;
											}
											if ((nIndex[0] < nCount[0] - 1 || tMemoryImage[0] > 0) && szVersion[0].IsEmpty())
											{
												for (nIndex[1] = 0, nCount[1] = nCount[0], tMemoryImage[1] = 0; nIndex[1] < nCount[1]; nIndex[1]++)
												{
													if (tMemoryImages.GetAt(nIndex[1]) > tMemoryImage[0] && (tMemoryImages.GetAt(nIndex[1]) < tMemoryImage[1] || tMemoryImage[1] == 0))
													{
														tMemoryImage[1] = tMemoryImages.GetAt(nIndex[1]);
														szVersion[1] = szMemoryImages.GetAt(nIndex[1]);
													}
												}
												tMemoryImage[0] = tMemoryImage[1];
												szVersion[0] = szVersion[1];
												szVersion[1].Empty();
											}
											if ((nVersioning[0] & TCONBOARDMEMORYIMAGE_VERSIONING_NONUMBER) && !szVersioning.IsEmpty())
											{
												szMemoryImageVersions.Add((szVersion[1] = szVersioning) + TAB + szVersion[0]);
												continue;
											}
											if (nVersioning[0] & TCONBAORDMEMORYIMAGE_VERSIONING_SIMPLENUMBER)
											{
												szMemoryImageVersions.Add((szVersion[1] = szVersioning + cStringTools.ConvertIntToPaddedString(nIndex[0] + 1, cStringTools.ConvertIntToString(pItem->GetMemoryImageVersionLimit()).GetLength(), 10)) + TAB + szVersion[0]);
												continue;
											}
											if (nVersioning[0] & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXTIMENUMBER)
											{
												for (nIndex[1] = 0, nCount[1] = (INT)tMemoryImages.GetSize(), tMemoryImage[1] = 0, szVersion[1].Empty(); nIndex[1] < nCount[1]; nIndex[1]++)
												{
													if (tMemoryImages.GetAt(nIndex[1]) < tMemoryImage[0] && tMemoryImages.GetAt(nIndex[1]) > tMemoryImage[1])
													{
														tMemoryImage[1] = tMemoryImages.GetAt(nIndex[1]);
														szVersion[1] = szMemoryImages.GetAt(nIndex[1]);
														continue;
													}
												}
												for (; szVersioning.GetLength() <= szVersion[1].GetLength() && szVersion[1].Left(szVersioning.GetLength()) == szVersioning && fVersioning == 0.0; )
												{
													fVersioning = _tstof(szVersion[1].Mid(szVersioning.GetLength()));
													break;
												}
												if (tMemoryImage[0].GetTime() - tMemoryImage[1].GetTime() >= (TIMEKEY)nVersioning[1] || fVersioning == 0.0)
												{
													szMemoryImageVersions.Add((szVersion[1] = szVersioning + cStringTools.ConvertFloatToString((fVersioning = fVersioning + 1.0), cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit()).GetLength() + max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1) + 1)) + TAB + szVersion[0]);
													continue;
												}
												szMemoryImageVersions.Add((szVersion[1] = szVersioning + cStringTools.ConvertFloatToString((fVersioning = fVersioning + 1.0 / pow(10.0, max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1))), cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit()).GetLength() + max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1) + 1)) + TAB + szVersion[0]);
												continue;
											}
											if (nVersioning[0] & TCONBAORDMEMORYIMAGE_VERSIONING_COMPLEXDATANUMBER)
											{
												for (nIndex[1] = 0, nCount[1] = (INT)tMemoryImages.GetSize(), tMemoryImage[1] = 0, szVersion[1].Empty(); nIndex[1] < nCount[1]; nIndex[1]++)
												{
													if (tMemoryImages.GetAt(nIndex[1]) < tMemoryImage[0] && tMemoryImages.GetAt(nIndex[1]) > tMemoryImage[1])
													{
														tMemoryImage[1] = tMemoryImages.GetAt(nIndex[1]);
														szVersion[1] = szMemoryImages.GetAt(nIndex[1]);
														continue;
													}
												}
												for (nIndex[1] = pMemoryImage->Find(szVersion[1]), nCount[1] = (INT)pMemoryImage->GetSize(), fVersioning = (szVersioning.GetLength() <= szVersion[1].GetLength() && szVersion[1].Left(szVersioning.GetLength()) == szVersioning && fVersioning == 0.0) ? _tstof(szVersion[1].Mid(szVersioning.GetLength())) : 0.0, nDumpData[0][0].RemoveAll(); nIndex[1] < nCount[1]; nIndex[1]++)
												{
													if ((pMemoryImageBlock = pMemoryImage->GetAt(nIndex[1])) && pMemoryImageBlock->GetVersion() == szVersion[1])
													{
														if (pMemoryImageBlock->GetData(nDumpData[0][1]) >= 0)
														{
															nDumpData[0][0].Append(nDumpData[0][1]);
															continue;
														}
													}
													break;
												}
												for (nByte = 0, nBytes = (pMemoryDump[0]->GetDumpData(nDumpData[0][1]) == nDumpData[0][0].GetSize()) ? (INT)nDumpData[0][0].GetSize() : -1, nCount[1] = 0; nByte < nBytes; nByte++)
												{
													if (nDumpData[0][0].GetAt(nByte) != nDumpData[0][1].GetAt(nByte))
													{
														nCount[1]++;
														continue;
													}
												}
												if (nBytes <= 0 || (100 * nCount[1]) / nBytes >= (INT)nVersioning[1] || fVersioning == 0.0)
												{
													szMemoryImageVersions.Add((szVersion[1] = szVersioning + cStringTools.ConvertFloatToString((fVersioning = fVersioning + 1.0), cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit()).GetLength() + max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1) + 1)) + TAB + szVersion[0]);
													continue;
												}
												szMemoryImageVersions.Add((szVersion[1] = szVersioning + cStringTools.ConvertFloatToString((fVersioning = fVersioning + 1.0 / pow(10.0, max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1))), cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit()).GetLength() + max(cStringTools.ConvertUIntToString(pItem->GetMemoryImageVersionLimit() - 1).GetLength(), 1) + 1)) + TAB + szVersion[0]);
												continue;
											}
											if (szVersion[1].IsEmpty())
											{
												szVersion[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYAREA_VERSION_FORMAT), nIndex[0] + 1);
												szMemoryImageVersions.Add(szVersion[1] + TAB + szVersion[0]);
											}
										}
										for (nIndex[0] = 0, nCount[0] = (INT)szMemoryImageVersions.GetSize(), pMemoryImageBlocks.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
										{
											for (nIndex[1] = ((nPos = szMemoryImageVersions.GetAt(nIndex[0]).Find(TAB)) >= 0) ? pMemoryImage->Find((szVersion[0] = szMemoryImageVersions.GetAt(nIndex[0]).Mid(nPos + 1))) : -1, szVersion[1] = (nPos >= 0) ? szMemoryImageVersions.GetAt(nIndex[0]).Left(nPos) : EMPTYSTRING, nCount[1] = (INT)pMemoryImage->GetSize(); nIndex[1] < nCount[1] && nIndex[1] >= 0; nIndex[1]++)
											{
												if ((pMemoryImageBlock = pMemoryImage->GetAt(nIndex[1])) && pMemoryImageBlock->GetVersion() == szVersion[0])
												{
													pMemoryImageBlock->SetVersion(szVersion[1]);
													pMemoryImageBlocks.Add(pMemoryImageBlock);
													pMemoryImage->RemoveAt(nIndex[1]);
													nIndex[1]--;
													nCount[1]--;
												}
											}
											for (nIndex[1] = 0, nCount[1] = (INT)szMemoryImages.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if (szMemoryImages.GetAt(nIndex[1]) == szVersion[0])
												{
													szMemoryImage = pItem->GetName();
													szMemoryImage += TAB + pMemoryImage->GetName();
													szMemoryImage += TAB + szVersion[1];
													szMemoryImage += TAB + cStringTools.ConvertLongIntToString(tMemoryImages.GetAt(nIndex[1]).GetTime());
													for (szMemoryImageVersions.SetAt(nIndex[0], szMemoryImage); szVersion[0] != STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME); )
													{
														m_szMemoryImages[0].Add(pItem->GetName() + TAB + pMemoryImage->GetName() + TAB + szVersion[0]);
														break;
													}
													break;
												}
											}
										}
										for (nIndex[0] = 0, nCount[0] = (INT)m_szMemoryImages[0].GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
										{
											for (nIndex[1] = 0, nCount[1] = (INT)szMemoryImageVersions.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if (szMemoryImageVersions.GetAt(nIndex[1]).Find(m_szMemoryImages[0].GetAt(nIndex[0]) + TAB) == 0)
												{
													m_szMemoryImages[0].RemoveAt(nIndex[0]);
													nIndex[0]--;
													nCount[0]--;
													break;
												}
											}
										}
										for (nIndex[0] = 0, nCount[0] = (INT)pMemoryImageBlocks.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
										{
											if ((pMemoryImageBlock = (CDatabaseOBProcessorMemoryImageBlock *)pMemoryImageBlocks.GetAt(nIndex[0])))
											{
												if (pMemoryImage->Add(pMemoryImageBlock) >= 0) continue;
												delete pMemoryImageBlock;
											}
										}
										for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), pMemoryArea->SetMemoryImage(pMemoryImage), pMemoryImage->SetAttributes((pMemoryArea->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE)) | ((pMemoryImage->GetAttributes() & ~(OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE | OBPROCESSORMEMORYIMAGE_FLAG_UPDATE)) | OBPROCESSORMEMORYIMAGE_FLAG_DUMPED)); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
										{
											for (nIndex[1] = 0, nCount[1] = ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock))) ? (INT)szMemoryImageVersions.GetSize() : 0; nIndex[1] < nCount[1]; nIndex[1]++)
											{
												if (szMemoryImageVersions.GetAt(nIndex[1]).Find(pItem->GetName() + TAB + pMemoryImage->GetName() + TAB + pMemoryImageBlock->GetVersion() + TAB) == 0) break;
												continue;
											}
											if (nIndex[1] == nCount[1])
											{
												pMemoryImage->RemoveAt(nMemoryBlock);
												delete pMemoryImageBlock;
												nMemoryBlocks--;
												nMemoryBlock--;
											}
										}
										for (m_szItems.Add(pItem->GetName()), m_pMemoryImages.InsertAt(m_pMemoryImages.GetSize(), pMemoryImage, 1), m_szMemoryImages[1].Append(szMemoryImageVersions), UpdateMonitoring(pItem->GetName(), pMemoryDump[0]->GetDumpTime(), 0); (nIndex[0] = pTMEnvironment->GetMemoryDumps()->Find(pMemoryDump[1]->GetName())) >= 0; )
										{
											pTMEnvironment->GetMemoryDumps()->RemoveAt(nIndex[0]);
											delete pMemoryDump[1];
											break;
										}
										if (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_COMPLETE)
										{
											if (pMemoryDump[0]->GetDataAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]))
											{
												szMessage[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_COMPLETE), ((nPos = pMemoryDump[0]->GetName().Find(TAB)) >= 0) ? (LPCTSTR)pMemoryDump[0]->GetName().Left(nPos) : (LPCTSTR)pMemoryDump[0]->GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]), (LPCTSTR)cStringTools.ConvertLongUIntToStructuredString(((ULONGLONG)(nAddress[0][1][0] - nAddress[0][0][0]) << pMemoryDump[0]->GetDataAddressBitWidth()) + (ULONGLONG)(nAddress[0][1][1] - nAddress[0][0][1] + 1)), pMemoryDump[0]->GetDataBitWidth());
												pItem->SetLastDumpAlert(TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_INFORMATION, szMessage[0], pMemoryDump[0]->GetDumpTime());
											}
										}
										if (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_INCOMPLETE || !bMemoryBlocks)
										{
											if (pMemoryDump[0]->GetDataAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]) && pMemoryDump[0]->GetDumpData(nDumpData[0][0]) >= 0 && pMemoryDump[0]->GetDumpMask(nDumpData[1][0]) >= 0)
											{
												for (nByte = 0, nBytes = (INT)nDumpData[0][0].GetSize(), cbDownloadData = (nDumpData[0][0].GetSize() == nDumpData[1][0].GetSize()) ? nBytes : 0; nByte < nBytes && cbDownloadData > 0; nByte++)
												{
													cbDownloadData = (nDumpData[1][0].GetAt(nByte) == MEMORYDUMP_DATATYPE_ILLEGAL) ? (cbDownloadData - 1) : cbDownloadData;
													continue;
												}
												szMessage[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_INCOMPLETE), ((nPos = pMemoryDump[0]->GetName().Find(TAB)) >= 0) ? (LPCTSTR)pMemoryDump[0]->GetName().Left(nPos) : (LPCTSTR)pMemoryDump[0]->GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]), (INT)((100.0*(double)cbDownloadData) / (double)((((ULONGLONG)(nAddress[0][1][0] - nAddress[0][0][0]) << pMemoryDump[0]->GetDataAddressBitWidth()) + (ULONGLONG)(nAddress[0][1][1] - nAddress[0][0][1] + 1))*max(pMemoryDump[0]->GetDataBitWidth() / 8, 1))));
												pItem->SetLastDumpAlert(TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_WARNING, szMessage[0], pMemoryDump[0]->GetDumpTime());
											}
										}
										pMemoryDump[0]->SetDumpInfo(MEMORYDUMP_STATUS_EMPTY);
										pItem->SetMemoryDumps(pMemoryDumps);
										delete pMemoryAreaCatalogue;
										break;
									}
									delete pMemoryImage;
								}
								delete pMemoryAreaCatalogue;
							}
						}
						if ((nIndex[0] = pTMEnvironment->GetMemoryDumps()->Find(pMemoryDump[1]->GetName())) >= 0)
						{
							pTMEnvironment->GetMemoryDumps()->RemoveAt(nIndex[0]);
							delete pMemoryDump[1];
						}
						szDumpErrors.Add(((nPos = pMemoryDump[0]->GetName().Find(TAB)) >= 0) ? pMemoryDump[0]->GetName().Left(nPos) : pMemoryDump[0]->GetName());
						pMemoryDump[0]->SetDumpInfo(MEMORYDUMP_STATUS_EMPTY);
					}
					if (pMemoryDump[0]->GetDumpStatus() == MEMORYDUMP_STATUS_COLLECTING)
					{
						if ((pMemoryArea = pItem->GetAt(pItem->Find(((nPos = pMemoryDump[0]->GetName().Find(TAB)) >= 0) ? pMemoryDump[0]->GetName().Left(nPos) : pMemoryDump[0]->GetName()))))
						{
							if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
							{
								if (pMemoryArea->GetMemoryImage(pMemoryImage))
								{
									for (nMemoryBlock = pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)), nMemoryBlocks = (INT)pMemoryImage->GetSize(), nMemoryBlockSizes.RemoveAll(), nAddress[0][0][0] = nAddress[0][0][1] = nAddress[0][1][0] = nAddress[0][1][1] = 0; nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
									{
										if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && pMemoryImageBlock->GetAddress(nAddress[0][0][0], nAddress[0][0][1]))
										{
											for (nMemoryBlockSizes.Add(pMemoryImageBlock->GetData(nDumpData[0][0])); nMemoryBlockSizes.GetSize() > 1; )
											{
												nMemoryBlockSizes.SetAt(nMemoryBlockSizes.GetUpperBound() - 1, (UINT)((((ULONGLONG)nAddress[0][0][0] << pMemoryDump[0]->GetDataAddressBitWidth()) + (ULONGLONG)nAddress[0][0][1] - ((ULONGLONG)nAddress[0][1][0] << pMemoryDump[0]->GetDataAddressBitWidth()) - (ULONGLONG)nAddress[0][1][1])*(ULONGLONG)max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1)));
												break;
											}
											if (nMemoryBlock < nMemoryBlocks - 1)
											{
												nAddress[0][1][0] = nAddress[0][0][0];
												nAddress[0][1][1] = nAddress[0][0][1];
											}
										}
									}
									for (nMemoryBlock = pMemoryImage->Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME)), nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
									{
										if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME))
										{
											pMemoryImage->RemoveAt(nMemoryBlock);
											delete pMemoryImageBlock;
											nMemoryBlocks--;
											nMemoryBlock--;
										}
									}
									for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryDump[0]->GetDataAddressRange(nAddress[0][0][0], nAddress[0][0][1], nAddress[0][1][0], nAddress[0][1][1]) && pMemoryDump[0]->GetDumpData(nDumpData[0][0]) >= 0 && pMemoryDump[0]->GetDumpMask(nDumpData[1][0]) >= 0) ? 0 : -1, pMemoryDump[1]->SetDumpInfo(pMemoryDump[0]->GetDumpTag(), (szVersion[0] = STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME)), pMemoryDump[0]->GetDumpTime(), nDumpData[0][0], pMemoryDump[0]->GetDumpQuality()), bMemoryBlocks = TRUE; nMemoryBlock < nMemoryBlockSizes.GetSize() && nMemoryBlocks >= 0 && nDumpData[0][0].GetSize() > 0; nMemoryBlock++)
									{
										if ((pMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
										{
											nDumpData[0][1].Copy(nDumpData[0][0]);
											nDumpData[1][1].Copy(nDumpData[1][0]);
											nDumpData[0][1].RemoveAt(min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[0][1].GetSize()), max((INT)(nDumpData[0][1].GetSize() - nMemoryBlockSizes.GetAt(nMemoryBlock)), 0));
											nDumpData[1][1].RemoveAt(min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[1][1].GetSize()), max((INT)(nDumpData[1][1].GetSize() - nMemoryBlockSizes.GetAt(nMemoryBlock)), 0));
											nDumpData[0][0].RemoveAt(0, min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[0][0].GetSize()));
											nDumpData[1][0].RemoveAt(0, min(nMemoryBlockSizes.GetAt(nMemoryBlock), (UINT)nDumpData[1][0].GetSize()));
											pMemoryImageBlock->SetAddress(nAddress[0][0][0], nAddress[0][0][1]);
											pMemoryImageBlock->SetVersion(szVersion[0]);
											pMemoryImageBlock->SetData(nDumpData[0][1]);
											pMemoryImageBlock->SetMask(nDumpData[1][1]);
											if (pMemoryImage->Add(pMemoryImageBlock) >= 0)
											{
												nAddress[0][0][0] += (UINT)((ULONGLONG)nAddress[0][0][1] + (ULONGLONG)(nDumpData[0][1].GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1))) / ((ULONGLONG)1 << pMemoryDump[0]->GetDataAddressBitWidth());
												nAddress[0][0][1] = (UINT)((ULONGLONG)nAddress[0][0][1] + (ULONGLONG)(nDumpData[0][1].GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1))) % ((ULONGLONG)1 << pMemoryDump[0]->GetDataAddressBitWidth());
												continue;
											}
											delete pMemoryImageBlock;
										}
										break;
									}
									pMemoryArea->SetMemoryImage(pMemoryImage);
									pMemoryDump[1]->Copy(pMemoryDump[0], TRUE);
								}
								delete pMemoryImage;
							}
						}
					}
					pItem->SetMemoryDumps(pMemoryDumps);
				}
			}
			for (szMessage[0].Empty(); (nErrors = (INT)szDumpErrors.GetSize()) > 0; )
			{
				for (nError = 0, szMessage[1].Empty(); nError < nErrors - 1; nError++)
				{
					szMessage[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_NAMEFORMAT), (LPCTSTR)szDumpErrors.GetAt(nError));
					szMessage[1] += (!szMessage[1].IsEmpty()) ? (STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_SEPARATOR) + szMessage[0]) : szMessage[0];
				}
				szMessage[0].Format((nErrors > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_FAILURES) : STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_FAILURE), (nErrors > 1) ? (LPCTSTR)szMessage[1] : (LPCTSTR)szDumpErrors.GetAt(nErrors - 1), (nErrors > 1) ? szDumpErrors.GetAt(nErrors - 1) : EMPTYSTRING);
				pItem->SetLastDumpAlert(TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_ERROR, szMessage[0], pTMEnvironment->GetTMUnit()->GetTimeTag().GetTimeInSeconds());
				szDumpErrors.RemoveAll();
				break;
			}
		}
	}
	for (; m_pMemoryImages.GetSize() > 0; )
	{
		SetTimer(TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_PROCESSDATA_TIMERID, TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_PROCESSDATA_TIMEOUT, NULL);
		break;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::SetLayoutInfo(INT nIndex, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	CTextViewLock  cLock(this);

	SetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	SetCurText(nIndex);
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetLayoutInfo(INT &nIndex, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	CTextViewLock  cLock(this);

	nIndex = GetCurText();
	GetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::GetPrintProperties(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	UINT  nCount;
	UINT  nRange[2];
	CTextViewLock  cLock(this);

	pSymbols.RemoveAll();
	nSymbolIDs.RemoveAll();
	nSymbolIDs.Add(IDP_TCONBOARDMEMORYIMAGESINFORMATION);
	nSymbolIDs.Add(IDP_TCONBOARDMEMORYIMAGESWARNING);
	nSymbolIDs.Add(IDP_TCONBOARDMEMORYIMAGESERROR);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_INFORMATION]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_WARNING]);
	pSymbols.Add(m_pAlertSymbols[TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_ERROR]);
	if (GetColumns(szColumns) && GetContent(szContents, pAttributes) && GetTitleFont(pTitleFont) && GetItemsFont(pItemsFont))
	{
		if (pJobInfo->GetPrintByRange(nRange[0], nRange[1]) || pJobInfo->GetPrintBySide(nCount))
		{
			if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE)
			{
				nRange[0] = (nCount > (UINT)szContents.GetSize()) ? (UINT)szContents.GetSize() : nCount;
				nRange[1] = (UINT)szContents.GetSize();
			}
			if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)
			{
				nRange[1] = (nCount < (UINT)szContents.GetSize()) ? (UINT)(szContents.GetSize() - nCount) : 0;
				nRange[0] = 0;
			}
			if ((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) || (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE))
			{
				for (; nRange[0] < nRange[1] || (nRange[0] == nRange[1] && nRange[0] > 0); nRange[0]++)
				{
					if (nRange[0] < (UINT)szContents.GetSize())
					{
						delete pAttributes.GetAt(nRange[0]);
						pAttributes.RemoveAt(nRange[0]);
						szContents.RemoveAt(nRange[0]);
						nRange[1]--;
						nRange[0]--;
						continue;
					}
					break;
				}
			}
			if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_RANGE)
			{
				for (; nRange[0] > 1; nRange[0]--, nRange[1]--)
				{
					if (szContents.GetSize() > 0)
					{
						delete pAttributes.GetAt(0);
						pAttributes.RemoveAt(0);
						szContents.RemoveAt(0);
						continue;
					}
					break;
				}
				while (nRange[1] < (UINT)szContents.GetSize())
				{
					delete pAttributes.GetAt(nRange[1]);
					pAttributes.RemoveAt(nRange[1]);
					szContents.RemoveAt(nRange[1]);
				}
			}
		}
		return TRUE;
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesSummaryTextView::UpdateContent(BOOL bRedraw)
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nAlertType;
	CString  szItem;
	CString  szSize;
	CString  szAlert;
	CString  szAddress;
	CString  szDumpTime;
	CString  szPatchTime;
	CString  szDumpPacket;
	CString  szDumpCommand;
	CString  szPatchCommand;
	CTimeKey  tAlertTime;
	CStringArray  szColumns;
	CStringTools  cStringTools;
	CDatabaseTMPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) != (CTCOnBoardMemoryImagesProcessorItem *)NULL)
		{
			for (nColumn = 0, nColumns = (GetColumns(szColumns)) ? (INT)szColumns.GetSize() : -1, szItem.Empty(); nColumn < nColumns; nColumn++)
			{
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR))
				{
					for (szAlert.Empty(); pItem->GetLastDumpAlert(nAlertType, szAlert, tAlertTime); )
					{
						szAlert = (nAlertType == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_INFORMATION) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_INFORMATION)) : GetSymbolDelimiter();
						szAlert += (nAlertType == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_WARNING) ? STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_WARNING) : EMPTYSTRING;
						szAlert += (nAlertType == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_ERROR) ? STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_ERROR) : EMPTYSTRING;
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetName() + szAlert) : (pItem->GetName() + szAlert);
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE))
				{
					for (szAddress.Empty(); pItem->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]); )
					{
						szAddress = GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]);
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAddress) : szAddress;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE))
				{
					for (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szSize.Empty(); pItem->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]); )
					{
						szSize = cStringTools.ConvertLongUIntToStructuredString((ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)*(ULONGLONG)(nAddress[0][1] - nAddress[0][0]) + (ULONGLONG)nAddress[1][1] - (ULONGLONG)nAddress[1][0] + 1);
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szSize) : szSize;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC))
				{
					for (szPatchCommand = STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_PATCH_NOCOMMAND); (pFunction = GetDatabase()->GetTCFunctions()->GetAt(pItem->GetPatchCommandRef())); )
					{
						szPatchCommand = pFunction->GetName();
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szPatchCommand) : szPatchCommand;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME))
				{
					szPatchTime = (pItem->GetPatchCommandRef() >= 0 && pItem->GetLastPatchTime() > 0) ? pItem->GetLastPatchTime().FormatGmt() : STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_PATCH_NOTIME);
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szPatchTime) : szPatchTime;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC))
				{
					for (szDumpCommand = STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_DUMP_NOCOMMAND); (pFunction = GetDatabase()->GetTCFunctions()->GetAt(pItem->GetDumpCommandRef())); )
					{
						szDumpCommand = pFunction->GetName();
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDumpCommand) : szDumpCommand;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM))
				{
					for (szDumpPacket = STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_DUMP_NOPACKET); (pPacket = GetDatabase()->GetTMPackets()->GetAt(pItem->GetDumpPacketRef())); )
					{
						szDumpPacket = pPacket->GetTag();
						break;
					}
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDumpPacket) : szDumpPacket;
				}
				if (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME))
				{
					szDumpTime = (pItem->GetDumpPacketRef() >= 0 && pItem->GetLastDumpTime() > 0) ? pItem->GetLastDumpTime().FormatGmt() : STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_DUMP_NOTIME);
					szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDumpTime) : szDumpTime;
				}
			}
			if (nItem < GetTextCount())
			{
				SetText(nItem, szItem, (CTextViewAttribute *)NULL, (nItem == nItems - 1) ? TRUE : FALSE);
				continue;
			}
			InsertText(nItem, szItem, (CTextViewAttribute *)NULL, (nItem == nItems - 1) ? TRUE : FALSE);
		}
	}
	while ((nCount = GetTextCount()) > nItems)
	{
		if (!DeleteText(nItems, (nItems == nCount - 1) ? TRUE : FALSE)) break;
		continue;
	}
}

VOID CTCOnBoardMemoryImagesSummaryTextView::RefreshContent()
{
	INT  nColumn;
	INT  nColumns;
	CTextViewLock  cLock(this);

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (SetColumnColor(nColumn, LookupColumnColor(LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))); LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)) == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR; )
		{
			SetColumnFormat(nColumn, GetColumnFormat(nColumn) | DT_SINGLELINE);
			break;
		}
	}
	UpdateContent();
}

VOID CTCOnBoardMemoryImagesSummaryTextView::DrawContent()
{
	CTextView::DrawContent();
}
VOID CTCOnBoardMemoryImagesSummaryTextView::DrawContent(CDC *pDC)
{
	CTextView::DrawContent(pDC);
}

VOID CTCOnBoardMemoryImagesSummaryTextView::DrawText(INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, pszText);
}
VOID CTCOnBoardMemoryImagesSummaryTextView::DrawText(CDC *pDC, INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(pDC, nItem, pszText);
}
VOID CTCOnBoardMemoryImagesSummaryTextView::DrawText(INT nItem, INT nColumn, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, nColumn, pszText);
}
VOID CTCOnBoardMemoryImagesSummaryTextView::DrawText(CDC *pDC, INT nItem, INT nColumn, LPCTSTR pszText)
{
	CDC  cDC;
	INT  nPos;
	BOOL  bState;
	UINT  nFormat;
	UINT  nSymbol;
	CRect  rText[3];
	CFont  cTextFont;
	CFont  *pOldFont;
	CSize  sizeSymbol;
	CSize  sizeBitmap;
	CPoint  ptBitmap;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	COLORREF  nColor[2];
	CTextViewAttribute  *pAttribute;

	for (m_wndContentCtrl.GetClientRect(rText[0]), rText[1] = m_wndContentCtrl.CalcTextRect(nItem, nColumn), sizeBitmap.cx = m_wndContentCtrl.m_wTextIndent[0] + rText[1].Width() + m_wndContentCtrl.m_wTextIndent[1], sizeBitmap.cy = m_wndContentCtrl.m_wTextSpacing[0] + rText[1].Height() + m_wndContentCtrl.m_wTextSpacing[1]; rText[2].IntersectRect(rText[0], CRect(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[1].right + m_wndContentCtrl.m_wTextIndent[1], rText[1].bottom + m_wndContentCtrl.m_wTextSpacing[1])); )
	{
		for (nFormat = GetColumnFormat(nItem, nColumn), nColor[0] = GetColumnColor(nItem, nColumn), bState = TRUE; (pAttribute = m_wndContentCtrl.m_pContentTextAttributes.GetAt(nItem)); )
		{
			bState = (pAttribute->GetColumnBlinkingState(nColumn, bState) || pAttribute->GetColumnBlinkingState(-1, bState)) ? bState : TRUE;
			break;
		}
		if (cDC.CreateCompatibleDC(pDC))
		{
			if (cBitmap.CreateCompatibleBitmap(pDC, sizeBitmap.cx, sizeBitmap.cy))
			{
				if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
				{
					for (cDC.SetBkMode(TRANSPARENT), cDC.SetTextColor(nColor[0]), DrawBackground(&cDC, nItem, nColumn, CRect(m_wndContentCtrl.m_wTextIndent[0] - rText[1].left, 0, sizeBitmap.cx, sizeBitmap.cy)); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
					{
						cDC.DrawText(((nPos = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR))) ? (INT)_tcscspn(pszText, CString(GetSymbolDelimiter())) : -1) >= 0) ? CString(pszText).Left(nPos) : pszText, CRect(m_wndContentCtrl.m_wTextIndent[0], m_wndContentCtrl.m_wTextSpacing[0], sizeBitmap.cx - m_wndContentCtrl.m_wTextIndent[0], sizeBitmap.cy - m_wndContentCtrl.m_wTextSpacing[0]), nFormat);
						cDC.SelectObject(pOldFont);
						break;
					}
					if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)))
					{
						for (sizeSymbol.cx = sizeSymbol.cy = 0, nColor[1] = cDC.GetNearestColor(VGA_COLOR_WHITE), cTextFont.DeleteObject(); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
						{
							sizeSymbol.cx = sizeSymbol.cy = cDC.GetTextExtent(SPACE).cy;
							m_sizeAlertSymbols = sizeSymbol;
							cDC.SelectObject(pOldFont);
							cTextFont.DeleteObject();
							break;
						}
						for (nSymbol = (!_tcsstr(pszText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_INFORMATION))) ? ((!_tcsstr(pszText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_WARNING))) ? ((_tcsstr(pszText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_ERROR))) ? TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_ERROR : -1) : TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_WARNING) : TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_INFORMATION; nSymbol != (UINT)-1; )
						{
							if (bState) m_pAlertSymbols[nSymbol]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, pszText).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
							break;
						}
					}
					ptBitmap.x = max(rText[2].left - rText[1].left + m_wndContentCtrl.m_wTextIndent[0], 0);
					ptBitmap.y = max(rText[2].top - rText[1].top + m_wndContentCtrl.m_wTextSpacing[0], 0);
					pDC->BitBlt(max(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[2].left), max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[2].top), min(sizeBitmap.cx - ptBitmap.x, rText[2].Width()), min(sizeBitmap.cy - ptBitmap.y, rText[2].Height()), &cDC, ptBitmap.x, ptBitmap.y, SRCCOPY);
					cDC.SelectObject(pOldBitmap);
				}
				cBitmap.DeleteObject();
			}
			cDC.DeleteDC();
		}
		break;
	}
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::DrawBackground(CDC *pDC, INT nItem, INT nColumn, CONST RECT &rItem)
{
	if (nColumn < 0)
	{
		pDC->FillSolidRect(&rItem, GetSysColor(COLOR_WINDOW));
		return TRUE;
	}
	return CTextView::DrawBackground(pDC, nItem, nColumn, rItem);
}

CTCOnBoardMemoryImagesSummaryView *CTCOnBoardMemoryImagesSummaryTextView::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesSummaryView *)CTextView::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSummaryTextView::GetParentDisplay() CONST
{
	CTCOnBoardMemoryImagesSummaryView  *pView;

	return(((pView = GetParent())) ? pView->GetParentDisplay() : (CTCOnBoardMemoryImagesWnd *)NULL);
}

CString CTCOnBoardMemoryImagesSummaryTextView::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM);
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) return STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME);
	return EMPTYSTRING;
}
UINT CTCOnBoardMemoryImagesSummaryTextView::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR))) return TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE))) return TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE))) return TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC))) return TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME))) return TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC))) return TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM))) return TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM;
	if (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME))) return TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME;
	return 0;
}

INT CTCOnBoardMemoryImagesSummaryTextView::LookupColumnsName(CONST CUIntArray &nColumns, CStringArray &szColumns) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), szColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		szColumns.Add(LookupColumnName(nColumns.GetAt(nIndex)));
		continue;
	}
	return((nCount == szColumns.GetSize()) ? (INT)szColumns.GetSize() : 0);
}

COLORREF CTCOnBoardMemoryImagesSummaryTextView::LookupColumnColor(UINT nColumn) CONST
{
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) return GetDatabase()->GetTCOnBoardMemoryImagesProcessorColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) return GetDatabase()->GetTCOnBoardMemoryImagesAddressRangeColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) return GetDatabase()->GetTCOnBoardMemoryImagesSizeColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) return GetDatabase()->GetTCOnBoardMemoryImagesPatchTCColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) return GetDatabase()->GetTCOnBoardMemoryImagesLastPatchTimeColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) return GetDatabase()->GetTCOnBoardMemoryImagesDumpTCColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) return GetDatabase()->GetTCOnBoardMemoryImagesDumpTMColumnColor();
	if (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) return GetDatabase()->GetTCOnBoardMemoryImagesLastDumpTimeColumnColor();
	return GetSysColor(COLOR_WINDOWTEXT);
}

INT CTCOnBoardMemoryImagesSummaryTextView::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn).Compare(pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCOnBoardMemoryImagesSummaryTextView::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	INT  nDxChar;
	UINT  nColumn;
	CFont  cFont[2];
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((nColumn = LookupColumnName(pszColumn)) == 0)
		{
			for (GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[1])); )
			{
				nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
				pDC->SelectObject(pOldFont);
				break;
			}
			ReleaseDC(pDC);
			return nWidth;
		}
		for (GetTitleFont(&cFont[0]), GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[0])); )
		{
			nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
			pDC->SelectObject(pOldFont);
			break;
		}
		if ((pOldFont = pDC->SelectObject(&cFont[1])))
		{
			if ((nDxChar = (pDC->GetTextMetrics(&tmFont) > 0) ? (4 * tmFont.tmAveCharWidth / 3) : 0) > 0)
			{
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesProcessorColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_ADDRESSRANGE) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesAddressRangeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_SIZE) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesSizeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_PATCHTC) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesPatchTCColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTPATCHTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesLastPatchTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTC) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesDumpTCColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_DUMPTM) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesDumpTMColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCONBOARDMEMORYIMAGES_TITLEITEM_LASTDUMPTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCOnBoardMemoryImagesLastDumpTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		return nWidth;
	}
	return 0;
}

INT CTCOnBoardMemoryImagesSummaryTextView::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nWidth;
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (nColumns.GetAt(nIndex[0]) == LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex[1])))
			{
				nWidth = (nIndex[1] > 0) ? (m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]) - m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1] - 1)) : m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]);
				nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + nWidth) : nWidth);
				break;
			}
		}
		if (nIndex[1] == nCount[1])
		{
			nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0])))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0]))));
			continue;
		}
	}
	return((nCount[0] == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

CRect CTCOnBoardMemoryImagesSummaryTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, LPCTSTR pszText) CONST
{
	INT  nPos;
	CRect  rText;
	CRect  rSymbol;
	CFont  *pOldFont;
	CString  szText;
	CClientDC  cDC(NULL);

	for (szText = ((nPos = (szText = pszText).Find(GetSymbolDelimiter())) >= 0) ? szText.Left(nPos) : szText, rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), rSymbol.SetRectEmpty(); (pOldFont = (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)) && !rText.IsRectEmpty()) ? cDC.SelectObject((CFont *)&m_wndContentCtrl.m_cFont) : (CFont *)NULL); )
	{
		rSymbol.SetRect(rText.left + cDC.GetTextExtent(szText + SPACE).cx, rText.top, rText.left + cDC.GetTextExtent(szText + SPACE).cx + m_sizeAlertSymbols.cx, rText.top + m_sizeAlertSymbols.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		cDC.SelectObject(pOldFont);
		break;
	}
	return rSymbol;
}

TCHAR CTCOnBoardMemoryImagesSummaryTextView::GetSymbolDelimiter()
{
	return TAB;
}

CString CTCOnBoardMemoryImagesSummaryTextView::ConstructToolTipTitle(CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	CString  szTitle;

	switch (nTip)
	{
	case TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_INFORMATION)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTINFORMATION);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_WARNING)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTWARNING);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_ERROR)))
	{
		szTitle = STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTERROR);
		break;
	}
	break;
	}
	}
	return szTitle;
}

CString CTCOnBoardMemoryImagesSummaryTextView::ConstructToolTipText(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nCount;
	CString  szText;
	CString  szAlert;
	CUIntArray  nAlerts;
	CStringArray  szAlerts;
	CTimeKeyArray  tAlerts;

	switch (nTip)
	{
	case TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR:
	{ if (_tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTINFORMATION)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTWARNING)) || _tcsstr(pszTip, STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTERROR)))
	{
		for (nCount = pItem->GetDumpAlerts(nAlerts, szAlerts, tAlerts), szAlert = (nCount > 0) ? (szAlerts.GetAt(szAlerts.GetUpperBound()) + CString(EOL) + tAlerts.GetAt((INT)tAlerts.GetUpperBound()).FormatGmt(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTTIME))) : EMPTYSTRING; nCount > 1; )
		{
			szText.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_TOOLTIP_ALERTCOUNT), nCount);
			szAlert += EOL + szText;
			break;
		}
		szText = (nCount > 0) ? szAlert : EMPTYSTRING;
	}
	break;
	}
	default: break;
	}
	return szText;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::LogDumpVersioning(LPCTSTR pszProcessor)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszProcessor) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPVERSIONINGFORMAT), pszProcessor);
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::LoadTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (nSymbol = 0, nSymbols = TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_INFORMATION) ? MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESINFORMATION) : ((nSymbol == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_WARNING) ? MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESWARNING) : MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESERROR)), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pAlertSymbols[nSymbol] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pAlertSymbols[nSymbol]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pAlertSymbols[nSymbol];
									m_pAlertSymbols[nSymbol] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol > 0)
		{
			delete m_pAlertSymbols[--nSymbol];
			m_pAlertSymbols[nSymbol] = (CImage *)NULL;
		}
		break;
	}
	return((nSymbol == nSymbols) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesSummaryTextView::FreeTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;

	for (nSymbol = 0, nSymbols = TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pAlertSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pAlertSymbols[nSymbol]->Destroy();
			delete m_pAlertSymbols[nSymbol];
		}
	}
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCOnBoardMemoryImagesSummaryTextView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::Lock()
{
	CTCOnBoardMemoryImagesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (pParentWnd->Lock() && CTextView::Lock()) : CTextView::Lock());
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::Unlock()
{
	CTCOnBoardMemoryImagesWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (CTextView::Unlock() && pParentWnd->Unlock()) : CTextView::Unlock());
}

void CTCOnBoardMemoryImagesSummaryTextView::PostNcDestroy()
{
	m_pItems.RemoveAll();
	m_szItems.RemoveAll();
	m_szMemoryImages[0].RemoveAll();
	m_szMemoryImages[1].RemoveAll();
	m_pMemoryImages.RemoveAll();
	CTextView::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSummaryTextView, CTextView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSummaryTextView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSummaryTextView message handlers

int CTCOnBoardMemoryImagesSummaryTextView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CTextViewLock  cLock(this);

	return((CTextView::OnCreate(lpCreateStruct) != -1 && LoadTelecommandSymbols() && LoadToolTipCursor()) ? 0 : -1);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	INT  nRow;
	INT  nColumn;
	CPoint  ptCursor;
	CString  szText;
	CTextViewLock  cLock(this);

	for (GetCursorPos(&ptCursor), m_wndContentCtrl.ScreenToClient(&ptCursor); IsToolTipModeEnabled() && FindTextFromPoint(ptCursor, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szText); )
	{
		if (nColumn == FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)))
		{
			if (_tcsstr(szText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_INFORMATION)) || _tcsstr(szText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_WARNING)) || _tcsstr(szText, STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_ERROR)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, szText).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
		}
		break;
	}
	return CTextView::OnSetCursor(pWnd, nHitTest, message);
}

BOOL CTCOnBoardMemoryImagesSummaryTextView::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nHeight;
	CRect  rContent;
	CFont  cFont[2];
	CPoint  ptToolTip;
	LOGFONT  lfFont[2];
	CString  szColumn;
	CString  szToolTip[3];
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTextViewLock  cLock(this);

	if (message == WM_KEYDOWN)
	{
		if (wParam == VK_UP || wParam == VK_DOWN)
		{
			for (nIndex = GetCurText(); wParam == VK_UP && (nIndex > 0 || (nIndex < 0 && GetCurText() > 0)); )
			{
				CHourglassCursor  cCursor;
				SetCurProcessor((nIndex = (nIndex < 0) ? (GetTextCount() - 1) : (nIndex - 1)));
				ScrollTo(nIndex);
				return TRUE;
			}
			if (wParam == VK_DOWN && (nIndex < (INT)GetTextCount() - 1 || (nIndex < 0 && GetTextCount() > 0)))
			{
				CHourglassCursor  cCursor;
				SetCurProcessor((nIndex = (nIndex >= 0) ? (nIndex + 1) : 0));
				ScrollTo(nIndex);
				return TRUE;
			}
		}
		if (wParam == VK_PRIOR || wParam == VK_NEXT)
		{
			for (nItem = nIndex = GetCurText(), nItems = GetTextCount(), m_wndContentCtrl.GetClientRect(rContent), nHeight = (nItems > 0) ? ((nItem > 0) ? (m_wndContentCtrl.m_nContentTextPos.GetAt(nItem) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem - 1)) : m_wndContentCtrl.m_nContentTextPos.GetAt(0)) : 0; nItem >= 0 && nItem < nItems; nItem = (wParam == VK_NEXT) ? (nItem + 1) : (nItem - 1))
			{
				if (abs((INT)(m_wndContentCtrl.m_nContentTextPos.GetAt(nIndex) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem))) >= rContent.Height() - nHeight) break;
				continue;
			}
			if ((nItem = (nIndex >= 0) ? max(min(nItem, nItems - 1), 0) : ((wParam == VK_PRIOR) ? (nItems - 1) : 0)) != nIndex)
			{
				CHourglassCursor  cCursor;
				SetCurProcessor(nItem);
				ScrollTo(nItem);
			}
			return TRUE;
		}
		if (wParam == VK_TAB) GetParent()->SetFocus();
		return FALSE;
	}
	if (message == WM_LBUTTONDOWN)
	{
		if ((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))) >= 0)
		{
			CHourglassCursor  cCursor;
			SetCurProcessor(nIndex);
		}
		m_wndContentCtrl.SetFocus();
		return FALSE;
	}
	if (message == WM_RBUTTONDOWN)
	{
		if ((pItem = (GetCursor() == GetToolTipCursor() && FindTextFromPoint((ptToolTip = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))), nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems.GetAt(nRow) : (CTCOnBoardMemoryImagesProcessorItem *)NULL))
		{
			for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
			{
				for (GetTextFont(&lfFont[0]), GetTextFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
				{
					m_wndToolTip.SetTitleFont(&cFont[0]);
					m_wndToolTip.SetTextFont(&cFont[1]);
					break;
				}
				m_wndToolTip.Create(&m_wndContentCtrl, ptToolTip, szToolTip[0], szToolTip[1]);
				break;
			}
		}
	}
	if (message == WM_RBUTTONUP)
	{
		m_wndToolTip.Destroy();
		return FALSE;
	}
	return FALSE;
}

void CTCOnBoardMemoryImagesSummaryTextView::OnTimer(UINT_PTR nEventID)
{
	INT  nIndex;
	INT  nCount;
	INT  nPos[2];
	INT  nAlert[2];
	INT  nAlerts[2];
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion[2];
	CString  szMessage[2];
	CTimeKey  tMemoryImage;
	CStringArray  szItems;
	CStringArray  szDumpErrors;
	CStringArray  szMemoryImages[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryImages  pMemoryImages;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;

	if (nEventID == TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_PROCESSDATA_TIMERID)
	{
		for (Lock(), szItems.Copy(m_szItems), pMemoryImages.CPtrArray::Copy(m_pMemoryImages), szMemoryImages[0].Copy(m_szMemoryImages[0]), szMemoryImages[1].Copy(m_szMemoryImages[1]), m_szItems.RemoveAll(), m_pMemoryImages.CPtrArray::RemoveAll(), m_szMemoryImages[0].RemoveAll(), m_szMemoryImages[1].RemoveAll(), KillTimer(nEventID), Unlock(); szItems.GetSize() == pMemoryImages.GetSize(); )
		{
			for (nMemoryImage = 0, nMemoryImages = (INT)szMemoryImages[0].GetSize(); nMemoryImage < nMemoryImages; nMemoryImage = nMemoryImage + 1)
			{
				if ((nPos[1] = ((nPos[0] = szMemoryImages[0].GetAt(nMemoryImage).Find(TAB)) >= 0) ? szMemoryImages[0].GetAt(nMemoryImage).Mid(nPos[0] + 1).Find(TAB) : -1) >= 0)
				{
					if ((pMemoryImageBlock = ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage)) ? new CDatabaseOBProcessorMemoryImageBlock : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
					{
						pMemoryImageBlock->SetVersion(szMemoryImages[0].GetAt(nMemoryImage).Mid(nPos[0] + 1 + nPos[1] + 1));
						pMemoryImage[0]->SetName(szMemoryImages[0].GetAt(nMemoryImage).Mid(nPos[0] + 1, nPos[1]));
						pMemoryImage[0]->InsertAt(pMemoryImage[0]->GetSize(), pMemoryImageBlock, 1);
						GetParentDisplay()->DeleteOnBoardMemoryImage(szItems.GetAt(nMemoryImage), pMemoryImage[0], TRUE);
						delete pMemoryImage[0];
						continue;
					}
					delete pMemoryImageBlock;
					delete pMemoryImage[0];
				}
			}
			for (nMemoryImage = 0, nMemoryImages = (INT)pMemoryImages.GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
			{
				if ((pMemoryImage[1] = ((pMemoryImage[0] = pMemoryImages.GetAt(nMemoryImage))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[0]->GetSize(), pMemoryImage[1]->SetName(pMemoryImage[0]->GetName()), pMemoryImage[1]->SetAttributes(pMemoryImage[0]->GetAttributes()), pMemoryImage[1]->RemoveAll(), szVersion[0].Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock = pMemoryImage[0]->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
						{
							if (pMemoryImageBlock->GetVersion() == szVersion[0] || szVersion[0].IsEmpty())
							{
								if (pMemoryImage[1]->Add(pMemoryImageBlock) >= 0)
								{
									pMemoryImage[0]->CPtrArray::RemoveAt(nMemoryBlock);
									szVersion[0] = pMemoryImageBlock->GetVersion();
									if (nMemoryBlock < nMemoryBlocks - 1)
									{
										nMemoryBlocks--;
										nMemoryBlock--;
										continue;
									}
									nMemoryBlock = --nMemoryBlocks;
								}
								else
								{
									pMemoryImage[1]->RemoveAll();
									nMemoryBlock = nMemoryBlocks;
								}
							}
							if (pMemoryImage[1]->GetSize() > 0)
							{
								for (nIndex = 0, nCount = (INT)szMemoryImages[1].GetSize(), szVersion[1] = szItems.GetAt(nMemoryImage) + TAB + pMemoryImage[1]->GetName() + TAB + szVersion[0] + TAB; nIndex < nCount; nIndex++)
								{
									if (szMemoryImages[1].GetAt(nIndex).Find(szVersion[1]) == 0)
									{
										tMemoryImage = _ttoi64(szMemoryImages[1].GetAt(nIndex).Mid(szVersion[1].GetLength()));
										break;
									}
								}
								if (nIndex < nCount)
								{
									if (GetParentDisplay()->UpdateOnBoardMemoryImage(szItems.GetAt(nMemoryImage), pMemoryImage[1], tMemoryImage, TRUE, (nMemoryImage < nMemoryImages - 1) || (nMemoryBlock < nMemoryBlocks)))
									{
										if (nMemoryBlock == nMemoryBlocks)
										{
											szItems.RemoveAt(nMemoryImage);
											szMemoryImages[1].RemoveAt(nIndex);
											pMemoryImages.RemoveAt(nMemoryImage);
											delete pMemoryImage[0];
											nMemoryImages--;
											nMemoryImage--;
										}
									}
								}
								pMemoryImage[1]->RemoveAll();
							}
							szVersion[0].Empty();
							nMemoryBlock--;
						}
					}
					delete pMemoryImage[1];
				}
			}
			break;
		}
		for (nAlert[0] = 0, nAlerts[0] = (INT)pMemoryImages.GetSize(); nAlert[0] < nAlerts[0]; nAlert[0]++)
		{
			for (nAlert[1] = nAlert[0], nAlerts[1] = nAlerts[0], szDumpErrors.RemoveAll(); nAlert[1] < nAlerts[1]; nAlert[1]++)
			{
				if (nAlert[0] >= szItems.GetSize() || nAlert[1] >= szItems.GetSize() || szItems.GetAt(nAlert[0]) == szItems.GetAt(nAlert[1]))
				{
					if ((pMemoryImage[0] = pMemoryImages.GetAt(nAlert[1])) != (CDatabaseOBProcessorMemoryImage *)NULL)
					{
						for (szDumpErrors.Add(pMemoryImage[0]->GetName()); nAlert[0] < nAlert[1]; )
						{
							for (pMemoryImages.RemoveAt(nAlert[1]); nAlert[1] < szItems.GetSize(); )
							{
								szItems.RemoveAt(nAlert[1]);
								break;
							}
							delete pMemoryImage[0];
							nAlerts[1]--;
							nAlerts[0]--;
							nAlert[1]--;
							break;
						}
					}
				}
			}
			for (szMessage[0].Empty(); (nAlerts[1] = (INT)szDumpErrors.GetSize()) > 0; )
			{
				for (nAlert[1] = 0, szMessage[1].Empty(); nAlert[1] < nAlerts[1] - 1; nAlert[1]++)
				{
					szMessage[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_NAMEFORMAT), (LPCTSTR)szDumpErrors.GetAt(nAlert[1]));
					szMessage[1] += (!szMessage[1].IsEmpty()) ? (STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_SEPARATOR) + szMessage[0]) : szMessage[0];
				}
				szMessage[0].Format((nAlerts[1] > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_FAILURES) : STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_FAILURE), (nAlerts[1] > 1) ? (LPCTSTR)szMessage[1] : (LPCTSTR)szDumpErrors.GetAt(nAlerts[1] - 1), (nAlerts[1] > 1) ? szDumpErrors.GetAt(nAlerts[1] - 1) : EMPTYSTRING);
				break;
			}
			for (Lock(); (pItem = m_pItems.GetAt(m_pItems.Find(szItems.GetAt(nAlert[0])))); )
			{
				for (nIndex = 0, nCount = (INT)szMemoryImages[1].GetSize(), tMemoryImage = 0; nIndex < nCount; nIndex++)
				{
					for (nPos[0] = (szMemoryImages[1].GetAt(nIndex).Find(pItem->GetName() + TAB) == 0) ? (pItem->GetName().GetLength() + 1) : -1; nPos[0] >= 0 && nPos[0] < szMemoryImages[1].GetAt(nIndex).GetLength(); )
					{
						if ((nPos[1] = szMemoryImages[1].GetAt(nIndex).Mid(nPos[0]).Find(TAB)) >= 0)
						{
							nPos[0] += nPos[1] + 1;
							continue;
						}
						tMemoryImage = max(_ttoi64(szMemoryImages[1].GetAt(nIndex).Mid(nPos[0])), tMemoryImage.GetTime());
					}
				}
				pItem->SetLastDumpAlert(TCONBOARDMEMORYIMAGESSUMMARYTEXTVIEW_ALERTSYMBOL_ERROR, szMessage[0], tMemoryImage);
				break;
			}
			Unlock();
		}
		UpdateContent();
	}
	CTextView::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesSummaryTextView::OnDestroy()
{
	CTextViewLock  cLock(this);

	FreeToolTipCursor();
	FreeTelecommandSymbols();
	CTextView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSummaryView view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesSummaryView, CView)

CTCOnBoardMemoryImagesSummaryView::CTCOnBoardMemoryImagesSummaryView() : CView()
{
	m_pwndList = new CTCOnBoardMemoryImagesSummaryTextView;
	m_pParentWnd = (CWnd *)NULL;
}

CTCOnBoardMemoryImagesSummaryView::~CTCOnBoardMemoryImagesSummaryView()
{
	delete m_pwndList;
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetLayout(UINT nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardMemoryImagesSummaryView::SetLayout(CONST CUIntArray &nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCOnBoardMemoryImagesSummaryView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_pwndList->SetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetLayout(UINT &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardMemoryImagesSummaryView::GetLayout(CUIntArray &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCOnBoardMemoryImagesSummaryView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_pwndList->GetLayout(nColumns, nWidths);
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetListTitleFont(CFont *pFont)
{
	return m_pwndList->SetTitleFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetTitleFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetListTitleFont(CFont *pFont) CONST
{
	return m_pwndList->GetTitleFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetTitleFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetListItemsFont(CFont *pFont)
{
	return m_pwndList->SetItemsFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetItemsFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetListItemsFont(CFont *pFont) CONST
{
	return m_pwndList->GetItemsFont(pFont);
}
BOOL CTCOnBoardMemoryImagesSummaryView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetItemsFont(plfFont);
}

BOOL CTCOnBoardMemoryImagesSummaryView::EnableToolTipMode(BOOL bEnable)
{
	return m_pwndList->EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesSummaryView::IsToolTipModeEnabled() CONST
{
	return m_pwndList->IsToolTipModeEnabled();
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetProcessors(CONST CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll)
{
	return m_pwndList->SetProcessors(pItems, bAll);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetProcessors(CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll) CONST
{
	return m_pwndList->GetProcessors(pItems, bAll);
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetCurProcessor(INT nIndex)
{
	return m_pwndList->SetCurProcessor(nIndex);
}
BOOL CTCOnBoardMemoryImagesSummaryView::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	return m_pwndList->SetCurProcessor(pItem);
}

INT CTCOnBoardMemoryImagesSummaryView::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return m_pwndList->GetCurProcessor(pItem);
}
BOOL CTCOnBoardMemoryImagesSummaryView::GetCurProcessor(CString &szProcessor) CONST
{
	return m_pwndList->GetCurProcessor(szProcessor);
}

BOOL CTCOnBoardMemoryImagesSummaryView::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return m_pwndList->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
}

UINT CTCOnBoardMemoryImagesSummaryView::GetProcessorCount() CONST
{
	return m_pwndList->GetProcessorCount();
}

BOOL CTCOnBoardMemoryImagesSummaryView::DoAcknowledgeProcessor()
{
	return m_pwndList->DoAcknowledgeProcessor();
}

BOOL CTCOnBoardMemoryImagesSummaryView::CanAcknowledgeProcessor() CONST
{
	return m_pwndList->CanAcknowledgeProcessor();
}

BOOL CTCOnBoardMemoryImagesSummaryView::StartMonitoring()
{
	return m_pwndList->StartMonitoring();
}

BOOL CTCOnBoardMemoryImagesSummaryView::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_pwndList->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesSummaryView::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return m_pwndList->UpdateMonitoring(pTMEnvironment);
}

BOOL CTCOnBoardMemoryImagesSummaryView::StopMonitoring()
{
	return m_pwndList->StopMonitoring();
}

BOOL CTCOnBoardMemoryImagesSummaryView::SetLayoutInfo(INT nIndex, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return m_pwndList->SetLayoutInfo(nIndex, pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetLayoutInfo(INT &nIndex, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return m_pwndList->GetLayoutInfo(nIndex, pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCOnBoardMemoryImagesSummaryView::GetPrintProperties(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_pwndList->GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}

VOID CTCOnBoardMemoryImagesSummaryView::SetTrackSize(CONST SIZE &size)
{
	m_pwndList->SetTrackSize(size);
}

CSize CTCOnBoardMemoryImagesSummaryView::GetTrackSize() CONST
{
	return m_pwndList->GetTrackSize();
}

VOID CTCOnBoardMemoryImagesSummaryView::UpdateContent(BOOL bRedraw)
{
	m_pwndList->UpdateContent(bRedraw);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesSummaryView::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BOOL CTCOnBoardMemoryImagesSummaryView::Lock()
{
	return m_pwndList->Lock();
}

BOOL CTCOnBoardMemoryImagesSummaryView::Unlock()
{
	return m_pwndList->Unlock();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesSummaryView, CView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesSummaryView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSummaryView drawing

void CTCOnBoardMemoryImagesSummaryView::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesSummaryView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesSummaryView message handlers

int CTCOnBoardMemoryImagesSummaryView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) != -1 && m_pwndList->Create(this, CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy), TVS_HEADER | TVS_TOP | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		m_pParentWnd = CView::GetParent()->GetParent();
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesSummaryView::OnSize(UINT nType, int cx, int cy)
{
	m_pwndList->MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesSummaryView::OnEraseBkgnd(CDC *pDC)
{
	return TRUE;
}

void CTCOnBoardMemoryImagesSummaryView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsChild(pOldWnd)) GetParent()->SetFocus();
		else  m_pwndList->SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::Initialize()
{
	m_bFunction = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsAreasPageDialog *CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsAreasPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::LogDumpRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMPTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)).GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADAREAS_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				if (GetTCService()->LoadTelecommands(pItems))
				{
					LogDumpRequest();
					break;
				}
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESDOWNLOADAREASPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::Initialize()
{
	m_bFunctions = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsAreasPageDialog *CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsAreasPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::EnumTelecommands()
{
	INT  nFunction;
	INT  nFunctions;
	CString  szFunction;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = (CDatabaseTCFunction *)m_pFunctions.GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			szFunction.Format(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_COMMANDFUNCTION_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFunction);
		}
	}
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	if ((pFunction = m_pFunctions.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS, CB_GETCURSEL))))
	{
		for (nItem = 0, nItems = (INT)pFunction->GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
		{
			if ((pFunctionElement = pFunction->GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG); )
					{
						szItem = pFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
					{
						szItem = pFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TYPE))
					{
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_CODING))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_RADIX))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_VALUE); )
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								bOolStatus = TRUE;
								break;
							}
							szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn  &&  nItem >= SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
				}
			}
		}
		while (nItems < SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
		{
			if (!Listview_DeleteText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS), nItems)) break;
			continue;
		}
		if (m_bFunctions)
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS), 0);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::LogPatchRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_PATCHTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_PATCHCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunctions;
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pPackets.RemoveAll();
	m_pFunctions.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS, OnSelchangeTelecommand)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_COMMANDS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_INFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnSelchangeTelecommand()
{
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME)).GetTime(), m_pFunctions, m_pPackets))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnOK()
{
	INT  nStage;
	INT  nStages;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem;
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pItem = ((pFunction = m_pFunctions.GetAt(nFunction))) ? new CTCItem : (CTCItem *)NULL))
		{
			for (pItem->SetName(pFunction->GetName()), pItem->SetType(TCITEM_TYPE_FUNCTION), pItem->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADAREAS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket = (pItem->CDatabaseTCFunction::Copy(pFunction)) ? m_pPackets.GetAt(nFunction) : (CDatabaseTCPacket *)NULL) && pItem->SetTCPacket(pPacket); )
			{
				if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
					{
						if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
							{
								if (nStageIDs.GetAt(nStage) == nStageID) break;
								if (nStageIDs.GetAt(nStage) > nStageID)
								{
									nStageIDs.InsertAt(nStage, nStageID);
									break;
								}
							}
						}
					}
					for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
					{
						for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
							{
								tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
								tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
								tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
								szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
								bParameter = TRUE;
							}
						}
						if (nParameters > 0)
						{
							pItem->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
							pItem->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
							continue;
						}
					}
				}
				break;
			}
			if (pItems.Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	for (; pItems.GetSize() > 0; )
	{
		if (nFunction == nFunctions)
		{
			if (GetTCService()->LoadTelecommands(pItems))
			{
				LogPatchRequest();
				break;
			}
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADAREASPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAreasPageDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsAreasPageDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsAreasPageDialog::CTCOnBoardMemoryImagesDetailsAreasPageDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsAreasPageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsAreasPageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont[3];

	return((pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) ? SetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont;

	for (m_wndTableView.SetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.SetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.SetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor), m_wndTableView.RedrawWindow(); !m_cFont.GetSafeHandle() || (m_cFont.GetLogFont(&lfFont) > 0 && memcmp(&lfFont, plfFont, sizeof(LOGFONT))); )
	{
		for (m_cFont.DeleteObject(); m_cFont.CreateFontIndirect(plfFont); )
		{
			SetFont(&m_cFont);
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[3];

	return((GetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor)) ? (pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	for (m_wndTableView.GetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.GetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.GetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor); m_cFont.GetObject(sizeof(LOGFONT), plfFont) > 0; ) return TRUE;
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	if (m_wndTableView.SetTableContents(pItem, bAll))
	{
		ShowProcessorDetails();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea[2];
	INT  nMemoryAreas[2];
	BOOL  bMemoryTableContents;
	BOOL  bMemoryAreaAttributes;
	UINT  nMemoryAreaAttributes;
	CString  szMemoryImage[2][2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((bMemoryTableContents = m_wndTableView.SetTableContents(pszProcessor, pImage, bOverwrite, bDelete)) && !bDelayed)
	{
		for (nMemoryArea[0] = 0, nMemoryAreas[0] = (INT)m_wndTableView.GetTableContents()->GetSize(), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[0][1]); nMemoryArea[0] < nMemoryAreas[0]; nMemoryArea[0]++)
		{
			if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[0])) && (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY))
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetName()) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetName());
					continue;
				}
			}
		}
		for (nMemoryArea[1] = 0, nMemoryAreas[1] = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCOUNT); nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
		{
			if (m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), nMemoryArea[1])) < 0)
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_DELETESTRING, nMemoryArea[1]);
				nMemoryAreas[1]--;
				nMemoryArea[1]--;
			}
		}
		for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL), 0)); (pMemoryImage = ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)))))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL) && pMemoryArea->GetMemoryImage(pMemoryImage); )
		{
			for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1][1]); pMemoryArea->GetMemoryImage() != szMemoryImage[1][0]; )
			{
				for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_RESETCONTENT); !pMemoryArea->GetMemoryImage().IsEmpty() && pMemoryArea->GetMemoryImage(pMemoryImage); )
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName());
					break;
				}
				break;
			}
			if ((!pMemoryImage->GetName().IsEmpty() && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1][0])) < 0) || (pMemoryImage->GetName().IsEmpty() && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_RESETCONTENT) == CB_OKAY))
			{
				GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
				GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->EnableWindow(FALSE);
				CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE, FALSE);
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
					continue;
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCOUNT); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION), nMemoryBlock)) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_DELETESTRING, nMemoryBlock);
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_SETCURSEL, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL) >= 0) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1][1]) : (WPARAM)-1);
			delete pMemoryImage;
			break;
		}
		for (szMemoryImage[1][0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL)), szMemoryImage[1][1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCURSEL)); szMemoryImage[0][0] != szMemoryImage[1][0] || szMemoryImage[0][1] != szMemoryImage[1][1]; )
		{
			for (m_wndTableView.SetTableContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)), szMemoryImage[1][0], szMemoryImage[1][1], EMPTYSTRING, EMPTYSTRING, FALSE, FALSE), nMemoryAreaAttributes = 0, bMemoryAreaAttributes = FALSE; (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL))))); )
			{
				nMemoryAreaAttributes = pMemoryArea->GetAttributes();
				bMemoryAreaAttributes = TRUE;
				break;
			}
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE, (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE, (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC, (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) ? TRUE : FALSE);
			AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) || (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) != OBPROCESSORMEMORYAREA_FLAG_UPDATE) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_STATIC)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_STATIC)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)->EnableWindow(bMemoryAreaAttributes);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
			break;
		}
		return TRUE;
	}
	return bMemoryTableContents;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return pItem->Copy(m_wndTableView.GetTableContents());
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_wndTableView.SetTableContents(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DoTransactOnBoardMemoryImage()
{
	BOOL  bSuccess;
	BOOL  bMemoryArea;
	CString  szMemoryArea;
	CString  szMemoryImage[2];
	CTimeKey  tMemoryImage;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryArea), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]), bMemoryArea = (m_wndTableView.GetTableContents()->Find(szMemoryArea) >= 0) ? TRUE : FALSE, ShowProcessorMemoryAreaContents(szMemoryArea, szMemoryImage[0], szMemoryImage[1], TRUE); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryArea))) && !bMemoryArea; )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) | OBPROCESSORMEMORYAREA_FLAG_UPDATE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_UPDATE) | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) | OBPROCESSORMEMORYAREA_FLAG_INHIBIT) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_INHIBIT) | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT));
		pMemoryArea->SetPatchCommandRef(m_wndTableView.GetTableContents()->GetPatchCommandRef());
		pMemoryArea->SetDumpCommandRef(m_wndTableView.GetTableContents()->GetDumpCommandRef());
		pMemoryArea->SetDumpPacketRef(m_wndTableView.GetTableContents()->GetDumpPacketRef());
		break;
	}
	if ((bSuccess = m_wndTableView.GetTableContents(&cMemoryImage)))
	{
		cMemoryImage.SetAttributes(OBPROCESSORMEMORYIMAGE_TYPE_DUMP);
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!(bSuccess = GetParentDisplay()->UpdateOnBoardMemoryImage(m_wndTableView.GetTableContents()->GetName(), &cMemoryImage, tMemoryImage, TRUE))) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->SetFocus();
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanTransactOnBoardMemoryImage() CONST
{
	CString  szError;
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DoPrintOnBoardMemoryImageTable()
{
	CDC  cDC;
	INT  nPage;
	INT  nPages;
	INT  nOffset;
	INT  nMargin;
	BOOL  bUndo;
	BOOL  bMetric;
	CRgn  rgnClip[2];
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	CRect  rPrintArea[4];
	CFont  cFont[TCONBOARDMEMORYIMAGES_PRINTFONTS];
	TCHAR  szTempDirectory[MAX_PATH];
	TCHAR  szTempFileName[MAX_PATH];
	DOCINFO  sJobInfo;
	CString  szMessage;
	CString  szJobTitle;
	CString  szMemoryArea;
	CString  szMemoryImage[2];
	CTimeKey  tPrintTime;
	CPtrArray  pFonts;
	CMetaFileDC  cMetaDC;
	HENHMETAFILE  hMetaDC;
	ENHMETAHEADER  sMetaHeader;
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pPrintProfileInfo = (((pJobInfo = (GetParentDisplay()->GetPrintJobs(pJobs)) ? pJobs.GetAt(pJobs.Find(STRING(IDS_PRINTJOB_DEFAULTNAME))) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL)) && GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		for (sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.fwType = 0, sJobInfo.lpszDatatype = (LPCTSTR)NULL, sJobInfo.lpszOutput = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES)), sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle; CreatePrinterDC(pPrintProfileInfo, cDC) && cDC.StartDoc(&sJobInfo) >= 0 && cDC.StartPage() >= 0; )
		{
			if (CalcPrintDocRect(cDC, rtMargin[0], bMetric) && cDC.GetClipBox(rPrintArea[0]) != ERROR  &&  CalcPrintDocTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]) && CalcPrintDocSubTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]) && CalcPrintDocDetailsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]) && CalcPrintDocNoticeFonts(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]))
			{
				for (nPage = 1, nPages = -nPage, GetTempPath(sizeof(szTempDirectory) / sizeof(TCHAR), szTempDirectory), GetTempFileName(szTempDirectory, GetAccountSpacecraftName(), 0, szTempFileName), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]), bUndo = m_wndTableView.EnableUndo(FALSE); cMetaDC.CreateEnhanced(&cDC, szTempFileName, (LPCRECT)NULL, (LPCTSTR)NULL); )
				{
					for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryArea), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]), cMetaDC.SetAttribDC(cDC.GetSafeHdc()), hMetaDC = (HENHMETAFILE)NULL; m_wndTableView.Print(pJobInfo, cMetaDC) && DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryArea, szMemoryImage[0], szMemoryImage[1], pFonts, 0, 0, (rPrintArea[2] = rPrintArea[0])) && rgnClip[0].CreateRectRgn(rPrintArea[0].left, rPrintArea[0].top, rPrintArea[0].right, rPrintArea[0].bottom) && rgnClip[1].CreateRectRgn(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, rPrintArea[2].bottom) && rPrintArea[2].Height() > 0; )
					{
						for (hMetaDC = cMetaDC.CloseEnhanced(), GetEnhMetaFileHeader(hMetaDC, sizeof(sMetaHeader), &sMetaHeader), rPrintArea[3].SetRect(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, (INT)(rPrintArea[2].top + ((double)rPrintArea[2].Width()*(double)(sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top)) / (double)(sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left))), nMargin = rPrintArea[0].Height() / 100, nOffset = max(rPrintArea[2].Height() - nMargin, 1), nPages = 0; DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryArea, szMemoryImage[0], szMemoryImage[1], pFonts, max(rPrintArea[3].Height() - 1, 0) / max(rPrintArea[2].Height() - nMargin, 1) + 1, nPage, (rPrintArea[1] = rPrintArea[0])); )
						{
							if (cDC.SelectClipRgn(&rgnClip[1], RGN_COPY) != ERROR)
							{
								cDC.PlayMetaFile(hMetaDC, rPrintArea[3]);
								cDC.SelectClipRgn(&rgnClip[0], RGN_COPY);
								if (!LOBYTE(GetAsyncKeyState(VK_ESCAPE)))
								{
									if (rPrintArea[1].bottom < rPrintArea[3].bottom)
									{
										if (cDC.EndPage() >= 0 && cDC.StartPage() >= 0)
										{
											rPrintArea[3].OffsetRect(0, -nOffset);
											nPage = nPage + 1;
											nPages++;
											continue;
										}
										nPages = -1;
										break;
									}
									nPages++;
									break;
								}
								nPages = 0;
								break;
							}
							nPages = -1;
						}
						if (!nPages)
						{
							szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGE_ABORT), (LPCTSTR)szMemoryImage[0], (LPCTSTR)szMemoryImage[1]);
							ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, szMessage, FALSE);
						}
						break;
					}
					DeleteEnhMetaFile((!hMetaDC) ? cMetaDC.CloseEnhanced() : hMetaDC);
					CFileEx::Remove(szTempFileName);
					rgnClip[0].DeleteObject();
					rgnClip[1].DeleteObject();
					break;
				}
				for (m_wndTableView.EnableUndo(bUndo); nPages > 0; )
				{
					if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS)
					{
						pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
						pJobInfo->SetComments(EMPTYSTRING);
						GetParentDisplay()->SetPrintJobs(pJobs);
					}
					cDC.EndPage();
					cDC.EndDoc();
					cDC.DeleteDC();
					return TRUE;
				}
				if (!nPages)
				{
					cDC.AbortDoc();
					cDC.DeleteDC();
					return TRUE;
				}
			}
			cDC.AbortDoc();
			cDC.DeleteDC();
			break;
		}
	}
	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]); !szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty(); )
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGE_FAILURE), (LPCTSTR)szMemoryImage[0], (LPCTSTR)szMemoryImage[1]);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanPrintOnBoardMemoryImageTable() CONST
{
	return((!m_wndTableView.IsEmpty()) ? IsDefaultPrinterAvailable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DoDiscardOnBoardMemoryImageTable()
{
	CString  szMemoryArea;
	CString  szMemoryImage[2];

	if (m_wndTableView.DoDiscardTables())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryArea);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryAreaContents(szMemoryArea, szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanDiscardOnBoardMemoryImageTable() CONST
{
	return m_wndTableView.CanDiscardTables();
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DoResetOnBoardMemoryImageTable()
{
	CString  szMemoryArea;
	CString  szMemoryImage[2];

	if (m_wndTableView.DoResetTables())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryArea);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryAreaContents(szMemoryArea, szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanResetOnBoardMemoryImageTable() CONST
{
	return m_wndTableView.CanResetTables();
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::EnableToolTipMode(BOOL bEnable)
{
	return m_wndTableView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::IsToolTipModeEnabled() CONST
{
	return m_wndTableView.IsToolTipModeEnabled();
}

CTCOnBoardMemoryImagesDetailsAreasPage *CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsAreasPage *)CLocaleDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsAreasPageDialog::ShowProcessorDetails()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CString  szMemoryArea;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryArea);
	for (nMemoryArea = 0, nMemoryAreas = (INT)m_wndTableView.GetTableContents()->GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_RESETCONTENT); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)) && (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY))
		{
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryArea), 0));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowProcessorMemoryAreaDetails();
}

VOID CTCOnBoardMemoryImagesDetailsAreasPageDialog::ShowProcessorMemoryAreaDetails()
{
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL))))))
	{
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE, (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE, (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_UPDATE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC, (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) ? TRUE : FALSE);
		AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, ((pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) || (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_UPDATE) != OBPROCESSORMEMORYAREA_FLAG_UPDATE) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION)->SetWindowText((!pMemoryArea->GetDescription().IsEmpty()) ? pMemoryArea->GetDescription() : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_NODESCRIPTION));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION_STATIC)->EnableWindow(!pMemoryArea->GetDescription().IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION)->EnableWindow(!pMemoryArea->GetDescription().IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)->EnableWindow();
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)->EnableWindow();
		ShowProcessorMemoryAreaContents(pMemoryArea->GetName(), szMemoryImage[0], szMemoryImage[1]);
		return;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC, FALSE);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION)->SetWindowText(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_NODESCRIPTION));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DESCRIPTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)->EnableWindow(FALSE);
	ShowProcessorMemoryAreaContents();
}

VOID CTCOnBoardMemoryImagesDetailsAreasPageDialog::ShowProcessorMemoryAreaContents()
{
	m_wndTableView.SetTableContents();
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNICODE, FALSE);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_RESETCONTENT);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_DUMP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PATCH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PRINT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNICODE)->EnableWindow(FALSE);
}
VOID CTCOnBoardMemoryImagesDetailsAreasPageDialog::ShowProcessorMemoryAreaContents(LPCTSTR pszMemoryArea, LPCTSTR pszImage, LPCTSTR pszVersion, BOOL bUpdate)
{
	INT  nIndex;
	INT  nCount;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((pMemoryImage = ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(pszMemoryArea)))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage) && ((!pMemoryImage->GetName().IsEmpty() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName()) >= 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName()) >= 0) && (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE) || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName())) >= 0)) || (pMemoryImage->GetName().IsEmpty() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszMemoryArea) >= 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)pszMemoryArea) >= 0) && (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE) || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszMemoryArea)))))) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
				continue;
			}
		}
		for (nIndex = 0, nCount = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCOUNT); nIndex < nCount; nIndex++)
		{
			if ((!pMemoryImage->GetName().IsEmpty() && Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME), nIndex) != pMemoryImage->GetName()) || (pMemoryImage->GetName().IsEmpty() && Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME), nIndex) != pszMemoryArea))
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_DELETESTRING, nIndex) >= 0)
				{
					nIndex--;
					nCount--;
					continue;
				}
				break;
			}
		}
		for (nIndex = 0, nCount = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCOUNT); nIndex < nCount; nIndex++)
		{
			if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION), nIndex)) < 0)
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_DELETESTRING, nIndex) >= 0)
				{
					nIndex--;
					nCount--;
					continue;
				}
				break;
			}
		}
		for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]); (nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage)) >= 0; )
		{
			szMemoryImage[0] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_SETCURSEL, (WPARAM)nIndex) >= 0) ? pszImage : szMemoryImage[0];
			break;
		}
		for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]); (nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszVersion)) >= 0; )
		{
			szMemoryImage[1] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_SETCURSEL, (WPARAM)nIndex) >= 0) ? pszVersion : szMemoryImage[1];
			break;
		}
		delete pMemoryImage;
	}
	m_wndTableView.SetTableContents(pszMemoryArea, szMemoryImage[0], szMemoryImage[1], EMPTYSTRING, EMPTYSTRING, FALSE, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) >= 0 && bUpdate) ? TRUE : bUpdate);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE) || !szMemoryImage[0].IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE) || !szMemoryImage[0].IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE) || !szMemoryImage[0].IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->SetWindowText((szError = (!m_wndTableView.Check(szError) && !szError.IsEmpty()) ? szError : EMPTYSTRING));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->ShowWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->ShowWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && szError.IsEmpty() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_DUMP)->EnableWindow((!szMemoryImage[0].IsEmpty() && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PATCH)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && szError.IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO)->EnableWindow((m_wndTableView.CanUndo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO)->EnableWindow((m_wndTableView.CanRedo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_SAVE)->EnableWindow(!m_wndTableView.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNICODE)->EnableWindow(!m_wndTableView.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PRINT)->EnableWindow(CanPrintOnBoardMemoryImageTable());
	m_wndTableView.RedrawWindow((LPCRECT)NULL, (CRgn *)NULL, RDW_INVALIDATE | RDW_UPDATENOW);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocPage(CDC &cDC, CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, LPCTSTR pszArea, LPCTSTR pszImage, LPCTSTR pszVersion, CONST CPtrArray &pFonts, INT nPages, INT nPage, LPRECT prClip)
{
	return((DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocSubTitle(cDC, prClip, GetPrintDocSubTitle(pszArea, pszImage, pszVersion), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocSubTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocSubTitle(LPCTSTR pszArea, LPCTSTR pszImage, LPCTSTR pszVersion) CONST
{
	CString  szTitle;

	for (szTitle = pszArea; lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0; )
	{
		szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_FULLSUBTITLE), pszArea, pszImage, pszVersion);
		break;
	}
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocDetails(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	UINT  nCount;
	UINT  nRange[2];
	CString  szDetails;

	if (pJobInfo->GetPrintByRange(nRange[0], nRange[1]))
	{
		szDetails.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYRANGE), nRange[0], nRange[1]);
		return szDetails;
	}
	if (pJobInfo->GetPrintBySide(nCount))
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTITEM), nCount);
			return szDetails;
		}
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTITEM), nCount);
			return szDetails;
		}
		return EMPTYSTRING;
	}
	return STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTALL);
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocComments(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCOnBoardMemoryImagesDetailsAreasPageDialog::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocSubTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanDumpOnBoardMemoryImage() CONST
{
	BOOL  bStop;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	return((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE) && (m_wndTableView.GetTableContents(&cMemoryImage) || !cMemoryImage.GetName().IsEmpty())) ? GetTCService()->CheckTCOnBoardMemoryImageDumpCapabilities(m_wndTableView.GetTableContents(), &cMemoryImage, bStop) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::CanPatchOnBoardMemoryImage() CONST
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE) && m_wndTableView.GetTableContents(&cMemoryImage))
	{
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT));
		return GetTCService()->CheckTCOnBoardMemoryImagePatchCapabilities(m_wndTableView.GetTableContents(), &cMemoryImage);
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesDetailsAreasPageDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, bCheck);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsAreasPageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::PreTranslateMessage(MSG *pMsg)
{
	if (m_wndTableView.IsChild(CWnd::FromHandle(pMsg->hwnd)))
	{
		for (; pMsg->message == WM_KEYDOWN || pMsg->message == WM_CUT || pMsg->message == WM_PASTE || pMsg->message == WM_CLEAR; )
		{
			SetTimer(TCONBOARDMEMORYIMAGESAREAS_CHECKDATA_TIMERID, TCONBOARDMEMORYIMAGESAREAS_CHECKDATA_TIMEOUT, NULL);
			break;
		}
	}
	return CLocaleDialog::PreTranslateMessage(pMsg);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsAreasPageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsAreasPageDialog)
	ON_WM_CREATE()
	ON_WM_CTLCOLOR()
	ON_WM_DRAWITEM()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE, OnMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE, OnPatchableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE, OnDumpableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, OnUpdateableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC, OnInhibitableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT, OnTransactMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_SAVE, OnSaveMemoryArea)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_DUMP, OnDumpMemoryArea)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PATCH, OnPatchMemoryArea)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PRINT, OnPrintMemoryArea)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO, OnUndoMemoryArea)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO, OnRedoMemoryArea)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, OnSelchangeMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, OnSelchangeMemoryImageVersion)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, OnEditchangeMemoryImageVersion)
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAreasPageDialog message handlers

int CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (; (hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESWARNING), STRING(IDS_RESOURCETYPE_PICTURE))); )
	{
		if ((hMemResource[0] = LoadResource(hModule, hResource)))
		{
			if ((pResource = LockResource(hMemResource[0])))
			{
				if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
				{
					if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
					{
						if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
						{
							if (SUCCEEDED(m_cSymbol.Load(pIStream)))
							{
								pIStream->Release();
								break;
							}
						}
						pIStream->Release();
					}
				}
			}
		}
		break;
	}
	return CLocaleDialog::OnCreate(lpCreateStruct);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnInitDialog()
{
	CRect  rView;
	CButton  *pButton;
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_LIMITTEXT, (WPARAM)GetDatabase()->GetOBProcessorMemoryImageBlockVersionLength()); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_UNDO), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	for (m_wndTableViewCtrl.Attach(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_LIST)->GetSafeHwnd()), m_wndTableViewCtrl.GetClientRect(rView), m_wndTableView.Create(&m_wndTableViewCtrl, rView, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE_TABLE_NAME)); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_REDO), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	return FALSE;
}

HBRUSH CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnCtlColor(CDC *pDC, CWnd *pWnd, UINT nCtlColor)
{
	return((pWnd->GetDlgCtrlID() == IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_LIST) ? (HBRUSH)GetStockObject(NULL_BRUSH) : CLocaleDialog::OnCtlColor(pDC, pWnd, nCtlColor));
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnDrawItem(int nCtrlID, LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	CDC  cDC;

	if (cDC.Attach(lpDrawItemStruct->hDC))
	{
		for (cDC.FillSolidRect(&lpDrawItemStruct->rcItem, GetSysColor(COLOR_3DFACE)); nCtrlID == IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL && m_cSymbol != (HBITMAP)NULL; )
		{
			m_cSymbol.TransparentBlt(cDC.GetSafeHdc(), lpDrawItemStruct->rcItem, VGA_COLOR_WHITE);
			break;
		}
		cDC.Detach();
	}
	CLocaleDialog::OnDrawItem(nCtrlID, lpDrawItemStruct);
}

LRESULT CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if ((LOWORD(wParam) == IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO || LOWORD(wParam) == IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO) && HIWORD(wParam) == BN_CLICKED)
	{
		SetTimer(TCONBOARDMEMORYIMAGESAREAS_CHECKDATA_TIMERID, TCONBOARDMEMORYIMAGESAREAS_CHECKDATA_TIMEOUT, NULL);
		return CLocaleDialog::OnCommand(wParam, lParam);
	}
	if (wParam == IDCANCEL)
	{
		GetParent()->SetFocus();
		return TRUE;
	}
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnSetFont(CFont *pFont)
{
	CWnd  *pCtrl[2];
	CRect  rCtrl[2];
	CRect  rDialog[2];
	CSize  sizeDialog;
	LOGFONT  lfDialogFont;
	CDialog  cTemplateDialog;
	CDialogTemplate  cTemplate;
	CFontTools  cFontTools;

	for (GetWindowRect(rDialog[0]), GetParent()->ScreenToClient(rDialog[0]); pFont->GetLogFont(&lfDialogFont) > 0 && cTemplate.Load(MAKEINTRESOURCE(IDD)) && cTemplate.SetFont(lfDialogFont.lfFaceName, (WORD)cFontTools.QueryPoints(&lfDialogFont)) && cTemplateDialog.CreateIndirect(cTemplate.Detach()); )
	{
		for (pCtrl[0] = GetWindow(GW_CHILD), pCtrl[1] = cTemplateDialog.GetWindow(GW_CHILD), cTemplateDialog.GetWindowRect(rDialog[1]), MoveWindow(rDialog[0].left, rDialog[0].top, (sizeDialog.cx = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Width() : rDialog[0].Width()), (sizeDialog.cy = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Height() : rDialog[0].Height())), GetParent()->SetScrollSizes(MM_TEXT, sizeDialog); IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd()); pCtrl[0] = pCtrl[0]->GetNextWindow(), pCtrl[1] = pCtrl[1]->GetNextWindow())
		{
			for (pCtrl[0]->SetFont(pFont), pCtrl[0]->GetWindowRect(rCtrl[0]), ScreenToClient(rCtrl[0]), pCtrl[1]->GetWindowRect(rCtrl[1]), cTemplateDialog.ScreenToClient(rCtrl[1]); rCtrl[0] != rCtrl[1]; )
			{
				for (pCtrl[0]->MoveWindow(rCtrl[1]); pCtrl[0]->IsChild(&m_wndTableView); )
				{
					pCtrl[0]->GetClientRect(rCtrl[1]);
					m_wndTableView.MoveWindow(rCtrl[1]);
					break;
				}
				break;
			}
		}
		cTemplateDialog.DestroyWindow();
		break;
	}
	if (GetWindow(GW_CHILD))
	{
		AdjustToPrivileges();
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnTimer(UINT_PTR nEventID)
{
	CString  szError[2];
	CString  szMemoryImage[3];

	if (nEventID == TCONBOARDMEMORYIMAGESAREAS_CHECKDATA_TIMERID)
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[2]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->SetWindowText((szError[1] = (!m_wndTableView.Check(szError[0]) && !szError[0].IsEmpty()) ? szError[0] : EMPTYSTRING));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->EnableWindow(!szError[1].IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORSYMBOL)->ShowWindow((!szError[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->EnableWindow(!szError[1].IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_ERRORMESSAGE)->ShowWindow((!szError[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO)->EnableWindow((m_wndTableView.CanUndo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO)->EnableWindow((m_wndTableView.CanRedo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && szError[1].IsEmpty() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[2]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_DUMP)->EnableWindow((!szMemoryImage[1].IsEmpty() && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PATCH)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && szError[1].IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		KillTimer(nEventID);
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnMemoryImage()
{
	CHourglassCursor  cCursor;

	if (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE))
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_SETCURSEL, (WPARAM)-1);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->EnableWindow(IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGE));
	ShowProcessorMemoryAreaContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->SetFocus();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnPatchableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[3];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[2]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_PATCHABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE));
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[2]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_PATCH)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && szError.IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnDumpableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[3];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[2]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_FLAGS_DUMPABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE));
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[2]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_DUMP)->EnableWindow((!szMemoryImage[1].IsEmpty() && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnUpdateableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[3];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[2]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) | OBPROCESSORMEMORYAREA_FLAG_UPDATE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_UPDATE) | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE));
		break;
	}
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC) || !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[2]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnInhibitableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[3];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[1]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[2]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) | OBPROCESSORMEMORYAREA_FLAG_INHIBIT) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_INHIBIT) | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT));
		break;
	}
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_INHIBITAUTOMATIC) || !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_UPDATES_AUTOMATIC));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_TRANSACT)->EnableWindow((!szMemoryImage[1].IsEmpty() && !szMemoryImage[2].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[2]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnTransactMemoryImage()
{
	CHourglassCursor  cCursor;

	DoTransactOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnSaveMemoryArea()
{
	CFileEx  cFile;
	DWORD  cbData[2];
	CString  szMessage;
	CString  szContents[2];
	CFileBrowseDialog  cFileBrowseDialog(this, (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));
	CHourglassCursor  cCursor;

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		for (BeginWaitCursor(); m_wndTableView.GetTableContents(szContents[0]) > 0; )
		{
#ifndef UNICODE
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(CHAR); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNICODE); )
			{
				MultiByteToWideChar(CP_ACP, 0, szContents[0], -1, (LPWSTR)szContents[1].GetBufferSetLength((cbData[0] = (INT)(szContents[0].GetLength()*sizeof(WCHAR)))), (szContents[0].GetLength() + 1)*sizeof(WCHAR));
				szContents[1].ReleaseBuffer();
				break;
			}
#else
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(WCHAR); !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNICODE); )
			{
				WideCharToMultiByte(CP_ACP, 0, szContents[0], -1, (LPSTR)szContents[1].GetBufferSetLength((cbData[0] = szContents[0].GetLength()) / sizeof(WCHAR)), szContents[0].GetLength() + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szContents[1].ReleaseBuffer();
				break;
			}
#endif
			if (cFile.Open(cFileBrowseDialog.GetPathName(), CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
			{
				if (WriteFile(cFile.m_hFile, (LPCTSTR)szContents[1], cbData[0], &cbData[1], (LPOVERLAPPED)NULL) && cbData[0] == cbData[1])
				{
					cFile.Close();
					EndWaitCursor();
					return;
				}
				cFile.Close();
			}
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYAREA_FAILURE), (LPCTSTR)cFileBrowseDialog.GetPathName());
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			EndWaitCursor();
			return;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYAREA_NONE));
		EndWaitCursor();
	}
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnDumpMemoryArea()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsDownloadAreasPropertiesDialog  cDownloadAreasPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (m_wndTableView.GetTableContents(&cMemoryImage) || !cMemoryImage.GetName().IsEmpty())
	{
		cDownloadAreasPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnPatchMemoryArea()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsUploadAreasPropertiesDialog  cUploadAreasPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (m_wndTableView.GetTableContents(&cMemoryImage))
	{
		cUploadAreasPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnPrintMemoryArea()
{
	CHourglassCursor  cCursor;

	DoPrintOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnUndoMemoryArea()
{
	m_wndTableView.DoUndo();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnRedoMemoryArea()
{
	m_wndTableView.DoRedo();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnSelchangeName()
{
	ShowProcessorMemoryAreaDetails();
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnSelchangeMemoryImage()
{
	ShowProcessorMemoryAreaContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCURSEL)));
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnSelchangeMemoryImageVersion()
{
	ShowProcessorMemoryAreaContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCURSEL)));
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnEditchangeMemoryImageVersion()
{
	INT  nIndex;
	CString  szMemoryImage[2];

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]); ((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1])) >= 0 && nIndex != SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION, CB_GETCURSEL)) || nIndex < 0; )
	{
		ShowProcessorMemoryAreaContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_NAME, CB_GETCURSEL)), szMemoryImage[0], szMemoryImage[1]);
		break;
	}
}

void CTCOnBoardMemoryImagesDetailsAreasPageDialog::OnDestroy()
{
	HICON  hIcon;
	CButton  *pButton;

	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_UNDO)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_REDO)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	m_cSymbol.Destroy();
	m_wndTableViewCtrl.Detach();
	CLocaleDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAreasPage view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsAreasPage, CScrollView)

CTCOnBoardMemoryImagesDetailsAreasPage::CTCOnBoardMemoryImagesDetailsAreasPage() : CScrollView()
{
	m_rDialog[0].SetRectEmpty();
	m_rDialog[1].SetRectEmpty();
	m_pDialog = (CTCOnBoardMemoryImagesDetailsAreasPageDialog *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::Create(CWnd *pParentWnd, CONST RECT &rect, BOOL bVisible)
{
	CRect  rDialog;
	CSize  sizeDialog;
	CCreateContext  cContext;
	CTCOnBoardMemoryImagesDetailsAreasPageDialog  *pDialog;

	for (cContext.m_pCurrentDoc = new CTCOnBoardMemoryImagesDocument; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_3DFACE)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); )
	{
		if ((pDialog = new CTCOnBoardMemoryImagesDetailsAreasPageDialog))
		{
			if (pDialog->Create(IDD_TCONBOARDMEMORYIMAGES_DETAILSAREAS_DIALOG, this))
			{
				pDialog->ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				pDialog->GetWindowRect(rDialog);
				sizeDialog.cx = rDialog.Width();
				sizeDialog.cy = rDialog.Height();
				SetScrollSizes(MM_TEXT, sizeDialog);
				m_pDialog = pDialog;
				return TRUE;
			}
			delete pDialog;
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPage::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPage::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetProcessor(pItem, bAll) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetProcessor(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::StartMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StartMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAreasPage::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pTMEnvironment) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::StopMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StopMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::DoTransactOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::CanTransactOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::DoPrintOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::CanPrintOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::DoDiscardOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::CanDiscardOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::DoResetOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->EnableToolTipMode(bEnable) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->IsToolTipModeEnabled() : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsAreasPage::UpdateLayout(BOOL bActivate)
{
	if (bActivate)
	{
		m_rDialog[0].SetRectEmpty();
		m_rDialog[1].SetRectEmpty();
	}
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsAreasPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsAreasPage, CScrollView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsAreasPage)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SHOWWINDOW()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_MESSAGE(WM_SETFONT, OnSetFont)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAreasPage drawing

void CTCOnBoardMemoryImagesDetailsAreasPage::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesDetailsAreasPage::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAreasPage message handlers

int CTCOnBoardMemoryImagesDetailsAreasPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		m_pParentWnd = CScrollView::GetParent()->GetParent()->GetParent()->GetParent();
		SetScrollSizes(MM_TEXT, CSize(0, 0));
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsAreasPage::OnSize(UINT nType, int cx, int cy)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		for (m_pDialog->GetWindowRect(rDialog); GetMainWnd()->MDIGetActive() == GetParentFrame() && m_rDialog[1].TopLeft() == rDialog.TopLeft(); )
		{
			m_pDialog->Invalidate(TRUE);
			m_pDialog->ValidateRect(m_rDialog[0]);
			break;
		}
		m_pDialog->UpdateWindow();
		GetClientRect(m_rDialog[0]);
		m_rDialog[1] = rDialog;
	}
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsAreasPage::OnEraseBkgnd(CDC *pDC)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->GetWindowRect(rDialog);
		ScreenToClient(rDialog);
		pDC->ExcludeClipRect(rDialog);
	}
	return CScrollView::OnEraseBkgnd(pDC);
}

void CTCOnBoardMemoryImagesDetailsAreasPage::OnShowWindow(BOOL bShow, UINT nStatus)
{
	for (m_rDialog[0].SetRectEmpty(), m_rDialog[1].SetRectEmpty(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->ShowWindow((bShow) ? SW_SHOW : SW_HIDE);
		break;
	}
	CScrollView::OnShowWindow(bShow, nStatus);
}

void CTCOnBoardMemoryImagesDetailsAreasPage::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsWindow(m_pDialog->GetSafeHwnd()) && !IsChild(pOldWnd))
		{
			m_pDialog->SetFocus();
			return;
		}
		if (IsChild(pOldWnd))
		{
			GetParent()->SetFocus();
			return;
		}
	}
	CScrollView::OnSetFocus(pOldWnd);
}

LRESULT CTCOnBoardMemoryImagesDetailsAreasPage::OnSetFont(WPARAM wParam, LPARAM lParam)
{
	if (IsWindow(m_pDialog->GetSafeHwnd())) m_pDialog->SetFont(CFont::FromHandle((HFONT)wParam));
	return Default();
}

void CTCOnBoardMemoryImagesDetailsAreasPage::OnDestroy()
{
	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->DestroyWindow();
		delete m_pDialog;
	}
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsImportDumpsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsImportDumpsDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsImportDumpsDialog::CTCOnBoardMemoryImagesDetailsImportDumpsDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsImportDumpsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsImportDumpsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::Initialize()
{
	return GetParent()->GetProcessor(&m_cItem);
}

CTCOnBoardMemoryImagesDetailsDumpsPageDialog *CTCOnBoardMemoryImagesDetailsImportDumpsDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDumpsPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsImportDumpsDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::EnumMemoryImages()
{
	INT  nPos;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nMemoryImageSize;
	DWORD  cbFileData;
	CFileEx  cFile;
	CString  szFileName;
	CString  szComments;
	CString  szMemoryImage;
	CString  szMemoryVersion;
	CStringTools  cStringTools;
	CByteArray  nMemoryBlockData;
	CByteArray  nMemoryImagesData;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->GetWindowText(szFileName);
	for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nIndex = 0; cFile.Open(szFileName, CFile::modeRead | CFile::shareDenyWrite); )
	{
		for (nMemoryImagesData.SetSize((INT_PTR)cFile.GetLength()); ReadFile(cFile.m_hFile, nMemoryImagesData.GetData(), (DWORD)nMemoryImagesData.GetSize(), &cbFileData, (LPOVERLAPPED)NULL); )
		{
			for (nMemoryImage = 0, nMemoryImages = (m_pMemoryImages.Unmap(nMemoryImagesData)) ? (INT)m_pMemoryImages.GetSize() : 0; nMemoryImage < nMemoryImages; nMemoryImage = nMemoryImage + 1)
			{
				if ((nPos = ((pMemoryImage = m_pMemoryImages.GetAt(nMemoryImage))) ? pMemoryImage->GetName().Find(EOL) : -1) >= 0 && pMemoryImage->GetName().Mid(nPos + 1) == m_cItem.GetName())
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), szMemoryVersion.Empty(), nMemoryImageSize = 0, nAddress[0][0] = nAddress[0][1] = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && (pMemoryImageBlock->GetVersion() == szMemoryVersion || szMemoryVersion.IsEmpty()))
						{
							if (pMemoryImageBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock->GetData(nMemoryBlockData) > 0)
							{
								nAddress[0][0] = (!szMemoryVersion.IsEmpty() && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]) ? nAddress[0][0] : nAddress[1][0];
								nAddress[0][1] = (!szMemoryVersion.IsEmpty() && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]) ? nAddress[0][1] : nAddress[1][1];
								nMemoryImageSize += (UINT)(nMemoryBlockData.GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1));
							}
							szMemoryVersion = pMemoryImageBlock->GetVersion();
							if (nMemoryBlock < nMemoryBlocks - 1) continue;
							nMemoryBlock++;
						}
						for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
						{
							for (szMemoryImage.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_NAME); )
							{
								szMemoryImage = pMemoryImage->GetName().Left(nPos);
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_VERSION); )
							{
								szMemoryImage = szMemoryVersion;
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_PROCESSOR); )
							{
								szMemoryImage = pMemoryImage->GetName().Mid(nPos + 1);
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE); )
							{
								szMemoryImage.Format(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_ADDRESSRANGE_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString((UINT)(nAddress[0][0] + max((INT)nMemoryImageSize - 1, 0) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString((UINT)(nAddress[0][1] + max((INT)nMemoryImageSize - 1, 0) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_SIZE); )
							{
								szMemoryImage = cStringTools.ConvertUIntToStructuredString(nMemoryImageSize);
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nIndex, szMemoryImage);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nIndex, nColumn, szMemoryImage);
						}
						szMemoryVersion.Empty();
						nMemoryImageSize = 0;
						nMemoryBlock--;
						nIndex++;
					}
				}
			}
			break;
		}
		cFile.Close();
		break;
	}
	szComments.Format(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_COMMENTS_FORMAT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_COMMENTS)->SetWindowText(szComments);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_OVERWRITEDATA)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::LogDump(LPCTSTR pszDump, LPCTSTR pszVersion, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszVersion) > 0 && lstrlen(pszActivity) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFORMAT), pszDump, pszVersion, pszActivity);
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::LogDumpTemplate(LPCTSTR pszDump, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszActivity) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPTEMPLATEFORMAT), pszDump, pszActivity);
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesDetailsImportDumpsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nMemoryImages;

	return((Listview_GetSelText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nMemoryImages) > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsImportDumpsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pMemoryImages.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsImportDumpsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsImportDumpsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_INSPECT, OnInspect)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsImportDumpsDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_VERSION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_PROCESSOR));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_SIZE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), GetWindowRect(rDialog[0]), GetParent()->GetWindowRect(rDialog[1]), MoveWindow(rDialog[1].left + (rDialog[1].Width() - rDialog[0].Width()) / 2, rDialog[1].top + (rDialog[1].Height() - rDialog[0].Height()) / 2, rDialog[0].Width(), rDialog[0].Height(), FALSE); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_PROCESSOR)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_VERSION)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_PROCESSOR)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE)) ? (rColumns.Width() / 2) : (rColumns.Width() / 8)))));
		continue;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME_BROWSE)->EnableWindow();
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCONBOARDMEMORYIMAGEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCONBOARDMEMORYIMAGEFILEFILTER));
	CHourglassCursor  cCursor;

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_INSPECT)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_FILENAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnInspect()
{
	CHourglassCursor  cCursor;

	EnumMemoryImages();
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnOK()
{
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion;
	CString  szMemoryImage;
	CString  szMemoryVersion;
	CTimeKey  tMemoryImage;
	CUIntArray  nMemoryImageIDs;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CHourglassCursor  cCursor;

	for (nMemoryImage = 0, nMemoryImages = (INT)m_pMemoryImages.GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if ((pMemoryImage = m_pMemoryImages.GetAt(nMemoryImage)) != (CDatabaseOBProcessorMemoryImage *)NULL)
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					for (nIndex = 0, nCount = Listview_GetSelText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nMemoryImageIDs); nIndex < nCount; nIndex++)
					{
						if (Listview_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nMemoryImageIDs.GetAt(nIndex), FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_NAME))) == pMemoryImage->GetName().Left(((nPos = pMemoryImage->GetName().Find(EOL)) < 0) ? pMemoryImage->GetName().GetLength() : nPos) && Listview_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_CONTENTS), nMemoryImageIDs.GetAt(nIndex), FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSIMPORTDUMPSDIALOG_TITLEITEM_VERSION))) == pMemoryImageBlock->GetVersion()) break;
						continue;
					}
					if (nIndex == nCount)
					{
						for (szMemoryImage = pMemoryImage->GetName(), szMemoryVersion = pMemoryImageBlock->GetVersion(); (pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImage->GetName() == szMemoryImage && pMemoryImageBlock->GetVersion() == szMemoryVersion; )
						{
							pMemoryImage->RemoveAt(nMemoryBlock);
							delete pMemoryImageBlock;
							nMemoryBlocks--;
							nMemoryBlock--;
						}
					}
					continue;
				}
				break;
			}
			if (nMemoryBlock == nMemoryBlocks)
			{
				pMemoryImage->SetName(((nPos = pMemoryImage->GetName().Find(EOL)) >= 0) ? pMemoryImage->GetName().Left(nPos) : pMemoryImage->GetName());
				continue;
			}
		}
		break;
	}
	for (nMemoryImage = (nMemoryImage == nMemoryImages) ? 0 : -1; nMemoryImage < nMemoryImages && nMemoryImage >= 0; nMemoryImage++)
	{
		if ((pMemoryImage = m_pMemoryImages.GetAt(nMemoryImage)) && GetParentDisplay()->UpdateOnBoardMemoryImage(m_cItem.GetName(), pMemoryImage, tMemoryImage, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_IMPORTDUMPS_OVERWRITEDATA), (nMemoryImage < nMemoryImages - 1)))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(), szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() != szVersion)
				{
					for (szVersion = pMemoryImageBlock->GetVersion(); szVersion == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
					{
						LogDumpTemplate(pMemoryImage->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_IMPORTING));
						break;
					}
					if (szVersion != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
					{
						LogDump(pMemoryImage->GetName(), szVersion, STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_IMPORTING));
						continue;
					}
				}
			}
			continue;
		}
		break;
	}
	for (; nMemoryImage != nMemoryImages || nMemoryImage < 0; )
	{
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_IMPORTMEMORYIMAGE_UPDATEDATABASE_FAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESIMPORTDUMPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsImportDumpsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESIMPORTDUMPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsExportDumpsDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsExportDumpsDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsExportDumpsDialog::CTCOnBoardMemoryImagesDetailsExportDumpsDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsExportDumpsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsExportDumpsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::Initialize()
{
	return GetParent()->GetProcessor(&m_cItem);
}

CTCOnBoardMemoryImagesDetailsDumpsPageDialog *CTCOnBoardMemoryImagesDetailsExportDumpsDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDumpsPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsExportDumpsDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::EnumMemoryImages()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nMemoryImageSize;
	CString  szComments;
	CString  szMemoryImage;
	CString  szMemoryVersion;
	CByteArray  nMemoryBlockData;
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMemoryArea = 0, nMemoryAreas = (INT)m_cItem.GetSize(), nIndex = 0; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryImage = ((pMemoryArea = m_cItem.GetAt(nMemoryArea))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : 0, GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szMemoryVersion.Empty(), nMemoryImageSize = 0, nAddress[0][0] = nAddress[0][1] = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && (pMemoryImageBlock->GetVersion() == szMemoryVersion || szMemoryVersion.IsEmpty()))
				{
					if (pMemoryImageBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock->GetData(nMemoryBlockData) > 0)
					{
						nAddress[0][0] = (!szMemoryVersion.IsEmpty() && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]) ? nAddress[0][0] : nAddress[1][0];
						nAddress[0][1] = (!szMemoryVersion.IsEmpty() && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]) ? nAddress[0][1] : nAddress[1][1];
						nMemoryImageSize += (UINT)(nMemoryBlockData.GetSize() / max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1));
					}
					szMemoryVersion = pMemoryImageBlock->GetVersion();
					if (nMemoryBlock < nMemoryBlocks - 1) continue;
					nMemoryBlock++;
				}
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (szMemoryImage.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_NAME); )
					{
						szMemoryImage = pMemoryImage->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_VERSION); )
					{
						szMemoryImage = szMemoryVersion;
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_PROCESSOR); )
					{
						szMemoryImage = m_cItem.GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE); )
					{
						szMemoryImage.Format(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_ADDRESSRANGE_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString((UINT)(nAddress[0][0] + max((INT)nMemoryImageSize - 1, 0) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString((UINT)(nAddress[0][1] + max((INT)nMemoryImageSize - 1, 0) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_SIZE); )
					{
						szMemoryImage = cStringTools.ConvertUIntToStructuredString(nMemoryImageSize);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nIndex, szMemoryImage);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nIndex, nColumn, szMemoryImage);
				}
				szMemoryVersion.Empty();
				nMemoryImageSize = 0;
				nMemoryBlock--;
				nIndex++;
			}
			delete pMemoryImage;
		}
	}
	szComments.Format(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_COMMENTS_FORMAT), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_COMMENTS)->SetWindowText(szComments);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_RESETFILE)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_OVERWRITEDATA)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::LogDump(LPCTSTR pszDump, LPCTSTR pszVersion, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszVersion) > 0 && lstrlen(pszActivity) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFORMAT), pszDump, pszVersion, pszActivity);
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::LogDumpTemplate(LPCTSTR pszDump, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszActivity) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPTEMPLATEFORMAT), pszDump, pszActivity);
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

INT CTCOnBoardMemoryImagesDetailsExportDumpsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nMemoryImages;

	return((Listview_GetSelText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nMemoryImages) > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsExportDumpsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsExportDumpsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsExportDumpsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsExportDumpsDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_VERSION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_PROCESSOR));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_SIZE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), GetWindowRect(rDialog[0]), GetParent()->GetWindowRect(rDialog[1]), MoveWindow(rDialog[1].left + (rDialog[1].Width() - rDialog[0].Width()) / 2, rDialog[1].top + (rDialog[1].Height() - rDialog[0].Height()) / 2, rDialog[0].Width(), rDialog[0].Height(), FALSE); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_PROCESSOR)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_VERSION)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_PROCESSOR)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_ADDRESSRANGE)) ? (rColumns.Width() / 2) : (rColumns.Width() / 8)))));
		continue;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME_BROWSE)->EnableWindow();
	EnumMemoryImages();
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnBrowseFileName()
{
	CUIntArray  nMemoryImages;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCONBOARDMEMORYIMAGEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCONBOARDMEMORYIMAGEFILEFILTER));
	CHourglassCursor  cCursor;

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnOK()
{
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nAddress[2];
	DWORD  cbFileData;
	CFileEx  cFile[2];
	CString  szVersion;
	CString  szMessage;
	CString  szFileName;
	CString  szMemoryImage;
	CString  szMemoryVersion;
	CFileFindEx  cFileFind;
	CUIntArray  nMemoryImageIDs;
	CByteArray  nMemoryImagesData;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryImages  pMemoryImages[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_FILENAME)->GetWindowText(szFileName);
	for (nIndex = 0, nCount = Listview_GetSelText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nMemoryImageIDs); nIndex < nCount; nIndex++)
	{
		for (szMemoryImage = Listview_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nMemoryImageIDs.GetAt(nIndex), FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_NAME))), szMemoryVersion = Listview_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_CONTENTS), nMemoryImageIDs.GetAt(nIndex), FindColumnIndex(STRING(IDS_TCONBOARDMEMORYIMAGESDETAILSEXPORTDUMPSDIALOG_TITLEITEM_VERSION))); (pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage); )
		{
			if ((pMemoryArea = m_cItem.GetAt(m_cItem.Find(szMemoryImage))) && !pMemoryArea->GetMemoryImage().IsEmpty() && pMemoryArea->GetMemoryImage(pMemoryImage[0]))
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[0]->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock = nMemoryBlock + 1)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetVersion() != szMemoryVersion)
					{
						pMemoryImage[0]->RemoveAt(nMemoryBlock);
						delete pMemoryImageBlock[0];
						nMemoryBlocks--;
						nMemoryBlock--;
					}
				}
				if ((pMemoryImage[1] = pMemoryImages[0].GetAt(pMemoryImages[0].Find(szMemoryImage))))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[0]->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)))
						{
							if (pMemoryImage[1]->Add(pMemoryImageBlock[0]) >= 0)
							{
								pMemoryImage[0]->CPtrArray::RemoveAt(nMemoryBlock);
								nMemoryBlocks--;
								nMemoryBlock--;
								continue;
							}
						}
						break;
					}
					nCount = (nMemoryBlock == nMemoryBlocks) ? nCount : -1;
					break;
				}
				if ((pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[0]->GetSize(), pMemoryImage[1]->SetName(pMemoryImage[0]->GetName()), pMemoryImage[1]->SetAttributes((m_cItem.Find(szMemoryImage) >= 0) ? pMemoryArea->GetAttributes() : OBPROCESSORMEMORYAREA_TYPE_IMAGE); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)))
						{
							if (pMemoryImage[1]->Add(pMemoryImageBlock[0]) >= 0)
							{
								pMemoryImage[0]->CPtrArray::RemoveAt(nMemoryBlock);
								nMemoryBlocks--;
								nMemoryBlock--;
								continue;
							}
						}
						break;
					}
					if (nMemoryBlock == nMemoryBlocks  &&  pMemoryImages[0].Add(pMemoryImage[1]) >= 0) break;
					delete pMemoryImage[1];
					nCount = -1;
					break;
				}
			}
			nCount = -1;
			break;
		}
		delete pMemoryImage[0];
	}
	for (; nIndex == nCount; )
	{
		if (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_RESETFILE))
		{
			if (cFile[0].Open(szFileName, CFile::modeRead | CFile::shareDenyWrite))
			{
				for (nMemoryImagesData.SetSize((INT_PTR)cFile[0].GetLength()); ReadFile(cFile[0].m_hFile, nMemoryImagesData.GetData(), (DWORD)nMemoryImagesData.GetSize(), &cbFileData, (LPOVERLAPPED)NULL); )
				{
					if (!pMemoryImages[1].Unmap(nMemoryImagesData))
					{
						nMemoryImagesData.RemoveAll();
						pMemoryImages[1].RemoveAll();
					}
					break;
				}
				if (!pMemoryImages[1].GetSize() && cFile[0].GetLength() > 0)
				{
					szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_READSOURCEFILE_FAILURE), (LPCTSTR)szFileName);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_WARNING, szMessage);
				}
				cFile[0].Close();
			}
			else
			{
				if (cFileFind.FindFile(szFileName))
				{
					szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_OPENSOURCEFILE_FAILURE), (LPCTSTR)szFileName);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_WARNING, szMessage);
					cFileFind.Close();
				}
			}
		}
		for (nMemoryImage = 0, nMemoryImages = (INT)pMemoryImages[0].GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
		{
			if ((pMemoryImage[0] = pMemoryImages[0].GetAt(nMemoryImage)) != (CDatabaseOBProcessorMemoryImage *)NULL)
			{
				if ((pMemoryImage[1] = pMemoryImages[1].GetAt(pMemoryImages[1].Find(pMemoryImage[0]->GetName()))))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[0]->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetAddress(nAddress[0], nAddress[1]))
						{
							if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(pMemoryImage[1]->Find(pMemoryImageBlock[0]->GetVersion(), nAddress[0], nAddress[1]))))
							{
								if (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_EXPORTDUMPS_OVERWRITEDATA)) pMemoryImageBlock[1]->Copy(pMemoryImageBlock[0]);
								continue;
							}
							if (pMemoryImage[1]->Add(pMemoryImageBlock[0]) >= 0)
							{
								pMemoryImage[0]->CPtrArray::RemoveAt(nMemoryBlock);
								nMemoryBlocks--;
								nMemoryBlock--;
								continue;
							}
						}
						break;
					}
					if (nMemoryBlock != nMemoryBlocks) break;
					continue;
				}
				if (pMemoryImages[1].Add(pMemoryImage[0]) >= 0)
				{
					pMemoryImages[0].CPtrArray::RemoveAt(nMemoryImage);
					nMemoryImages--;
					nMemoryImage--;
					continue;
				}
			}
			break;
		}
		for (nMemoryImage = (nMemoryImage == nMemoryImages) ? 0 : -1, nMemoryImages = (INT)pMemoryImages[1].GetSize(); nMemoryImage < nMemoryImages && nMemoryImage >= 0; nMemoryImage++)
		{
			if ((pMemoryImage[1] = pMemoryImages[1].GetAt(nMemoryImage)))
			{
				if ((nPos = pMemoryImage[1]->GetName().Find(EOL)) >= 0)
				{
					pMemoryImage[1]->SetName(pMemoryImage[1]->GetName().Left(nPos) + EOL + m_cItem.GetName());
					continue;
				}
				pMemoryImage[1]->SetName(pMemoryImage[1]->GetName() + EOL + m_cItem.GetName());
			}
		}
		if (nMemoryImage != nMemoryImages || !pMemoryImages[1].Map(nMemoryImagesData))
		{
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_UPDATEDESTINATIONFILE_FAILURE), (LPCTSTR)szFileName);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			break;
		}
		if (cFile[1].Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			if (WriteFile(cFile[1].m_hFile, nMemoryImagesData.GetData(), (DWORD)nMemoryImagesData.GetSize(), &cbFileData, (LPOVERLAPPED)NULL))
			{
				for (nMemoryImage = 0, nMemoryImages = (INT)pMemoryImages[1].GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
				{
					if ((pMemoryImage[1] = pMemoryImages[1].GetAt(nMemoryImage)) != (CDatabaseOBProcessorMemoryImage *)NULL)
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[1]->GetSize(), szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nMemoryBlock)) && pMemoryImageBlock[1]->GetVersion() != szVersion)
							{
								for (szVersion = pMemoryImageBlock[1]->GetVersion(); szVersion == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
								{
									LogDumpTemplate(((nPos = pMemoryImage[1]->GetName().Find(EOL)) >= 0) ? pMemoryImage[1]->GetName().Left(nPos) : pMemoryImage[1]->GetName(), STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_EXPORTING));
									break;
								}
								if (szVersion != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
								{
									LogDump(((nPos = pMemoryImage[1]->GetName().Find(EOL)) >= 0) ? pMemoryImage[1]->GetName().Left(nPos) : pMemoryImage[1]->GetName(), szVersion, STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_EXPORTING));
									continue;
								}
							}
						}
					}
				}
				cFile[1].Close();
				break;
			}
			cFile[1].Close();
			cFile[1].Remove(szFileName);
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_WRITEDESTINATIONFILE_FAILURE), (LPCTSTR)szFileName);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			break;
		}
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_OPENDESTINATIONFILE_FAILURE), (LPCTSTR)szFileName);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		break;
	}
	if (nIndex != nCount)
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_EXPORTMEMORYIMAGE_UPDATEDESTINATIONFILE_FAILURE), (LPCTSTR)szFileName);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESEXPORTDUMPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsExportDumpsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESEXPORTDUMPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::Initialize()
{
	m_bFunction = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsDumpsPageDialog *CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDumpsPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::LogDumpRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMPTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)).GetTime(), FALSE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DOWNLOADDUMPS_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				if (GetTCService()->LoadTelecommands(pItems))
				{
					LogDumpRequest();
					break;
				}
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESDOWNLOADDUMPSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::Initialize()
{
	m_bFunctions = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsDumpsPageDialog *CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDumpsPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::EnumTelecommands()
{
	INT  nFunction;
	INT  nFunctions;
	CString  szFunction;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = (CDatabaseTCFunction *)m_pFunctions.GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			szFunction.Format(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_COMMANDFUNCTION_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFunction);
		}
	}
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	if ((pFunction = m_pFunctions.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS, CB_GETCURSEL))))
	{
		for (nItem = 0, nItems = (INT)pFunction->GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
		{
			if ((pFunctionElement = pFunction->GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG); )
					{
						szItem = pFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
					{
						szItem = pFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE))
					{
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_CODING))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_RADIX))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_VALUE); )
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								bOolStatus = TRUE;
								break;
							}
							szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn  &&  nItem >= SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
				}
			}
		}
		while (nItems < SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
		{
			if (!Listview_DeleteText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS), nItems)) break;
			continue;
		}
		if (m_bFunctions)
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS), 0);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::LogPatchRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_PATCHTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_PATCHCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunctions;
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pPackets.RemoveAll();
	m_pFunctions.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS, OnSelchangeTelecommand)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_COMMANDS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_INFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnSelchangeTelecommand()
{
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME)).GetTime(), m_pFunctions, m_pPackets))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnOK()
{
	INT  nStage;
	INT  nStages;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem;
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pItem = ((pFunction = m_pFunctions.GetAt(nFunction))) ? new CTCItem : (CTCItem *)NULL) != (CTCItem *)NULL)
		{
			for (pItem->SetName(pFunction->GetName()), pItem->SetType(TCITEM_TYPE_FUNCTION), pItem->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADDUMPS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket = (pItem->CDatabaseTCFunction::Copy(pFunction)) ? m_pPackets.GetAt(nFunction) : (CDatabaseTCPacket *)NULL) && pItem->SetTCPacket(pPacket); )
			{
				if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
					{
						if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
							{
								if (nStageIDs.GetAt(nStage) == nStageID) break;
								if (nStageIDs.GetAt(nStage) > nStageID)
								{
									nStageIDs.InsertAt(nStage, nStageID);
									break;
								}
							}
						}
					}
					for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
					{
						for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
							{
								tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
								tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
								tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
								szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
								bParameter = TRUE;
							}
						}
						if (nParameters > 0)
						{
							pItem->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
							pItem->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
							continue;
						}
					}
				}
				break;
			}
			if (pItems.Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	for (; pItems.GetSize() > 0; )
	{
		if (nFunction == nFunctions)
		{
			if (GetTCService()->LoadTelecommands(pItems))
			{
				LogPatchRequest();
				break;
			}
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADDUMPSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDumpsPageDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDumpsPageDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CTCOnBoardMemoryImagesDetailsDumpsPageDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsDumpsPageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsDumpsPageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont[3];

	return((pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) ? SetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont;

	for (m_wndTableView.SetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.SetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.SetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor), m_wndTableView.RedrawWindow(); !m_cFont.GetSafeHandle() || (m_cFont.GetLogFont(&lfFont) > 0 && memcmp(&lfFont, plfFont, sizeof(LOGFONT))); )
	{
		for (m_cFont.DeleteObject(); m_cFont.CreateFontIndirect(plfFont); )
		{
			SetFont(&m_cFont);
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[3];

	return((GetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor)) ? (pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	for (m_wndTableView.GetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.GetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.GetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor); m_cFont.GetObject(sizeof(LOGFONT), plfFont) > 0; ) return TRUE;
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	if (m_wndTableView.SetTableContents(pItem, bAll))
	{
		ShowProcessorDetails();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea[3];
	INT  nMemoryAreas[3];
	BOOL  bMemoryTableContents;
	BOOL  bMemoryAreaAttributes;
	UINT  nMemoryAreaAttributes;
	CString  szMemoryImage[2][2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((bMemoryTableContents = m_wndTableView.SetTableContents(pszProcessor, pImage, bOverwrite, bDelete)) && !bDelayed)
	{
		for (nMemoryArea[0] = 0, nMemoryAreas[0] = (INT)m_wndTableView.GetTableContents()->GetSize(), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[0][1]); nMemoryArea[0] < nMemoryAreas[0]; nMemoryArea[0]++)
		{
			if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[0])) != (CDatabaseOBProcessorMemoryArea *)NULL  &&  !pMemoryArea->GetMemoryImage().IsEmpty())
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
					continue;
				}
			}
		}
		for (nMemoryArea[1] = 0, nMemoryAreas[1] = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCOUNT); nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
		{
			for (nMemoryArea[2] = 0, nMemoryAreas[2] = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea[2] < nMemoryAreas[2]; nMemoryArea[2]++)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[2])) != (CDatabaseOBProcessorMemoryArea *)NULL)
				{
					if (pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), nMemoryArea[1])) break;
					continue;
				}
			}
			if (nMemoryArea[2] == nMemoryAreas[2])
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_DELETESTRING, nMemoryArea[1]);
				nMemoryAreas[1]--;
				nMemoryArea[1]--;
			}
		}
		for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][0]), 0)); (pMemoryImage = new CDatabaseOBProcessorMemoryImage); )
		{
			for (nMemoryArea[1] = 0, nMemoryAreas[1] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL) >= 0) ? (INT)m_wndTableView.GetTableContents()->GetSize() : 0; nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1] = nMemoryArea[1] + 1)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[1])) && pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL)) && pMemoryArea->GetMemoryImage(pMemoryImage)) break;
				continue;
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
					continue;
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), nMemoryBlock)) < 0 || (nMemoryBlocks > 1 && Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), nMemoryBlock) == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)))
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_DELETESTRING, nMemoryBlock);
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_SETCURSEL, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL) >= 0) ? (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][1]), 0) : (WPARAM)-1); !SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT); )
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE));
				break;
			}
			delete pMemoryImage;
			break;
		}
		for (szMemoryImage[1][0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL)), szMemoryImage[1][1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCURSEL)); szMemoryImage[0][0] != szMemoryImage[1][0] || szMemoryImage[0][1] != szMemoryImage[1][1]; )
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
			m_wndTableView.SetTableContents(EMPTYSTRING, szMemoryImage[1][0], szMemoryImage[1][1], EMPTYSTRING, EMPTYSTRING, FALSE, FALSE);
			break;
		}
		for (nMemoryAreaAttributes = 0, bMemoryAreaAttributes = FALSE; (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[1][0]))); )
		{
			nMemoryAreaAttributes = pMemoryArea->GetAttributes();
			bMemoryAreaAttributes = TRUE;
			break;
		}
		AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) || (nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) != OBPROCESSORMEMORYAREA_FLAG_UPDATE || !bMemoryAreaAttributes) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) || !bMemoryAreaAttributes) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) || !bMemoryAreaAttributes) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) || !bMemoryAreaAttributes) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC, ((nMemoryAreaAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) || !bMemoryAreaAttributes) ? TRUE : FALSE);
		ShowProcessorMemoryImageStatus(szMemoryImage[1][0], szMemoryImage[1][1]);
		return TRUE;
	}
	return bMemoryTableContents;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return pItem->Copy(m_wndTableView.GetTableContents());
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_wndTableView.SetTableContents(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoTransactOnBoardMemoryImage()
{
	BOOL  bSuccess;
	BOOL  bMemoryArea;
	CString  szMemoryImage[2];
	CTimeKey  tMemoryImage;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]), bMemoryArea = (m_wndTableView.GetTableContents()->Find(szMemoryImage[0]) >= 0) ? TRUE : FALSE, ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1], TRUE); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))) && !bMemoryArea; )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) | OBPROCESSORMEMORYAREA_FLAG_UPDATE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_UPDATE) | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE));
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) | OBPROCESSORMEMORYAREA_FLAG_INHIBIT) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_INHIBIT) | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT));
		pMemoryArea->SetPatchCommandRef(m_wndTableView.GetTableContents()->GetPatchCommandRef());
		pMemoryArea->SetDumpCommandRef(m_wndTableView.GetTableContents()->GetDumpCommandRef());
		pMemoryArea->SetDumpPacketRef(m_wndTableView.GetTableContents()->GetDumpPacketRef());
		break;
	}
	if ((bSuccess = m_wndTableView.GetTableContents(&cMemoryImage)))
	{
		cMemoryImage.SetAttributes(OBPROCESSORMEMORYIMAGE_TYPE_DUMP);
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT));
		bSuccess = GetParentDisplay()->UpdateOnBoardMemoryImage(m_wndTableView.GetTableContents()->GetName(), &cMemoryImage, tMemoryImage, TRUE);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->SetFocus();
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanTransactOnBoardMemoryImage() CONST
{
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && (((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))) && ((pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) || !pMemoryArea->GetMemoryImage().IsEmpty())) || !pMemoryArea) && m_wndTableView.Check(szError) && (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoImportOnBoardMemoryImage()
{
	CTCOnBoardMemoryImagesDetailsImportDumpsDialog  cImportDumpsDialog(this);

	return((cImportDumpsDialog.DoModal() == IDOK) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanImportOnBoardMemoryImage() CONST
{
	return((m_wndTableView.GetTableContents()->GetSize() > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoExportOnBoardMemoryImage()
{
	CTCOnBoardMemoryImagesDetailsExportDumpsDialog  cExportDumpsDialog(this);

	return((cExportDumpsDialog.DoModal() == IDOK) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanExportOnBoardMemoryImage() CONST
{
	return((m_wndTableView.GetTableContents()->GetSize() > 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->SendMessage(CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoDeleteOnBoardMemoryImage()
{
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); m_wndTableView.GetTableContents(&cMemoryImage); )
	{
		if (GetParentDisplay()->DeleteOnBoardMemoryImage(m_wndTableView.GetTableContents()->GetName(), &cMemoryImage))
		{
			m_wndTableView.ClearUndo(EMPTYSTRING, szMemoryImage[0], szMemoryImage[1]);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->SetFocus();
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanDeleteOnBoardMemoryImage() CONST
{
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) >= 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) >= 0 && !m_wndTableView.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoInsertOnBoardMemoryImageTableRowAbove()
{
	return m_wndTableView.DoInsertTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return m_wndTableView.CanInsertTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoInsertOnBoardMemoryImageTableRowBelow()
{
	return m_wndTableView.DoInsertTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return m_wndTableView.CanInsertTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoClearOnBoardMemoryImageTableRow()
{
	CString  szMemoryImage[2];

	if (m_wndTableView.DoClearTableRow())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanClearOnBoardMemoryImageTableRow() CONST
{
	return m_wndTableView.CanClearTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoDeleteOnBoardMemoryImageTableRow()
{
	CString  szMemoryImage[2];

	if (m_wndTableView.DoDeleteTableRow())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return m_wndTableView.CanDeleteTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoDeleteOnBoardMemoryImageTableColumn()
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoCopyOnBoardMemoryImageTableRow()
{
	return m_wndTableView.DoCopyTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return m_wndTableView.CanCopyTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoPasteOnBoardMemoryImageTableRow()
{
	CString  szMemoryImage[2];

	if (m_wndTableView.DoPasteTableRow())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return m_wndTableView.CanPasteTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoPrintOnBoardMemoryImageTable()
{
	CDC  cDC;
	INT  nPage;
	INT  nPages;
	INT  nOffset;
	INT  nMargin;
	BOOL  bUndo;
	BOOL  bMetric;
	CRgn  rgnClip[2];
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	CRect  rPrintArea[4];
	CFont  cFont[TCONBOARDMEMORYIMAGES_PRINTFONTS];
	TCHAR  szTempDirectory[MAX_PATH];
	TCHAR  szTempFileName[MAX_PATH];
	DOCINFO  sJobInfo;
	CString  szMessage;
	CString  szJobTitle;
	CString  szMemoryImage[2];
	CTimeKey  tPrintTime;
	CPtrArray  pFonts;
	CMetaFileDC  cMetaDC;
	HENHMETAFILE  hMetaDC;
	ENHMETAHEADER  sMetaHeader;
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pPrintProfileInfo = (((pJobInfo = (GetParentDisplay()->GetPrintJobs(pJobs)) ? pJobs.GetAt(pJobs.Find(STRING(IDS_PRINTJOB_DEFAULTNAME))) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL)) && GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		for (sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.fwType = 0, sJobInfo.lpszDatatype = (LPCTSTR)NULL, sJobInfo.lpszOutput = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES)), sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle; CreatePrinterDC(pPrintProfileInfo, cDC) && cDC.StartDoc(&sJobInfo) >= 0 && cDC.StartPage() >= 0; )
		{
			if (CalcPrintDocRect(cDC, rtMargin[0], bMetric) && cDC.GetClipBox(rPrintArea[0]) != ERROR  &&  CalcPrintDocTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]) && CalcPrintDocSubTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]) && CalcPrintDocDetailsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]) && CalcPrintDocNoticeFonts(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]))
			{
				for (nPage = 1, nPages = -nPage, GetTempPath(sizeof(szTempDirectory) / sizeof(TCHAR), szTempDirectory), GetTempFileName(szTempDirectory, GetAccountSpacecraftName(), 0, szTempFileName), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]), bUndo = m_wndTableView.EnableUndo(FALSE); cMetaDC.CreateEnhanced(&cDC, szTempFileName, (LPCRECT)NULL, (LPCTSTR)NULL); )
				{
					for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]), cMetaDC.SetAttribDC(cDC.GetSafeHdc()), hMetaDC = (HENHMETAFILE)NULL; m_wndTableView.Print(pJobInfo, cMetaDC) && DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryImage[0], szMemoryImage[1], pFonts, 0, 0, (rPrintArea[2] = rPrintArea[0])) && rgnClip[0].CreateRectRgn(rPrintArea[0].left, rPrintArea[0].top, rPrintArea[0].right, rPrintArea[0].bottom) && rgnClip[1].CreateRectRgn(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, rPrintArea[2].bottom) && rPrintArea[2].Height() > 0; )
					{
						for (hMetaDC = cMetaDC.CloseEnhanced(), GetEnhMetaFileHeader(hMetaDC, sizeof(sMetaHeader), &sMetaHeader), rPrintArea[3].SetRect(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, (INT)(rPrintArea[2].top + ((double)rPrintArea[2].Width()*(double)(sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top)) / (double)(sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left))), nMargin = rPrintArea[0].Height() / 100, nOffset = max(rPrintArea[2].Height() - nMargin, 1), nPages = 0; DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryImage[0], szMemoryImage[1], pFonts, max(rPrintArea[3].Height() - 1, 0) / max(rPrintArea[2].Height() - nMargin, 1) + 1, nPage, (rPrintArea[1] = rPrintArea[0])); )
						{
							if (cDC.SelectClipRgn(&rgnClip[1], RGN_COPY) != ERROR)
							{
								cDC.PlayMetaFile(hMetaDC, rPrintArea[3]);
								cDC.SelectClipRgn(&rgnClip[0], RGN_COPY);
								if (!LOBYTE(GetAsyncKeyState(VK_ESCAPE)))
								{
									if (rPrintArea[1].bottom < rPrintArea[3].bottom)
									{
										if (cDC.EndPage() >= 0 && cDC.StartPage() >= 0)
										{
											rPrintArea[3].OffsetRect(0, -nOffset);
											nPage = nPage + 1;
											nPages++;
											continue;
										}
										nPages = -1;
										break;
									}
									nPages++;
									break;
								}
								nPages = 0;
								break;
							}
							nPages = -1;
						}
						if (!nPages)
						{
							szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGE_ABORT), (LPCTSTR)szMemoryImage[0], (LPCTSTR)szMemoryImage[1]);
							ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, szMessage, FALSE);
						}
						break;
					}
					DeleteEnhMetaFile((!hMetaDC) ? cMetaDC.CloseEnhanced() : hMetaDC);
					CFileEx::Remove(szTempFileName);
					rgnClip[0].DeleteObject();
					rgnClip[1].DeleteObject();
					break;
				}
				for (m_wndTableView.EnableUndo(bUndo); nPages > 0; )
				{
					if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS)
					{
						pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
						pJobInfo->SetComments(EMPTYSTRING);
						GetParentDisplay()->SetPrintJobs(pJobs);
					}
					cDC.EndPage();
					cDC.EndDoc();
					cDC.DeleteDC();
					return TRUE;
				}
				if (!nPages)
				{
					cDC.AbortDoc();
					cDC.DeleteDC();
					return TRUE;
				}
			}
			cDC.AbortDoc();
			cDC.DeleteDC();
			break;
		}
	}
	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGENAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSAREAS_PROPERTIES_IMAGEVERSION)->GetWindowText(szMemoryImage[1]); !szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty(); )
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGE_FAILURE), (LPCTSTR)szMemoryImage[0], (LPCTSTR)szMemoryImage[1]);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanPrintOnBoardMemoryImageTable() CONST
{
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && !m_wndTableView.IsEmpty()) ? IsDefaultPrinterAvailable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoDiscardOnBoardMemoryImageTable()
{
	CString  szMemoryImage[2];

	if (m_wndTableView.DoDiscardTables())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanDiscardOnBoardMemoryImageTable() CONST
{
	return m_wndTableView.CanDiscardTables();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoResetOnBoardMemoryImageTable()
{
	CString  szMemoryImage[2];

	if (m_wndTableView.DoResetTables())
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanResetOnBoardMemoryImageTable() CONST
{
	return m_wndTableView.CanResetTables();
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::EnableToolTipMode(BOOL bEnable)
{
	return m_wndTableView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::IsToolTipModeEnabled() CONST
{
	return m_wndTableView.IsToolTipModeEnabled();
}

CTCOnBoardMemoryImagesDetailsDumpsPage *CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDumpsPage *)CLocaleDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPageDialog::ShowProcessorDetails()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	BOOL  bMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_RESETCONTENT);
	for (nMemoryArea = 0, nMemoryAreas = (INT)m_wndTableView.GetTableContents()->GetSize(), bMemoryAreas = FALSE; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)) && ((pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) || !pMemoryArea->GetMemoryImage().IsEmpty()))
		{
			if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
			continue;
		}
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)) && (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY) && pMemoryArea->GetSize() > 0)
		{
			bMemoryAreas = TRUE;
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCOUNT) > 0 || bMemoryAreas) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCOUNT) > 0 || bMemoryAreas) ? TRUE : FALSE);
	ShowProcessorMemoryImageDetails();
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPageDialog::ShowProcessorMemoryImageDetails()
{
	INT  nImageBlock;
	INT  nImageBlocks;
	CString  szVersion;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szVersion), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_RESETCONTENT); (pMemoryImage = ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL)))))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL); )
	{
		for (nImageBlock = 0, nImageBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
		{
			if ((pMemoryImageBlock = pMemoryImage->GetAt(nImageBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
					continue;
				}
			}
		}
		delete pMemoryImage;
		break;
	}
	for (; SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) > 1; )
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)));
		break;
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_SETCURSEL, (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowTextLength() > 0) ? (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szVersion), 0) : (WPARAM)-1);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION_STATIC)->EnableWindow(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->IsWindowEnabled());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->EnableWindow(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->IsWindowEnabled());
	ShowProcessorMemoryImageContents(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCURSEL)));
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPageDialog::ShowProcessorMemoryImageContents(LPCTSTR pszImage, LPCTSTR pszVersion, BOOL bUpdate)
{
	INT  nIndex;
	UINT  nAttributes;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, ((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) < 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) < 0 && lstrlen(pszImage) > 0) || !SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT)) ? CB_INSERTSTRING : CB_DELETESTRING, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) >= 0 && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) > 1 || Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), 0) != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) : (WPARAM)-1, ((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) < 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) < 0 && lstrlen(pszImage) > 0) || !SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT)) ? (LPARAM)STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) : (LPARAM)NULL), nAttributes = OBPROCESSORMEMORYAREA_TYPE_IMAGE; (nIndex = m_wndTableView.GetTableContents()->Find(pszImage)) < 0; )
	{
		nAttributes |= (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE) || (!lstrlen(pszImage) && !lstrlen(pszVersion))) ? OBPROCESSORMEMORYAREA_FLAG_PATCHABLE : OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE;
		nAttributes |= (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE) || (!lstrlen(pszImage) && !lstrlen(pszVersion))) ? OBPROCESSORMEMORYAREA_FLAG_DUMPABLE : OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE;
		nAttributes |= (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC) || (!lstrlen(pszImage) && !lstrlen(pszVersion))) ? OBPROCESSORMEMORYAREA_FLAG_UPDATE : OBPROCESSORMEMORYAREA_FLAG_NOUPDATE;
		nAttributes |= (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC) || (!lstrlen(pszImage) && !lstrlen(pszVersion))) ? OBPROCESSORMEMORYAREA_FLAG_INHIBIT : OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT;
		break;
	}
	nAttributes = ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nIndex))) ? pMemoryArea->GetAttributes() : nAttributes;
	m_wndTableView.SetTableContents(EMPTYSTRING, pszImage, pszVersion, EMPTYSTRING, EMPTYSTRING, FALSE, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszVersion) >= 0 && _tcscmp(pszVersion, STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) && bUpdate) ? TRUE : bUpdate);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, ((nAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) != OBPROCESSORMEMORYAREA_FLAG_UPDATE || (nAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT)) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE, (nAttributes & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE, (nAttributes & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, (nAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC, (nAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC)->EnableWindow();
	ShowProcessorMemoryImageStatus(pszImage, pszVersion);
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPageDialog::ShowProcessorMemoryImageStatus(LPCTSTR pszImage, LPCTSTR pszVersion)
{
	CString  szError;

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->SetWindowText((szError = (!m_wndTableView.Check(szError) && !szError.IsEmpty()) ? szError : EMPTYSTRING));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORSYMBOL)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORSYMBOL)->ShowWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->EnableWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->ShowWindow((GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_IMPORT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCOUNT) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0 && szError.IsEmpty() && CanTransactOnBoardMemoryImage() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszVersion) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DUMP)->EnableWindow((lstrlen(pszImage) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) >= 0 && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PATCH)->EnableWindow((lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0 && szError.IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PRINT)->EnableWindow((lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0 && szError.IsEmpty() && CanPrintOnBoardMemoryImageTable()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DELETE)->EnableWindow((lstrlen(pszImage) > 0 && lstrlen(pszVersion) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszImage) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)pszVersion) >= 0 && !m_wndTableView.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO)->EnableWindow((m_wndTableView.CanUndo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO)->EnableWindow((m_wndTableView.CanRedo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_SAVE)->EnableWindow(!m_wndTableView.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNICODE)->EnableWindow(!m_wndTableView.IsEmpty());
	m_wndTableView.RedrawWindow((LPCRECT)NULL, (CRgn *)NULL, RDW_INVALIDATE | RDW_UPDATENOW);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocPage(CDC &cDC, CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, LPCTSTR pszImage, LPCTSTR pszVersion, CONST CPtrArray &pFonts, INT nPages, INT nPage, LPRECT prClip)
{
	return((DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocSubTitle(cDC, prClip, GetPrintDocSubTitle(pszImage, pszVersion), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocSubTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocSubTitle(LPCTSTR pszImage, LPCTSTR pszVersion) CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_SUBTITLE), pszImage, pszVersion);
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocDetails(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	UINT  nCount;
	UINT  nRange[2];
	CString  szDetails;

	if (pJobInfo->GetPrintByRange(nRange[0], nRange[1]))
	{
		szDetails.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYRANGE), nRange[0], nRange[1]);
		return szDetails;
	}
	if (pJobInfo->GetPrintBySide(nCount))
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTITEM), nCount);
			return szDetails;
		}
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTITEM), nCount);
			return szDetails;
		}
		return EMPTYSTRING;
	}
	return STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTALL);
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocComments(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCOnBoardMemoryImagesDetailsDumpsPageDialog::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocSubTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanDumpOnBoardMemoryImage() CONST
{
	BOOL  bStop;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	return((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE) && (m_wndTableView.GetTableContents(&cMemoryImage) || !cMemoryImage.GetName().IsEmpty())) ? GetTCService()->CheckTCOnBoardMemoryImageDumpCapabilities(m_wndTableView.GetTableContents(), &cMemoryImage, bStop) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::CanPatchOnBoardMemoryImage() CONST
{
	CString  szMemoryImage;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE) && szMemoryImage != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && m_wndTableView.GetTableContents(&cMemoryImage); )
	{
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_PATCHABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONPATCHABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_DUMPABLE) | OBPROCESSORMEMORYIMAGE_FLAG_NONDUMPABLE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_UPDATE) | OBPROCESSORMEMORYIMAGE_FLAG_NOUPDATE));
		cMemoryImage.SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC)) ? ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) : ((cMemoryImage.GetAttributes() & ~OBPROCESSORMEMORYIMAGE_FLAG_INHIBIT) | OBPROCESSORMEMORYIMAGE_FLAG_NOINHIBIT));
		return GetTCService()->CheckTCOnBoardMemoryImagePatchCapabilities(m_wndTableView.GetTableContents(), &cMemoryImage);
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPageDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)));
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, bCheck);
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC, bCheck);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsDumpsPageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::PreTranslateMessage(MSG *pMsg)
{
	if (m_wndTableView.IsChild(CWnd::FromHandle(pMsg->hwnd)))
	{
		for (; pMsg->message == WM_KEYDOWN || pMsg->message == WM_CUT || pMsg->message == WM_PASTE || pMsg->message == WM_CLEAR; )
		{
			SetTimer(TCONBOARDMEMORYIMAGESDUMPS_CHECKDATA_TIMERID, TCONBOARDMEMORYIMAGESDUMPS_CHECKDATA_TIMEOUT, NULL);
			break;
		}
	}
	return CLocaleDialog::PreTranslateMessage(pMsg);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDumpsPageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDumpsPageDialog)
	ON_WM_CREATE()
	ON_WM_CTLCOLOR()
	ON_WM_DRAWITEM()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_IMPORT, OnImportMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_EXPORT, OnExportMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE, OnPatchableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE, OnDumpableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, OnUpdateableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC, OnInhibitableMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT, OnTransactMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_SAVE, OnSaveMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DELETE, OnDeleteMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DUMP, OnDumpMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PATCH, OnPatchMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PRINT, OnPrintMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO, OnUndoMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO, OnRedoMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, OnSelchangeMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, OnSelchangeMemoryImageVersion)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, OnEditchangeMemoryImage)
	ON_CBN_EDITCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, OnEditchangeMemoryImageVersion)
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDumpsPageDialog message handlers

int CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (; (hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESWARNING), STRING(IDS_RESOURCETYPE_PICTURE))); )
	{
		if ((hMemResource[0] = LoadResource(hModule, hResource)))
		{
			if ((pResource = LockResource(hMemResource[0])))
			{
				if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
				{
					if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
					{
						if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
						{
							if (SUCCEEDED(m_cSymbol.Load(pIStream)))
							{
								pIStream->Release();
								break;
							}
						}
						pIStream->Release();
					}
				}
			}
		}
		break;
	}
	return CLocaleDialog::OnCreate(lpCreateStruct);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnInitDialog()
{
	CRect  rView;
	CButton  *pButton;
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_LIMITTEXT, (WPARAM)GetDatabase()->GetOBProcessorMemoryImageNameLength()), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_LIMITTEXT, (WPARAM)GetDatabase()->GetOBProcessorMemoryImageBlockVersionLength()); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_UNDO), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	for (m_wndTableViewCtrl.Attach(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_LIST)->GetSafeHwnd()), m_wndTableViewCtrl.GetClientRect(rView), m_wndTableView.Create(&m_wndTableViewCtrl, rView, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE_TABLE_NAME)); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_REDO), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	return FALSE;
}

HBRUSH CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnCtlColor(CDC *pDC, CWnd *pWnd, UINT nCtlColor)
{
	return((pWnd->GetDlgCtrlID() == IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_LIST) ? (HBRUSH)GetStockObject(NULL_BRUSH) : CLocaleDialog::OnCtlColor(pDC, pWnd, nCtlColor));
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnDrawItem(int nCtrlID, LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	CDC  cDC;

	if (cDC.Attach(lpDrawItemStruct->hDC))
	{
		for (cDC.FillSolidRect(&lpDrawItemStruct->rcItem, GetSysColor(COLOR_3DFACE)); nCtrlID == IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORSYMBOL && m_cSymbol != (HBITMAP)NULL; )
		{
			m_cSymbol.TransparentBlt(cDC.GetSafeHdc(), lpDrawItemStruct->rcItem, VGA_COLOR_WHITE);
			break;
		}
		cDC.Detach();
	}
	CLocaleDialog::OnDrawItem(nCtrlID, lpDrawItemStruct);
}

LRESULT CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if ((LOWORD(wParam) == IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO || LOWORD(wParam) == IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO) && HIWORD(wParam) == BN_CLICKED)
	{
		SetTimer(TCONBOARDMEMORYIMAGESDUMPS_CHECKDATA_TIMERID, TCONBOARDMEMORYIMAGESDUMPS_CHECKDATA_TIMEOUT, NULL);
		return CLocaleDialog::OnCommand(wParam, lParam);
	}
	if (wParam == IDCANCEL)
	{
		GetParent()->SetFocus();
		return TRUE;
	}
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnSetFont(CFont *pFont)
{
	CWnd  *pCtrl[2];
	CRect  rCtrl[2];
	CRect  rDialog[2];
	CSize  sizeDialog;
	LOGFONT  lfDialogFont;
	CDialog  cTemplateDialog;
	CDialogTemplate  cTemplate;
	CFontTools  cFontTools;

	for (GetWindowRect(rDialog[0]), GetParent()->ScreenToClient(rDialog[0]); pFont->GetLogFont(&lfDialogFont) > 0 && cTemplate.Load(MAKEINTRESOURCE(IDD)) && cTemplate.SetFont(lfDialogFont.lfFaceName, (WORD)cFontTools.QueryPoints(&lfDialogFont)) && cTemplateDialog.CreateIndirect(cTemplate.Detach()); )
	{
		for (pCtrl[0] = GetWindow(GW_CHILD), pCtrl[1] = cTemplateDialog.GetWindow(GW_CHILD), cTemplateDialog.GetWindowRect(rDialog[1]), MoveWindow(rDialog[0].left, rDialog[0].top, (sizeDialog.cx = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Width() : rDialog[0].Width()), (sizeDialog.cy = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Height() : rDialog[0].Height())), GetParent()->SetScrollSizes(MM_TEXT, sizeDialog); IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd()); pCtrl[0] = pCtrl[0]->GetNextWindow(), pCtrl[1] = pCtrl[1]->GetNextWindow())
		{
			for (pCtrl[0]->SetFont(pFont), pCtrl[0]->GetWindowRect(rCtrl[0]), ScreenToClient(rCtrl[0]), pCtrl[1]->GetWindowRect(rCtrl[1]), cTemplateDialog.ScreenToClient(rCtrl[1]); rCtrl[0] != rCtrl[1]; )
			{
				for (pCtrl[0]->MoveWindow(rCtrl[1]); pCtrl[0]->IsChild(&m_wndTableView); )
				{
					pCtrl[0]->GetClientRect(rCtrl[1]);
					m_wndTableView.MoveWindow(rCtrl[1]);
					break;
				}
				break;
			}
		}
		cTemplateDialog.DestroyWindow();
		break;
	}
	if (GetWindow(GW_CHILD))
	{
		AdjustToPrivileges();
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnTimer(UINT_PTR nEventID)
{
	CString  szError[2];
	CString  szMemoryImage[2];

	if (nEventID == TCONBOARDMEMORYIMAGESDUMPS_CHECKDATA_TIMERID)
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->SetWindowText((szError[1] = (!m_wndTableView.Check(szError[0]) && !szError[0].IsEmpty()) ? szError[0] : EMPTYSTRING));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORSYMBOL)->EnableWindow(!szError[1].IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORSYMBOL)->ShowWindow((!szError[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->EnableWindow(!szError[1].IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_ERRORMESSAGE)->ShowWindow((!szError[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO)->EnableWindow((m_wndTableView.CanUndo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO)->EnableWindow((m_wndTableView.CanRedo()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && szError[1].IsEmpty() && CanTransactOnBoardMemoryImage() && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DUMP)->EnableWindow((!szMemoryImage[0].IsEmpty() && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) >= 0 && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PATCH)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && szError[1].IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		KillTimer(nEventID);
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnImportMemoryImage()
{
	CHourglassCursor  cCursor;

	DoImportOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnExportMemoryImage()
{
	CHourglassCursor  cCursor;

	DoExportOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnPatchableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_PATCHABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE));
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_PATCH)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && szError.IsEmpty() && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnDumpableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_FLAGS_DUMPABLE)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE));
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DUMP)->EnableWindow((!szMemoryImage[0].IsEmpty() && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) >= 0 && CanDumpOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnUpdateableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) | OBPROCESSORMEMORYAREA_FLAG_UPDATE) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_UPDATE) | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE));
		break;
	}
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC) || !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnInhibitableMemoryImage()
{
	CString  szError;
	CString  szMemoryImage[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); (pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(szMemoryImage[0]))); )
	{
		pMemoryArea->SetAttributes((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC)) ? ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) | OBPROCESSORMEMORYAREA_FLAG_INHIBIT) : ((pMemoryArea->GetAttributes() & ~OBPROCESSORMEMORYAREA_FLAG_INHIBIT) | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT));
		break;
	}
	AccessControl(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_INHIBITAUTOMATIC) || !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UPDATES_AUTOMATIC));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_TRANSACT)->EnableWindow((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) < 0 || SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) < 0 || m_wndTableView.IsModified())) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnTransactMemoryImage()
{
	CHourglassCursor  cCursor;

	DoTransactOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnSaveMemoryImage()
{
	CFileEx  cFile;
	DWORD  cbData[2];
	CString  szMessage;
	CString  szContents[2];
	CFileBrowseDialog  cFileBrowseDialog(this, (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));
	CHourglassCursor  cCursor;

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		for (BeginWaitCursor(); m_wndTableView.GetTableContents(szContents[0]) > 0; )
		{
#ifndef UNICODE
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(CHAR); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNICODE); )
			{
				MultiByteToWideChar(CP_ACP, 0, szContents[0], -1, (LPWSTR)szContents[1].GetBufferSetLength((cbData[0] = (INT)(szContents[0].GetLength()*sizeof(WCHAR)))), (szContents[0].GetLength() + 1)*sizeof(WCHAR));
				szContents[1].ReleaseBuffer();
				break;
			}
#else
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(WCHAR); !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNICODE); )
			{
				WideCharToMultiByte(CP_ACP, 0, szContents[0], -1, (LPSTR)szContents[1].GetBufferSetLength((cbData[0] = szContents[0].GetLength()) / sizeof(WCHAR)), szContents[0].GetLength() + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szContents[1].ReleaseBuffer();
				break;
			}
#endif
			if (cFile.Open(cFileBrowseDialog.GetPathName(), CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
			{
				if (WriteFile(cFile.m_hFile, (LPCTSTR)szContents[1], cbData[0], &cbData[1], (LPOVERLAPPED)NULL) && cbData[0] == cbData[1])
				{
					cFile.Close();
					EndWaitCursor();
					return;
				}
				cFile.Close();
			}
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYIMAGE_FAILURE), (LPCTSTR)cFileBrowseDialog.GetPathName());
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			EndWaitCursor();
			return;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYIMAGE_NONE));
		EndWaitCursor();
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnDeleteMemoryImage()
{
	CHourglassCursor  cCursor;

	DoDeleteOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnDumpMemoryImage()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsDownloadDumpsPropertiesDialog  cDownloadDumpsPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (m_wndTableView.GetTableContents(&cMemoryImage) || !cMemoryImage.GetName().IsEmpty())
	{
		cDownloadDumpsPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnPatchMemoryImage()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsUploadDumpsPropertiesDialog  cUploadDumpsPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (m_wndTableView.GetTableContents(&cMemoryImage))
	{
		cUploadDumpsPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnPrintMemoryImage()
{
	CHourglassCursor  cCursor;

	DoPrintOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnUndoMemoryImage()
{
	m_wndTableView.DoUndo();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnRedoMemoryImage()
{
	m_wndTableView.DoRedo();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnSelchangeMemoryImage()
{
	ShowProcessorMemoryImageDetails();
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnSelchangeMemoryImageVersion()
{
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]);
	ShowProcessorMemoryImageContents(((szMemoryImage[1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL))).IsEmpty()) ? szMemoryImage[0] : szMemoryImage[1], Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCURSEL)));
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnEditchangeMemoryImage()
{
	INT  nIndex;
	CString  szMemoryImage[2];

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); ((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0])) >= 0 && nIndex != SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME, CB_GETCURSEL)) || nIndex < 0; )
	{
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		break;
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnEditchangeMemoryImageVersion()
{
	INT  nIndex;
	CString  szMemoryImage[2];

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION)->GetWindowText(szMemoryImage[1]); ((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1])) >= 0 && nIndex != SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_VERSION, CB_GETCURSEL)) || nIndex < 0; )
	{
		ShowProcessorMemoryImageContents(szMemoryImage[0], szMemoryImage[1]);
		break;
	}
}

void CTCOnBoardMemoryImagesDetailsDumpsPageDialog::OnDestroy()
{
	HICON  hIcon;
	CButton  *pButton;

	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_UNDO)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_REDO)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	m_cSymbol.Destroy();
	m_wndTableViewCtrl.Detach();
	CLocaleDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDumpsPage view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDumpsPage, CScrollView)

CTCOnBoardMemoryImagesDetailsDumpsPage::CTCOnBoardMemoryImagesDetailsDumpsPage() : CScrollView()
{
	m_rDialog[0].SetRectEmpty();
	m_rDialog[1].SetRectEmpty();
	m_pDialog = (CTCOnBoardMemoryImagesDetailsDumpsPageDialog *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::Create(CWnd *pParentWnd, CONST RECT &rect, BOOL bVisible)
{
	CRect  rDialog;
	CSize  sizeDialog;
	CCreateContext  cContext;
	CTCOnBoardMemoryImagesDetailsDumpsPageDialog  *pDialog;

	for (cContext.m_pCurrentDoc = new CTCOnBoardMemoryImagesDocument; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_3DFACE)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); )
	{
		if ((pDialog = new CTCOnBoardMemoryImagesDetailsDumpsPageDialog))
		{
			if (pDialog->Create(IDD_TCONBOARDMEMORYIMAGES_DETAILSDUMPS_DIALOG, this))
			{
				pDialog->ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				pDialog->GetWindowRect(rDialog);
				sizeDialog.cx = rDialog.Width();
				sizeDialog.cy = rDialog.Height();
				SetScrollSizes(MM_TEXT, sizeDialog);
				m_pDialog = pDialog;
				return TRUE;
			}
			delete pDialog;
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetProcessor(pItem, bAll) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetProcessor(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::StartMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StartMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pTMEnvironment) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::StopMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StopMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoTransactOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanTransactOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoImportOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoImportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanImportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanImportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoExportOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoExportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanExportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanExportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoDeleteOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanDeleteOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoInsertOnBoardMemoryImageTableRowAbove()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoInsertOnBoardMemoryImageTableRowAbove() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanInsertOnBoardMemoryImageTableRowAbove() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoInsertOnBoardMemoryImageTableRowBelow()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoInsertOnBoardMemoryImageTableRowBelow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanInsertOnBoardMemoryImageTableRowBelow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoInsertOnBoardMemoryImageTableColumnBefore() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanInsertOnBoardMemoryImageTableColumnBefore() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoInsertOnBoardMemoryImageTableColumnAfter() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanInsertOnBoardMemoryImageTableColumnAfter() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoClearOnBoardMemoryImageTableRow()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoClearOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanClearOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanClearOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoDeleteOnBoardMemoryImageTableRow()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDeleteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDeleteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoDeleteOnBoardMemoryImageTableColumn()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDeleteOnBoardMemoryImageTableColumn() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDeleteOnBoardMemoryImageTableColumn() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoCopyOnBoardMemoryImageTableRow()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoCopyOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanCopyOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoPasteOnBoardMemoryImageTableRow()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoPasteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanPasteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoPrintOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanPrintOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoDiscardOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanDiscardOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::DoResetOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->EnableToolTipMode(bEnable) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->IsToolTipModeEnabled() : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsDumpsPage::UpdateLayout(BOOL bActivate)
{
	if (bActivate)
	{
		m_rDialog[0].SetRectEmpty();
		m_rDialog[1].SetRectEmpty();
	}
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDumpsPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDumpsPage, CScrollView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDumpsPage)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SHOWWINDOW()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_MESSAGE(WM_SETFONT, OnSetFont)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDumpsPage drawing

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDumpsPage message handlers

int CTCOnBoardMemoryImagesDetailsDumpsPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		m_pParentWnd = CView::GetParent()->GetParent()->GetParent()->GetParent();
		SetScrollSizes(MM_TEXT, CSize(0, 0));
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnSize(UINT nType, int cx, int cy)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		for (m_pDialog->GetWindowRect(rDialog); GetMainWnd()->MDIGetActive() == GetParentFrame() && m_rDialog[1].TopLeft() == rDialog.TopLeft(); )
		{
			m_pDialog->Invalidate(TRUE);
			m_pDialog->ValidateRect(m_rDialog[0]);
			break;
		}
		m_pDialog->UpdateWindow();
		GetClientRect(m_rDialog[0]);
		m_rDialog[1] = rDialog;
	}
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsDumpsPage::OnEraseBkgnd(CDC *pDC)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->GetWindowRect(rDialog);
		ScreenToClient(rDialog);
		pDC->ExcludeClipRect(rDialog);
	}
	return CScrollView::OnEraseBkgnd(pDC);
}

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnShowWindow(BOOL bShow, UINT nStatus)
{
	for (m_rDialog[0].SetRectEmpty(), m_rDialog[1].SetRectEmpty(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->ShowWindow((bShow) ? SW_SHOW : SW_HIDE);
		break;
	}
	CScrollView::OnShowWindow(bShow, nStatus);
}

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsWindow(m_pDialog->GetSafeHwnd()) && !IsChild(pOldWnd))
		{
			m_pDialog->SetFocus();
			return;
		}
		if (IsChild(pOldWnd))
		{
			GetParent()->SetFocus();
			return;
		}
	}
	CScrollView::OnSetFocus(pOldWnd);
}

LRESULT CTCOnBoardMemoryImagesDetailsDumpsPage::OnSetFont(WPARAM wParam, LPARAM lParam)
{
	if (IsWindow(m_pDialog->GetSafeHwnd())) m_pDialog->SetFont(CFont::FromHandle((HFONT)wParam));
	return Default();
}

void CTCOnBoardMemoryImagesDetailsDumpsPage::OnDestroy()
{
	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->DestroyWindow();
		delete m_pDialog;
	}
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::Initialize()
{
	m_bFunctions = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsAnalysisPageDialog *CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsAnalysisPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::EnumTelecommands()
{
	INT  nFunction;
	INT  nFunctions;
	CString  szFunction;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = (CDatabaseTCFunction *)m_pFunctions.GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			szFunction.Format(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_COMMANDFUNCTION_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFunction);
		}
	}
	return((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	if ((pFunction = m_pFunctions.GetAt((INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS, CB_GETCURSEL))))
	{
		for (nItem = 0, nItems = (INT)pFunction->GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
		{
			if ((pFunctionElement = pFunction->GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TAG); )
					{
						szItem = pFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
					{
						szItem = pFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TYPE))
					{
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_CODING))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_RADIX))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_VALUE); )
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								bOolStatus = TRUE;
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								bOolStatus = TRUE;
								break;
							}
							szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn  &&  nItem >= SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
					{
						Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
				}
			}
		}
		while (nItems < SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT))
		{
			if (!Listview_DeleteText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS), nItems)) break;
			continue;
		}
		if (m_bFunctions)
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS), 0);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::LogPatchRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_PATCHTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_PATCHCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunctions;
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pPackets.RemoveAll();
	m_pFunctions.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS, OnSelchangeTelecommand)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_COMMANDS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_INFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 0, m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), m_pFunctions, m_pPackets) && EnumTelecommands())) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnSelchangeTelecommand()
{
	ShowContents();
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunctions = GetTCService()->EncodeTCOnBoardMemoryImagePatch(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME)).GetTime(), m_pFunctions, m_pPackets))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunctions);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnOK()
{
	INT  nStage;
	INT  nStages;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem;
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	for (nFunction = 0, nFunctions = (INT)m_pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pItem = ((pFunction = m_pFunctions.GetAt(nFunction))) ? new CTCItem : (CTCItem *)NULL) != (CTCItem *)NULL)
		{
			for (pItem->SetName(pFunction->GetName()), pItem->SetType(TCITEM_TYPE_FUNCTION), pItem->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_UPLOADANALYSIS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket = (pItem->CDatabaseTCFunction::Copy(pFunction)) ? m_pPackets.GetAt(nFunction) : (CDatabaseTCPacket *)NULL) && pItem->SetTCPacket(pPacket); )
			{
				if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
					{
						if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
							{
								if (nStageIDs.GetAt(nStage) == nStageID) break;
								if (nStageIDs.GetAt(nStage) > nStageID)
								{
									nStageIDs.InsertAt(nStage, nStageID);
									break;
								}
							}
						}
					}
					for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
					{
						for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
							{
								tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
								tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
								tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
								szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
								bParameter = TRUE;
							}
						}
						if (nParameters > 0)
						{
							pItem->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
							pItem->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
							continue;
						}
					}
				}
				break;
			}
			if (pItems.Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	for (; pItems.GetSize() > 0; )
	{
		if (nFunction == nFunctions)
		{
			if (GetTCService()->LoadTelecommands(pItems))
			{
				LogPatchRequest();
				break;
			}
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESUPLOADANALYSISPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAnalysisPageDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CTCOnBoardMemoryImagesDetailsAnalysisPageDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont[3];

	return((pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) ? SetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont;

	for (m_wndTableView.SetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.SetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.SetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor), m_wndTableView.RedrawWindow(); !m_cFont.GetSafeHandle() || (m_cFont.GetLogFont(&lfFont) > 0 && memcmp(&lfFont, plfFont, sizeof(LOGFONT))); )
	{
		for (m_cFont.DeleteObject(); m_cFont.CreateFontIndirect(plfFont); )
		{
			SetFont(&m_cFont);
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[3];

	return((GetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor)) ? (pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	for (m_wndTableView.GetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.GetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.GetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor); m_cFont.GetObject(sizeof(LOGFONT), plfFont) > 0; ) return TRUE;
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	if (m_wndTableView.SetTableContents(pItem, bAll))
	{
		ShowProcessorDetails();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea[3];
	INT  nMemoryAreas[3];
	BOOL  bMemoryTableContents;
	CString  szMemoryImage[2][2][2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((bMemoryTableContents = m_wndTableView.SetTableContents(pszProcessor, pImage, bOverwrite, bDelete)) && !bDelayed)
	{
		for (nMemoryArea[0] = 0, nMemoryAreas[0] = (INT)m_wndTableView.GetTableContents()->GetSize(), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME)->GetWindowText(szMemoryImage[0][0][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION)->GetWindowText(szMemoryImage[0][0][1]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME)->GetWindowText(szMemoryImage[0][1][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION)->GetWindowText(szMemoryImage[0][1][1]); nMemoryArea[0] < nMemoryAreas[0]; nMemoryArea[0]++)
		{
			if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[0])) != (CDatabaseOBProcessorMemoryArea *)NULL  &&  !pMemoryArea->GetMemoryImage().IsEmpty())
			{
				for (; SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0; )
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
					break;
				}
				for (; SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0; )
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
					break;
				}
			}
		}
		for (nMemoryArea[1] = 0, nMemoryAreas[1] = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT); nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
		{
			for (nMemoryArea[2] = 0, nMemoryAreas[2] = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea[2] < nMemoryAreas[2]; nMemoryArea[2]++)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[2])) && !pMemoryArea->GetMemoryImage().IsEmpty())
				{
					if (pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), nMemoryArea[1])) break;
					continue;
				}
			}
			if (nMemoryArea[2] == nMemoryAreas[2])
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_DELETESTRING, nMemoryArea[1]);
				nMemoryAreas[1]--;
				nMemoryArea[1]--;
			}
		}
		for (nMemoryArea[1] = 0, nMemoryAreas[1] = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT); nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
		{
			for (nMemoryArea[2] = 0, nMemoryAreas[2] = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea[2] < nMemoryAreas[2]; nMemoryArea[2]++)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[2])) && !pMemoryArea->GetMemoryImage().IsEmpty())
				{
					if (pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), nMemoryArea[1])) break;
					continue;
				}
			}
			if (nMemoryArea[2] == nMemoryAreas[2])
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_DELETESTRING, nMemoryArea[1]);
				nMemoryAreas[1]--;
				nMemoryArea[1]--;
			}
		}
		for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][0][0]), 0)), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][1][0]), 0)); (pMemoryImage = new CDatabaseOBProcessorMemoryImage); )
		{
			for (nMemoryArea[1] = 0, nMemoryAreas[1] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL) >= 0) ? (INT)m_wndTableView.GetTableContents()->GetSize() : 0; nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1] = nMemoryArea[1] + 1)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[1])) && pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL)) && pMemoryArea->GetMemoryImage(pMemoryImage)) break;
				continue;
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
					continue;
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCOUNT) : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION), nMemoryBlock)) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_DELETESTRING, nMemoryBlock);
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			for (nMemoryArea[1] = 0, nMemoryAreas[1] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL) >= 0) ? (INT)m_wndTableView.GetTableContents()->GetSize() : 0; nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[1])) && pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL)) && pMemoryArea->GetMemoryImage(pMemoryImage)) break;
				continue;
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)pMemoryImage->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
					continue;
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCOUNT) : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION), nMemoryBlock)) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_DELETESTRING, nMemoryBlock);
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_SETCURSEL, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL) >= 0) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][0][1]) : (WPARAM)-1);
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_SETCURSEL, (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL) >= 0) ? (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0][1][1]) : (WPARAM)-1);
			delete pMemoryImage;
			break;
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		for (szMemoryImage[1][0][0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL)), szMemoryImage[1][0][1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL)), szMemoryImage[1][1][0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL)), szMemoryImage[1][1][1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL)); szMemoryImage[0][0][0].Compare(szMemoryImage[1][0][0]) || szMemoryImage[0][0][1].Compare(szMemoryImage[1][0][1]) || szMemoryImage[0][1][0].Compare(szMemoryImage[1][1][0]) || szMemoryImage[0][1][1].Compare(szMemoryImage[1][1][1]); )
		{
			ShowMemoryImageAnalysisResults(szMemoryImage[1][0][0], szMemoryImage[1][0][1], szMemoryImage[1][1][0], szMemoryImage[1][1][1], FALSE);
			break;
		}
		return TRUE;
	}
	return bMemoryTableContents;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return pItem->Copy(m_wndTableView.GetTableContents());
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_wndTableView.SetTableContents(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DoPrintOnBoardMemoryImageTable()
{
	CDC  cDC;
	INT  nPage;
	INT  nPages;
	INT  nOffset;
	INT  nMargin;
	BOOL  bUndo;
	BOOL  bMetric;
	CRgn  rgnClip[2];
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	CRect  rPrintArea[4];
	CFont  cFont[TCONBOARDMEMORYIMAGES_PRINTFONTS];
	TCHAR  szTempDirectory[MAX_PATH];
	TCHAR  szTempFileName[MAX_PATH];
	DOCINFO  sJobInfo;
	CString  szMessage;
	CString  szJobTitle;
	CString  szMemoryArea;
	CString  szMemoryImage[2][2];
	CTimeKey  tPrintTime;
	CPtrArray  pFonts;
	CMetaFileDC  cMetaDC;
	HENHMETAFILE  hMetaDC;
	ENHMETAHEADER  sMetaHeader;
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;

	if ((pPrintProfileInfo = (((pJobInfo = (GetParentDisplay()->GetPrintJobs(pJobs)) ? pJobs.GetAt(pJobs.Find(STRING(IDS_PRINTJOB_DEFAULTNAME))) : (CTCOnBoardMemoryImagesPrintJobInfo *)NULL)) && GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		for (sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.fwType = 0, sJobInfo.lpszDatatype = (LPCTSTR)NULL, sJobInfo.lpszOutput = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES)), sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle; CreatePrinterDC(pPrintProfileInfo, cDC) && cDC.StartDoc(&sJobInfo) >= 0 && cDC.StartPage() >= 0; )
		{
			if (CalcPrintDocRect(cDC, rtMargin[0], bMetric) && cDC.GetClipBox(rPrintArea[0]) != ERROR  &&  CalcPrintDocTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]) && CalcPrintDocSubTitleFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]) && CalcPrintDocDetailsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]) && CalcPrintDocNoticeFonts(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rPrintArea[0], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]))
			{
				for (nPage = 1, nPages = -nPage, GetTempPath(sizeof(szTempDirectory) / sizeof(TCHAR), szTempDirectory), GetTempFileName(szTempDirectory, GetAccountSpacecraftName(), 0, szTempFileName), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE]), pFonts.SetAtGrow(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]), bUndo = m_wndTableView.EnableUndo(FALSE); cMetaDC.CreateEnhanced(&cDC, szTempFileName, (LPCRECT)NULL, (LPCTSTR)NULL); )
				{
					for (m_wndTableView.GetTableContents(szMemoryArea, szMemoryImage[0][0], szMemoryImage[0][1], szMemoryImage[1][0], szMemoryImage[1][1]), cMetaDC.SetAttribDC(cDC.GetSafeHdc()), hMetaDC = (HENHMETAFILE)NULL; m_wndTableView.Print(pJobInfo, cMetaDC) && DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryImage[0][0], szMemoryImage[0][1], szMemoryImage[1][0], szMemoryImage[1][1], pFonts, 0, 0, (rPrintArea[2] = rPrintArea[0])) && rgnClip[0].CreateRectRgn(rPrintArea[0].left, rPrintArea[0].top, rPrintArea[0].right, rPrintArea[0].bottom) && rgnClip[1].CreateRectRgn(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, rPrintArea[2].bottom) && rPrintArea[2].Height() > 0; )
					{
						for (hMetaDC = cMetaDC.CloseEnhanced(), GetEnhMetaFileHeader(hMetaDC, sizeof(sMetaHeader), &sMetaHeader), rPrintArea[3].SetRect(rPrintArea[2].left, rPrintArea[2].top, rPrintArea[2].right, (INT)(rPrintArea[2].top + ((double)rPrintArea[2].Width()*(double)(sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top)) / (double)(sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left))), nMargin = rPrintArea[0].Height() / 100, nOffset = max(rPrintArea[2].Height() - nMargin, 1), nPages = 0; DrawPrintDocPage(cDC, pJobInfo, tPrintTime, pPrintProfileInfo->GetPrinterName(), szMemoryImage[0][0], szMemoryImage[0][1], szMemoryImage[1][0], szMemoryImage[1][1], pFonts, max(rPrintArea[3].Height() - 1, 0) / max(rPrintArea[2].Height() - nMargin, 1) + 1, nPage, (rPrintArea[1] = rPrintArea[0])); )
						{
							if (cDC.SelectClipRgn(&rgnClip[1], RGN_COPY) != ERROR)
							{
								cDC.PlayMetaFile(hMetaDC, rPrintArea[3]);
								cDC.SelectClipRgn(&rgnClip[0], RGN_COPY);
								if (!LOBYTE(GetAsyncKeyState(VK_ESCAPE)))
								{
									if (rPrintArea[1].bottom < rPrintArea[3].bottom)
									{
										if (cDC.EndPage() >= 0 && cDC.StartPage() >= 0)
										{
											rPrintArea[3].OffsetRect(0, -nOffset);
											nPage = nPage + 1;
											nPages++;
											continue;
										}
										nPages = -1;
										break;
									}
									nPages++;
									break;
								}
								nPages = 0;
								break;
							}
							nPages = -1;
						}
						if (!nPages)
						{
							szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGEANALYSIS_ABORT), (LPCTSTR)szMemoryImage[0][0], (LPCTSTR)szMemoryImage[0][1], (LPCTSTR)szMemoryImage[1][0], (LPCTSTR)szMemoryImage[1][1]);
							ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, szMessage, FALSE);
						}
						break;
					}
					DeleteEnhMetaFile((!hMetaDC) ? cMetaDC.CloseEnhanced() : hMetaDC);
					CFileEx::Remove(szTempFileName);
					rgnClip[0].DeleteObject();
					rgnClip[1].DeleteObject();
					break;
				}
				for (m_wndTableView.EnableUndo(bUndo); nPages > 0; )
				{
					if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS)
					{
						pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
						pJobInfo->SetComments(EMPTYSTRING);
						GetParentDisplay()->SetPrintJobs(pJobs);
					}
					cDC.EndPage();
					cDC.EndDoc();
					cDC.DeleteDC();
					return TRUE;
				}
				if (!nPages)
				{
					cDC.AbortDoc();
					cDC.DeleteDC();
					return TRUE;
				}
			}
			cDC.AbortDoc();
			cDC.DeleteDC();
			break;
		}
	}
	if (m_wndTableView.GetTableContents(szMemoryArea, szMemoryImage[0][0], szMemoryImage[0][1], szMemoryImage[1][0], szMemoryImage[1][1]) && !szMemoryImage[0][0].IsEmpty() && !szMemoryImage[0][1].IsEmpty() && !szMemoryImage[1][0].IsEmpty() && !szMemoryImage[1][1].IsEmpty())
	{
		szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_PRINTMEMORYIMAGEANALYSIS_FAILURE), (LPCTSTR)szMemoryImage[0][0], (LPCTSTR)szMemoryImage[0][1], (LPCTSTR)szMemoryImage[1][0], (LPCTSTR)szMemoryImage[1][1]);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CanPrintOnBoardMemoryImageTable() CONST
{
	CString  szMemoryArea;
	CString  szMemoryImage[2][2];

	return((m_wndTableView.GetTableContents(szMemoryArea, szMemoryImage[0][0], szMemoryImage[0][1], szMemoryImage[1][0], szMemoryImage[1][1]) && !szMemoryImage[0][0].IsEmpty() && !szMemoryImage[0][1].IsEmpty() && !szMemoryImage[1][0].IsEmpty() && !szMemoryImage[1][1].IsEmpty() && !m_wndTableView.IsEmpty()) ? IsDefaultPrinterAvailable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DoResetOnBoardMemoryImageTable()
{
	if (m_wndTableView.DoResetTables())
	{
		ShowMemoryImageAnalysisResults(EMPTYSTRING, EMPTYSTRING, EMPTYSTRING, EMPTYSTRING, FALSE);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CanResetOnBoardMemoryImageTable() CONST
{
	return m_wndTableView.CanResetTables();
}

CTCOnBoardMemoryImagesDetailsAnalysisPage *CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsAnalysisPage *)CLocaleDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::ShowProcessorDetails()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_RESETCONTENT);
	for (nMemoryArea = 0, nMemoryAreas = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)) && !pMemoryArea->GetMemoryImage().IsEmpty())
		{
			if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
			if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage()) < 0) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryArea->GetMemoryImage());
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_SETCURSEL);
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_DETAILS)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS)->EnableWindow(FALSE);
	ShowProcessorMemoryImageDetails();
}

VOID CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::ShowProcessorMemoryImageDetails(BOOL bComparedImage)
{
	INT  nImageBlock;
	INT  nImageBlocks;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_RESETCONTENT); !bComparedImage; )
	{
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_RESETCONTENT);
		break;
	}
	if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
	{
		if ((pMemoryArea = (!bComparedImage) ? m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL)))) : (CDatabaseOBProcessorMemoryArea *)NULL))
		{
			for (nImageBlock = 0, nImageBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nImageBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
					{
						SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
						continue;
					}
				}
			}
		}
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL))))))
		{
			for (nImageBlock = 0, nImageBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nImageBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion()) < 0 && pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
					{
						SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImageBlock->GetVersion());
						continue;
					}
				}
			}
		}
		delete pMemoryImage;
	}
	m_wndTableView.SetTableContents(EMPTYSTRING, Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL)), (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL)) : EMPTYSTRING, Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL)), (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL)) : EMPTYSTRING, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PRINT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PATCH)->EnableWindow(FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_UNICODE, FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::ShowMemoryImageAnalysisResults(LPCTSTR pszImage, LPCTSTR pszImageVersion, LPCTSTR pszComparedImage, LPCTSTR pszComparedImageVersion, BOOL bResults)
{
	UINT  nCount;
	CString  szResult;
	CString  szContents;

	m_wndTableView.SetTableContents(EMPTYSTRING, pszImage, pszImageVersion, pszComparedImage, pszComparedImageVersion, IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS));
	szResult.Format(((nCount = max((INT)m_wndTableView.GetTableContents(szContents) - 1, 0)) != 1) ? STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_RESULTSFORMAT) : STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_RESULTFORMAT), nCount);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->SetWindowText((nCount > 0 || bResults) ? szResult : EMPTYSTRING);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS_COUNT)->EnableWindow((nCount > 0 || bResults) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PATCH)->EnableWindow((nCount > 0 && CanPatchOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PRINT)->EnableWindow((nCount > 0 && CanPrintOnBoardMemoryImageTable()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SAVE)->EnableWindow((nCount > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_UNICODE)->EnableWindow((nCount > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocPage(CDC &cDC, CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, LPCTSTR pszImage, LPCTSTR pszVersion, LPCTSTR pszComparedImage, LPCTSTR pszComparedVersion, CONST CPtrArray &pFonts, INT nPages, INT nPage, LPRECT prClip)
{
	return((DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocSubTitle(cDC, prClip, GetPrintDocSubTitle(pszImage, pszVersion, pszComparedImage, pszComparedVersion), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocSubTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocSubTitle(LPCTSTR pszImage, LPCTSTR pszVersion, LPCTSTR pszComparedImage, LPCTSTR pszComparedVersion) CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_DETAILSSUBTITLE), pszImage, pszVersion, pszComparedImage, pszComparedVersion);
	return szTitle;
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocDetails(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	UINT  nCount;
	UINT  nRange[2];
	CString  szDetails;

	if (pJobInfo->GetPrintByRange(nRange[0], nRange[1]))
	{
		szDetails.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYRANGE), nRange[0], nRange[1]);
		return szDetails;
	}
	if (pJobInfo->GetPrintBySide(nCount))
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTITEM), nCount);
			return szDetails;
		}
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE)
		{
			szDetails.Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTITEM), nCount);
			return szDetails;
		}
		return EMPTYSTRING;
	}
	return STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTALL);
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocComments(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocSubTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::ConstructOnBoardMemoryImagePatch(CDatabaseOBProcessorMemoryImage *pImage) CONST
{
	INT  nByte[2];
	INT  nBytes[2];
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nAddressBytes;
	INT  nAddressOffset;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szVersion[2];
	CUIntArray  nOffsets;
	CByteArray  nImageData[4];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	for (; (pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage); )
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME)->SendMessage(CB_GETCURSEL))))))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage[0])) ? (INT)pMemoryImage[0]->GetSize() : 0, szVersion[0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION)->SendMessage(CB_GETCURSEL)), pImage->SetAttributes(pMemoryArea->GetAttributes()); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)) && pMemoryImageBlock[0]->GetVersion() != szVersion[0])
				{
					pMemoryImage[0]->RemoveAt(nMemoryBlock);
					delete pMemoryImageBlock[0];
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			if (pMemoryImage[0]->GetSize() > 0) break;
		}
		delete pMemoryImage[0];
		pMemoryImage[0] = (CDatabaseOBProcessorMemoryImage *)NULL;
		break;
	}
	for (; (pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage); )
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME)->SendMessage(CB_GETCURSEL))))))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage[1])) ? (INT)pMemoryImage[1]->GetSize() : 0, szVersion[1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION), (INT)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION)->SendMessage(CB_GETCURSEL)); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock[1] = pMemoryImage[1]->GetAt(nMemoryBlock)) && pMemoryImageBlock[1]->GetVersion() != szVersion[1])
				{
					pMemoryImage[1]->RemoveAt(nMemoryBlock);
					delete pMemoryImageBlock[1];
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			if (pMemoryImage[1]->GetSize() > 0) break;
		}
		delete pMemoryImage[1];
		pMemoryImage[1] = (CDatabaseOBProcessorMemoryImage *)NULL;
		break;
	}
	for (nMemoryImage = 0, nMemoryImages = (!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS) && pMemoryImage[0] != (CDatabaseOBProcessorMemoryImage *)NULL && pMemoryImage[1] != (CDatabaseOBProcessorMemoryImage *)NULL) ? (sizeof(pMemoryImage) / sizeof(pMemoryImage[0])) : 0, GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage[nMemoryImage]->GetSize(), nAddress[nMemoryImage][0] = nAddress[nMemoryImage][1] = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pMemoryImageBlock[0] = pMemoryImage[nMemoryImage]->GetAt(nMemoryBlock)) && (nMemoryBlock > 0 || pMemoryImageBlock[0]->GetAddress(nAddress[nMemoryImage][0], nAddress[nMemoryImage][1])))
			{
				if (pMemoryImageBlock[0]->GetData(nImageData[2]) >= 0 && (nMemoryImage > 0 || (pMemoryImageBlock[0]->GetMask(nImageData[3]) >= 0 && GetDatabase()->CheckOBProcessorMemoryImageBlockData(nImageData[2], nImageData[3]))))
				{
					nImageData[nMemoryImage].Append(nImageData[2]);
					continue;
				}
			}
			break;
		}
	}
	for (nByte[0] = 0, nBytes[0] = (nMemoryImage == nMemoryImages && nMemoryImages > 0) ? (INT)nImageData[0].GetSize() : 0, nAddressOffset = (nMemoryImages > 0) ? (INT)((LONGLONG)nAddress[1][0] * (LONGLONG)(nRange[1][1] - nRange[1][0]) + (LONGLONG)nAddress[1][1] - (LONGLONG)nAddress[0][0] * (LONGLONG)(nRange[1][1] - nRange[1][0]) - (LONGLONG)nAddress[0][1]) : 0, nImageData[2].RemoveAll(); nByte[0] < nBytes[0]; nByte[0]++)
	{
		if (nByte[0] < nAddressOffset || nByte[0] + nAddressOffset >= nImageData[1].GetSize() || (nByte[0] + nAddressOffset >= 0 && nImageData[0].GetAt(nByte[0]) != nImageData[1].GetAt(nByte[0] + nAddressOffset)))
		{
			for (nByte[1] = (nByte[0] / nAddressBytes)*nAddressBytes, nBytes[1] = nByte[1] + nAddressBytes, nOffsets.Add(nByte[1]); nByte[1] < nBytes[1]; nByte[1]++)
			{
				nImageData[2].Add(nImageData[0].GetAt(nByte[1]));
				continue;
			}
			nByte[0] = nBytes[1] - 1;
		}
	}
	for (nMemoryBlock = 0, nMemoryBlocks = (INT)(nImageData[2].GetSize() / nAddressBytes); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
	{
		if ((pMemoryImageBlock[0] = new CDatabaseOBProcessorMemoryImageBlock) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
		{
			if (!nMemoryBlock || nOffsets.GetAt(nMemoryBlock - 1) < nOffsets.GetAt(nMemoryBlock) - nAddressBytes)
			{
				for (nByte[0] = 0, nBytes[0] = nAddressBytes, pImage->SetName(pMemoryImage[0]->GetName()), pMemoryImageBlock[0]->SetVersion(szVersion[0]), pMemoryImageBlock[0]->SetAddress((ULONG)((ULONGLONG)nAddress[0][0] + ((ULONGLONG)nAddress[0][1] + nOffsets.GetAt(nMemoryBlock) / nAddressBytes) / (ULONGLONG)(nRange[1][1] - nRange[1][0])), (UINT)(((ULONGLONG)nAddress[0][1] + nOffsets.GetAt(nMemoryBlock) / nAddressBytes) % (ULONGLONG)(nRange[1][1] - nRange[1][0]))), nImageData[0].RemoveAll(); nByte[0] < nBytes[0]; nByte[0]++)
				{
					nImageData[0].Add(nImageData[2].GetAt(nByte[0]));
					nImageData[2].RemoveAt(0);
					nBytes[0]--;
					nByte[0]--;
				}
				if (pImage->Add(pMemoryImageBlock[0]) >= 0)
				{
					pMemoryImageBlock[0]->SetData(nImageData[0]);
					continue;
				}
				delete pMemoryImageBlock[0];
				break;
			}
			if ((pMemoryImageBlock[1] = pImage->GetAt((INT)pImage->GetUpperBound())))
			{
				for (nByte[0] = 0, nBytes[0] = nAddressBytes, pMemoryImageBlock[1]->GetData(nImageData[0]); nByte[0] < nBytes[0]; nByte[0]++)
				{
					nImageData[0].Add(nImageData[2].GetAt(nByte[0]));
					nImageData[2].RemoveAt(0);
					nBytes[0]--;
					nByte[0]--;
				}
				pMemoryImageBlock[1]->SetData(nImageData[0]);
				delete pMemoryImageBlock[0];
				continue;
			}
			delete pMemoryImageBlock[0];
		}
		break;
	}
	if (nMemoryImage == nMemoryImages  &&  nMemoryBlock == nMemoryBlocks)
	{
		if ((!IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SHOWALLRESULTS) || pImage->Copy(pMemoryImage[0])) && pImage->GetSize() > 0)
		{
			delete pMemoryImage[1];
			delete pMemoryImage[0];
			return TRUE;
		}
	}
	delete pMemoryImage[1];
	delete pMemoryImage[0];
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::CanPatchOnBoardMemoryImage() CONST
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	return((ConstructOnBoardMemoryImagePatch(&cMemoryImage)) ? GetTCService()->CheckTCOnBoardMemoryImagePatchCapabilities(m_wndTableView.GetTableContents(), &cMemoryImage) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::EnableToolTipMode(BOOL bEnable)
{
	return m_wndTableView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::IsToolTipModeEnabled() CONST
{
	return m_wndTableView.IsToolTipModeEnabled();
}

VOID CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::AdjustToPrivileges()
{
	return;
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsAnalysisPageDialog)
	ON_WM_CTLCOLOR()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS, OnCompareMemoryImages)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_SAVE, OnSaveResults)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PATCH, OnPatchResults)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_PRINT, OnPrintResults)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, OnSelchangeMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, OnSelchangeMemoryImageVersion)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, OnSelchangeComparedMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, OnSelchangeComparedMemoryImageVersion)
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAnalysisPageDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnInitDialog()
{
	CRect  rView;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS)->GetClientRect(rView);
	m_wndTableViewCtrl.Attach(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS)->GetSafeHwnd());
	m_wndTableView.Create(&m_wndTableViewCtrl, rView, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE_TABLE_NAME));
	return FALSE;
}

HBRUSH CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnCtlColor(CDC *pDC, CWnd *pWnd, UINT nCtlColor)
{
	return((pWnd->GetDlgCtrlID() == IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_RESULTS) ? (HBRUSH)GetStockObject(NULL_BRUSH) : CLocaleDialog::OnCtlColor(pDC, pWnd, nCtlColor));
}

LRESULT CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL)
	{
		GetParent()->SetFocus();
		return TRUE;
	}
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSetFont(CFont *pFont)
{
	CWnd  *pCtrl[2];
	CRect  rCtrl[2];
	CRect  rDialog[2];
	CSize  sizeDialog;
	LOGFONT  lfDialogFont;
	CDialog  cTemplateDialog;
	CDialogTemplate  cTemplate;
	CFontTools  cFontTools;

	for (GetWindowRect(rDialog[0]), GetParent()->ScreenToClient(rDialog[0]); pFont->GetLogFont(&lfDialogFont) > 0 && cTemplate.Load(MAKEINTRESOURCE(IDD)) && cTemplate.SetFont(lfDialogFont.lfFaceName, (WORD)cFontTools.QueryPoints(&lfDialogFont)) && cTemplateDialog.CreateIndirect(cTemplate.Detach()); )
	{
		for (pCtrl[0] = GetWindow(GW_CHILD), pCtrl[1] = cTemplateDialog.GetWindow(GW_CHILD), cTemplateDialog.GetWindowRect(rDialog[1]), MoveWindow(rDialog[0].left, rDialog[0].top, (sizeDialog.cx = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Width() : rDialog[0].Width()), (sizeDialog.cy = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Height() : rDialog[0].Height())), GetParent()->SetScrollSizes(MM_TEXT, sizeDialog); IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd()); pCtrl[0] = pCtrl[0]->GetNextWindow(), pCtrl[1] = pCtrl[1]->GetNextWindow())
		{
			for (pCtrl[0]->SetFont(pFont), pCtrl[0]->GetWindowRect(rCtrl[0]), ScreenToClient(rCtrl[0]), pCtrl[1]->GetWindowRect(rCtrl[1]), cTemplateDialog.ScreenToClient(rCtrl[1]); rCtrl[0] != rCtrl[1]; )
			{
				for (pCtrl[0]->MoveWindow(rCtrl[1]); pCtrl[0]->IsChild(&m_wndTableView); )
				{
					pCtrl[0]->GetClientRect(rCtrl[1]);
					m_wndTableView.MoveWindow(rCtrl[1]);
					break;
				}
				break;
			}
		}
		cTemplateDialog.DestroyWindow();
		break;
	}
	if (GetWindow(GW_CHILD))
	{
		AdjustToPrivileges();
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnCompareMemoryImages()
{
	CHourglassCursor  cCursor;

	ShowMemoryImageAnalysisResults(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_NAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDNAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL)));
	m_wndTableView.SetFocus();
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSaveResults()
{
	CFileEx  cFile;
	DWORD  cbData[2];
	CString  szMessage;
	CString  szContents[2];
	CFileBrowseDialog  cFileBrowseDialog(this, (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));
	CHourglassCursor  cCursor;

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		for (BeginWaitCursor(); m_wndTableView.GetTableContents(szContents[0]) > 0; )
		{
#ifndef UNICODE
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(CHAR); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_UNICODE); )
			{
				MultiByteToWideChar(CP_ACP, 0, szContents[0], -1, (LPWSTR)szContents[1].GetBufferSetLength((cbData[0] = (INT)(szContents[0].GetLength()*sizeof(WCHAR)))), (szContents[0].GetLength() + 1)*sizeof(WCHAR));
				szContents[1].ReleaseBuffer();
				break;
			}
#else
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(WCHAR); !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_UNICODE); )
			{
				WideCharToMultiByte(CP_ACP, 0, szContents[0], -1, (LPSTR)szContents[1].GetBufferSetLength((cbData[0] = szContents[0].GetLength()) / sizeof(WCHAR)), szContents[0].GetLength() + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szContents[1].ReleaseBuffer();
				break;
			}
#endif
			if (cFile.Open(cFileBrowseDialog.GetPathName(), CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
			{
				if (WriteFile(cFile.m_hFile, (LPCTSTR)szContents[1], cbData[0], &cbData[1], (LPOVERLAPPED)NULL))
				{
					cFile.Close();
					EndWaitCursor();
					return;
				}
				cFile.Close();
			}
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEANALYSISDATA_FAILURE), (LPCTSTR)cFileBrowseDialog.GetPathName());
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			EndWaitCursor();
			return;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEANALYSISDATA_NONE));
		EndWaitCursor();
	}
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnPatchResults()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsUploadAnalysisPropertiesDialog  cUploadAnalysisPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (ConstructOnBoardMemoryImagePatch(&cMemoryImage))
	{
		cUploadAnalysisPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnPrintResults()
{
	CHourglassCursor  cCursor;

	DoPrintOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSelchangeMemoryImage()
{
	ShowProcessorMemoryImageDetails(FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION)->SetFocus();
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSelchangeMemoryImageVersion()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSelchangeComparedMemoryImage()
{
	ShowProcessorMemoryImageDetails(TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION)->SetFocus();
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnSelchangeComparedMemoryImageVersion()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSUS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_VERSION, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_COMPAREDVERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesDetailsAnalysisPageDialog::OnDestroy()
{
	m_wndTableViewCtrl.Detach();
	CLocaleDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAnalysisPage view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsAnalysisPage, CScrollView)

CTCOnBoardMemoryImagesDetailsAnalysisPage::CTCOnBoardMemoryImagesDetailsAnalysisPage() : CScrollView()
{
	m_rDialog[0].SetRectEmpty();
	m_rDialog[1].SetRectEmpty();
	m_pDialog = (CTCOnBoardMemoryImagesDetailsAnalysisPageDialog *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::Create(CWnd *pParentWnd, CONST RECT &rect, BOOL bVisible)
{
	CRect  rDialog;
	CSize  sizeDialog;
	CCreateContext  cContext;
	CTCOnBoardMemoryImagesDetailsAnalysisPageDialog  *pDialog;

	for (cContext.m_pCurrentDoc = new CTCOnBoardMemoryImagesDocument; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_3DFACE)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); )
	{
		if ((pDialog = new CTCOnBoardMemoryImagesDetailsAnalysisPageDialog))
		{
			if (pDialog->Create(IDD_TCONBOARDMEMORYIMAGES_DETAILSANALYSIS_DIALOG, this))
			{
				pDialog->ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				pDialog->GetWindowRect(rDialog);
				sizeDialog.cx = rDialog.Width();
				sizeDialog.cy = rDialog.Height();
				SetScrollSizes(MM_TEXT, sizeDialog);
				m_pDialog = pDialog;
				return TRUE;
			}
			delete pDialog;
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetProcessor(pItem, bAll) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetProcessor(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::StartMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StartMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pTMEnvironment) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::StopMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StopMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::DoPrintOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::CanPrintOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::DoResetOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->EnableToolTipMode(bEnable) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->IsToolTipModeEnabled() : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsAnalysisPage::UpdateLayout(BOOL bActivate)
{
	if (bActivate)
	{
		m_rDialog[0].SetRectEmpty();
		m_rDialog[1].SetRectEmpty();
	}
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsAnalysisPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsAnalysisPage, CScrollView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsAnalysisPage)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SHOWWINDOW()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_MESSAGE(WM_SETFONT, OnSetFont)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAnalysisPage drawing

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsAnalysisPage message handlers

int CTCOnBoardMemoryImagesDetailsAnalysisPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		m_pParentWnd = CScrollView::GetParent()->GetParent()->GetParent()->GetParent();
		SetScrollSizes(MM_TEXT, CSize(0, 0));
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnSize(UINT nType, int cx, int cy)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		for (m_pDialog->GetWindowRect(rDialog); GetMainWnd()->MDIGetActive() == GetParentFrame() && m_rDialog[1].TopLeft() == rDialog.TopLeft(); )
		{
			m_pDialog->Invalidate(TRUE);
			m_pDialog->ValidateRect(m_rDialog[0]);
			break;
		}
		m_pDialog->UpdateWindow();
		GetClientRect(m_rDialog[0]);
		m_rDialog[1] = rDialog;
	}
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsAnalysisPage::OnEraseBkgnd(CDC *pDC)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->GetWindowRect(rDialog);
		ScreenToClient(rDialog);
		pDC->ExcludeClipRect(rDialog);
	}
	return CScrollView::OnEraseBkgnd(pDC);
}

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnShowWindow(BOOL bShow, UINT nStatus)
{
	for (m_rDialog[0].SetRectEmpty(), m_rDialog[1].SetRectEmpty(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->ShowWindow((bShow) ? SW_SHOW : SW_HIDE);
		break;
	}
	CScrollView::OnShowWindow(bShow, nStatus);
}

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsWindow(m_pDialog->GetSafeHwnd()) && !IsChild(pOldWnd))
		{
			m_pDialog->SetFocus();
			return;
		}
		if (IsChild(pOldWnd))
		{
			GetParent()->SetFocus();
			return;
		}
	}
	CScrollView::OnSetFocus(pOldWnd);
}

LRESULT CTCOnBoardMemoryImagesDetailsAnalysisPage::OnSetFont(WPARAM wParam, LPARAM lParam)
{
	if (IsWindow(m_pDialog->GetSafeHwnd())) m_pDialog->SetFont(CFont::FromHandle((HFONT)wParam));
	return Default();
}

void CTCOnBoardMemoryImagesDetailsAnalysisPage::OnDestroy()
{
	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->DestroyWindow();
		delete m_pDialog;
	}
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::DoModal(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage)
{
	return((m_cProcessor.Copy(pProcessor) && m_cImage.Copy(pImage)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::Initialize()
{
	m_bFunction = FALSE;
	return TRUE;
}

CTCOnBoardMemoryImagesDetailsDownloadsPageDialog *CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDownloadsPageDialog *)m_pParentWnd);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::ShowContents()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (INT)m_cFunction.GetSize(), bOolStatus = FALSE; nItem < nItems; nItem++)
	{
		if ((pFunctionElement = m_cFunction.GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_VALUE); )
				{
					szItem = pFunctionElement->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							bOolStatus = TRUE;
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							bOolStatus = TRUE;
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS), 0); m_bFunction; )
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_OOLPARAMETER)->EnableWindow(bOolStatus);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_OOLPARAMETER)->ShowWindow((bOolStatus) ? SW_SHOW : SW_HIDE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::LogDumpRequest()
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CByteArray  nImageBlockData;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];

	if ((pMemoryImageBlock[1] = ((pMemoryImageBlock[0] = m_cImage.GetAt(0))) ? m_cImage.GetAt((INT)m_cImage.GetUpperBound()) : (CDatabaseOBProcessorMemoryImageBlock *)NULL))
	{
		if (GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && pMemoryImageBlock[0]->GetAddress(nAddress[0][0], nAddress[0][1]) && pMemoryImageBlock[1]->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock[1]->GetData(nImageBlockData) >= 0)
		{
			for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_STOPDUMPTC)); !m_cImage.GetName().IsEmpty(); )
			{
				szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_STOPDUMPCOMMANDFORMAT), (LPCTSTR)m_cImage.GetName(), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], (UINT)((ULONGLONG)nAddress[1][0] + (nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)(((ULONGLONG)nAddress[1][1] + nImageBlockData.GetSize() / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) - 1) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))));
				cEntry.SetActivity(szActivity);
				cEntry.SetTime(tActivity.GetTime());
				cEntry.SetUser(GetAccountUserName());
				return GetParentDisplay()->LogActivity(&cEntry);
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::Check(BOOL bModified) CONST
{
	return m_bFunction;
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cFunction.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_IMMEDIATELY, OnReleaseImmediately)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED, OnPreauthorized)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK, OnDestinationManualStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK, OnDestinationAutomaticStack)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog message handlers

BOOL CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_LIMITCHECK));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PARAMETERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_NAME)->SetWindowText(m_cFunction.GetName());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESCRIPTION)->SetWindowText(m_cFunction.GetDescription());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
	ShowContents();
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnExecuteImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 0, TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tExecutionTime;

	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME), (tExecutionTime = CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * tExecutionTime.GetTime(), TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnReleaseImmediately()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME, FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnReleaseAtTime()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_TIME), CTimeKey(CTime::GetCurrentTime().GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnPreauthorized()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK) : TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED)) ? IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK) : FALSE);
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnDestinationManualStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK, FALSE);
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnDestinationAutomaticStack()
{
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED, TRUE);
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnSpinchangeExecutionTime()
{
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->ShowWindow((!(m_bFunction = GetTCService()->EncodeTCOnBoardMemoryImageDump(&m_cProcessor, &m_cImage, 1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)).GetTime(), TRUE, &m_cFunction))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_REMARK_ILLEGALCOMMAND)->EnableWindow(!m_bFunction);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nStage;
	INT  nStages;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CTCItem  *pItem[2];
	CTCItems  pItems;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if ((pItem[0] = new CTCItem))
	{
		for (pItem[0]->SetName(m_cFunction.GetName()), pItem[0]->SetType(TCITEM_TYPE_FUNCTION), pItem[0]->SetSourceType((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_DESTINATION_MANUALSTACK)) ? TCITEM_SOURCETYPE_MANUALSTACK : TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetFlags(((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_PREAUTHORIZED)) ? TCITEM_CHECKFLAG_PREAUTHORIZED : 0) | ((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME)) ? TCITEM_EXECUTIONFLAG_TIMETAGGED : TCITEM_EXECUTIONFLAG_IMMEDIATE)), pItem[0]->SetReleaseTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_ATTIME)) ? (1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_RELEASE_TIME)).GetTime()) : 0), pItem[0]->SetExecutionTime((IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME)) ? (1000000 * (TIMETAG)Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)).GetTime()) : 0); (pPacket[0] = (pItem[0]->CDatabaseTCFunction::Copy(&m_cFunction)) ? GetDatabase()->GetTCPackets()->GetAt(m_cFunction.GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pItem[0]->SetTCPacket(pPacket[0]); )
		{
			for (nItem = 0, nItems = (GetTCService()->GenerateTCPackets(pItem[0], pPacket[0], EMPTYSTRING, (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_ATTIME) && Timespinbox_GetTime(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_STOPDOWNLOADS_PROPERTIES_EXECUTION_TIME)) > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets)) ? (INT)pFunctions.GetSize() : -1; nItem < nItems; nItem++)
			{
				if ((pItem[1] = new CTCItem) && pItem[1]->Copy(pItem[0]) && pItem[1]->CDatabaseTCFunction::Copy(pFunctions.GetAt(nItem)) && pItem[1]->SetTCPacket(pPackets.GetAt(nItem)))
				{
					if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[1]->GetExeVerGroupRef())) != (CDatabaseTCExeVerGroup *)NULL)
					{
						for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
							{
								for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
								{
									if (nStageIDs.GetAt(nStage) == nStageID) break;
									if (nStageIDs.GetAt(nStage) > nStageID)
									{
										nStageIDs.InsertAt(nStage, nStageID);
										break;
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
						{
							for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
							{
								if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
								{
									tStageTimeWindow[0] = (!bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
									tStageTimeWindow[1] = (!bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
									tStageTimeWindow[2] = (!bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
									szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
									bParameter = TRUE;
								}
							}
							if (nParameters > 0)
							{
								pItem[1]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
								pItem[1]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
								continue;
							}
						}
					}
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
				break;
			}
			if (nItem == nItems)
			{
				if (GetTCService()->LoadTelecommands(pItems))
				{
					LogDumpRequest();
					break;
				}
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_MESSAGE_COMMANDFAILURE));
			break;
		}
		delete pItem[0];
	}
	CLocaleDialog::OnOK();
}

BOOL CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCONBOARDMEMORYIMAGESSTOPDOWNLOADSPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadsPageDialog dialog

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog, CLocaleDialog)

CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CTCOnBoardMemoryImagesDetailsDownloadsPageDialog(CWnd *pParentWnd) : CLocaleDialog(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont[3];

	return((pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) ? SetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	LOGFONT  lfFont;

	for (m_wndTableView.SetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.SetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.SetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor), m_wndTableView.RedrawWindow(); !m_cFont.GetSafeHandle() || (m_cFont.GetLogFont(&lfFont) > 0 && memcmp(&lfFont, plfFont, sizeof(LOGFONT))); )
	{
		for (m_cFont.DeleteObject(); m_cFont.CreateFontIndirect(plfFont); )
		{
			SetFont(&m_cFont);
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[3];

	return((GetLayout(&lfFont[0], &lfFont[1], &lfFont[2], nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor)) ? (pFont->GetLogFont(&lfFont[0]) > 0 && pTableTitleFont->GetLogFont(&lfFont[1]) > 0 && pTableItemsFont->GetLogFont(&lfFont[2]) > 0) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	for (m_wndTableView.GetTableFonts(plfTableTitleFont, plfTableItemsFont), m_wndTableView.GetTableFontColors(nTableTitleFontColor, nTableItemsFontColor), m_wndTableView.GetTableColors(nTableTitleBackgroundColor, nTableItemsBackgroundColor); m_cFont.GetObject(sizeof(LOGFONT), plfFont) > 0; ) return TRUE;
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	if (m_wndTableView.SetTableContents(pItem, bAll))
	{
		if (!m_wndTableView.IsEmpty() || bAll) ShowProcessorDetails();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nIndex;
	INT  nCount;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nMemoryArea[3];
	INT  nMemoryAreas[3];
	BOOL  bMemoryTableContents;
	CString  szMemoryTableError;
	CString  szMemoryImage[2][2];
	CStringArray  szMemoryImageVersions;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	if ((bMemoryTableContents = m_wndTableView.SetTableContents(pszProcessor, pImage, bOverwrite, bDelete)) && !bDelayed)
	{
		for (nMemoryArea[0] = 0, nMemoryAreas[0] = (INT)m_wndTableView.GetTableContents()->GetSize(), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szMemoryImage[0][0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szMemoryImage[0][1]), szMemoryImage[1][0] = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SHOW) && pImage != (CONST CDatabaseOBProcessorMemoryImage *) NULL) ? pImage->GetName() : szMemoryImage[1][0]; nMemoryArea[0] < nMemoryAreas[0]; nMemoryArea[0]++)
		{
			if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[0])) && !pMemoryArea->GetMemoryImage().IsEmpty())
			{
				if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					if (pMemoryArea->GetMemoryImage(pMemoryImage))
					{
						for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
						{
							if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && m_wndTableView.GetTableContents()->FindMemoryImageVersion(pMemoryImage->GetName(), pMemoryImageBlock->GetVersion()) >= 0)
							{
								if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName()) < 0) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName());
								break;
							}
						}
					}
					delete pMemoryImage;
				}
			}
		}
		for (nMemoryArea[1] = 0, nMemoryAreas[1] = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT); nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1]++)
		{
			for (nMemoryArea[2] = 0, nMemoryAreas[2] = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea[2] < nMemoryAreas[2]; nMemoryArea[2]++)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[2])) != (CDatabaseOBProcessorMemoryArea *)NULL)
				{
					if (pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), nMemoryArea[1])) break;
					continue;
				}
			}
			if (nMemoryArea[2] == nMemoryAreas[2])
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_DELETESTRING, nMemoryArea[1]);
				nMemoryAreas[1]--;
				nMemoryArea[1]--;
			}
		}
		for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1][0]), 0)); (pMemoryImage = new CDatabaseOBProcessorMemoryImage); )
		{
			for (nMemoryArea[1] = 0, nMemoryAreas[1] = (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL) >= 0) ? (INT)m_wndTableView.GetTableContents()->GetSize() : 0; nMemoryArea[1] < nMemoryAreas[1]; nMemoryArea[1] = nMemoryArea[1] + 1)
			{
				if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea[1])) && pMemoryArea->GetMemoryImage() == Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL)) && pMemoryArea->GetMemoryImage(pMemoryImage)) break;
				continue;
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)pMemoryImage->GetSize() : 0, nCount = m_wndTableView.GetTableContents()->GetMemoryImageVersionCount(pMemoryImage->GetName()), szMemoryImageVersions.RemoveAll(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					for (szMemoryImage[1][1] = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SHOW) && pImage != (CONST CDatabaseOBProcessorMemoryImage *) NULL && pImage->Find(pMemoryImageBlock->GetVersion()) >= 0) ? pMemoryImageBlock->GetVersion() : szMemoryImage[1][1]; pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
					{
						szMemoryImageVersions.SetAtGrow(((nIndex = (nCount > 0) ? m_wndTableView.GetTableContents()->FindMemoryImageVersion(pMemoryImage->GetName(), pMemoryImageBlock->GetVersion()) : -1) < 0) ? szMemoryImageVersions.GetSize() : nIndex, pMemoryImageBlock->GetVersion());
						break;
					}
				}
			}
			for (nIndex = 0, nCount = (INT)szMemoryImageVersions.GetSize(); nIndex < nCount; nIndex++)
			{
				if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex)) != nIndex)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex)));
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_INSERTSTRING, (WPARAM)nIndex, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex));
				}
			}
			for (nMemoryBlock = 0, nMemoryBlocks = (nMemoryArea[1] < nMemoryAreas[1]) ? (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if (pMemoryImage->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION), nMemoryBlock)) < 0)
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_DELETESTRING, nMemoryBlock);
					nMemoryBlocks--;
					nMemoryBlock--;
				}
			}
			SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_SETCURSEL, (WPARAM)(((nIndex = (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1][1])) < 0) ? (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) - 1) : nIndex));
			delete pMemoryImage;
			break;
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		for (szMemoryImage[1][0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL)), szMemoryImage[1][1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCURSEL)); szMemoryImage[0][0] != szMemoryImage[1][0] || szMemoryImage[0][1] != szMemoryImage[1][1]; )
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->SetWindowText((szMemoryTableError = (m_wndTableView.SetTableContents(EMPTYSTRING, szMemoryImage[1][0], szMemoryImage[1][1]) && m_wndTableView.GetTableError(szMemoryTableError)) ? szMemoryTableError : EMPTYSTRING));
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->ShowWindow((!szMemoryTableError.IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->ShowWindow((!szMemoryTableError.IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->EnableWindow(!szMemoryTableError.IsEmpty());
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->EnableWindow(!szMemoryTableError.IsEmpty());
			break;
		}
		ShowProcessorMemoryImageDownloadDetails(TRUE);
		return TRUE;
	}
	return bMemoryTableContents;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return pItem->Copy(m_wndTableView.GetTableContents());
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::StartMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_wndTableView.SetTableContents(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	INT  nDump;
	INT  nDumps;
	BOOL  bDumps;
	CMemoryDump  *pMemoryDump[3];
	CMemoryDumps  pMemoryDumps;

	if (m_pMemoryDumps.Lock())
	{
		if (GetTCService()->IsTCOnBoardMemoryImageDump(pTMEnvironment))
		{
			for (nDump = 0, nDumps = (m_wndTableView.GetTableContents(pMemoryDumps)) ? (INT)pMemoryDumps.GetSize() : -1, bDumps = FALSE; nDump < nDumps; nDump++)
			{
				if ((pMemoryDump[1] = ((pMemoryDump[0] = pMemoryDumps.GetAt(nDump))) ? pTMEnvironment->GetMemoryDumps()->GetAt(pTMEnvironment->GetMemoryDumps()->Find(pMemoryDump[0]->GetName())) : (CMemoryDump *)NULL) && pMemoryDump[1]->GetDumpTag() == pTMEnvironment->GetTMUnit()->GetTag())
				{
					if ((pMemoryDump[2] = m_pMemoryDumps.GetAt(m_pMemoryDumps.Find(pMemoryDump[0]->GetName()))))
					{
						pMemoryDump[2]->Copy(pMemoryDump[1], TRUE);
						bDumps = TRUE;
						continue;
					}
					for (pMemoryDump[0]->Copy(pMemoryDump[1], TRUE); m_pMemoryDumps.Add(pMemoryDump[0]) >= 0; )
					{
						pMemoryDumps.RemoveAt(nDump);
						bDumps = TRUE;
						nDumps--;
						nDump--;
						break;
					}
				}
			}
			for (; bDumps; )
			{
				SetTimer(TCONBOARDMEMORYIMAGESDOWNLOADS_PROCESSDATA_TIMERID, TCONBOARDMEMORYIMAGESDOWNLOADS_PROCESSDATA_TIMEOUT, NULL);
				break;
			}
			m_pMemoryDumps.Unlock();
			return((nDump == nDumps) ? TRUE : FALSE);
		}
		m_pMemoryDumps.Unlock();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::StopMonitoring()
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::DoTransactOnBoardMemoryImage()
{
	BOOL  bSuccess;
	CString  szMemoryImage[2];
	CTimeKey  tMemoryImage;
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szMemoryImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szMemoryImage[1]); (bSuccess = m_wndTableView.GetTableContents(&cMemoryImage)); )
	{
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TRANSACT)->EnableWindow((!(bSuccess = GetParentDisplay()->UpdateOnBoardMemoryImage(m_wndTableView.GetTableContents()->GetName(), &cMemoryImage, tMemoryImage, TRUE))) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DELETE)->EnableWindow((bSuccess) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->SetFocus();
	return bSuccess;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CanTransactOnBoardMemoryImage() CONST
{
	CString  szError;
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && m_wndTableView.Check(szError) && m_wndTableView.IsModified()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::DoDeleteOnBoardMemoryImage()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;

	if (m_wndTableView.GetTableContents(&cMemoryImage))
	{
		if (GetParentDisplay()->DeleteOnBoardMemoryImage(m_wndTableView.GetTableContents()->GetName(), &cMemoryImage))
		{
			GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->SetFocus();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CanDeleteOnBoardMemoryImage() CONST
{
	CString  szMemoryImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szMemoryImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szMemoryImage[1]);
	return((!szMemoryImage[0].IsEmpty() && !szMemoryImage[1].IsEmpty() && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[0]) >= 0 && GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImage[1]) >= 0 && !m_wndTableView.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::DoResetOnBoardMemoryImageTable()
{
	if (m_wndTableView.SetTableContents())
	{
		m_wndTableView.SetTableError(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->SetWindowText(m_szDump[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->SetWindowText(m_szDump[1]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->SetWindowText(m_szDump[2]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->EnableWindow(FALSE);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CanResetOnBoardMemoryImageTable() CONST
{
	return !m_wndTableView.IsEmpty();
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::EnableToolTipMode(BOOL bEnable)
{
	return m_wndTableView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::IsToolTipModeEnabled() CONST
{
	return m_wndTableView.IsToolTipModeEnabled();
}

CTCOnBoardMemoryImagesDetailsDownloadsPage *CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsDownloadsPage *)CLocaleDialog::GetParent());
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

VOID CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::ShowProcessorDetails()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_RESETCONTENT);
	for (nMemoryArea = 0, nMemoryAreas = (INT)m_wndTableView.GetTableContents()->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)) && !pMemoryArea->GetMemoryImage().IsEmpty())
		{
			if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
			{
				if (pMemoryArea->GetMemoryImage(pMemoryImage))
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && m_wndTableView.GetTableContents()->FindMemoryImageVersion(pMemoryImage->GetName(), pMemoryImageBlock->GetVersion()) >= 0)
						{
							if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName()) < 0) SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pMemoryImage->GetName());
							break;
						}
					}
				}
				delete pMemoryImage;
			}
		}
	}
	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowProcessorMemoryImageDetails();
}

VOID CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::ShowProcessorMemoryImageDetails()
{
	INT  nIndex;
	INT  nCount;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CStringArray  szMemoryImageVersions;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_RESETCONTENT);
	if ((pMemoryImage = ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(m_wndTableView.GetTableContents()->Find(Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL)))))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryArea->GetMemoryImage(pMemoryImage)) ? (INT)pMemoryImage->GetSize() : 0, nCount = m_wndTableView.GetTableContents()->GetMemoryImageVersionCount(pMemoryImage->GetName()); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
			{
				if (pMemoryImageBlock->GetVersion() != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
				{
					szMemoryImageVersions.SetAtGrow(((nIndex = (nCount > 0) ? m_wndTableView.GetTableContents()->FindMemoryImageVersion(pMemoryImage->GetName(), pMemoryImageBlock->GetVersion()) : -1) < 0) ? szMemoryImageVersions.GetSize() : nIndex, pMemoryImageBlock->GetVersion());
					continue;
				}
			}
		}
		for (nIndex = 0, nCount = (INT)szMemoryImageVersions.GetSize(); nIndex < nCount; nIndex++)
		{
			if (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex)) != nIndex)
			{
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex)));
				SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_INSERTSTRING, (WPARAM)nIndex, (LPARAM)(LPCTSTR)szMemoryImageVersions.GetAt(nIndex));
			}
		}
		SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_SETCURSEL, (WPARAM)(SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) - 1));
		delete pMemoryImage;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowProcessorMemoryImageDownloadDetails();
}

VOID CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::ShowProcessorMemoryImageDownloadDetails(BOOL bLogging)
{
	INT  nByte;
	INT  nBytes;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	UINT  nAddressBytes;
	UINT  cbDownloadData;
	BOOL  bStopDownload;
	CString  szDownloadData;
	CString  szDownloadError;
	CString  szMemoryImage[2];
	CTimeKey  tDownloadTime;
	CByteArray  nDumpData[2][2];
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMemoryArea = 0, nMemoryAreas = (INT)m_wndTableView.GetTableContents()->GetSize(), szMemoryImage[0] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL)), szMemoryImage[1] = Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCURSEL)), bStopDownload = FALSE; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = m_wndTableView.GetTableContents()->GetAt(nMemoryArea)))
		{
			if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
			{
				if (pMemoryArea->GetMemoryImage(pMemoryImage))
				{
					if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
					{
						if ((pMemoryAreaCatalogueEntry = (pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(szMemoryImage[1])) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
						{
							for (nMemoryBlock = pMemoryImage->Find(szMemoryImage[1]), nMemoryBlocks = (pMemoryAreaCatalogueEntry->GetDate().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) >= 0 && pMemoryAreaCatalogueEntry->GetTime().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) >= 0) ? (INT)pMemoryImage->GetSize() : 0, bStopDownload = GetTCService()->CheckTCOnBoardMemoryImageDumpCapabilities(m_wndTableView.GetTableContents(), pMemoryImage, bStopDownload) && bStopDownload, nDumpData[0][0].RemoveAll(), nDumpData[0][1].RemoveAll(); nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
							{
								if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == szMemoryImage[1] && pMemoryImageBlock->GetData(nDumpData[1][0]) >= 0 && pMemoryImageBlock->GetMask(nDumpData[1][1]) >= 0)
								{
									nDumpData[0][0].Append(nDumpData[1][0]);
									nDumpData[0][1].Append(nDumpData[1][1]);
								}
							}
							for (nMemoryBlock = pMemoryImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)), nMemoryBlocks = (INT)pMemoryImage->GetSize(), GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), nAddress[0][0] = nAddress[0][1] = nAddress[1][0] = nAddress[1][1] = 0; nMemoryBlock < nMemoryBlocks && nMemoryBlock >= 0; nMemoryBlock++)
							{
								if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE) && (nAddress[0][0] != nAddress[1][0] || nAddress[0][1] != nAddress[1][1] || pMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1])) && pMemoryImageBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && pMemoryImageBlock->GetData(nDumpData[1][0]) >= 0)
								{
									nAddress[1][0] += (nAddress[1][1] + ((UINT)nDumpData[1][0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) / (nRange[1][1] - nRange[1][0] + 1);
									nAddress[1][1] = (nAddress[1][1] + ((UINT)nDumpData[1][0].GetSize() + nAddressBytes - 1) / nAddressBytes - 1) % (nRange[1][1] - nRange[1][0] + 1);
								}
							}
							if (nMemoryBlock == nMemoryBlocks  &&  nMemoryBlock > 0 && nDumpData[0][0].GetSize() > 0)
							{
								for (nByte = 0, nBytes = (INT)nDumpData[0][0].GetSize(), cbDownloadData = (nDumpData[0][0].GetSize() == nDumpData[0][1].GetSize()) ? nBytes : 0; (pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE) && nByte < nBytes && cbDownloadData > 0; nByte++)
								{
									cbDownloadData = (nDumpData[0][1].GetAt(nByte) == MEMORYDUMP_DATATYPE_ILLEGAL) ? (cbDownloadData - 1) : cbDownloadData;
									continue;
								}
								if (pMemoryArea->GetMemoryImage() == szMemoryImage[0])
								{
									szDownloadError.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_MEMORYDUMP_DOWNLOADERROR), (LPCTSTR)pMemoryImage->GetName());
									szDownloadData.Format(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADPROGRESS), (INT)((ULONGLONG)(100 * cbDownloadData) / ((((ULONGLONG)(nAddress[1][0] - nAddress[0][0])*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)) + (ULONGLONG)(nAddress[1][1] - nAddress[0][1] + 1))*nAddressBytes)));
									GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->SetWindowText(GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]));
									GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->SetWindowText(cStringTools.ConvertIntToStructuredString(cbDownloadData) + szDownloadData);
									GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->SetWindowText(((tDownloadTime = CTimeKey(0).ParseGmt(pMemoryAreaCatalogueEntry->GetDate() + SPACE + pMemoryAreaCatalogueEntry->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))) > 0) ? tDownloadTime.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATETIMEFORMAT)) : m_szDump[2]);
									GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS)->EnableWindow((CanShowPreviousOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
									GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT)->EnableWindow((CanShowNextOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
									m_wndTableView.SetTableContents(EMPTYSTRING, Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_GETCURSEL)), Combobox_GetText(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION), (INT)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCURSEL)));
									m_wndTableView.SetTableError((szDownloadError = (pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE) ? szDownloadError : EMPTYSTRING));
								}
								for (; ((pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE) || (pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE)) && bLogging; )
								{
									LogDumpDownload(pMemoryImage->GetName(), (100.0*(double)cbDownloadData) / (double)((((ULONGLONG)(nAddress[1][0] - nAddress[0][0])*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)) + (ULONGLONG)(nAddress[1][1] - nAddress[0][1] + 1))*nAddressBytes));
									break;
								}
								delete pMemoryAreaCatalogue;
								delete pMemoryImage;
								break;
							}
						}
						delete pMemoryAreaCatalogue;
					}
				}
				delete pMemoryImage;
			}
		}
	}
	if (nMemoryArea == nMemoryAreas)
	{
		m_wndTableView.SetTableContents();
		m_wndTableView.SetTableError((szDownloadError = EMPTYSTRING));
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->SetWindowText(m_szDump[0]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->SetWindowText(m_szDump[1]);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->SetWindowText(m_szDump[2]);
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->SetWindowText(szDownloadError);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->ShowWindow((!szDownloadError.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->ShowWindow((!szDownloadError.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->EnableWindow(!szDownloadError.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->EnableWindow(!szDownloadError.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS)->EnableWindow((CanShowPreviousOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT)->EnableWindow((CanShowNextOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TRANSACT)->EnableWindow(CanTransactOnBoardMemoryImage());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DELETE)->EnableWindow(CanDeleteOnBoardMemoryImage());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_STOP)->EnableWindow((!szMemoryImage[0].IsEmpty()) ? bStopDownload : FALSE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SAVE)->EnableWindow(!m_wndTableView.IsEmpty());
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_UNICODE)->EnableWindow(!m_wndTableView.IsEmpty());
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CanShowPreviousOnBoardMemoryImage() CONST
{
	CString  szImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szImage[1]);
	return((m_wndTableView.GetTableContents()->GetMemoryImageVersionLimit() > 1 && m_wndTableView.GetTableContents()->FindMemoryImageVersion(szImage[0], szImage[1]) > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::CanShowNextOnBoardMemoryImage() CONST
{
	INT  nIndex;
	CString  szImage[2];

	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szImage[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szImage[1]);
	return((m_wndTableView.GetTableContents()->GetMemoryImageVersionLimit() > 1 && (nIndex = m_wndTableView.GetTableContents()->FindMemoryImageVersion(szImage[0], szImage[1])) >= 0 && nIndex < m_wndTableView.GetTableContents()->GetMemoryImageVersionCount(szImage[0]) - 1) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::LogDumpDownload(LPCTSTR pszDump, double fData)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;
	CStringTools  cStringTools;

	for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0; )
	{
		szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPDOWNLOADFORMAT), pszDump, (fData == 100.0) ? STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPSTATUS_COMPLETE) : STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPSTATUS_INCOMPLETE), (LPCTSTR)cStringTools.ConvertFloatToString(fData, 3));
		cEntry.SetActivity(szActivity);
		cEntry.SetTime(tActivity.GetTime());
		cEntry.SetUser(GetAccountUserName());
		return GetParentDisplay()->LogActivity(&cEntry);
	}
	return FALSE;
}

VOID CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::AdjustToPrivileges()
{
	return;
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::PostNcDestroy()
{
	m_pMemoryDumps.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDownloadsPageDialog)
	ON_WM_CREATE()
	ON_WM_CTLCOLOR()
	ON_WM_DRAWITEM()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS, OnPreviousMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT, OnNextMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TRANSACT, OnTransactMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SAVE, OnSaveMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DELETE, OnDeleteMemoryImage)
	ON_BN_CLICKED(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_STOP, OnStopDumpMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, OnSelchangeMemoryImage)
	ON_CBN_SELCHANGE(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, OnSelchangeMemoryImageVersion)
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadsPageDialog message handlers

int CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (; (hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), MAKEINTRESOURCE(IDP_TCONBOARDMEMORYIMAGESWARNING), STRING(IDS_RESOURCETYPE_PICTURE))); )
	{
		if ((hMemResource[0] = LoadResource(hModule, hResource)))
		{
			if ((pResource = LockResource(hMemResource[0])))
			{
				if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
				{
					if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
					{
						if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
						{
							if (SUCCEEDED(m_cSymbol.Load(pIStream)))
							{
								pIStream->Release();
								break;
							}
						}
						pIStream->Release();
					}
				}
			}
		}
		break;
	}
	return CLocaleDialog::OnCreate(lpCreateStruct);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnInitDialog()
{
	CRect  rView;
	CButton  *pButton;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	CheckDlgButton(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SHOW, TRUE);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SHOW)->EnableWindow();
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->GetWindowText(m_szDump[0]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->GetWindowText(m_szDump[1]);
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->GetWindowText(m_szDump[2]);
	for (SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_LIMITTEXT, (WPARAM)GetDatabase()->GetOBProcessorMemoryImageNameLength()), SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_LIMITTEXT, (WPARAM)GetDatabase()->GetOBProcessorMemoryImageBlockVersionLength()); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_PREVIOUS), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	for (m_wndTableViewCtrl.Attach(GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DATA)->GetSafeHwnd()), m_wndTableViewCtrl.GetClientRect(rView), m_wndTableView.Create(&m_wndTableViewCtrl, rView, STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE_TABLE_NAME)); (pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_NEXT), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	ShowProcessorDetails();
	return FALSE;
}

HBRUSH CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnCtlColor(CDC *pDC, CWnd *pWnd, UINT nCtlColor)
{
	return((pWnd->GetDlgCtrlID() == IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DATA) ? (HBRUSH)GetStockObject(NULL_BRUSH) : CLocaleDialog::OnCtlColor(pDC, pWnd, nCtlColor));
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnDrawItem(int nCtrlID, LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	CDC  cDC;

	if (cDC.Attach(lpDrawItemStruct->hDC))
	{
		for (cDC.FillSolidRect(&lpDrawItemStruct->rcItem, GetSysColor(COLOR_3DFACE)); nCtrlID == IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL && m_cSymbol != (HBITMAP)NULL; )
		{
			m_cSymbol.TransparentBlt(cDC.GetSafeHdc(), lpDrawItemStruct->rcItem, VGA_COLOR_WHITE);
			break;
		}
		cDC.Detach();
	}
	CLocaleDialog::OnDrawItem(nCtrlID, lpDrawItemStruct);
}

LRESULT CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL)
	{
		GetParent()->SetFocus();
		return TRUE;
	}
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnSetFont(CFont *pFont)
{
	CWnd  *pCtrl[2];
	CRect  rCtrl[2];
	CRect  rDialog[2];
	CSize  sizeDialog;
	LOGFONT  lfDialogFont;
	CDialog  cTemplateDialog;
	CDialogTemplate  cTemplate;
	CFontTools  cFontTools;

	for (GetWindowRect(rDialog[0]), GetParent()->ScreenToClient(rDialog[0]); pFont->GetLogFont(&lfDialogFont) > 0 && cTemplate.Load(MAKEINTRESOURCE(IDD)) && cTemplate.SetFont(lfDialogFont.lfFaceName, (WORD)cFontTools.QueryPoints(&lfDialogFont)) && cTemplateDialog.CreateIndirect(cTemplate.Detach()); )
	{
		for (pCtrl[0] = GetWindow(GW_CHILD), pCtrl[1] = cTemplateDialog.GetWindow(GW_CHILD), cTemplateDialog.GetWindowRect(rDialog[1]), MoveWindow(rDialog[0].left, rDialog[0].top, (sizeDialog.cx = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Width() : rDialog[0].Width()), (sizeDialog.cy = (IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd())) ? rDialog[1].Height() : rDialog[0].Height())), GetParent()->SetScrollSizes(MM_TEXT, sizeDialog); IsWindow(pCtrl[0]->GetSafeHwnd()) && IsWindow(pCtrl[1]->GetSafeHwnd()); pCtrl[0] = pCtrl[0]->GetNextWindow(), pCtrl[1] = pCtrl[1]->GetNextWindow())
		{
			for (pCtrl[0]->SetFont(pFont), pCtrl[0]->GetWindowRect(rCtrl[0]), ScreenToClient(rCtrl[0]), pCtrl[1]->GetWindowRect(rCtrl[1]), cTemplateDialog.ScreenToClient(rCtrl[1]); rCtrl[0] != rCtrl[1]; )
			{
				for (pCtrl[0]->MoveWindow(rCtrl[1]); pCtrl[0]->IsChild(&m_wndTableView); )
				{
					pCtrl[0]->GetClientRect(rCtrl[1]);
					m_wndTableView.MoveWindow(rCtrl[1]);
					break;
				}
				break;
			}
		}
		cTemplateDialog.DestroyWindow();
		break;
	}
	if (GetWindow(GW_CHILD))
	{
		AdjustToPrivileges();
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnTimer(UINT_PTR nEventID)
{
	INT  nDump;
	INT  nDumps;
	INT  nByte;
	INT  nBytes;
	UINT  nAddress[2][2];
	UINT  cbDownloadData;
	CString  szName;
	CString  szData;
	CString  szError;
	CByteArray  nDumpData[2];
	CMemoryDump  *pMemoryDump;
	CMemoryDumps  pMemoryDumps[2];
	CStringTools  cStringTools;

	if (nEventID == TCONBOARDMEMORYIMAGESDOWNLOADS_PROCESSDATA_TIMERID)
	{
		for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szName); m_pMemoryDumps.Lock(); )
		{
			pMemoryDumps[0].Copy(&m_pMemoryDumps, TRUE);
			m_pMemoryDumps.RemoveAll();
			m_pMemoryDumps.Unlock();
			break;
		}
		for (nDump = 0, nDumps = (INT)pMemoryDumps[0].GetSize(); nDump < nDumps; nDump++)
		{
			if ((pMemoryDump = (IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_SHOW)) ? pMemoryDumps[0].GetAt(nDump) : (CMemoryDump *)NULL) && !pMemoryDump->GetName().Find(szName + TAB) && pMemoryDump->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]))
			{
				for (nByte = 0, nBytes = pMemoryDump->GetDumpData(nDumpData[0]), pMemoryDump->GetDumpMask(nDumpData[1]), cbDownloadData = (nDumpData[0].GetSize() == nDumpData[1].GetSize()) ? nBytes : 0; pMemoryDump->GetDumpStatus() == MEMORYDUMP_STATUS_INCOMPLETE && nByte < nBytes && cbDownloadData > 0; nByte++)
				{
					cbDownloadData = (nDumpData[1].GetAt(nByte) == MEMORYDUMP_DATATYPE_ILLEGAL) ? (cbDownloadData - 1) : cbDownloadData;
					continue;
				}
				for (szData.Format(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADPROGRESS), (nBytes > 0) ? (INT)((ULONGLONG)(100 * cbDownloadData) / ((((ULONGLONG)(nAddress[1][0] - nAddress[0][0]) << pMemoryDump->GetDataAddressBitWidth()) + (ULONGLONG)(nAddress[1][1] - nAddress[0][1] + 1))*max(pMemoryDump->GetDataBitWidth() / 8, 1))) : 0); m_wndTableView.SetTableContents(pMemoryDump); )
				{
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
					SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADNAME)));
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ADDRESSRANGE)->SetWindowText(GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]));
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_BYTES)->SetWindowText((nBytes > 0) ? (cStringTools.ConvertIntToStructuredString(cbDownloadData) + szData) : cStringTools.ConvertIntToStructuredString(0));
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_TIME)->SetWindowText(pMemoryDump->GetDumpTime().FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATETIMEFORMAT)));
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->EnableWindow((SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS)->EnableWindow((CanShowPreviousOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
					GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT)->EnableWindow((CanShowNextOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
					m_wndTableView.SetTableError(EMPTYSTRING);
					nDump = nDumps;
					break;
				}
			}
		}
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->SetWindowText((m_wndTableView.GetTableError(szError)) ? szError : EMPTYSTRING);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->ShowWindow((!szError.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->ShowWindow((!szError.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORSYMBOL)->EnableWindow(!szError.IsEmpty());
		GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_ERRORMESSAGE)->EnableWindow(!szError.IsEmpty());
		KillTimer(nEventID);
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnPreviousMemoryImage()
{
	CString  szImage[2];
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szImage[1]); SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_wndTableView.GetTableContents()->GetMemoryImageVersion(szImage[0], m_wndTableView.GetTableContents()->FindMemoryImageVersion(szImage[0], szImage[1]) - 1))) >= 0; )
	{
		ShowProcessorMemoryImageDownloadDetails();
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->SetFocus();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnNextMemoryImage()
{
	CString  szImage[2];
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->GetWindowText(szImage[0]), GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION)->GetWindowText(szImage[1]); SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_VERSION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_wndTableView.GetTableContents()->GetMemoryImageVersion(szImage[0], m_wndTableView.GetTableContents()->FindMemoryImageVersion(szImage[0], szImage[1]) + 1))) >= 0; )
	{
		ShowProcessorMemoryImageDownloadDetails();
		break;
	}
	GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NAME)->SetFocus();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnTransactMemoryImage()
{
	CHourglassCursor  cCursor;

	DoTransactOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnSaveMemoryImage()
{
	CFileEx  cFile;
	DWORD  cbData[2];
	CString  szMessage;
	CString  szContents[2];
	CFileBrowseDialog  cFileBrowseDialog(this, (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		for (BeginWaitCursor(); m_wndTableView.GetTableContents(szContents[0]) > 0; )
		{
#ifndef UNICODE
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(CHAR); IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_UNICODE); )
			{
				MultiByteToWideChar(CP_ACP, 0, szContents[0], -1, (LPWSTR)szContents[1].GetBufferSetLength((cbData[0] = (INT)(szContents[0].GetLength()*sizeof(WCHAR)))), (szContents[0].GetLength() + 1)*sizeof(WCHAR));
				szContents[1].ReleaseBuffer();
				break;
			}
#else
			for (szContents[1] = szContents[0], cbData[0] = szContents[0].GetLength()*sizeof(WCHAR); !IsDlgButtonChecked(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_UNICODE); )
			{
				WideCharToMultiByte(CP_ACP, 0, szContents[0], -1, (LPSTR)szContents[1].GetBufferSetLength((cbData[0] = szContents[0].GetLength()) / sizeof(WCHAR)), szContents[0].GetLength() + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szContents[1].ReleaseBuffer();
				break;
			}
#endif
			if (cFile.Open(cFileBrowseDialog.GetPathName(), CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
			{
				if (WriteFile(cFile.m_hFile, (LPCTSTR)szContents[1], cbData[0], &cbData[1], (LPOVERLAPPED)NULL) && cbData[0] == cbData[1])
				{
					cFile.Close();
					EndWaitCursor();
					return;
				}
				cFile.Close();
			}
			szMessage.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYIMAGE_FAILURE), (LPCTSTR)cFileBrowseDialog.GetPathName());
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			EndWaitCursor();
			return;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, STRING(IDS_TCONBOARDMEMORYIMAGES_MESSAGE_SAVEMEMORYIMAGE_NONE));
		EndWaitCursor();
	}
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnDeleteMemoryImage()
{
	CHourglassCursor  cCursor;

	DoDeleteOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnStopDumpMemoryImage()
{
	CDatabaseOBProcessorMemoryImage  cMemoryImage;
	CTCOnBoardMemoryImagesDetailsStopDownloadsPropertiesDialog  cStopDownloadsPropertiesDialog(this);
	CHourglassCursor  cCursor;

	if (m_wndTableView.GetTableContents(&cMemoryImage))
	{
		cStopDownloadsPropertiesDialog.DoModal(m_wndTableView.GetTableContents(), &cMemoryImage);
		return;
	}
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnSelchangeMemoryImage()
{
	ShowProcessorMemoryImageDetails();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnSelchangeMemoryImageVersion()
{
	ShowProcessorMemoryImageDownloadDetails();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPageDialog::OnDestroy()
{
	HICON  hIcon;
	CButton  *pButton;

	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_PREVIOUS)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	if ((pButton = (CButton *)GetDlgItem(IDC_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_NEXT)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	m_cSymbol.Destroy();
	m_wndTableViewCtrl.Detach();
	CLocaleDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadsPage view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsDownloadsPage, CScrollView)

CTCOnBoardMemoryImagesDetailsDownloadsPage::CTCOnBoardMemoryImagesDetailsDownloadsPage() : CScrollView()
{
	m_rDialog[0].SetRectEmpty();
	m_rDialog[1].SetRectEmpty();
	m_pDialog = (CTCOnBoardMemoryImagesDetailsDownloadsPageDialog *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::Create(CWnd *pParentWnd, CONST RECT &rect, BOOL bVisible)
{
	CRect  rDialog;
	CSize  sizeDialog;
	CCreateContext  cContext;
	CTCOnBoardMemoryImagesDetailsDownloadsPageDialog  *pDialog;

	for (cContext.m_pCurrentDoc = new CTCOnBoardMemoryImagesDocument; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_3DFACE)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); )
	{
		if ((pDialog = new CTCOnBoardMemoryImagesDetailsDownloadsPageDialog))
		{
			if (pDialog->Create(IDD_TCONBOARDMEMORYIMAGES_DETAILSDOWNLOADS_DIALOG, this))
			{
				pDialog->ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				pDialog->GetWindowRect(rDialog);
				sizeDialog.cx = rDialog.Width();
				sizeDialog.cy = rDialog.Height();
				SetScrollSizes(MM_TEXT, sizeDialog);
				m_pDialog = pDialog;
				return TRUE;
			}
			delete pDialog;
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::SetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::SetLayout(CONST LOGFONT *plfFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::GetLayout(CFont *pFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(pFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::GetLayout(LOGFONT *plfFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetLayout(plfFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::SetProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem, BOOL bAll)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->SetProcessor(pItem, bAll) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::GetProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->GetProcessor(pItem) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::StartMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StartMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->UpdateMonitoring(pTMEnvironment) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::StopMonitoring()
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->StopMonitoring() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::DoTransactOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::CanTransactOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::DoDeleteOnBoardMemoryImage()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::CanDeleteOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::DoResetOnBoardMemoryImageTable()
{
	CHourglassCursor  cCursor;

	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->DoResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->CanResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->EnableToolTipMode(bEnable) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pDialog->GetSafeHwnd())) ? m_pDialog->IsToolTipModeEnabled() : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsDownloadsPage::UpdateLayout(BOOL bActivate)
{
	if (bActivate)
	{
		m_rDialog[0].SetRectEmpty();
		m_rDialog[1].SetRectEmpty();
	}
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsDownloadsPage::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsDownloadsPage, CScrollView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsDownloadsPage)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SHOWWINDOW()
	ON_WM_SETFOCUS()
	ON_WM_DESTROY()
	ON_MESSAGE(WM_SETFONT, OnSetFont)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadsPage drawing

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsDownloadsPage message handlers

int CTCOnBoardMemoryImagesDetailsDownloadsPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		m_pParentWnd = CView::GetParent()->GetParent()->GetParent()->GetParent();
		SetScrollSizes(MM_TEXT, CSize(0, 0));
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnSize(UINT nType, int cx, int cy)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		for (m_pDialog->GetWindowRect(rDialog); GetMainWnd()->MDIGetActive() == GetParentFrame() && m_rDialog[1].TopLeft() == rDialog.TopLeft(); )
		{
			m_pDialog->Invalidate(TRUE);
			m_pDialog->ValidateRect(m_rDialog[0]);
			break;
		}
		m_pDialog->UpdateWindow();
		GetClientRect(m_rDialog[0]);
		m_rDialog[1] = rDialog;
	}
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsDownloadsPage::OnEraseBkgnd(CDC *pDC)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->GetWindowRect(rDialog);
		ScreenToClient(rDialog);
		pDC->ExcludeClipRect(rDialog);
	}
	return CScrollView::OnEraseBkgnd(pDC);
}

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnShowWindow(BOOL bShow, UINT nStatus)
{
	for (m_rDialog[0].SetRectEmpty(), m_rDialog[1].SetRectEmpty(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->ShowWindow((bShow) ? SW_SHOW : SW_HIDE);
		break;
	}
	CScrollView::OnShowWindow(bShow, nStatus);
}

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if (IsWindow(m_pDialog->GetSafeHwnd()) && !IsChild(pOldWnd))
		{
			m_pDialog->SetFocus();
			return;
		}
		if (IsChild(pOldWnd))
		{
			GetParent()->SetFocus();
			return;
		}
	}
	CScrollView::OnSetFocus(pOldWnd);
}

LRESULT CTCOnBoardMemoryImagesDetailsDownloadsPage::OnSetFont(WPARAM wParam, LPARAM lParam)
{
	if (IsWindow(m_pDialog->GetSafeHwnd())) m_pDialog->SetFont(CFont::FromHandle((HFONT)wParam));
	return Default();
}

void CTCOnBoardMemoryImagesDetailsDownloadsPage::OnDestroy()
{
	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->DestroyWindow();
		delete m_pDialog;
	}
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsPane

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsPane, CTabCtrl)

CTCOnBoardMemoryImagesDetailsPane::CTCOnBoardMemoryImagesDetailsPane() : CTabCtrl()
{
	m_nIndex = 0;
	m_sizeTabMargins.cx = 0;
	m_sizeTabMargins.cy = 0;
	m_pMemoryAreasPage = (CTCOnBoardMemoryImagesDetailsAreasPage *)NULL;
	m_pMemoryDumpsPage = (CTCOnBoardMemoryImagesDetailsDumpsPage *)NULL;
	m_pMemoryAnalysisPage = (CTCOnBoardMemoryImagesDetailsAnalysisPage *)NULL;
	m_pMemoryDownloadsPage = (CTCOnBoardMemoryImagesDetailsDownloadsPage *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::Create(CWnd *pParentWnd, CONST RECT &rect, DWORD dwStyle)
{
	CRect  rTabs;
	CRect  rPage;
	CTCOnBoardMemoryImagesDetailsAreasPage  *pMemoryAreasPage;
	CTCOnBoardMemoryImagesDetailsDumpsPage  *pMemoryDumpsPage;
	CTCOnBoardMemoryImagesDetailsAnalysisPage  *pMemoryAnalysisPage;
	CTCOnBoardMemoryImagesDetailsDownloadsPage  *pMemoryDownloadsPage;

	if (CTabCtrl::Create(dwStyle, rect, (m_pParentWnd = pParentWnd), 0))
	{
		if ((pMemoryAreasPage = new CTCOnBoardMemoryImagesDetailsAreasPage))
		{
			if ((pMemoryDumpsPage = new CTCOnBoardMemoryImagesDetailsDumpsPage))
			{
				if ((pMemoryAnalysisPage = new CTCOnBoardMemoryImagesDetailsAnalysisPage))
				{
					if ((pMemoryDownloadsPage = new CTCOnBoardMemoryImagesDetailsDownloadsPage))
					{
						for (rPage = rect, AdjustRect(FALSE, rPage); pMemoryAreasPage->Create(this, rPage, TRUE); )
						{
							if (pMemoryDumpsPage->Create(this, rPage, FALSE))
							{
								if (pMemoryAnalysisPage->Create(this, rPage, FALSE))
								{
									if (pMemoryDownloadsPage->Create(this, rPage, FALSE))
									{
										m_sizeTabMargins = (GetItemRect(0, rTabs)) ? CSize(rTabs.left, rTabs.top) : m_sizeTabMargins;
										m_pMemoryAreasPage = pMemoryAreasPage;
										m_pMemoryDumpsPage = pMemoryDumpsPage;
										m_pMemoryAnalysisPage = pMemoryAnalysisPage;
										m_pMemoryDownloadsPage = pMemoryDownloadsPage;
										SelectPage();
										return TRUE;
									}
									pMemoryAnalysisPage->DestroyWindow();
								}
								pMemoryDumpsPage->DestroyWindow();
							}
							pMemoryAreasPage->DestroyWindow();
							break;
						}
						delete pMemoryDownloadsPage;
					}
					delete pMemoryAnalysisPage;
				}
				delete pMemoryDumpsPage;
			}
			delete pMemoryAreasPage;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::SetLayout(CFont *pTitleFont, CFont *pItemsFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	CRect  rPage;
	LOGFONT  lfFont;
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		for (bSuccess = m_pMemoryAreasPage->SetLayout(pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryDumpsPage->SetLayout(pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryAnalysisPage->SetLayout(pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryDownloadsPage->SetLayout(pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= pTitleFont->GetLogFont(&lfFont) > 0 && m_cTabFont.DeleteObject() >= 0 && m_cTabFont.CreateFontIndirect(&lfFont), SetFont(&m_cTabFont), GetClientRect(rPage), AdjustRect(FALSE, rPage); IsWindow(m_pMemoryAreasPage->GetSafeHwnd()); )
		{
			m_pMemoryAreasPage->MoveWindow(rPage);
			break;
		}
		if (IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) m_pMemoryDumpsPage->MoveWindow(rPage);
		if (IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) m_pMemoryAnalysisPage->MoveWindow(rPage);
		if (IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) m_pMemoryDownloadsPage->MoveWindow(rPage);
		return bSuccess;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesDetailsPane::SetLayout(CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	CRect  rPage;
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		for (bSuccess = m_pMemoryAreasPage->SetLayout(plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryDumpsPage->SetLayout(plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryAnalysisPage->SetLayout(plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_pMemoryDownloadsPage->SetLayout(plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor), bSuccess &= m_cTabFont.DeleteObject() >= 0 && m_cTabFont.CreateFontIndirect(plfTitleFont), SetFont(&m_cTabFont), GetClientRect(rPage), AdjustRect(FALSE, rPage); IsWindow(m_pMemoryAreasPage->GetSafeHwnd()); )
		{
			m_pMemoryAreasPage->MoveWindow(rPage);
			break;
		}
		if (IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) m_pMemoryDumpsPage->MoveWindow(rPage);
		if (IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) m_pMemoryAnalysisPage->MoveWindow(rPage);
		if (IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) m_pMemoryDownloadsPage->MoveWindow(rPage);
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::GetLayout(CFont *pTitleFont, CFont *pItemsFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	LOGFONT  lfFont;

	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? (m_pMemoryAreasPage->GetLayout(pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) && m_cTabFont.GetObject(sizeof(LOGFONT), &lfFont) > 0 && pTitleFont->CreateFontIndirect(&lfFont)) : FALSE);
}
BOOL CTCOnBoardMemoryImagesDetailsPane::GetLayout(LOGFONT *plfTitleFont, LOGFONT *plfItemsFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? (m_pMemoryAreasPage->GetLayout(plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor) && m_cTabFont.GetObject(sizeof(LOGFONT), plfTitleFont) > 0) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? (m_pMemoryAreasPage->EnableToolTipMode(bEnable) && m_pMemoryDumpsPage->EnableToolTipMode(bEnable) && m_pMemoryAnalysisPage->EnableToolTipMode(bEnable) && m_pMemoryDownloadsPage->EnableToolTipMode(bEnable)) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? (m_pMemoryAreasPage->IsToolTipModeEnabled() || m_pMemoryDumpsPage->IsToolTipModeEnabled() || m_pMemoryAnalysisPage->IsToolTipModeEnabled() && m_pMemoryDownloadsPage->IsToolTipModeEnabled()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->SetProcessor(pItem);
		bSuccess &= m_pMemoryDumpsPage->SetProcessor(pItem);
		bSuccess &= m_pMemoryAnalysisPage->SetProcessor(pItem);
		bSuccess &= m_pMemoryDownloadsPage->SetProcessor(pItem);
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		if (m_pMemoryAreasPage->IsWindowVisible()) return m_pMemoryAreasPage->GetProcessor(pItem);
		if (m_pMemoryDumpsPage->IsWindowVisible()) return m_pMemoryDumpsPage->GetProcessor(pItem);
		if (m_pMemoryAnalysisPage->IsWindowVisible()) return m_pMemoryAnalysisPage->GetProcessor(pItem);
		if (m_pMemoryDownloadsPage->IsWindowVisible()) return m_pMemoryDownloadsPage->GetProcessor(pItem);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
		bSuccess &= m_pMemoryDumpsPage->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
		bSuccess &= m_pMemoryAnalysisPage->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
		bSuccess &= m_pMemoryDownloadsPage->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::StartMonitoring()
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->StartMonitoring();
		bSuccess &= m_pMemoryDumpsPage->StartMonitoring();
		bSuccess &= m_pMemoryAnalysisPage->StartMonitoring();
		bSuccess &= m_pMemoryDownloadsPage->StartMonitoring();
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
		bSuccess &= m_pMemoryDumpsPage->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
		bSuccess &= m_pMemoryAnalysisPage->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
		bSuccess &= m_pMemoryDownloadsPage->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
		return bSuccess;
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesDetailsPane::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->UpdateMonitoring(pTMEnvironment);
		bSuccess &= m_pMemoryDumpsPage->UpdateMonitoring(pTMEnvironment);
		bSuccess &= m_pMemoryAnalysisPage->UpdateMonitoring(pTMEnvironment);
		bSuccess &= m_pMemoryDownloadsPage->UpdateMonitoring(pTMEnvironment);
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::StopMonitoring()
{
	BOOL  bSuccess;

	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		bSuccess = m_pMemoryAreasPage->StopMonitoring();
		bSuccess &= m_pMemoryDumpsPage->StopMonitoring();
		bSuccess &= m_pMemoryAnalysisPage->StopMonitoring();
		bSuccess &= m_pMemoryDownloadsPage->StopMonitoring();
		return bSuccess;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoTransactOnBoardMemoryImage()
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->DoTransactOnBoardMemoryImage()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoTransactOnBoardMemoryImage()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->DoTransactOnBoardMemoryImage())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanTransactOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->CanTransactOnBoardMemoryImage()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanTransactOnBoardMemoryImage()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->CanTransactOnBoardMemoryImage())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoImportOnBoardMemoryImage()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoImportOnBoardMemoryImage()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanImportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanImportOnBoardMemoryImage()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoExportOnBoardMemoryImage()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoExportOnBoardMemoryImage()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanExportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanExportOnBoardMemoryImage()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoDeleteOnBoardMemoryImage()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoDeleteOnBoardMemoryImage()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->DoDeleteOnBoardMemoryImage())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanDeleteOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanDeleteOnBoardMemoryImage()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->CanDeleteOnBoardMemoryImage())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoInsertOnBoardMemoryImageTableRowAbove()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoInsertOnBoardMemoryImageTableRowAbove()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanInsertOnBoardMemoryImageTableRowAbove()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoInsertOnBoardMemoryImageTableRowBelow()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoInsertOnBoardMemoryImageTableRowBelow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanInsertOnBoardMemoryImageTableRowBelow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoInsertOnBoardMemoryImageTableColumnBefore()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanInsertOnBoardMemoryImageTableColumnBefore()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoInsertOnBoardMemoryImageTableColumnAfter()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanInsertOnBoardMemoryImageTableColumnAfter()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoClearOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoClearOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanClearOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanClearOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoDeleteOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoDeleteOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanDeleteOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoDeleteOnBoardMemoryImageTableColumn()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoDeleteOnBoardMemoryImageTableColumn()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanDeleteOnBoardMemoryImageTableColumn()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoCopyOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoCopyOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanCopyOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoPasteOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoPasteOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanPasteOnBoardMemoryImageTableRow()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoPrintOnBoardMemoryImageTable()
{
	return((IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->DoPrintOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoPrintOnBoardMemoryImageTable()) || (m_pMemoryAnalysisPage->IsWindowVisible() && m_pMemoryAnalysisPage->DoPrintOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanPrintOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->CanPrintOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanPrintOnBoardMemoryImageTable()) || (m_pMemoryAnalysisPage->IsWindowVisible() && m_pMemoryAnalysisPage->CanPrintOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoDiscardOnBoardMemoryImageTable()
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->DoDiscardOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoDiscardOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanDiscardOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->CanDiscardOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanDiscardOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::DoResetOnBoardMemoryImageTable()
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->DoResetOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->DoResetOnBoardMemoryImageTable()) || (m_pMemoryAnalysisPage->IsWindowVisible() && m_pMemoryAnalysisPage->DoResetOnBoardMemoryImageTable()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->DoResetOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) ? ((m_pMemoryAreasPage->IsWindowVisible() && m_pMemoryAreasPage->CanResetOnBoardMemoryImageTable()) || (m_pMemoryDumpsPage->IsWindowVisible() && m_pMemoryDumpsPage->CanResetOnBoardMemoryImageTable()) || (m_pMemoryAnalysisPage->IsWindowVisible() && m_pMemoryAnalysisPage->CanResetOnBoardMemoryImageTable()) || (m_pMemoryDownloadsPage->IsWindowVisible() && m_pMemoryDownloadsPage->CanResetOnBoardMemoryImageTable())) : FALSE);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::SetLayoutInfo(INT nIndex)
{
	SelectPage((m_nIndex = nIndex));
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesDetailsPane::GetLayoutInfo(INT &nIndex) CONST
{
	return(((nIndex = m_nIndex) >= 0) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesDetailsPane::UpdateLayout(BOOL bActivate)
{
	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()))
	{
		m_pMemoryAreasPage->UpdateLayout(bActivate);
		m_pMemoryDumpsPage->UpdateLayout(bActivate);
		m_pMemoryAnalysisPage->UpdateLayout(bActivate);
		m_pMemoryDownloadsPage->UpdateLayout(bActivate);
	}
}

CSize CTCOnBoardMemoryImagesDetailsPane::GetMargins() CONST
{
	return m_sizeTabMargins;
}

CTCOnBoardMemoryImagesDetailsAreasPage *CTCOnBoardMemoryImagesDetailsPane::GetMemoryAreasPage() CONST
{
	return m_pMemoryAreasPage;
}

CTCOnBoardMemoryImagesDetailsDumpsPage *CTCOnBoardMemoryImagesDetailsPane::GetMemoryDumpsPage() CONST
{
	return m_pMemoryDumpsPage;
}

CTCOnBoardMemoryImagesDetailsAnalysisPage *CTCOnBoardMemoryImagesDetailsPane::GetMemoryAnalysisPage() CONST
{
	return m_pMemoryAnalysisPage;
}

CTCOnBoardMemoryImagesDetailsDownloadsPage *CTCOnBoardMemoryImagesDetailsPane::GetMemoryDownloadsPage() CONST
{
	return m_pMemoryDownloadsPage;
}

CTCOnBoardMemoryImagesDetailsView *CTCOnBoardMemoryImagesDetailsPane::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesDetailsView *)m_pParentWnd);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::SelectPage()
{
	return SelectPage(m_nIndex);
}
BOOL CTCOnBoardMemoryImagesDetailsPane::SelectPage(INT nIndex)
{
	for (SetCurSel((m_nIndex = nIndex)); IsWindow(m_pMemoryAreasPage->GetSafeHwnd()) && IsWindow(m_pMemoryDumpsPage->GetSafeHwnd()) && IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd()) && IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd()); )
	{
		m_pMemoryAreasPage->ShowWindow((nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_AREASTAB) ? SW_SHOW : SW_HIDE);
		m_pMemoryDumpsPage->ShowWindow((nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_DUMPSTAB) ? SW_SHOW : SW_HIDE);
		m_pMemoryAnalysisPage->ShowWindow((nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_ANALYSISTAB) ? SW_SHOW : SW_HIDE);
		m_pMemoryDownloadsPage->ShowWindow((nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_DOWNLOADSTAB) ? SW_SHOW : SW_HIDE);
		return TRUE;
	}
	return FALSE;
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsPane, CTabCtrl)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsPane)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_KEYDOWN()
	ON_WM_DESTROY()
	ON_NOTIFY_REFLECT(TCN_SELCHANGE, OnSelchangePage)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsPane message handlers

int CTCOnBoardMemoryImagesDetailsPane::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	TCITEM  sTabItem[4];
	CFontTools  cFontTools;

	if (CTabCtrl::OnCreate(lpCreateStruct) != -1 && cFontTools.QueryDefaultFont(&m_cTabFont))
	{
		for (sTabItem[0].mask = sTabItem[1].mask = sTabItem[2].mask = sTabItem[3].mask = TCIF_TEXT, sTabItem[0].pszText = (LPTSTR)STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_AREASPAGE), sTabItem[1].pszText = (LPTSTR)STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_IMAGESPAGE), sTabItem[2].pszText = (LPTSTR)STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_ANALYSISPAGE), sTabItem[3].pszText = (LPTSTR)STRING(IDS_TCONBOARDMEMORYIMAGESDETAILS_DOWNLOADSPAGE); InsertItem(0, &sTabItem[0]) >= 0 && InsertItem(1, &sTabItem[1]) >= 0 && InsertItem(2, &sTabItem[2]) >= 0 && InsertItem(3, &sTabItem[3]) >= 0; )
		{
			SetFont(&m_cTabFont);
			return 0;
		}
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsPane::OnSize(UINT nType, int cx, int cy)
{
	CRect  rPage;

	for (GetClientRect(rPage), AdjustRect(FALSE, rPage); IsWindow(m_pMemoryAreasPage->GetSafeHwnd()); )
	{
		m_pMemoryAreasPage->MoveWindow(rPage);
		break;
	}
	if (IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) m_pMemoryDumpsPage->MoveWindow(rPage);
	if (IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) m_pMemoryAnalysisPage->MoveWindow(rPage);
	if (IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) m_pMemoryDownloadsPage->MoveWindow(rPage);
	CTabCtrl::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsPane::OnEraseBkgnd(CDC *pDC)
{
	CRect  rPage;

	GetClientRect(rPage);
	AdjustRect(FALSE, rPage);
	pDC->ExcludeClipRect(rPage);
	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd())) m_pMemoryAreasPage->RedrawWindow();
	if (IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) m_pMemoryDumpsPage->RedrawWindow();
	if (IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) m_pMemoryAnalysisPage->RedrawWindow();
	if (IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) m_pMemoryDownloadsPage->RedrawWindow();
	return CTabCtrl::OnEraseBkgnd(pDC);
}

void CTCOnBoardMemoryImagesDetailsPane::OnSelchangePage(NMHDR *pNotifyStruct, LRESULT *pResult)
{
	CHourglassCursor  cCursor;

	*pResult = SelectPage((m_nIndex = max(TabCtrl_GetCurSel(GetSafeHwnd()), 0)));
	return;
}

void CTCOnBoardMemoryImagesDetailsPane::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_DOWN)
	{
		if (m_nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_AREASTAB)
		{
			m_pMemoryAreasPage->SetFocus();
			return;
		}
		if (m_nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_DUMPSTAB)
		{
			m_pMemoryDumpsPage->SetFocus();
			return;
		}
		if (m_nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_ANALYSISTAB)
		{
			m_pMemoryAnalysisPage->SetFocus();
			return;
		}
		if (m_nIndex == TCONBOARDMEMORYIMAGESDETAILSVIEW_DOWNLOADSTAB)
		{
			m_pMemoryDownloadsPage->SetFocus();
			return;
		}
	}
	if (nChar == VK_TAB)
	{
		GetParent()->SetFocus();
		return;
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCOnBoardMemoryImagesDetailsPane::OnDestroy()
{
	m_cTabFont.DeleteObject();
	if (IsWindow(m_pMemoryAreasPage->GetSafeHwnd())) m_pMemoryAreasPage->DestroyWindow();
	if (IsWindow(m_pMemoryDumpsPage->GetSafeHwnd())) m_pMemoryDumpsPage->DestroyWindow();
	if (IsWindow(m_pMemoryAnalysisPage->GetSafeHwnd())) m_pMemoryAnalysisPage->DestroyWindow();
	if (IsWindow(m_pMemoryDownloadsPage->GetSafeHwnd())) m_pMemoryDownloadsPage->DestroyWindow();
	m_pMemoryAreasPage = (CTCOnBoardMemoryImagesDetailsAreasPage *)NULL;
	m_pMemoryDumpsPage = (CTCOnBoardMemoryImagesDetailsDumpsPage *)NULL;
	m_pMemoryAnalysisPage = (CTCOnBoardMemoryImagesDetailsAnalysisPage *)NULL;
	m_pMemoryDownloadsPage = (CTCOnBoardMemoryImagesDetailsDownloadsPage *)NULL;
	CTabCtrl::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsView view

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesDetailsView, CView)

CTCOnBoardMemoryImagesDetailsView::CTCOnBoardMemoryImagesDetailsView() : CView()
{
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesDetailsView::SetLayout(CFont *pTitleFont, CFont *pItemsFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return m_wndPane.SetLayout(pTitleFont, pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor);
}
BOOL CTCOnBoardMemoryImagesDetailsView::SetLayout(CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont, CONST LOGFONT *plfTableTitleFont, CONST LOGFONT *plfTableItemsFont, COLORREF nTableTitleFontColor, COLORREF nTableItemsFontColor, COLORREF nTableTitleBackgroundColor, COLORREF nTableItemsBackgroundColor)
{
	return m_wndPane.SetLayout(plfTitleFont, plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor);
}

BOOL CTCOnBoardMemoryImagesDetailsView::GetLayout(CFont *pTitleFont, CFont *pItemsFont, CFont *pTableTitleFont, CFont *pTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return m_wndPane.GetLayout(pTitleFont, pItemsFont, pTableTitleFont, pTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor);
}
BOOL CTCOnBoardMemoryImagesDetailsView::GetLayout(LOGFONT *plfTitleFont, LOGFONT *plfItemsFont, LOGFONT *plfTableTitleFont, LOGFONT *plfTableItemsFont, COLORREF &nTableTitleFontColor, COLORREF &nTableItemsFontColor, COLORREF &nTableTitleBackgroundColor, COLORREF &nTableItemsBackgroundColor) CONST
{
	return m_wndPane.GetLayout(plfTitleFont, plfItemsFont, plfTableTitleFont, plfTableItemsFont, nTableTitleFontColor, nTableItemsFontColor, nTableTitleBackgroundColor, nTableItemsBackgroundColor);
}

BOOL CTCOnBoardMemoryImagesDetailsView::EnableToolTipMode(BOOL bEnable)
{
	return m_wndPane.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesDetailsView::IsToolTipModeEnabled() CONST
{
	return m_wndPane.IsToolTipModeEnabled();
}

BOOL CTCOnBoardMemoryImagesDetailsView::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	return m_wndPane.SetCurProcessor(pItem);
}

BOOL CTCOnBoardMemoryImagesDetailsView::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return m_wndPane.GetCurProcessor(pItem);
}

BOOL CTCOnBoardMemoryImagesDetailsView::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return m_wndPane.UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
}

BOOL CTCOnBoardMemoryImagesDetailsView::StartMonitoring()
{
	return m_wndPane.StartMonitoring();
}

BOOL CTCOnBoardMemoryImagesDetailsView::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return m_wndPane.UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime);
}
BOOL CTCOnBoardMemoryImagesDetailsView::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return m_wndPane.UpdateMonitoring(pTMEnvironment);
}

BOOL CTCOnBoardMemoryImagesDetailsView::StopMonitoring()
{
	return m_wndPane.StopMonitoring();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoTransactOnBoardMemoryImage()
{
	return m_wndPane.DoTransactOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanTransactOnBoardMemoryImage() CONST
{
	return m_wndPane.CanTransactOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoImportOnBoardMemoryImage()
{
	return m_wndPane.DoImportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanImportOnBoardMemoryImage() CONST
{
	return m_wndPane.CanImportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoExportOnBoardMemoryImage()
{
	return m_wndPane.DoExportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanExportOnBoardMemoryImage() CONST
{
	return m_wndPane.CanExportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoDeleteOnBoardMemoryImage()
{
	return m_wndPane.DoDeleteOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanDeleteOnBoardMemoryImage() CONST
{
	return m_wndPane.CanDeleteOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoInsertOnBoardMemoryImageTableRowAbove()
{
	return m_wndPane.DoInsertOnBoardMemoryImageTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return m_wndPane.CanInsertOnBoardMemoryImageTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoInsertOnBoardMemoryImageTableRowBelow()
{
	return m_wndPane.DoInsertOnBoardMemoryImageTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return m_wndPane.CanInsertOnBoardMemoryImageTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	return m_wndPane.DoInsertOnBoardMemoryImageTableColumnBefore();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return m_wndPane.CanInsertOnBoardMemoryImageTableColumnBefore();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	return m_wndPane.DoInsertOnBoardMemoryImageTableColumnAfter();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return m_wndPane.CanInsertOnBoardMemoryImageTableColumnAfter();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoClearOnBoardMemoryImageTableRow()
{
	return m_wndPane.DoClearOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanClearOnBoardMemoryImageTableRow() CONST
{
	return m_wndPane.CanClearOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoDeleteOnBoardMemoryImageTableRow()
{
	return m_wndPane.DoDeleteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return m_wndPane.CanDeleteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoDeleteOnBoardMemoryImageTableColumn()
{
	return m_wndPane.DoDeleteOnBoardMemoryImageTableColumn();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return m_wndPane.CanDeleteOnBoardMemoryImageTableColumn();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoCopyOnBoardMemoryImageTableRow()
{
	return m_wndPane.DoCopyOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return m_wndPane.CanCopyOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoPasteOnBoardMemoryImageTableRow()
{
	return m_wndPane.DoPasteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return m_wndPane.CanPasteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoPrintOnBoardMemoryImageTable()
{
	return m_wndPane.DoPrintOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanPrintOnBoardMemoryImageTable() CONST
{
	return m_wndPane.CanPrintOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoDiscardOnBoardMemoryImageTable()
{
	return m_wndPane.DoDiscardOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanDiscardOnBoardMemoryImageTable() CONST
{
	return m_wndPane.CanDiscardOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::DoResetOnBoardMemoryImageTable()
{
	return m_wndPane.DoResetOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::CanResetOnBoardMemoryImageTable() CONST
{
	return m_wndPane.CanResetOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesDetailsView::SetLayoutInfo(INT nIndex)
{
	return m_wndPane.SetLayoutInfo(nIndex);
}

BOOL CTCOnBoardMemoryImagesDetailsView::GetLayoutInfo(INT &nIndex) CONST
{
	return m_wndPane.GetLayoutInfo(nIndex);
}

VOID CTCOnBoardMemoryImagesDetailsView::UpdateLayout(BOOL bActivate)
{
	m_wndPane.UpdateLayout(bActivate);
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesDetailsView::GetParentDisplay() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesDetailsView, CView)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesDetailsView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsView drawing

void CTCOnBoardMemoryImagesDetailsView::OnActivateView(BOOL bActivate, CView *pActivateView, CView *pDeactiveView)
{
	return;
}

void CTCOnBoardMemoryImagesDetailsView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesDetailsView message handlers

int CTCOnBoardMemoryImagesDetailsView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) != -1 && m_wndPane.Create(this, CRect(0, 0, 0, 0), TCS_TABS | TCS_SINGLELINE | TCS_TOOLTIPS | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		m_pParentWnd = CView::GetParent()->GetParent();
		return 0;
	}
	return -1;
}

void CTCOnBoardMemoryImagesDetailsView::OnSize(UINT nType, int cx, int cy)
{
	m_wndPane.MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCOnBoardMemoryImagesDetailsView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rView;
	CRect  rPage[3];

	for (GetClientRect(rView), m_wndPane.GetItemRect(0, rPage[0]), m_wndPane.GetItemRect(m_wndPane.GetCurSel(), rPage[1]), m_wndPane.GetItemRect(m_wndPane.GetItemCount() - 1, rPage[2]), m_wndPane.ClientToScreen(rPage[0]), m_wndPane.ClientToScreen(rPage[1]), m_wndPane.ClientToScreen(rPage[2]), ScreenToClient(rPage[0]), ScreenToClient(rPage[1]), ScreenToClient(rPage[2]), rPage[0].InflateRect((!m_wndPane.GetCurSel()) ? m_wndPane.GetMargins().cx : 0, 0, 0, 0), rPage[1].InflateRect(0, m_wndPane.GetMargins().cy); m_wndPane.GetCurSel() != m_wndPane.GetItemCount() - 1; )
	{
		rPage[2].DeflateRect(0, 0, m_wndPane.GetMargins().cx, 0);
		break;
	}
	rView.SetRect(rView.left, rView.top, rView.right, rPage[0].bottom);
	pDC->ExcludeClipRect(rPage[0].left, rPage[0].top, rPage[2].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[2].bottom);
	pDC->ExcludeClipRect(rPage[1].left, rPage[1].top, rPage[1].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[1].bottom);
	pDC->FillSolidRect(rView, GetSysColor(COLOR_BTNFACE));
	return TRUE;
}

void CTCOnBoardMemoryImagesDetailsView::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent())
	{
		m_wndPane.SetFocus();
		return;
	}
	if (pOldWnd->GetSafeHwnd() == m_wndPane.GetSafeHwnd())
	{
		GetParent()->SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesView

IMPLEMENT_DYNCREATE(CTCOnBoardMemoryImagesView, CSplitterWndEx)

CTCOnBoardMemoryImagesView::CTCOnBoardMemoryImagesView() : CSplitterWndEx()
{
	CFontTools  cTitleFont[2] = { &m_lfPaneTitleFont[0],&m_lfPaneTitleFont[1] };
	CFontTools  cItemsFont[2] = { &m_lfPaneItemsFont[0],&m_lfPaneItemsFont[1] };
	CFontTools  cTableFont[2] = { &m_lfTableFont[0],&m_lfTableFont[1] };

	m_bUndo = FALSE;
	m_bToolTips = TRUE;
	m_sizePanes[0].cx = 0;
	m_sizePanes[0].cy = 0;
	m_sizePanes[1].cx = 0;
	m_sizePanes[1].cy = 0;
	m_lfTableFont[0].lfWeight = FW_BOLD;
	m_lfTableFont[1].lfWeight = FW_NORMAL;
	m_nTableColors[0][0] = GetSysColor(COLOR_WINDOW);
	m_nTableColors[0][1] = GetSysColor(COLOR_WINDOWTEXT);
	m_nTableColors[1][0] = GetSysColor(COLOR_WINDOWTEXT);
	m_nTableColors[1][1] = GetSysColor(COLOR_3DFACE);
	m_pSummaryView = (CTCOnBoardMemoryImagesSummaryView *)NULL;
	m_pDetailsView = (CTCOnBoardMemoryImagesDetailsView *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCOnBoardMemoryImagesView::Create(CWnd *pParentWnd)
{
	CRect  rPanes;
	CSize  sizePanes[2];
	CCreateContext  cContext;

	if (CreateStatic((m_pParentWnd = pParentWnd), 2, 1))
	{
		for (GetParent()->GetClientRect(rPanes), cContext.m_pCurrentDoc = new CTCOnBoardMemoryImagesDocument; CreateView(0, 0, RUNTIME_CLASS(CTCOnBoardMemoryImagesSummaryView), (sizePanes[0] = CSize(rPanes.Width(), rPanes.Height() / 3)), &cContext) && CreateView(1, 0, RUNTIME_CLASS(CTCOnBoardMemoryImagesDetailsView), (sizePanes[1] = CSize(rPanes.Width(), (2 * rPanes.Height()) / 3)), &cContext); )
		{
			for (m_pSummaryView = (CTCOnBoardMemoryImagesSummaryView *)GetPane(0, 0), m_pDetailsView = (CTCOnBoardMemoryImagesDetailsView *)GetPane(1, 0); ((m_nColumns.GetSize() == m_nColumnWidths.GetSize() && m_nColumns.GetSize() > 0 && m_pSummaryView->SetLayout(m_nColumns, m_nColumnWidths)) || m_pSummaryView->SetLayout(TCONBOARDMEMORYIMAGES_TITLEITEMS_DEFAULT)) && m_pSummaryView->SetListTitleFont(&m_lfPaneTitleFont[0]) && m_pSummaryView->SetListItemsFont(&m_lfPaneItemsFont[0]) && m_pDetailsView->SetLayout(&m_lfPaneTitleFont[1], &m_lfPaneItemsFont[1], &m_lfTableFont[0], &m_lfTableFont[1], m_nTableColors[0][0], m_nTableColors[0][1], m_nTableColors[1][0], m_nTableColors[1][1]) && m_pSummaryView->SetProcessors(m_pItems) && m_pSummaryView->EnableToolTipMode(m_bToolTips) && m_pDetailsView->EnableToolTipMode(m_bToolTips); )
			{
				SetRowInfo(0, (m_sizePanes[0].cy > 0) ? max(m_sizePanes[0].cy, 0) : max(sizePanes[0].cy, 0), 0);
				SetRowInfo(1, (m_sizePanes[1].cy > 0) ? max(m_sizePanes[1].cy, 0) : max(sizePanes[1].cy, 0), 0);
				MoveWindow(rPanes);
				return TRUE;
			}
			break;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesView::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	for (; nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY; )
	{
		m_nColumns.Copy(nColumns);
		break;
	}
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? m_pSummaryView->SetLayout(nColumns) : FALSE) : TRUE);
}
BOOL CTCOnBoardMemoryImagesView::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		m_nColumns.Copy(nColumns);
		m_nColumnWidths.Copy(nWidths);
	}
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? m_pSummaryView->SetLayout(nColumns, nWidths) : FALSE) : TRUE);
}
BOOL CTCOnBoardMemoryImagesView::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizePane)
{
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		m_nColumns.Copy(nColumns);
		m_nColumnWidths.Copy(nWidths);
		m_sizePanes[0].cx = sizePane.cx;
		m_sizePanes[0].cy = sizePane.cy;
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		m_sizePanes[1].cx = sizePane.cx;
		m_sizePanes[1].cy = sizePane.cy;
	}
	if (IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		if (SetLayout(nPane, nColumns, nWidths))
		{
			SetRowInfo(0, max(sizePane.cy, 0), 0);
			RecalcLayout();
			return TRUE;
		}
		if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
		{
			SetRowInfo(1, max(sizePane.cy, 0), 0);
			RecalcLayout();
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesView::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	for (; nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY; )
	{
		nColumns.Copy(m_nColumns);
		break;
	}
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? m_pSummaryView->GetLayout(nColumns) : FALSE) : TRUE);
}
BOOL CTCOnBoardMemoryImagesView::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		nColumns.Copy(m_nColumns);
		nWidths.Copy(m_nColumnWidths);
	}
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? ((nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY) ? m_pSummaryView->GetLayout(nColumns, nWidths) : FALSE) : TRUE);
}
BOOL CTCOnBoardMemoryImagesView::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizePane) CONST
{
	INT  nPaneHeight[2];

	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		nColumns.Copy(m_nColumns);
		nWidths.Copy(m_nColumnWidths);
		sizePane.cx = m_sizePanes[0].cx;
		sizePane.cy = m_sizePanes[0].cy;
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		nColumns.RemoveAll();
		nWidths.RemoveAll();
		sizePane.cx = m_sizePanes[1].cx;
		sizePane.cy = m_sizePanes[1].cy;
	}
	if (IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		if (GetLayout(nPane, nColumns, nWidths))
		{
			GetRowInfo(0, nPaneHeight[0], nPaneHeight[1]);
			sizePane.cx = (sizePane.cy = nPaneHeight[0]) - nPaneHeight[0];
			return TRUE;
		}
		if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
		{
			GetRowInfo(1, nPaneHeight[0], nPaneHeight[1]);
			sizePane.cx = (sizePane.cy = nPaneHeight[0]) - nPaneHeight[0];
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesView::SetPaneTitleFont(UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetPaneTitleFont(nPane, &lfFont) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::SetPaneTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		CopyMemory(&m_lfPaneTitleFont[0], plfFont, sizeof(LOGFONT));
		return((IsWindow(m_pSummaryView->GetSafeHwnd())) ? m_pSummaryView->SetListTitleFont(plfFont) : TRUE);
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		CopyMemory(&m_lfPaneTitleFont[1], plfFont, sizeof(LOGFONT));
		return((IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->SetLayout(plfFont, &m_lfPaneItemsFont[1], &m_lfTableFont[0], &m_lfTableFont[1], m_nTableColors[0][0], m_nTableColors[0][1], m_nTableColors[1][0], m_nTableColors[1][1]) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesView::GetPaneTitleFont(UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetPaneTitleFont(nPane, &lfFont) && pFont->GetLogFont(&lfFont) > 0) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::GetPaneTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	LOGFONT  lfFont[3];
	COLORREF  nColor[2][2];

	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		CopyMemory(plfFont, &m_lfPaneTitleFont[0], sizeof(LOGFONT));
		return((IsWindow(m_pSummaryView->GetSafeHwnd())) ? m_pSummaryView->GetListTitleFont(plfFont) : TRUE);
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		CopyMemory(plfFont, &m_lfPaneTitleFont[1], sizeof(LOGFONT));
		return((IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->GetLayout(plfFont, &lfFont[0], &lfFont[1], &lfFont[2], nColor[0][0], nColor[0][1], nColor[1][0], nColor[1][1]) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesView::SetPaneItemsFont(UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetPaneItemsFont(nPane, &lfFont) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::SetPaneItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		CopyMemory(&m_lfPaneItemsFont[0], plfFont, sizeof(LOGFONT));
		return((IsWindow(m_pSummaryView->GetSafeHwnd())) ? m_pSummaryView->SetListItemsFont(plfFont) : TRUE);
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		CopyMemory(&m_lfPaneItemsFont[1], plfFont, sizeof(LOGFONT));
		return((IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->SetLayout(&m_lfPaneItemsFont[0], plfFont, &m_lfTableFont[0], &m_lfTableFont[1], m_nTableColors[0][0], m_nTableColors[0][1], m_nTableColors[1][0], m_nTableColors[1][1]) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesView::GetPaneItemsFont(UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetPaneItemsFont(nPane, &lfFont) && pFont->GetLogFont(&lfFont) > 0) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::GetPaneItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	LOGFONT  lfFont[3];
	COLORREF  nColor[2][2];

	if (nPane & TCONBOARDMEMORYIMAGES_PANE_SUMMARY)
	{
		CopyMemory(plfFont, &m_lfPaneItemsFont[0], sizeof(LOGFONT));
		return((IsWindow(m_pSummaryView->GetSafeHwnd())) ? m_pSummaryView->GetListItemsFont(plfFont) : TRUE);
	}
	if (nPane & TCONBOARDMEMORYIMAGES_PANE_DETAILS)
	{
		CopyMemory(plfFont, &m_lfPaneItemsFont[1], sizeof(LOGFONT));
		return((IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->GetLayout(&lfFont[0], plfFont, &lfFont[1], &lfFont[2], nColor[0][0], nColor[0][1], nColor[1][0], nColor[1][1]) : TRUE);
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesView::SetTablesOutline(CFont *pTitleFont, CFont *pItemsFont, COLORREF nTitleFontColor, COLORREF nItemsFontColor, COLORREF nTitleBackgroundColor, COLORREF nItemsBackgroundColor)
{
	LOGFONT  lfFont[2];

	return((pTitleFont->GetLogFont(&lfFont[0]) > 0 && pItemsFont->GetLogFont(&lfFont[1]) > 0) ? SetTablesOutline(&lfFont[0], &lfFont[1], nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::SetTablesOutline(CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont, COLORREF nTitleFontColor, COLORREF nItemsFontColor, COLORREF nTitleBackgroundColor, COLORREF nItemsBackgroundColor)
{
	for (CopyMemory(&m_lfTableFont[0], plfTitleFont, sizeof(LOGFONT)), CopyMemory(&m_lfTableFont[1], plfItemsFont, sizeof(LOGFONT)), m_nTableColors[0][0] = nTitleFontColor, m_nTableColors[0][1] = nItemsFontColor, m_nTableColors[1][0] = nTitleBackgroundColor, m_nTableColors[1][1] = nItemsBackgroundColor; IsWindow(m_pDetailsView->GetSafeHwnd()); ) return m_pDetailsView->SetLayout(&m_lfPaneTitleFont[1], &m_lfPaneItemsFont[1], plfTitleFont, plfItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesView::GetTablesOutline(CFont *pTitleFont, CFont *pItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[2];

	return((GetTablesOutline(&lfFont[0], &lfFont[1], nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor)) ? (pTitleFont->CreateFontIndirect(&lfFont[0]) && pItemsFont->CreateFontIndirect(&lfFont[1])) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::GetTablesOutline(LOGFONT *plfTitleFont, LOGFONT *plfItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	LOGFONT  lfFont[2];

	for (CopyMemory(plfTitleFont, &m_lfTableFont[0], sizeof(LOGFONT)), CopyMemory(plfItemsFont, &m_lfTableFont[1], sizeof(LOGFONT)), nTitleFontColor = m_nTableColors[0][0], nItemsFontColor = m_nTableColors[0][1], nTitleBackgroundColor = m_nTableColors[1][0], nItemsBackgroundColor = m_nTableColors[1][1]; IsWindow(m_pDetailsView->GetSafeHwnd()); ) return m_pDetailsView->GetLayout(&lfFont[0], &lfFont[1], plfTitleFont, plfItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesView::EnableToolTipMode(BOOL bEnable)
{
	for (m_bToolTips = bEnable; IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()); )
	{
		if (m_pSummaryView->EnableToolTipMode(bEnable) && m_pDetailsView->EnableToolTipMode(bEnable)) break;
		return FALSE;
	}
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesView::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->IsToolTipModeEnabled() : m_bToolTips);
}

BOOL CTCOnBoardMemoryImagesView::SetProcessors(CONST CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->SetProcessors(pItems, bAll) : m_pItems.Copy(&pItems));
}

BOOL CTCOnBoardMemoryImagesView::GetProcessors(CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetProcessors(pItems, bAll) : pItems.Copy(&m_pItems));
}

BOOL CTCOnBoardMemoryImagesView::SetCurProcessor(INT nIndex)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->SetCurProcessor(nIndex) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->SetCurProcessor(pItem) : FALSE);
}

INT CTCOnBoardMemoryImagesView::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetCurProcessor(pItem) : -1);
}
BOOL CTCOnBoardMemoryImagesView::GetCurProcessor(CString &szProcessor) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetCurProcessor(szProcessor) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) + m_pDetailsView->UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed) > 0) : FALSE);
}

UINT CTCOnBoardMemoryImagesView::GetProcessorCount() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetProcessorCount() : 0);
}

BOOL CTCOnBoardMemoryImagesView::DoAcknowledgeProcessor()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->DoAcknowledgeProcessor() : 0);
}

BOOL CTCOnBoardMemoryImagesView::CanAcknowledgeProcessor() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->CanAcknowledgeProcessor() : 0);
}

BOOL CTCOnBoardMemoryImagesView::StartMonitoring()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->StartMonitoring() && m_pDetailsView->StartMonitoring()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::UpdateMonitoring(LPCTSTR pszProcessor, CONST CTimeTag &tLastDumpTime, CONST CTimeTag &tLastPatchTime)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) + m_pDetailsView->UpdateMonitoring(pszProcessor, tLastDumpTime, tLastPatchTime) > 0) : FALSE);
}
BOOL CTCOnBoardMemoryImagesView::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->UpdateMonitoring(pTMEnvironment) && m_pDetailsView->UpdateMonitoring(pTMEnvironment)) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::StopMonitoring()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->StopMonitoring() && m_pDetailsView->StopMonitoring()) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoTransactOnBoardMemoryImage()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanTransactOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanTransactOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoImportOnBoardMemoryImage()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoImportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanImportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanImportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoExportOnBoardMemoryImage()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoExportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanExportOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanExportOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoDeleteOnBoardMemoryImage()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanDeleteOnBoardMemoryImage() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanDeleteOnBoardMemoryImage() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoInsertOnBoardMemoryImageTableRowAbove()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoInsertOnBoardMemoryImageTableRowAbove() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanInsertOnBoardMemoryImageTableRowAbove() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoInsertOnBoardMemoryImageTableRowBelow()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoInsertOnBoardMemoryImageTableRowBelow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanInsertOnBoardMemoryImageTableRowBelow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoInsertOnBoardMemoryImageTableColumnBefore() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanInsertOnBoardMemoryImageTableColumnBefore() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoInsertOnBoardMemoryImageTableColumnAfter() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanInsertOnBoardMemoryImageTableColumnAfter() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoClearOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoClearOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanClearOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanClearOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoDeleteOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoDeleteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanDeleteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoDeleteOnBoardMemoryImageTableColumn()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoDeleteOnBoardMemoryImageTableColumn() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanDeleteOnBoardMemoryImageTableColumn() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoCopyOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoCopyOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanCopyOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoPasteOnBoardMemoryImageTableRow()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoPasteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanPasteOnBoardMemoryImageTableRow() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoPrintOnBoardMemoryImageTable()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanPrintOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanPrintOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoDiscardOnBoardMemoryImageTable()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanDiscardOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanDiscardOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::DoResetOnBoardMemoryImageTable()
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->DoResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::CanResetOnBoardMemoryImageTable() CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pDetailsView->CanResetOnBoardMemoryImageTable() : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::SetLayoutInfo(INT nIndex, INT nPage, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->SetLayoutInfo(nIndex, pHorzScrollInfo, pVertScrollInfo) && m_pDetailsView->SetLayoutInfo(nPage)) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::GetLayoutInfo(INT &nIndex, INT &nPage, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? (m_pSummaryView->GetLayoutInfo(nIndex, pHorzScrollInfo, pVertScrollInfo) && m_pDetailsView->GetLayoutInfo(nPage)) : FALSE);
}

BOOL CTCOnBoardMemoryImagesView::GetPrintProperties(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return((IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd())) ? m_pSummaryView->GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs) : FALSE);
}

VOID CTCOnBoardMemoryImagesView::UpdateContents(BOOL bRedraw)
{
	if (IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		m_pSummaryView->UpdateContent(bRedraw);
		return;
	}
}

VOID CTCOnBoardMemoryImagesView::UpdateLayout(BOOL bActivate)
{
	if (IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		m_pDetailsView->UpdateLayout(bActivate);
		return;
	}
}

void CTCOnBoardMemoryImagesView::StartTracking(int ht)
{
	CSplitterWndEx::StartTracking(ht);
	m_rectLimit.top += GetSummaryView()->GetTrackSize().cy;
}

VOID CTCOnBoardMemoryImagesView::SetTrackSize(CONST SIZE &size)
{
	m_pSummaryView->SetTrackSize(size);
}

CSize CTCOnBoardMemoryImagesView::GetTrackSize() CONST
{
	return m_pSummaryView->GetTrackSize();
}

CTCOnBoardMemoryImagesSummaryView *CTCOnBoardMemoryImagesView::GetSummaryView() CONST
{
	return m_pSummaryView;
}

CTCOnBoardMemoryImagesDetailsView *CTCOnBoardMemoryImagesView::GetDetailsView() CONST
{
	return m_pDetailsView;
}

CTCOnBoardMemoryImagesWnd *CTCOnBoardMemoryImagesView::GetParent() CONST
{
	return((CTCOnBoardMemoryImagesWnd *)m_pParentWnd);
}

VOID CTCOnBoardMemoryImagesView::RecalcLayout()
{
	CSplitterWndEx::RecalcLayout();
}
VOID CTCOnBoardMemoryImagesView::RecalcLayout(BOOL bRecalc)
{
	CWnd  *pWnd;
	CRect  rWnd;
	CRect  rView;

	if (CThread::IsSameThread(this) && IsWindow(m_pSummaryView->GetSafeHwnd()) && IsWindow(m_pDetailsView->GetSafeHwnd()))
	{
		for (pWnd = GetParent()->GetWindow(GW_CHILD), GetParent()->GetClientRect(rView); pWnd != (CWnd *)NULL; pWnd = pWnd->GetNextWindow())
		{
			if (pWnd->GetSafeHwnd() != GetSafeHwnd())
			{
				pWnd->GetWindowRect(rWnd);
				GetParent()->ScreenToClient(rWnd);
				rWnd.left = rView.left;
				rWnd.right = rView.right;
				rView.SubtractRect(rView, rWnd);
			}
		}
		MoveWindow(rView);
	}
}

void CTCOnBoardMemoryImagesView::PostNcDestroy()
{
	m_pItems.RemoveAll();
	m_nColumns.RemoveAll();
	m_nColumnWidths.RemoveAll();
	CSplitterWndEx::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesView, CSplitterWndEx)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesView)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesView message handlers

void CTCOnBoardMemoryImagesView::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent())
	{
		GetSummaryView()->SetFocus();
		return;
	}
	if (pOldWnd == GetSummaryView())
	{
		GetDetailsView()->SetFocus();
		return;
	}
	if (pOldWnd == GetDetailsView())
	{
		GetParent()->SetFocus();
		return;
	}
	CSplitterWndEx::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesWnd

IMPLEMENT_DYNAMIC(CTCOnBoardMemoryImagesWnd, CDisplayWnd)

CTCOnBoardMemoryImagesWnd::CTCOnBoardMemoryImagesWnd() : CDisplayWnd()
{
	for (SetType(DISPLAY_TYPE_TCONBOARDMEMORYIMAGES); (m_pDatabaseMutex = new CMutex); )
	{
		SetLoggingOptions();
		break;
	}
}

CTCOnBoardMemoryImagesWnd::~CTCOnBoardMemoryImagesWnd()
{
	delete m_pDatabaseMutex;
}

BOOL CTCOnBoardMemoryImagesWnd::Create(CMDIFrameWnd *pParentWnd, LPCTSTR pszTitle, PDISPLAYINFO pDefaultInfo, BOOL bDefault)
{
	if (CDisplayWnd::Create(pParentWnd, (!AfxIsValidString(pszTitle) || !_tcsstr(pszTitle, STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES))) ? STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES) : pszTitle, pDefaultInfo->rWnd, IDR_TCONBOARDMEMORYIMAGESFRAME))
	{
		if (SetScope(pDefaultInfo->nScope) && SetMode(pDefaultInfo->nMode) && Customize(bDefault)) return TRUE;
		DestroyWindow();
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	return m_wndView.SetLayout(nPane, nColumns);
}
BOOL CTCOnBoardMemoryImagesWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_wndView.SetLayout(nPane, nColumns, nWidths);
}
BOOL CTCOnBoardMemoryImagesWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizePane)
{
	return m_wndView.SetLayout(nPane, nColumns, nWidths, sizePane);
}

BOOL CTCOnBoardMemoryImagesWnd::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	return m_wndView.GetLayout(nPane, nColumns);
}
BOOL CTCOnBoardMemoryImagesWnd::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_wndView.GetLayout(nPane, nColumns, nWidths);
}
BOOL CTCOnBoardMemoryImagesWnd::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizePane) CONST
{
	return m_wndView.GetLayout(nPane, nColumns, nWidths, sizePane);
}

BOOL CTCOnBoardMemoryImagesWnd::SetPaneTitleFont(UINT nPane, CFont *pFont)
{
	return m_wndView.SetPaneTitleFont(nPane, pFont);
}
BOOL CTCOnBoardMemoryImagesWnd::SetPaneTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetPaneTitleFont(nPane, plfFont);
}

BOOL CTCOnBoardMemoryImagesWnd::GetPaneTitleFont(UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetPaneTitleFont(nPane, pFont);
}
BOOL CTCOnBoardMemoryImagesWnd::GetPaneTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetPaneTitleFont(nPane, plfFont);
}

BOOL CTCOnBoardMemoryImagesWnd::SetPaneItemsFont(UINT nPane, CFont *pFont)
{
	return m_wndView.SetPaneItemsFont(nPane, pFont);
}
BOOL CTCOnBoardMemoryImagesWnd::SetPaneItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetPaneItemsFont(nPane, plfFont);
}

BOOL CTCOnBoardMemoryImagesWnd::GetPaneItemsFont(UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetPaneItemsFont(nPane, pFont);
}
BOOL CTCOnBoardMemoryImagesWnd::GetPaneItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetPaneItemsFont(nPane, plfFont);
}

BOOL CTCOnBoardMemoryImagesWnd::SetTablesOutline(CFont *pTitleFont, CFont *pItemsFont, COLORREF nTitleFontColor, COLORREF nItemsFontColor, COLORREF nTitleBackgroundColor, COLORREF nItemsBackgroundColor)
{
	return m_wndView.SetTablesOutline(pTitleFont, pItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
}
BOOL CTCOnBoardMemoryImagesWnd::SetTablesOutline(CONST LOGFONT *plfTitleFont, CONST LOGFONT *plfItemsFont, COLORREF nTitleFontColor, COLORREF nItemsFontColor, COLORREF nTitleBackgroundColor, COLORREF nItemsBackgroundColor)
{
	return m_wndView.SetTablesOutline(plfTitleFont, plfItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
}

BOOL CTCOnBoardMemoryImagesWnd::GetTablesOutline(CFont *pTitleFont, CFont *pItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	return m_wndView.GetTablesOutline(pTitleFont, pItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
}
BOOL CTCOnBoardMemoryImagesWnd::GetTablesOutline(LOGFONT *plfTitleFont, LOGFONT *plfItemsFont, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, COLORREF &nTitleBackgroundColor, COLORREF &nItemsBackgroundColor) CONST
{
	return m_wndView.GetTablesOutline(plfTitleFont, plfItemsFont, nTitleFontColor, nItemsFontColor, nTitleBackgroundColor, nItemsBackgroundColor);
}

BOOL CTCOnBoardMemoryImagesWnd::EnableToolTipMode(BOOL bEnable)
{
	return m_wndView.EnableToolTipMode(bEnable);
}

BOOL CTCOnBoardMemoryImagesWnd::IsToolTipModeEnabled() CONST
{
	return m_wndView.IsToolTipModeEnabled();
}

BOOL CTCOnBoardMemoryImagesWnd::SetProcessors(CONST CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll)
{
	return m_wndView.SetProcessors(pItems, bAll);
}

BOOL CTCOnBoardMemoryImagesWnd::GetProcessors(CTCOnBoardMemoryImagesProcessorItems &pItems, BOOL bAll) CONST
{
	return m_wndView.GetProcessors(pItems, bAll);
}

BOOL CTCOnBoardMemoryImagesWnd::SetCurProcessor(INT nIndex)
{
	return m_wndView.SetCurProcessor(nIndex);
}
BOOL CTCOnBoardMemoryImagesWnd::SetCurProcessor(CONST CTCOnBoardMemoryImagesProcessorItem *pItem)
{
	return m_wndView.SetCurProcessor(pItem);
}

INT CTCOnBoardMemoryImagesWnd::GetCurProcessor(CTCOnBoardMemoryImagesProcessorItem *pItem) CONST
{
	return m_wndView.GetCurProcessor(pItem);
}
BOOL CTCOnBoardMemoryImagesWnd::GetCurProcessor(CString &szProcessor) CONST
{
	return m_wndView.GetCurProcessor(szProcessor);
}

BOOL CTCOnBoardMemoryImagesWnd::UpdateProcessor(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bOverwrite, BOOL bDelete, BOOL bDelayed)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	CString  szVersion;
	CString  szActivity;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
	{
		if ((pMemoryImageBlock = pImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() != szVersion)
		{
			for (szActivity = (!bDelete) ? (CString(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_CREATING)) + STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_SEPARATOR) + CString(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_MODIFYING))) : STRING(IDS_TCONBOARDMEMORYIMAGES_LOGACTIVITY_DELETING), szVersion = pMemoryImageBlock->GetVersion(); pMemoryImageBlock->GetVersion() == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE); )
			{
				LogDumpTemplate(pImage->GetName(), szActivity);
				break;
			}
			if (szVersion != STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))
			{
				LogDump(pImage->GetName(), szVersion, szActivity);
				continue;
			}
		}
	}
	return m_wndView.UpdateProcessor(pszProcessor, pImage, bOverwrite, bDelete, bDelayed);
}

UINT CTCOnBoardMemoryImagesWnd::GetProcessorCount() CONST
{
	return m_wndView.GetProcessorCount();
}

BOOL CTCOnBoardMemoryImagesWnd::DoAcknowledgeProcessor()
{
	return m_wndView.DoAcknowledgeProcessor();
}

BOOL CTCOnBoardMemoryImagesWnd::CanAcknowledgeProcessor() CONST
{
	return m_wndView.CanAcknowledgeProcessor();
}

BOOL CTCOnBoardMemoryImagesWnd::StartMonitoring()
{
	return m_wndView.StartMonitoring() && m_cDatabaseThread.Start(this, m_pDatabaseMutex);
}

BOOL CTCOnBoardMemoryImagesWnd::UpdateMonitoring(CONST CTCItems &pItems, BOOL bAll)
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CString  szProcessor;
	CTimeTag  tPatchTime;
	CTCPacket  cTCPacket;
	CByteArray  nTCPacketData;

	for (nItem = 0, nItems = (INT)pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = pItems.GetAt(nItem)) && (pItem->GetStatus() == TCITEM_STATUS_RELEASED || pItem->GetStatus() == TCITEM_STATUS_SENT || pItem->GetStatus() == TCITEM_STATUS_UPLINKED) && (pItem->GetResult() & TCITEM_RESULT_CEV_PASSED) && pItem->GetTCPacket(nTCPacketData) > 0 && cTCPacket.Unmap(nTCPacketData) && GetTCService()->IsTCOnBoardMemoryImagePatch(&cTCPacket, szProcessor))
		{
			m_wndView.UpdateMonitoring(szProcessor, 0, (!pItem->GetExecutionTime(tPatchTime)) ? pItem->GetReleaseTime() : tPatchTime);
			continue;
		}
	}
	return((nItems > 0) ? TRUE : FALSE);
}
BOOL CTCOnBoardMemoryImagesWnd::UpdateMonitoring(CONST CTMEnvironment *pTMEnvironment)
{
	return m_wndView.UpdateMonitoring(pTMEnvironment);
}

BOOL CTCOnBoardMemoryImagesWnd::StopMonitoring()
{
	return m_cDatabaseThread.Stop() && m_wndView.StopMonitoring();
}

INT CTCOnBoardMemoryImagesWnd::EnumOnBoardMemoryImages(CDatabaseOBProcessorMemoryImages &pImages) CONST
{
	INT  nMemoryImage;
	INT  nMemoryImages;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CSingleLock  cLock(m_pDatabaseMutex, TRUE);

	for (nMemoryImage = 0, nMemoryImages = (INT)GetDatabase()->GetOBProcessorMemoryImages()->GetSize(), pImages.RemoveAll(); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if ((pMemoryImage[0] = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(nMemoryImage)))
		{
			if ((pMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
			{
				if (pMemoryImage[1]->Copy(pMemoryImage[0]))
				{
					pImages.InsertAt(pImages.GetSize(), pMemoryImage[1], 1);
					continue;
				}
				delete pMemoryImage[1];
			}
		}
	}
	return((INT)pImages.GetSize());
}

BOOL CTCOnBoardMemoryImagesWnd::InsertOnBoardMemoryImage(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, CONST CTimeKey &tUpdate, BOOL bDelayed)
{
	INT  nIndex;
	INT  nProcessor;
	INT  nProcessors;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2][2];
	UINT  nAddressBytes;
	BOOL  bMemoryImage;
	CString  szVersion;
	CString  szMemoryArea;
	CByteArray  nImageData[2];
	CComputerToken  cComputerToken;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;
	CSingleLock  cLock(m_pDatabaseMutex, TRUE);

	if (GetDatabase()->GetOBProcessorMemoryImages()->Find(pImage->GetName()) < 0)
	{
		if (pImage->Find(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE)) < 0)
		{
			if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL)
			{
				for (nMemoryBlock = 0, nMemoryBlocks = (pMemoryImage[0]->Copy(pImage)) ? (INT)pMemoryImage[0]->GetSize() : -1, szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryImageBlock[0] = pMemoryImage[0]->GetAt(nMemoryBlock)) && (szVersion = (szVersion.IsEmpty()) ? pMemoryImageBlock[0]->GetVersion() : szVersion) == pMemoryImageBlock[0]->GetVersion())
					{
						if ((pMemoryImageBlock[1] = new CDatabaseOBProcessorMemoryImageBlock))
						{
							pMemoryImageBlock[1]->Copy(pMemoryImageBlock[0]);
							pMemoryImageBlock[1]->SetVersion(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE));
							pMemoryImageBlock[0]->GetData(nImageData[0]);
							pMemoryImageBlock[0]->GetMask(nImageData[1]);
							nImageData[1].SetSize(nImageData[0].GetSize());
							memset(nImageData[0].GetData(), 0, nImageData[0].GetSize());
							memset(nImageData[1].GetData(), MEMORYDUMP_DATATYPE_TEMPLATE, nImageData[1].GetSize());
							pMemoryImageBlock[1]->SetData(nImageData[0]);
							pMemoryImageBlock[1]->SetMask(nImageData[1]);
							if (pMemoryImage[0]->Add(pMemoryImageBlock[1]) >= 0) continue;
							delete pMemoryImageBlock[1];
						}
					}
					break;
				}
				if (nMemoryBlocks > 0)
				{
					if (InsertOnBoardMemoryImage(pszProcessor, pMemoryImage[0], tUpdate, bDelayed))
					{
						delete pMemoryImage[0];
						return TRUE;
					}
				}
				delete pMemoryImage[0];
			}
			return FALSE;
		}
		if ((pMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
		{
			if ((pMemoryImage[1] = ((nIndex = (pMemoryImage[0]->Copy(pImage)) ? GetDatabase()->GetOBProcessorMemoryImages()->Add(pMemoryImage[0]) : -1) >= 0) ? GetDatabase()->GetOBProcessorMemoryImages()->GetAt(nIndex) : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				for (nProcessor = 0, nProcessors = (INT)GetDatabase()->GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
				{
					if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(nProcessor)) && pProcessor->GetMasterImageRef() >= nIndex)
					{
						pProcessor->SetMasterImageRef(pProcessor->GetMasterImageRef() + 1);
						continue;
					}
				}
				if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))))
				{
					for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1); (pMemoryArea[0] = (pProcessor->Find(pImage->GetName()) < 0) ? new CDatabaseOBProcessorMemoryArea : (CDatabaseOBProcessorMemoryArea*)NULL); )
					{
						for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
						{
							if ((pMemoryArea[1] = pProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
							{
								if ((pMemoryAreaBlock[0] = pMemoryArea[1]->GetAt(0)) && pMemoryAreaBlock[0]->GetAddress(nAddress[0][0][0], nAddress[0][0][1]))
								{
									if ((pMemoryImageBlock[0] = pImage->GetAt(0)) && pMemoryImageBlock[0]->GetAddress(nAddress[1][0][0], nAddress[1][0][1]))
									{
										if ((pMemoryAreaBlock[1] = pMemoryArea[1]->GetAt((INT)pMemoryArea[1]->GetUpperBound())) && pMemoryAreaBlock[1]->GetAddress(nAddress[0][1][0], nAddress[0][1][1]))
										{
											if ((pMemoryImageBlock[1] = pImage->GetAt((INT)pImage->GetUpperBound())) && pMemoryImageBlock[1]->GetAddress(nAddress[1][1][0], nAddress[1][1][1]) && pMemoryImageBlock[1]->GetData(nImageData[0]) >= 0)
											{
												if ((ULONGLONG)nAddress[0][0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[0][0][1] <= (ULONGLONG)nAddress[1][0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[1][0][1] && (ULONGLONG)nAddress[0][1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[0][1][1] + (pMemoryAreaBlock[1]->GetBitOffset() + pMemoryAreaBlock[1]->GetBitWidth() + 8 * nAddressBytes - 1) / (8 * nAddressBytes) >= (ULONGLONG)nAddress[1][1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[1][1][1] + (nImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes)
												{
													szMemoryArea.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYAREA_DESCRIPTION_FORMAT), (LPCTSTR)pMemoryArea[1]->GetName());
													break;
												}
											}
										}
									}
								}
							}
						}
						pMemoryArea[0]->SetName(pImage->GetName());
						pMemoryArea[0]->SetDescription(szMemoryArea);
						pMemoryArea[0]->SetAttributes(pImage->GetAttributes());
						if (pProcessor->Add(pMemoryArea[0]) >= 0) break;
						delete pMemoryArea[0];
						break;
					}
					for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
					{
						if ((pMemoryArea[0] = pProcessor->GetAt(nMemoryArea)) && pMemoryArea[0]->GetName() == pImage->GetName())
						{
							for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), szVersion.Empty(), bMemoryImage = TRUE; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
							{
								if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock)) && (szVersion = (szVersion.IsEmpty()) ? pMemoryImageBlock[0]->GetVersion() : szVersion) == pMemoryImageBlock[0]->GetVersion())
								{
									bMemoryImage &= (pMemoryImageBlock[0]->GetAddress(nAddress[0][0][0], nAddress[0][0][1]) && pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0 && pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? GetDatabase()->CheckOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], (szVersion == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))) : FALSE;
									bMemoryImage &= (((pMemoryImageBlock[1] = (nMemoryBlock > 0) ? pImage->GetAt(nMemoryBlock - 1) : (CDatabaseOBProcessorMemoryImageBlock *)NULL) && pMemoryImageBlock[1]->GetAddress(nAddress[0][1][0], nAddress[0][1][1]) && pMemoryImageBlock[1]->GetData(nImageData[1]) >= 0 && nImageData[1].GetSize() == ((ULONGLONG)(nAddress[0][0][0] - nAddress[0][1][0])*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + nAddress[0][0][1] - nAddress[0][1][1])*nAddressBytes) || !nMemoryBlock) ? TRUE : FALSE;
									if (nMemoryBlock < nMemoryBlocks - 1) continue;
								}
								if (!szVersion.IsEmpty())
								{
									if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
									{
										for (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue); (pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(szVersion))); )
										{
											pMemoryAreaCatalogueEntry->SetAttributes((bMemoryImage) ? OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE : OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE);
											pMemoryAreaCatalogueEntry->SetDate((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)));
											pMemoryAreaCatalogueEntry->SetTime((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)));
											pMemoryArea[0]->SetCatalogue(pMemoryAreaCatalogue);
											break;
										}
										if ((pMemoryAreaCatalogueEntry = (pMemoryAreaCatalogue->Find(szVersion) < 0) ? new CDatabaseOBProcessorMemoryAreaCatalogueEntry : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
										{
											pMemoryAreaCatalogueEntry->SetName(pMemoryArea[0]->GetName());
											pMemoryAreaCatalogueEntry->SetDescription(pMemoryArea[0]->GetDescription());
											pMemoryAreaCatalogueEntry->SetVersion(szVersion);
											pMemoryAreaCatalogueEntry->SetLocation(cComputerToken.GetComputerName());
											pMemoryAreaCatalogueEntry->SetAttributes((bMemoryImage) ? OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE : OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE);
											pMemoryAreaCatalogueEntry->SetDate((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)));
											pMemoryAreaCatalogueEntry->SetTime((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)));
											if (pMemoryAreaCatalogue->Add(pMemoryAreaCatalogueEntry) >= 0)
											{
												pMemoryArea[0]->SetCatalogue(pMemoryAreaCatalogue);
												if (pMemoryImageBlock[0]->GetVersion() != szVersion)
												{
													szVersion = pMemoryImageBlock[0]->GetVersion();
													bMemoryImage = TRUE;
													nMemoryBlock--;
												}
												delete pMemoryAreaCatalogue;
												continue;
											}
											delete pMemoryAreaCatalogueEntry;
										}
										delete pMemoryAreaCatalogue;
									}
									if (pMemoryImageBlock[0]->GetVersion() != szVersion)
									{
										szVersion = pMemoryImageBlock[0]->GetVersion();
										bMemoryImage = TRUE;
										nMemoryBlock--;
									}
								}
							}
							pMemoryArea[0]->SetAttributes(((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) != OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? ((pMemoryArea[0]->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)) | (pImage->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT))) : pMemoryArea[0]->GetAttributes());
						}
					}
					if (m_cDatabaseThread.UpdateMemoryImage(pszProcessor, pImage, TRUE, FALSE, bDelayed))
					{
						UpdateProcessor(pszProcessor, pImage, TRUE, FALSE, bDelayed);
						return TRUE;
					}
					return FALSE;
				}
				GetDatabase()->GetOBProcessorMemoryImages()->RemoveAt(nIndex);
			}
			delete pMemoryImage[0];
		}
		return FALSE;
	}
	return UpdateOnBoardMemoryImage(pszProcessor, pImage, tUpdate, TRUE, bDelayed);
}

BOOL CTCOnBoardMemoryImagesWnd::UpdateOnBoardMemoryImage(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, CONST CTimeKey &tUpdate, BOOL bOverwrite, BOOL bDelayed)
{
	INT  nIndex;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2][2];
	UINT  nAddressBytes;
	BOOL  bMemoryImage;
	BOOL  bMemoryData;
	CString  szError;
	CString  szVersion;
	CString  szProcessor;
	CString  szMemoryArea;
	CByteArray  nImageData[2];
	CStringArray  szDumpFlags;
	CComputerToken  cComputerToken;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock[2];
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;
	CSingleLock  cLock(m_pDatabaseMutex, TRUE);

	if ((pMemoryImage[0] = pMemoryImage[1] = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(pImage->GetName()))))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), bMemoryData = TRUE; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
			{
				while ((nIndex = pMemoryImage[0]->Find(pMemoryImageBlock[0]->GetVersion())) >= 0 && bOverwrite)
				{
					if ((pMemoryImageBlock[1] = pMemoryImage[0]->GetAt(nIndex)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
					{
						bMemoryData &= (pMemoryImageBlock[0]->GetData(nImageData[0]) == pMemoryImageBlock[1]->GetData(nImageData[1]) && !memcmp(nImageData[0].GetData(), nImageData[1].GetData(), nImageData[0].GetSize()));
						bMemoryData &= (pMemoryImageBlock[0]->GetMask(nImageData[0]) == pMemoryImageBlock[1]->GetMask(nImageData[1]) && !memcmp(nImageData[0].GetData(), nImageData[1].GetData(), nImageData[0].GetSize()));
						delete pMemoryImageBlock[1];
					}
					pMemoryImage[0]->RemoveAt(nIndex);
				}
				while (nIndex < 0)
				{
					if ((pMemoryImageBlock[1] = new CDatabaseOBProcessorMemoryImageBlock))
					{
						pMemoryImageBlock[1]->Copy(pMemoryImageBlock[0]);
						if (pMemoryImage[0]->Add(pMemoryImageBlock[1]) >= 0)
						{
							if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock + 1)) && pMemoryImageBlock[0]->GetVersion() == pMemoryImageBlock[1]->GetVersion())
							{
								nMemoryBlock++;
								continue;
							}
							break;
						}
						delete pMemoryImageBlock[1];
					}
					break;
				}
			}
		}
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))))
		{
			for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1); (pMemoryArea[0] = (pProcessor->Find(pImage->GetName()) < 0) ? new CDatabaseOBProcessorMemoryArea : (CDatabaseOBProcessorMemoryArea *)NULL); )
			{
				for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
				{
					if ((pMemoryArea[1] = pProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
					{
						if ((pMemoryAreaBlock[0] = pMemoryArea[1]->GetAt(0)) && pMemoryAreaBlock[0]->GetAddress(nAddress[0][0][0], nAddress[0][0][1]))
						{
							if ((pMemoryImageBlock[0] = pImage->GetAt(0)) && pMemoryImageBlock[0]->GetAddress(nAddress[1][0][0], nAddress[1][0][1]))
							{
								if ((pMemoryAreaBlock[1] = pMemoryArea[1]->GetAt((INT)pMemoryArea[1]->GetUpperBound())) && pMemoryAreaBlock[1]->GetAddress(nAddress[0][1][0], nAddress[0][1][1]))
								{
									if ((pMemoryImageBlock[1] = pImage->GetAt((INT)pImage->GetUpperBound())) && pMemoryImageBlock[1]->GetAddress(nAddress[1][1][0], nAddress[1][1][1]) && pMemoryImageBlock[1]->GetData(nImageData[0]) >= 0)
									{
										if ((ULONGLONG)nAddress[0][0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[0][0][1] <= (ULONGLONG)nAddress[1][0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[1][0][1] && (ULONGLONG)nAddress[0][1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[0][1][1] + (pMemoryAreaBlock[1]->GetBitOffset() + pMemoryAreaBlock[1]->GetBitWidth() + 8 * nAddressBytes - 1) / (8 * nAddressBytes) >= (ULONGLONG)nAddress[1][1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[1][1][1] + (nImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes)
										{
											szMemoryArea.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYAREA_DESCRIPTION_FORMAT), (LPCTSTR)pMemoryArea[1]->GetName());
											break;
										}
									}
								}
							}
						}
					}
				}
				pMemoryArea[0]->SetName(pImage->GetName());
				pMemoryArea[0]->SetDescription(szMemoryArea);
				pMemoryArea[0]->SetAttributes(pImage->GetAttributes());
				if (pProcessor->Add(pMemoryArea[0]) >= 0) break;
				delete pMemoryArea[0];
				break;
			}
			for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
			{
				if ((pMemoryArea[0] = pProcessor->GetAt(nMemoryArea)) && pMemoryArea[0]->GetName() == pImage->GetName())
				{
					for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), szVersion.Empty(), bMemoryImage = TRUE; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
					{
						if ((pMemoryImageBlock[0] = pImage->GetAt(nMemoryBlock)) && (szVersion = (szVersion.IsEmpty()) ? pMemoryImageBlock[0]->GetVersion() : szVersion) == pMemoryImageBlock[0]->GetVersion())
						{
							bMemoryImage &= (pMemoryImageBlock[0]->GetAddress(nAddress[0][0][0], nAddress[0][0][1]) && pMemoryImageBlock[0]->GetData(nImageData[0]) >= 0 && pMemoryImageBlock[0]->GetMask(nImageData[1]) >= 0) ? GetDatabase()->CheckOBProcessorMemoryImageBlockData(nImageData[0], nImageData[1], (szVersion == STRING(IDS_TCONBOARDMEMORYIMAGES_MEMORYIMAGE_TEMPLATE))) : FALSE;
							bMemoryImage &= (((pMemoryImageBlock[1] = (nMemoryBlock > 0) ? pImage->GetAt(nMemoryBlock - 1) : (CDatabaseOBProcessorMemoryImageBlock *)NULL) && pMemoryImageBlock[1]->GetAddress(nAddress[0][1][0], nAddress[0][1][1]) && pMemoryImageBlock[1]->GetData(nImageData[1]) >= 0 && nImageData[1].GetSize() == ((ULONGLONG)(nAddress[0][0][0] - nAddress[0][1][0])*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + nAddress[0][0][1] - nAddress[0][1][1])*nAddressBytes) || !nMemoryBlock) ? TRUE : FALSE;
							if (nMemoryBlock < nMemoryBlocks - 1) continue;
						}
						if (!szVersion.IsEmpty())
						{
							if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
							{
								for (pMemoryArea[0]->GetCatalogue(pMemoryAreaCatalogue); (pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(pMemoryAreaCatalogue->Find(szVersion))); )
								{
									pMemoryAreaCatalogueEntry->SetAttributes((bMemoryImage) ? OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE : OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE);
									pMemoryAreaCatalogueEntry->SetDate(((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) || !bMemoryData) ? ((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT))) : ((pMemoryAreaCatalogueEntry->GetDate().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) < 0) ? tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) : pMemoryAreaCatalogueEntry->GetDate()));
									pMemoryAreaCatalogueEntry->SetTime(((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) || !bMemoryData) ? ((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT))) : ((pMemoryAreaCatalogueEntry->GetTime().Find(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) < 0) ? tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) : pMemoryAreaCatalogueEntry->GetTime()));
									pMemoryArea[0]->SetCatalogue(pMemoryAreaCatalogue);
									break;
								}
								if ((pMemoryAreaCatalogueEntry = (pMemoryAreaCatalogue->Find(szVersion) < 0) ? new CDatabaseOBProcessorMemoryAreaCatalogueEntry : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
								{
									pMemoryAreaCatalogueEntry->SetName(pMemoryArea[0]->GetName());
									pMemoryAreaCatalogueEntry->SetDescription(pMemoryArea[0]->GetDescription());
									pMemoryAreaCatalogueEntry->SetVersion(szVersion);
									pMemoryAreaCatalogueEntry->SetLocation(cComputerToken.GetComputerName());
									pMemoryAreaCatalogueEntry->SetAttributes((bMemoryImage) ? OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE : OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE);
									pMemoryAreaCatalogueEntry->SetDate((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)));
									pMemoryAreaCatalogueEntry->SetTime((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) ? (tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)) : tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)));
									if (pMemoryAreaCatalogue->Add(pMemoryAreaCatalogueEntry) >= 0)
									{
										pMemoryArea[0]->SetCatalogue(pMemoryAreaCatalogue);
										if (pMemoryImageBlock[0]->GetVersion() != szVersion)
										{
											szVersion != pMemoryImageBlock[0]->GetVersion();
											bMemoryImage = TRUE;
											nMemoryBlock--;
										}
										delete pMemoryAreaCatalogue;
										continue;
									}
									delete pMemoryAreaCatalogueEntry;
								}
								delete pMemoryAreaCatalogue;
							}
							if (pMemoryImageBlock[0]->GetVersion() != szVersion)
							{
								szVersion = pMemoryImageBlock[0]->GetVersion();
								bMemoryImage = TRUE;
								nMemoryBlock--;
							}
						}
					}
					if ((pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED) != OBPROCESSORMEMORYIMAGE_FLAG_DUMPED)
					{
						for (szDumpFlags.RemoveAll(); (pImage->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)) != (pMemoryArea[0]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)); )
						{
							for (pMemoryArea[0]->SetAttributes((pMemoryArea[0]->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)) | (pImage->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT))), szDumpFlags.Add((pImage->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) ? STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_PATCHABLE) : STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_NONPATCHABLE)), szDumpFlags.Add((pImage->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) ? STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_DOWNLOADABLE) : STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_NONDOWNLOADABLE)); pImage->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_UPDATE; )
							{
								szDumpFlags.Add(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_AUTOMATIC));
								break;
							}
							for (; pImage->GetAttributes() & OBPROCESSORMEMORYAREA_FLAG_INHIBIT; )
							{
								szDumpFlags.Add(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_PROHIBITED));
								break;
							}
							LogDumpFlags(pImage->GetName(), szDumpFlags);
							break;
						}
					}
				}
			}
			if (m_cDatabaseThread.UpdateMemoryImage(pszProcessor, pImage, bOverwrite, FALSE, bDelayed))
			{
				for (UpdateProcessor(pszProcessor, pImage, bOverwrite, FALSE, bDelayed); pImage->GetAttributes() & OBPROCESSORMEMORYIMAGE_FLAG_DUMPED; )
				{
					Print(pProcessor, pImage, tUpdate);
					break;
				}
				return TRUE;
			}
		}
		return FALSE;
	}
	return InsertOnBoardMemoryImage(pszProcessor, pImage, tUpdate, bDelayed);
}

BOOL CTCOnBoardMemoryImagesWnd::DeleteOnBoardMemoryImage(LPCTSTR pszProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL bDelayed)
{
	INT  nIndex;
	INT  nProcessor;
	INT  nProcessors;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	BOOL  bMemoryImage;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CSingleLock  cLock(m_pDatabaseMutex, TRUE);

	if ((pMemoryImage = GetDatabase()->GetOBProcessorMemoryImages()->GetAt((nIndex = GetDatabase()->GetOBProcessorMemoryImages()->Find(pImage->GetName())))))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (INT)pMemoryImage->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock = nMemoryBlock + 1)
		{
			if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryBlock)) && pImage->Find(pMemoryImageBlock->GetVersion()) >= 0)
			{
				pMemoryImage->RemoveAt(nMemoryBlock);
				delete pMemoryImageBlock;
				nMemoryBlocks--;
				nMemoryBlock--;
			}
		}
		if ((bMemoryImage = (pMemoryImage->GetSize() == 0)))
		{
			for (nProcessor = 0, nProcessors = (INT)GetDatabase()->GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
			{
				if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(nProcessor)) && pProcessor->GetMasterImageRef() >= nIndex)
				{
					pProcessor->SetMasterImageRef((pProcessor->GetMasterImageRef() != nIndex) ? (pProcessor->GetMasterImageRef() - 1) : -1);
					continue;
				}
			}
			GetDatabase()->GetOBProcessorMemoryImages()->RemoveAt(nIndex);
			delete pMemoryImage;
		}
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pszProcessor))))
		{
			if ((pMemoryArea = (bMemoryImage) ? pProcessor->GetAt(pProcessor->Find(pImage->GetName())) : (CDatabaseOBProcessorMemoryArea *)NULL) && (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE))
			{
				pProcessor->RemoveAt(pProcessor->Find(pImage->GetName()));
				delete pMemoryArea;
			}
			if (m_cDatabaseThread.UpdateMemoryImage(pszProcessor, pImage, FALSE, TRUE, bDelayed))
			{
				UpdateProcessor(pszProcessor, pImage, FALSE, TRUE, bDelayed);
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DoTransactOnBoardMemoryImage()
{
	return m_wndView.DoTransactOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::CanTransactOnBoardMemoryImage() CONST
{
	return m_wndView.CanTransactOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::DoImportOnBoardMemoryImage()
{
	return m_wndView.DoImportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::CanImportOnBoardMemoryImage() CONST
{
	return m_wndView.CanImportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::DoExportOnBoardMemoryImage()
{
	return m_wndView.DoExportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::CanExportOnBoardMemoryImage() CONST
{
	return m_wndView.CanExportOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::DoDeleteOnBoardMemoryImage()
{
	return m_wndView.DoDeleteOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::CanDeleteOnBoardMemoryImage() CONST
{
	return m_wndView.CanDeleteOnBoardMemoryImage();
}

BOOL CTCOnBoardMemoryImagesWnd::DoInsertOnBoardMemoryImageTableRowAbove()
{
	return m_wndView.DoInsertOnBoardMemoryImageTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesWnd::CanInsertOnBoardMemoryImageTableRowAbove() CONST
{
	return m_wndView.CanInsertOnBoardMemoryImageTableRowAbove();
}

BOOL CTCOnBoardMemoryImagesWnd::DoInsertOnBoardMemoryImageTableRowBelow()
{
	return m_wndView.DoInsertOnBoardMemoryImageTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesWnd::CanInsertOnBoardMemoryImageTableRowBelow() CONST
{
	return m_wndView.CanInsertOnBoardMemoryImageTableRowBelow();
}

BOOL CTCOnBoardMemoryImagesWnd::DoInsertOnBoardMemoryImageTableColumnBefore()
{
	return m_wndView.DoInsertOnBoardMemoryImageTableColumnBefore();
}

BOOL CTCOnBoardMemoryImagesWnd::CanInsertOnBoardMemoryImageTableColumnBefore() CONST
{
	return m_wndView.CanInsertOnBoardMemoryImageTableColumnBefore();
}

BOOL CTCOnBoardMemoryImagesWnd::DoInsertOnBoardMemoryImageTableColumnAfter()
{
	return m_wndView.DoInsertOnBoardMemoryImageTableColumnAfter();
}

BOOL CTCOnBoardMemoryImagesWnd::CanInsertOnBoardMemoryImageTableColumnAfter() CONST
{
	return m_wndView.CanInsertOnBoardMemoryImageTableColumnAfter();
}

BOOL CTCOnBoardMemoryImagesWnd::DoClearOnBoardMemoryImageTableRow()
{
	return m_wndView.DoClearOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::CanClearOnBoardMemoryImageTableRow() CONST
{
	return m_wndView.CanClearOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::DoDeleteOnBoardMemoryImageTableRow()
{
	return m_wndView.DoDeleteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::CanDeleteOnBoardMemoryImageTableRow() CONST
{
	return m_wndView.CanDeleteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::DoDeleteOnBoardMemoryImageTableColumn()
{
	return m_wndView.DoDeleteOnBoardMemoryImageTableColumn();
}

BOOL CTCOnBoardMemoryImagesWnd::CanDeleteOnBoardMemoryImageTableColumn() CONST
{
	return m_wndView.CanDeleteOnBoardMemoryImageTableColumn();
}

BOOL CTCOnBoardMemoryImagesWnd::DoCopyOnBoardMemoryImageTableRow()
{
	return m_wndView.DoCopyOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::CanCopyOnBoardMemoryImageTableRow() CONST
{
	return m_wndView.CanCopyOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::DoPasteOnBoardMemoryImageTableRow()
{
	return m_wndView.DoPasteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::CanPasteOnBoardMemoryImageTableRow() CONST
{
	return m_wndView.CanPasteOnBoardMemoryImageTableRow();
}

BOOL CTCOnBoardMemoryImagesWnd::DoPrintOnBoardMemoryImageTable()
{
	return m_wndView.DoPrintOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::CanPrintOnBoardMemoryImageTable() CONST
{
	return m_wndView.CanPrintOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::DoDiscardOnBoardMemoryImageTable()
{
	return m_wndView.DoDiscardOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::CanDiscardOnBoardMemoryImageTable() CONST
{
	return m_wndView.CanDiscardOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::DoResetOnBoardMemoryImageTable()
{
	return m_wndView.DoResetOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::CanResetOnBoardMemoryImageTable() CONST
{
	return m_wndView.CanResetOnBoardMemoryImageTable();
}

BOOL CTCOnBoardMemoryImagesWnd::SetLoggingOptions()
{
	CString  szFileName;
	CEventLog  cEventLog;
	CFileFindEx  cFileFind;
	CLogicalDrives  cDrives;
	CTCServiceLock  cLock(this);

	if (cEventLog.SetOwner(GetAccountComputerName(), GetAccountSpacecraftName(), GetAccountUserName()))
	{
		if (cEventLog.QuerySpacecraftLogFileName(szFileName) && cFileFind.FindFile(szFileName) && !cFileFind.FindNextFile())
		{
			m_szLoggingFileName[0] = m_szLoggingFileName[1] = (cFileFind.GetRoot().Right(1).GetAt(0) != cDrives.GetPathDelimiter()) ? (cFileFind.GetRoot() + cDrives.GetPathDelimiter() + STRING(IDS_TCONBOARDMEMORYIMAGES_LOGFILE_DEFAULTFILENAME)) : (cFileFind.GetRoot() + STRING(IDS_TCONBOARDMEMORYIMAGES_LOGFILE_DEFAULTFILENAME));
			m_nLoggingPolicy = LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
			m_tLoggingRetention = DAYSPERWEEK*SECONDSPERDAY;
			m_dwLoggingRetention = 0;
			m_nLoggingReloadCount = 0;
			m_bLoggingAsEvent = FALSE;
			cFileFind.Close();
			return TRUE;
		}
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesWnd::SetLoggingOptions(UINT nArchivalPolicy, LPCTSTR pszArchivalFileName, DWORDLONG dwArchivalRetention, CONST CTimeSpan &tArchivalRetention, LPCTSTR pszRetrievalFileName, UINT nRetrievalReloadCount, BOOL bShowAsEvent)
{
	CTCServiceLock  cLock(this);

	m_nLoggingPolicy = nArchivalPolicy;
	m_szLoggingFileName[0] = pszArchivalFileName;
	m_szLoggingFileName[1] = pszRetrievalFileName;
	m_dwLoggingRetention = dwArchivalRetention;
	m_tLoggingRetention = tArchivalRetention;
	m_nLoggingReloadCount = nRetrievalReloadCount;
	m_bLoggingAsEvent = bShowAsEvent;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	CTCServiceLock  cLock(this);

	nArchivalPolicy = m_nLoggingPolicy;
	szArchivalFileName = m_szLoggingFileName[0];
	szRetrievalFileName = m_szLoggingFileName[1];
	dwArchivalRetention = m_dwLoggingRetention;
	tArchivalRetention = m_tLoggingRetention;
	nRetrievalReloadCount = m_nLoggingReloadCount;
	bShowAsEvent = m_bLoggingAsEvent;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::LogActivity(CONST CTCLogEntry *pEntry)
{
	CLogFile  cLogFile;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CEventObject  *pEvent;
	CTCServiceLock  cLock(this);

	if (m_bLoggingAsEvent)
	{
		if ((pEvent = new CEventObject))
		{
			pEvent->SetCategory(EVENT_CATEGORY_USER);
			pEvent->SetType(STRING(IDS_EVENTTYPE_INFORMATIONAL));
			pEvent->SetSubtype(pEntry->GetDescription());
			pEvent->SetMessage(pEntry->GetActivity());
			pEvent->SetComments(EMPTYSTRING);
			pEvent->SetUser(pEntry->GetUser());
			pEvent->SetAuditTime(pEntry->GetTime());
			pEvent->SetAuditColor(VGA_COLOR_BLACK);
			pEvent->Acknowledge();
			pEvent->Show(TRUE);
			ReportEvent(pEvent);
		}
	}
	if ((m_nLoggingPolicy & LOGFILE_POLICY_DISABLED) != LOGFILE_POLICY_DISABLED)
	{
		if (cLogFile.Open(m_szLoggingFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			if (pEntry->Map(nLogData) && cLogFile.Write(tLogTime, nLogData))
			{
				cLogFile.Close();
				return TRUE;
			}
			cLogFile.Close();
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::SetPrintJobs(CONST CTCOnBoardMemoryImagesPrintJobs &pPrintJobs)
{
	CTCServiceLock  cLock(this);

	return m_pPrintJobs.Copy(&pPrintJobs);
}

BOOL CTCOnBoardMemoryImagesWnd::GetPrintJobs(CTCOnBoardMemoryImagesPrintJobs &pPrintJobs) CONST
{
	CTCServiceLock  cLock(this);

	return pPrintJobs.Copy(&m_pPrintJobs);
}

BOOL CTCOnBoardMemoryImagesWnd::Print(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, PRINTDLG *pPrintInfo)
{
	CDC  cDC;
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	CString  szTitle;
	LOGFONT  lfFont[2];
	DEVMODE  *pDevMode;
	DEVNAMES  *pDevNames;
	CPtrArray  pSymbols;
	CUIntArray  nSymbolIDs;
	CStringArray  szColumns;
	CStringArray  szContents;
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTextViewAttributes  pAttributes;

	if ((pPrintProfileInfo = (GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		if ((pJobInfo->GetName() == STRING(IDS_PRINTPROFILE_DEFAULTNAME) && GetPrintProperties(pJobInfo, szTitle, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs)) || (pJobInfo->GetName() != STRING(IDS_PRINTPROFILE_DEFAULTNAME) && GetPrintProperties(pJobInfo, szTitle, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1])))
		{
			if (!AfxIsValidAddress(pPrintInfo, sizeof(PRINTDLG)))
			{
				if (CreatePrinterDC(pPrintProfileInfo, cDC))
				{
					if (PrintJob(cDC, pJobInfo, pPrintProfileInfo->GetPrinterName(), 0, 0, rtMargin[0], bMetric, szTitle, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs))
					{
						cDC.DeleteDC();
						return TRUE;
					}
					cDC.DeleteDC();
				}
				return FALSE;
			}
			if ((pDevNames = (DEVNAMES *)GlobalLock(pPrintInfo->hDevNames)))
			{
				if ((pDevMode = (DEVMODE *)GlobalLock(pPrintInfo->hDevMode)))
				{
					if (CreatePrinterDC(pPrintInfo->hDevNames, pPrintInfo->hDevMode, cDC))
					{
						if (PrintJob(cDC, pJobInfo, (LPCTSTR)pDevMode->dmDeviceName, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nFromPage : 0, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nToPage : 0, rtMargin[0], bMetric, szTitle, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs))
						{
							GlobalUnlock(pPrintInfo->hDevNames);
							GlobalUnlock(pPrintInfo->hDevMode);
							cDC.DeleteDC();
							return TRUE;
						}
						cDC.DeleteDC();
					}
					GlobalUnlock(pPrintInfo->hDevMode);
				}
				GlobalUnlock(pPrintInfo->hDevNames);
			}
			return FALSE;
		}
		return((pJobInfo->GetName() != STRING(IDS_PRINTPROFILE_DEFAULTNAME) && !szColumns.GetSize() && !szContents.GetSize()) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCOnBoardMemoryImagesWnd::Print(CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, CONST CTimeKey &tUpdate)
{
	INT  nJob;
	INT  nJobs;
	INT  nDump;
	INT  nDumps;
	INT  nEntry;
	INT  nEntries;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	UINT  nPrintCount;
	BOOL  bPrintDump;
	CString  szEvent;
	CStringArray  szDumps;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;

	for (nJob = 0, nJobs = (GetPrintJobs(pJobs)) ? (INT)pJobs.GetSize() : -1; nJob < nJobs; nJob++)
	{
		for (nMemoryArea = 0, nMemoryAreas = ((pJobInfo = pJobs.GetAt(nJob)) && pJobInfo->GetPrintProcessor() == pProcessor->GetName() && (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_ATDOWNLOAD)) ? (INT)pProcessor->GetSize() : 0; nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pMemoryArea = pProcessor->GetAt(nMemoryArea)) && pMemoryArea->GetName() == pImage->GetName())
			{
				if (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE)
				{
					if ((pMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
					{
						if (pMemoryArea->GetCatalogue(pMemoryAreaCatalogue))
						{
							for (nEntry = 0, nEntries = (INT)pMemoryAreaCatalogue->GetSize(); nEntry < nEntries; nEntry++)
							{
								if ((pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(nEntry)) && pMemoryAreaCatalogueEntry->GetDate() == tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) && pMemoryAreaCatalogueEntry->GetTime() == tUpdate.FormatGmt(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))
								{
									if ((pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_COMPLETEONLY) != TCONBOARDMEMORYIMAGES_PRINT_COMPLETEONLY) break;
									if (pMemoryAreaCatalogueEntry->GetAttributes() & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE) break;
								}
							}
							for (nDump = 0, nDumps = (nEntry < nEntries) ? pJobInfo->GetPrintDumps(szDumps) : -1; nDump < nDumps; nDump++)
							{
								if (szDumps.GetAt(nDump) != pImage->GetName())
								{
									szDumps.RemoveAt(nDump);
									nDumps--;
									nDump--;
								}
							}
							for (pJobInfo->SetPrintDumps(szDumps); nDump == nDumps; )
							{
								for (bPrintDump = Print(pJobInfo); (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS) && bPrintDump; )
								{
									pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
									pJobInfo->SetComments(EMPTYSTRING);
									break;
								}
								if (bPrintDump)
								{
									pJobInfo->SetPrintCount((pJobInfo->GetPrintCount(nPrintCount)) ? (nPrintCount + 1) : 0);
									SetPrintJobs(pJobs);
									break;
								}
								ReportEvent(SYSTEM_WARNING_TCONBOARDMEMORYIMAGES_PRINT_FAILURE, FALSE);
								break;
							}
						}
						delete pMemoryAreaCatalogue;
					}
					break;
				}
			}
		}
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::SetDBMSBehavior(CONST CTimeSpan &tDelay, BOOL bFlush, BOOL bFile)
{
	CTimeSpan  tDBMSFlush;
	BOOL  bDBMSFlag[2];

	if (GetDBMSBehavior(tDBMSFlush, bDBMSFlag[0], bDBMSFlag[1]))
	{
		if (tDBMSFlush != tDelay || bDBMSFlag[0] != bFlush || bDBMSFlag[1] != bFile)
		{
			if (m_cDatabaseThread.SetFlushDelay(tDelay) && m_cDatabaseThread.EnableFlush(bFlush, bFile))
			{
				LogDumpBehavior(TRUE);
				return TRUE;
			}
			return FALSE;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::GetDBMSBehavior(CTimeSpan &tDelay, BOOL &bFlush, BOOL &bFile) CONST
{
	return m_cDatabaseThread.GetFlushDelay(tDelay) && m_cDatabaseThread.IsFlushEnabled(bFlush, bFile);
}

CString CTCOnBoardMemoryImagesWnd::GetDBMSDetails() CONST
{
	return m_cDatabaseThread.GetDBMSDetails();
}

BOOL CTCOnBoardMemoryImagesWnd::IsDBMSOnline() CONST
{
	return m_cDatabaseThread.IsDBMSOnline();
}

BOOL CTCOnBoardMemoryImagesWnd::Start()
{
	Initialize(TRUE);
	UpdateAllPanes();
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::Prepare(BOOL bDialog)
{
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::Check() CONST
{
	return((CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) ? TRUE : FALSE);
}

VOID CTCOnBoardMemoryImagesWnd::Update()
{
	if (!Check())
	{
		if (IsWindowVisible())
		{
			ReportEvent(USER_INFORMATIONAL_DISPLAY_ACCESS_VIOLATION);
			ActivateFrame(SW_HIDE);
			return;
		}
	}
	UpdateAllPanes();
	CDisplayWnd::Update();
}

BOOL CTCOnBoardMemoryImagesWnd::Stop()
{
	Initialize(FALSE);
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::SaveInfo(INT nPage, INT nDisplay, LPCTSTR pszTitle, CONST PDISPLAYINFO pDisplayInfo)
{
	UINT  nPolicy;
	UINT  nCount;
	BOOL  bEvent;
	BOOL  bFlags[2];
	CSize  sizeList[2];
	CString  szFileName[2];
	LOGFONT  sFontInfo[3][2];
	COLORREF  nColors[2][2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CUIntArray  nColumns[2];
	CUIntArray  nWidths[2];
	CByteArray  nFontsInfo;
	CByteArray  nPrintInfo;
	CByteArray  nContentsInfo;
	CTimeSpan  tDelay;
	CProfile  cProfile;

	return((CDisplayWnd::SaveInfo(nPage, nDisplay, pszTitle, pDisplayInfo) && (nPage > 0 || (GetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, nColumns[0], nWidths[0], sizeList[0]) && GetLayout(TCONBOARDMEMORYIMAGES_PANE_DETAILS, nColumns[1], nWidths[1], sizeList[1]) && GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sFontInfo[0][0]) && GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sFontInfo[0][1]) && GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sFontInfo[1][0]) && GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sFontInfo[1][1]) && GetTablesOutline(&sFontInfo[2][0], &sFontInfo[2][1], nColors[0][0], nColors[0][1], nColors[1][0], nColors[1][1]) && GetContents(nContentsInfo) && GetDBMSBehavior(tDelay, bFlags[0], bFlags[1]) && GetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && GetPrintJobs(nPrintInfo) && cProfile.SetTCOnBoardMemoryImagesLayoutInfo(nPage, nDisplay, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], IsToolTipModeEnabled()) && cProfile.SetTCOnBoardMemoryImagesFontsInfo(nPage, nDisplay, &sFontInfo[0][0], &sFontInfo[0][1], &sFontInfo[1][0], &sFontInfo[1][1]) && cProfile.SetTCOnBoardMemoryImagesTablesInfo(nPage, nDisplay, &sFontInfo[2][0], &sFontInfo[2][1], nColors[0][0], nColors[0][1], nColors[1][0], nColors[1][1]) && cProfile.SetTCOnBoardMemoryImagesContentsInfo(nPage, nDisplay, nContentsInfo, tDelay, bFlags[0], bFlags[1]) && cProfile.SetTCOnBoardMemoryImagesLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.SetTCOnBoardMemoryImagesPrintInfo(nPage, nDisplay, nPrintInfo)))) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::LoadInfo(INT nPage, INT nDisplay, CString &szTitle, PDISPLAYINFO pDisplayInfo)
{
	UINT  nPolicy;
	UINT  nCount;
	BOOL  bEvent;
	BOOL  bFlags[2];
	BOOL  bToolTips;
	CSize  sizeList[2];
	CString  szFileName[2];
	LOGFONT  sFontInfo[3][2];
	COLORREF  nColors[2][2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CUIntArray  nColumns[2];
	CUIntArray  nWidths[2];
	CByteArray  nFontsInfo;
	CByteArray  nPrintInfo;
	CByteArray  nContentsInfo;
	CTimeSpan  tDelay;
	CProfile  cProfile;

	return((CDisplayWnd::LoadInfo(nPage, nDisplay, szTitle, pDisplayInfo) && (nPage > 0 || (cProfile.GetTCOnBoardMemoryImagesLayoutInfo(nPage, nDisplay, nColumns[0], nWidths[0], sizeList[0], nColumns[1], nWidths[1], sizeList[1], bToolTips) && cProfile.GetTCOnBoardMemoryImagesFontsInfo(nPage, nDisplay, &sFontInfo[0][0], &sFontInfo[0][1], &sFontInfo[1][0], &sFontInfo[1][1]) && cProfile.GetTCOnBoardMemoryImagesTablesInfo(nPage, nDisplay, &sFontInfo[2][0], &sFontInfo[2][1], nColors[0][0], nColors[0][1], nColors[1][0], nColors[1][1]) && cProfile.GetTCOnBoardMemoryImagesContentsInfo(nPage, nDisplay, nContentsInfo, tDelay, bFlags[0], bFlags[1]) && cProfile.GetTCOnBoardMemoryImagesLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.GetTCOnBoardMemoryImagesPrintInfo(nPage, nDisplay, nPrintInfo) && SetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, nColumns[0], nWidths[0], sizeList[0]) && SetLayout(TCONBOARDMEMORYIMAGES_PANE_DETAILS, nColumns[1], nWidths[1], sizeList[1]) && SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sFontInfo[0][0]) && SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sFontInfo[0][1]) && SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sFontInfo[1][0]) && SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sFontInfo[1][1]) && SetTablesOutline(&sFontInfo[2][0], &sFontInfo[2][1], nColors[0][0], nColors[0][1], nColors[1][0], nColors[1][1]) && SetContents(nContentsInfo) && SetDBMSBehavior(tDelay, bFlags[0], bFlags[1]) && SetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && SetPrintJobs(nPrintInfo) && EnableToolTipMode(bToolTips)))) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::SetLayoutInfo(LPCVOID pData)
{
	INT  cbData;
	DATA  sData;
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		for (CopyMemory(&sData, pData, ((cbData = (INT)GlobalSize((HGLOBAL)pData)) >= sizeof(DATA)) ? sizeof(DATA) : 0); cbData >= sizeof(DATA) && sData.cbSize == sizeof(DATA) + sData.cbColumns[0] + sData.cbColumns[1] && sData.cbColumns[0] >= 0 && sData.cbColumns[1] >= 0; )
		{
			for (nColumns.SetSize(sData.cbColumns[0] / sizeof(UINT)), nWidths.SetSize(sData.cbColumns[1] / sizeof(UINT)), CopyMemory(nColumns.GetData(), (LPBYTE)pData + (cbData = sizeof(DATA)), sData.cbColumns[0]), CopyMemory(nWidths.GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0]), sData.cbColumns[1]); SetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns, nWidths, sData.sizePanes[0], sData.sizePanes[1], &sData.sFont[0][0], &sData.sFont[0][1], &sData.sFont[1][0], &sData.sFont[1][1], &sData.sFont[2][0], &sData.sFont[2][1], sData.nColor[0][0], sData.nColor[0][1], sData.nColor[1][0], sData.nColor[1][1], sData.nIndex, sData.nPage, &sData.sScrollInfo[0], &sData.sScrollInfo[1]); ) return TRUE;
			break;
		}
		return FALSE;
	}
	return TRUE;
}

INT CTCOnBoardMemoryImagesWnd::GetLayoutInfo(LPVOID *pData) CONST
{
	INT  cbData;
	DATA  sData;
	LPVOID  pBlock;
	CSize  sizePanes[2];
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		if (GetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns, nWidths, sizePanes[0], sizePanes[1], &sData.sFont[0][0], &sData.sFont[0][1], &sData.sFont[1][0], &sData.sFont[1][1], &sData.sFont[2][0], &sData.sFont[2][1], sData.nColor[0][0], sData.nColor[0][1], sData.nColor[1][0], sData.nColor[1][1], sData.nIndex, sData.nPage, &sData.sScrollInfo[0], &sData.sScrollInfo[1]))
		{
			for (sData.cbColumns[0] = (INT)(nColumns.GetSize()*sizeof(UINT)), sData.cbColumns[1] = (INT)(nWidths.GetSize()*sizeof(UINT)), sData.sizePanes[0].cx = sizePanes[0].cx, sData.sizePanes[0].cy = sizePanes[0].cy, sData.sizePanes[1].cx = sizePanes[1].cx, sData.sizePanes[1].cy = sizePanes[1].cy, sData.cbSize = sizeof(DATA) + sData.cbColumns[0] + sData.cbColumns[1]; (pBlock = (AfxIsValidAddress(pData, sizeof(DATA))) ? (LPVOID)GlobalReAlloc(*pData, sData.cbSize, GMEM_MOVEABLE | GMEM_ZEROINIT) : (LPVOID)NULL); )
			{
				CopyMemory(pData, &pBlock, sizeof(LPVOID));
				CopyMemory(pBlock, &sData, sizeof(DATA));
				CopyMemory((LPBYTE)pBlock + (cbData = sizeof(DATA)), nColumns.GetData(), sData.cbColumns[0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0]), nWidths.GetData(), sData.cbColumns[1]);
				break;
			}
			return sData.cbSize;
		}
	}
	return 0;
}

BOOL CTCOnBoardMemoryImagesWnd::QueryDefaultInfo(PDISPLAYINFO pDefaultInfo) CONST
{
	pDefaultInfo->ptWnd.x = 0;
	pDefaultInfo->ptWnd.y = 0;
	pDefaultInfo->nNumber = -1;
	pDefaultInfo->rWnd = rectDefault;
	pDefaultInfo->nScope = DISPLAY_SCOPE_GLOBAL;
	pDefaultInfo->nMode = DISPLAY_MODE_REALTIME;
	pDefaultInfo->pData = (LPVOID)NULL;
	pDefaultInfo->nShow = SW_SHOWNORMAL;
	pDefaultInfo->bShow = TRUE;
	return TRUE;
}

BOOL CTCOnBoardMemoryImagesWnd::QueryDefaultMenu(CLocaleMenu &cMenu, CImageList &cImages, CUIntArray &nImageIDs) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  iImage;
	UINT  nButtonID;
	UINT  nButtonStyle;
	CBitmap  cBitmap[3];
	BITMAP  sBitmap;

	for (cImages.DeleteImageList(), nImageIDs.RemoveAll(); cBitmap[0].LoadBitmap(IDB_TCONBOARDMEMORYIMAGESFRAMEPROPERTIESSMALLIMAGES) && cBitmap[1].LoadBitmap(IDB_TCONBOARDMEMORYIMAGESFRAMEOPERATIONSSMALLIMAGES) && cBitmap[2].LoadBitmap(IDB_TCONBOARDMEMORYIMAGESFRAMEEXTRAIMAGES) && cBitmap[0].GetBitmap(&sBitmap); )
	{
		for (nIndex = 0, nCount = (cImages.Create(sBitmap.bmHeight, sBitmap.bmHeight, ILC_COLOR32, sBitmap.bmWidth / sBitmap.bmHeight, 1) && cImages.Add(&cBitmap[0], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[0].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[0].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		for (nIndex = 0, nCount = (nCount > 0 && cImages.Add(&cBitmap[1], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[1].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[1].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		if (nCount > 0 && cImages.Add(&cBitmap[2], RGB(0, 0, 0)) >= 0)
		{
			nImageIDs.Add(IDM_TCONBOARDMEMORYIMAGESCOPYTABLEROW);
			nImageIDs.Add(IDM_TCONBOARDMEMORYIMAGESPASTETABLEROW);
		}
		cBitmap[0].DeleteObject();
		cBitmap[1].DeleteObject();
		break;
	}
	return cMenu.LoadMenu(IDR_TCONBOARDMEMORYIMAGESFRAME);
}

VOID CTCOnBoardMemoryImagesWnd::UpdateBars()
{
	CTCServiceLock  cLock(this);

	UpdateMessagePane();
	UpdateModePane();
	UpdateDBMSPane();
}

BOOL CTCOnBoardMemoryImagesWnd::Print(PRINTDLG *pPrintInfo)
{
	INT  nJob;
	INT  nJobs;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;
	CTCOnBoardMemoryImagesPrintJobInfo  *pJobInfo;
	CTCServiceLock  cLock(this);

	for (nJob = 0, nJobs = (GetPrintJobs(pJobs)) ? (INT)pJobs.GetSize() : 0; nJob < nJobs; nJob++)
	{
		if ((pJobInfo = pJobs.GetAt(nJob)) && pJobInfo->GetName() == STRING(IDS_PRINTJOB_DEFAULTNAME))
		{
			if (Print(pJobInfo, pPrintInfo)) break;
			continue;
		}
	}
	if (nJob < nJobs)
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS)
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCONBOARDMEMORYIMAGES_PRINT_CLEARCOMMENTS);
			pJobInfo->SetComments(EMPTYSTRING);
			SetPrintJobs(pJobs);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::CanPrint() CONST
{
	return((GetProcessorCount() > 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::CreateToolBars()
{
	if (m_wndToolBar[0].CreateEx(this, TBSTYLE_FLAT, CBRS_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCONBOARDMEMORYIMAGES_TOOLBAR_PROPERTIES) && m_wndToolBar[0].LoadToolBar(IDB_TCONBOARDMEMORYIMAGESFRAMEPROPERTIESLARGEIMAGES, 0, IDB_TCONBOARDMEMORYIMAGESFRAMEPROPERTIESSMALLIMAGES, TRUE))
	{
		if (m_wndToolBar[1].CreateEx(this, TBSTYLE_FLAT, CBRS_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCONBOARDMEMORYIMAGES_TOOLBAR_OPERATIONS) && m_wndToolBar[1].LoadToolBar(IDB_TCONBOARDMEMORYIMAGESFRAMEOPERATIONSLARGEIMAGES, 0, IDB_TCONBOARDMEMORYIMAGESFRAMEOPERATIONSSMALLIMAGES, TRUE))
		{
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESSETTINGS), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESACKNOWLEDGE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESTRANSACT), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESDELETE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESIMPORT), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESEXPORT), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWABOVE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWBELOW), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNBEFORE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNAFTER), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESCLEARTABLEROW), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESDELETETABLEROW), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESDELETETABLECOLUMN), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESPRINTTABLE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCONBOARDMEMORYIMAGESPRINT), TBBS_DISABLED);
			m_wndToolBar[0].EnableDocking(CBRS_ALIGN_TOP);
			m_wndToolBar[1].EnableDocking(CBRS_ALIGN_TOP);
			DockPane(&m_wndToolBar[0]);
			DockPane(&m_wndToolBar[1]);
			RecalcLayout();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::CreateStatusBar()
{
	if (m_wndStatusBar.Create(this, CBRS_BOTTOM | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndStatusBar.SetIndicators(nTCOnBoardMemoryImagesStatusBarIndicators, 1))
	{
		m_wndStatusBar.EnableToolTips();
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::CreateView()
{
	if (m_wndView.Create(this))
	{
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::Customize(BOOL bDefault)
{
	CByteArray  nContentsInfo;
	CByteArray  nPrintInfo;

	return(((GetProcessorCount() > 0 || SetContents(nContentsInfo)) && ((!bDefault  &&  GetPrintJobs(nPrintInfo) && nPrintInfo.GetSize() > 0) || SetPrintJobs(nPrintInfo))) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::UpdateAllPanes()
{
	INT  nPane;
	INT  nPanes;

	for (nPane = 0, nPanes = sizeof(nTCOnBoardMemoryImagesStatusBarIndicators) / sizeof(UINT); nPane < nPanes; nPane++)
	{
		if (m_wndStatusBar.CommandToIndex(nTCOnBoardMemoryImagesStatusBarIndicators[nPane]) != nPane) break;
		continue;
	}
	if (nPane < nPanes)
	{
		if (m_wndStatusBar.SetIndicators(nTCOnBoardMemoryImagesStatusBarIndicators, sizeof(nTCOnBoardMemoryImagesStatusBarIndicators) / sizeof(UINT)))
		{
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	UpdateBars();
	return TRUE;
}

VOID CTCOnBoardMemoryImagesWnd::UpdateMessagePane()
{
	UINT  nCount;
	CString  szMessage;

	szMessage.Format(((nCount = GetProcessorCount()) > 0) ? ((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_DATAMESSAGES) : STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_DATAMESSAGE)) : STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_NODATAMESSAGE), nCount);
	m_wndStatusBar.SetPaneText(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE, szMessage);
}

VOID CTCOnBoardMemoryImagesWnd::UpdateModePane()
{
	m_wndStatusBar.SetPaneText(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE, STRING(IDS_DISPLAY_MODE_REALTIME));
}

VOID CTCOnBoardMemoryImagesWnd::UpdateDBMSPane()
{
	m_wndStatusBar.SetPaneText(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE, (m_cDatabaseThread.IsDBMSOnline()) ? STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_STATUSONLINE) : STRING(IDS_TCONBOARDMEMORYIMAGES_STATUSBAR_STATUSOFFLINE));
}

VOID CTCOnBoardMemoryImagesWnd::UpdateContents()
{
	m_wndView.UpdateContents();
}

BOOL CTCOnBoardMemoryImagesWnd::LogDump(LPCTSTR pszDump, LPCTSTR pszVersion, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszVersion) > 0 && lstrlen(pszActivity) > 0; )
		{
			szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFORMAT), pszDump, pszVersion, pszActivity);
			cEntry.SetActivity(szActivity);
			cEntry.SetTime(tActivity.GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::LogDumpTemplate(LPCTSTR pszDump, LPCTSTR pszActivity)
{
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && lstrlen(pszActivity) > 0; )
		{
			szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPTEMPLATEFORMAT), pszDump, pszActivity);
			cEntry.SetActivity(szActivity);
			cEntry.SetTime(tActivity.GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::LogDumpFlags(LPCTSTR pszDump, CONST CStringArray &szFlags)
{
	INT  nFlag;
	INT  nFlags;
	CString  szFlag;
	CString  szFlagList[2];
	CString  szActivity;
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DUMP)); lstrlen(pszDump) > 0 && szFlags.GetSize() > 0; )
		{
			for (nFlag = 0, nFlags = (INT)szFlags.GetSize(), szFlagList[0].Empty(); nFlag < nFlags; nFlag++)
			{
				szFlag = STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_SEPARATOR);
				szFlag = (nFlag > 0 && nFlag < nFlags - 1) ? (szFlag + szFlags.GetAt(nFlag)) : szFlags.GetAt(nFlag);
				szFlagList[0] += (nFlag < nFlags - 1) ? szFlag : EMPTYSTRING;
			}
			szFlagList[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPFLAG_FORMAT), (LPCTSTR)szFlagList[0], (LPCTSTR)szFlag);
			szActivity.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPIMAGEFLAGSFORMAT), pszDump, (nFlags > 1) ? (LPCTSTR)szFlagList[1] : (LPCTSTR)szFlag);
			cEntry.SetActivity(szActivity);
			cEntry.SetTime(tActivity.GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::LogDumpBehavior(BOOL bDBMS)
{
	CTimeKey  tActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGOBJECT_SOURCE)); bDBMS; )
		{
			cEntry.SetDescription(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGDESCRIPTION_DBMS));
			cEntry.SetActivity(STRING(IDS_TCONBOARDMEMORYIMAGES_LOGEVENTMESSAGE_DUMPDBMSUPDATEFORMAT));
			cEntry.SetTime(tActivity.GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::SetContents(CONST CByteArray &nContentsInfo)
{
	INT  nProcessor;
	INT  nProcessors;
	CDatabaseOBProcessor  *pProcessor;
	CTCOnBoardMemoryImagesProcessorItem  *pItem;
	CTCOnBoardMemoryImagesProcessorItems  pItems;

	for (nProcessor = 0, nProcessors = (pItems.Unmap(nContentsInfo)) ? (INT)pItems.GetSize() : -1; nProcessor < nProcessors; nProcessor++)
	{
		if ((pItem = pItems.GetAt(nProcessor)) && GetDatabase()->GetOBProcessors()->Find(pItem->GetName()) < 0)
		{
			pItems.RemoveAt(nProcessor);
			delete pItem;
			nProcessors--;
			nProcessor--;
		}
	}
	for (nProcessor = 0, nProcessors = (INT)GetDatabase()->GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(nProcessor)) && pItems.Find(pProcessor->GetName()) < 0)
		{
			if ((pItem = new CTCOnBoardMemoryImagesProcessorItem) != (CTCOnBoardMemoryImagesProcessorItem *)NULL)
			{
				if (pItem->CDatabaseOBProcessor::Copy(pProcessor) && pItems.Add(pItem) >= 0) continue;
				delete pItem;
			}
		}
	}
	return((nProcessors == pItems.GetSize()) ? SetProcessors(pItems) : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::GetContents(CByteArray &nContentsInfo) CONST
{
	CTCOnBoardMemoryImagesProcessorItems  pItems;

	return((GetProcessors(pItems)) ? pItems.Map(nContentsInfo) : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::SetPrintJobs(CONST CByteArray &nPrintInfo)
{
	CTCOnBoardMemoryImagesPrintJobs  pPrintJobs;

	return((pPrintJobs.Unmap(nPrintInfo)) ? SetPrintJobs(pPrintJobs) : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::GetPrintJobs(CByteArray &nPrintInfo) CONST
{
	CTCOnBoardMemoryImagesPrintJobs  pPrintJobs;

	return((GetPrintJobs(pPrintJobs)) ? pPrintJobs.Map(nPrintInfo) : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::GetPrintProperties(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CString &szTitle, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	szTitle = STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_SUMMARYSUBTITLE);
	return m_wndView.GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}
BOOL CTCOnBoardMemoryImagesWnd::GetPrintProperties(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CString &szTitle, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont) CONST
{
	INT  nPos;
	INT  nDump;
	INT  nDumps;
	INT  nLine;
	INT  nLines;
	INT  nByte;
	INT  nBytes;
	INT  nIndex;
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	UINT  nPrintCount;
	UINT  nStopCount;
	UINT  nFormat[2];
	UINT  nAddress[2];
	UINT  nRange[2][2];
	UINT  nLineCount;
	UINT  nFirstLine;
	UINT  nLastLine;
	CString  szData;
	CString  szBreak;
	CString  szEvent;
	CString  szHeader;
	CString  szVersion;
	COLORREF  nColor[4];
	CTimeKey  tStopTime;
	CTimeKey  tPrintTime;
	CTimeKey  tDumpTime[2];
	CByteArray  nDumpMask[2];
	CByteArray  nDumpData[2];
	CStringArray  szDumps;
	CStringArray  szDataLines;
	CStringTools  cStringTools;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (szColumns.RemoveAll(), szContents.RemoveAll(), pAttributes.RemoveAll(); (((pJobInfo->GetPrintAtEvent(szEvent, tStopTime) || pJobInfo->GetPrintAtDownload(tStopTime)) && tPrintTime <= tStopTime && tStopTime.GetTime() > 0) || ((pJobInfo->GetPrintAtEvent(szEvent, nStopCount) || pJobInfo->GetPrintAtDownload(nStopCount)) && pJobInfo->GetPrintCount(nPrintCount) && nPrintCount < nStopCount && nStopCount > 0) || (pJobInfo->GetPrintAtEvent(szEvent, tStopTime) + pJobInfo->GetPrintAtDownload(tStopTime) + pJobInfo->GetPrintAtEvent(szEvent, nStopCount) + pJobInfo->GetPrintAtDownload(nStopCount) > 0 && tStopTime == 0 && !nStopCount)) && pJobInfo->GetPrintDumps(szDumps) > 0; )
	{
		if ((pProcessor = GetDatabase()->GetOBProcessors()->GetAt(GetDatabase()->GetOBProcessors()->Find(pJobInfo->GetPrintProcessor()))))
		{
			for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
			{
				if ((pMemoryArea = pProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
				{
					if (pMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE)
					{
						for (nDump = 0, nDumps = (INT)szDumps.GetSize(); nDump < nDumps; nDump++)
						{
							if (pMemoryArea->GetName() == szDumps.GetAt(nDump)) break;
							continue;
						}
						if ((pMemoryAreaCatalogue = (nDump < nDumps) ? new CDatabaseOBProcessorMemoryAreaCatalogue : (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL))
						{
							for (nEntry = 0, nEntries = (pMemoryArea->GetCatalogue(pMemoryAreaCatalogue)) ? (INT)pMemoryAreaCatalogue->GetSize() : 0, GetDatabase()->GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), pJobInfo->GetPrintFormat(nFormat[0], nFormat[1]), szVersion.Empty(), nAddress[0] = nAddress[1] = 0, tDumpTime[0] = 0, nDumpData[0].RemoveAll(), nDumpMask[0].RemoveAll(); nEntry < nEntries; nEntry++)
							{
								if ((pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(nEntry)) && (tDumpTime[0] == 0 || tDumpTime[0] < tDumpTime[1].ParseGmt(pMemoryAreaCatalogueEntry->GetDate() + SPACE + pMemoryAreaCatalogueEntry->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG))))
								{
									for (tDumpTime[0] = tDumpTime[1].ParseGmt(pMemoryAreaCatalogueEntry->GetDate() + SPACE + pMemoryAreaCatalogueEntry->GetTime(), CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADDATEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG) + SPACE + CString(STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADTIMEFORMAT)) + STRING(IDS_MEMORYDUMPS_VERSION_DOWNLOADFLAG)); tDumpTime[0] > 0; )
									{
										szVersion = pMemoryAreaCatalogueEntry->GetVersion();
										break;
									}
								}
							}
							if ((pMemoryImageBlock = ((pMemoryImage = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(pMemoryArea->GetName())))) ? pMemoryImage->GetAt((nIndex = pMemoryImage->Find(szVersion))) : (CDatabaseOBProcessorMemoryImageBlock *)NULL) && pMemoryImageBlock->GetAddress(nAddress[0], nAddress[1]))
							{
								do
								{
									if (pMemoryImageBlock->GetVersion() == szVersion)
									{
										if (pMemoryImageBlock->GetData(nDumpData[1]) == pMemoryImageBlock->GetMask(nDumpMask[1]))
										{
											nDumpData[0].Append(nDumpData[1]);
											nDumpMask[0].Append(nDumpMask[1]);
											continue;
										}
									}
									break;
								} while ((pMemoryImageBlock = pMemoryImage->GetAt(++nIndex)));
								if (nDumpData[0].GetSize() == nDumpMask[0].GetSize() && nDumpData[0].GetSize() > 0)
								{
									for (szTitle = STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_DUMPSSUBTITLE), szColumns.SetAtGrow(0, SPACE); szContents.GetSize() > 0; )
									{
										szContents.Add(SPACE);
										szContents.Add(SPACE);
										szContents.Add(SPACE);
										break;
									}
									for (nByte = 0, nBytes = (INT)nDumpMask[0].GetSize(), nCount = 0; nByte < nBytes; nByte++)
									{
										if (nDumpMask[0].GetAt(nByte) == MEMORYDUMP_DATATYPE_NORMAL)
										{
											nCount++;
											continue;
										}
									}
									for (nByte = 0, nBytes = (lstrlen((szData = GetDatabase()->TranslateOBProcessorMemoryImageBlockData(nDumpData[0], nDumpMask[0]))) > 0) ? szData.GetLength() : 0, szHeader.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_DUMPSHEADER), (LPCTSTR)pMemoryArea->GetName(), (LPCTSTR)szVersion, (100 * nCount) / nDumpData[0].GetSize(), (LPCTSTR)tDumpTime[0].FormatGmt(), (LPCTSTR)tDumpTime[0].FormatGmt(STRING(IDS_TIMEKEY_DATEFORMAT)), (LPCTSTR)GetDatabase()->TranslateOBProcessorAddressRange(nAddress[0], nAddress[1], nAddress[0] + ((nBytes / 2 - max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) + 1) / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1)) / (nRange[1][1] - nRange[1][0] + 1), (nAddress[1] + (nBytes / 2 - max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1) + 1) / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1)) % (nRange[1][1] - nRange[1][0] + 1)), nBytes / (2 * max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1)), GetDatabase()->GetOBProcessorAddressWidth()), szDataLines.RemoveAll(); nByte < nBytes; nByte += nFormat[0] * (nFormat[1] / 4))
									{
										szDataLines.Add(szData.Mid(nByte, min((INT)(nFormat[0] * (nFormat[1] / 4)), (INT)(szData.GetLength() - nByte))));
										continue;
									}
									for (nLine = 0, nLines = (INT)szDataLines.GetSize(); nLine < nLines; nLine++)
									{
										for (nByte = nFormat[1] / 4, nBytes = szDataLines.GetAt(nLine).GetLength(); nByte < nBytes; nByte += nFormat[1] / 4)
										{
											szDataLines.SetAt(nLine, szDataLines.GetAt(nLine).Left(nByte) + SPACE + szDataLines.GetAt(nLine).Mid(nByte));
											nBytes++;
											nByte++;
										}
										szData.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_DUMPSDATA), (LPCTSTR)GetDatabase()->TranslateOBProcessorMemoryAreaBlockAddress((UINT)((ULONGLONG)nAddress[0] + (ULONGLONG)((nLine*nFormat[0] * (nFormat[1] / 4)) / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1)) / (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1)), (UINT)((ULONGLONG)(nAddress[1] + (nLine*nFormat[0] * (nFormat[1] / 4)) / max(GetDatabase()->GetOBProcessorAddressWidth() / 8, 1)) % (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1))), (LPCTSTR)szDataLines.GetAt(nLine));
										szDataLines.SetAt(nLine, szData);
									}
									if (pJobInfo->GetPrintByRange(nFirstLine, nLastLine))
									{
										if (nLastLine < (UINT)szDataLines.GetSize()) szDataLines.RemoveAt(nLastLine, max(szDataLines.GetSize() - nLastLine, 0));
										if (szDataLines.GetSize() > 0) szDataLines.RemoveAt(0, min(nFirstLine, (UINT)szDataLines.GetSize()));
									}
									if (pJobInfo->GetPrintBySide(nLineCount) && nLineCount < (UINT)szDataLines.GetSize())
									{
										if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) szDataLines.RemoveAt(nLineCount, szDataLines.GetSize() - nLineCount);
										if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) szDataLines.RemoveAt(0, szDataLines.GetSize() - nLineCount);
									}
									for (szBreak = CR, szBreak += EOL; (nPos = szHeader.Find(szBreak)) >= 0; szHeader = szHeader.Mid(nPos + szBreak.GetLength()))
									{
										szContents.Add(szHeader.Left(nPos));
										continue;
									}
									for (; szHeader.GetLength() > 0; )
									{
										szContents.Add(szHeader);
										break;
									}
									szContents.Append(szDataLines);
								}
							}
							delete pMemoryAreaCatalogue;
						}
					}
				}
			}
			return((GetTablesOutline(pTitleFont, pItemsFont, nColor[0], nColor[1], nColor[2], nColor[3])) ? (szColumns.GetSize() > 0 && szContents.GetSize() > 0) : FALSE);
		}
		break;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::StartPrintJob(CDC &cDC)
{
	DOCINFO  sJobInfo;
	CString  szJobTitle;

	for (sJobInfo.fwType = 0, sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.lpszDocName = (LPTSTR)EMPTYSTRING, sJobInfo.lpszOutput = (LPCTSTR)NULL, sJobInfo.lpszDatatype = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCONBOARDMEMORYIMAGES)); szJobTitle.GetLength() >= 0; )
	{
		sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle;
		break;
	}
	return((cDC.StartDoc(&sJobInfo) >= 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::PrintJob(CDC &cDC, CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, LPCTSTR pszPrinterName, INT nFromPage, INT nToPage, CONST RECT &rtMargin, BOOL bMetric, LPCTSTR pszTitle, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST CTextViewAttributes &pAttributes, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nPos;
	INT  nPage;
	INT  nPages;
	INT  nLine;
	INT  nLines;
	INT  nColumn;
	INT  nColumns;
	INT  nFont;
	INT  nFonts;
	INT  nSpacing;
	INT  nHeight[2];
	UINT  nFormat;
	BOOL  bOverlap;
	BOOL  bOutput;
	CRgn  rgnArea;
	CRect  rArea;
	CRect  rCalc;
	CRect  rClip;
	CRect  rItem;
	CFont  *pOldFont;
	CFont  cFont[TCONBOARDMEMORYIMAGES_PRINTFONTS];
	CSize  sizeSymbol;
	CString  szColumn;
	COLORREF  nColor;
	COLORREF  nOldColor;
	CTimeKey  tPrint;
	CPtrArray  pFonts;
	TEXTMETRIC  tmFont;
	CUIntArray  nTabs;
	CStringArray  szColumnsText;
	CTextViewAttribute  *pAttribute;

	for (nPage = nPages = 0; (!nPages || nPage <= nPages) && (nPages > 0 || (nPages = (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rArea) != ERROR && rgnArea.CreateRectRgnIndirect(rArea) && CalcPrintDocTitleFont(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE]) && CalcPrintDocSubTitleFont(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE]) && CalcPrintDocDetailsFont(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS]) && CalcPrintDocListItemsFonts(cDC, rArea, szColumns, szContents, pTitleFont, pItemsFont, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMSTITLE], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMS]) && CalcPrintDocNoticeFonts(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE], cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rArea, cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER]) && CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMSTITLE], &cFont[TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMS], nTabs) == szColumns.GetSize()) ? nPages : -1) == 0); )
	{
		for (nFont = 0, nFonts = (!nPages) ? (INT)(sizeof(cFont) / sizeof(cFont[0])) : 0; nFont < nFonts; nFont++)
		{
			pFonts.SetAtGrow(nFont, &cFont[nFont]);
			continue;
		}
		for (nLine = 0, nLines = (INT)szContents.GetSize(), rCalc.SetRectEmpty(), rClip.SetRectEmpty(), nSpacing = 0, bOutput = TRUE, bOverlap = FALSE; nPages >= 0 && nLine < nLines; nLine++, bOutput = TRUE)
		{
			for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), ExtractPrintDocText(szContents.GetAt(nLine), szColumnsText), nHeight[0] = nHeight[1] = 0; nPages >= 0 && nColumn < nColumns; nColumn++, nHeight[1] = 0)
			{
				if (rClip.Height() > 0)
				{
					if ((pOldFont = cDC.SelectObject((CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMS))))
					{
						if ((nSpacing = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmHeight / 10, 1) : -1) >= 0)
						{
							for (rCalc.SetRect(rCalc.left, (!nColumn) ? (rCalc.top + nSpacing) : rCalc.top, rCalc.right, (!nColumn) ? (rCalc.top + nSpacing + tmFont.tmHeight*((rClip.bottom - (rCalc.top + nSpacing)) / tmFont.tmHeight)) : (rCalc.top + tmFont.tmHeight*((rClip.bottom - rCalc.top) / tmFont.tmHeight))), nFormat = DT_LEFT | DT_NOPREFIX | DT_WORDBREAK, nColor = cDC.GetTextColor(); (pAttribute = pAttributes.GetAt(nLine)); )
							{
								pAttribute->GetColumnFormat(nColumn, nFormat);
								pAttribute->GetColumnColor(nColumn, nColor);
								break;
							}
							for (szColumn = (!szColumnsText.GetAt(nColumn).IsEmpty()) ? (((nPos = (szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)) ? szColumnsText.GetAt(nColumn).Find(CTCOnBoardMemoryImagesSummaryTextView::GetSymbolDelimiter()) : -1) >= 0) ? (szColumnsText.GetAt(nColumn).Left(nPos)) : (szColumnsText.GetAt(nColumn) + SPACE)) : EMPTYSTRING, nFormat = (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage && nPage <= nToPage))) ? nFormat : (nFormat | DT_CALCRECT), nOldColor = cDC.SetTextColor((cDC.GetDeviceCaps(NUMCOLORS) > 2) ? nColor : cDC.GetTextColor()), sizeSymbol.cx = sizeSymbol.cy = tmFont.tmHeight, nHeight[1] = cDC.DrawText(szColumn, (rItem = CRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.bottom)), nFormat); szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR); )
							{
								DrawPrintDocSymbol(cDC, (rItem = ((nFormat & DT_CALCRECT) != DT_CALCRECT  &&  rItem.top + sizeSymbol.cy <= rCalc.bottom) ? CRect(rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2, rItem.top, rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2 + sizeSymbol.cx, rItem.top + sizeSymbol.cy) : CRect(0, 0, 0, 0)), (szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_INFORMATION)) >= 0) ? IDP_TCONBOARDMEMORYIMAGESINFORMATION : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_WARNING)) >= 0) ? IDP_TCONBOARDMEMORYIMAGESWARNING : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCONBOARDMEMORYIMAGES_LIST_ALERT_ERROR)) >= 0) ? IDP_TCONBOARDMEMORYIMAGESERROR : -1)), pSymbols, nSymbolIDs);
								break;
							}
							nHeight[0] = max(max(nHeight[0], sizeSymbol.cy), nHeight[1]);
							cDC.SetTextColor(nOldColor);
							cDC.SelectObject(pOldFont);
						}
						else
						{
							cDC.SelectObject(pOldFont);
							break;
						}
					}
					else break;
				}
				if (((rCalc.top + nHeight[1] > rCalc.bottom || bOverlap) && nColumn == nColumns - 1) || !rClip.Height())
				{
					if (nPages > 0 && (nPage == nPages || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage == nToPage)))
					{
						nPages = nPage;
						nLines = nLine;
						nColumns = nColumn;
						break;
					}
					if (bOutput && (!nPages || ((!nPage || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage || nPage > nToPage)) || cDC.EndPage() >= 0) && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage - 1 || nPage >= nToPage)) || (((((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage) && nPage > 0) || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage != nFromPage - 1)) || StartPrintJob(cDC)) && cDC.StartPage() >= 0)))))
					{
						if (cDC.SelectClipRgn(&rgnArea) != ERROR  &&  DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, pszTitle, szColumns, pFonts, nTabs, nPages, (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage - 1 && nPage < nToPage))) ? (nPage + 1) : 0, rClip) && cDC.IntersectClipRect(rClip) != ERROR)
						{
							rCalc.SetRect(rClip.left, rClip.top - rCalc.Height() - nSpacing, rClip.right, rClip.bottom);
							bOverlap = FALSE;
							bOutput = FALSE;
							nColumn = -1;
							nPage++;
							continue;
						}
					}
					break;
				}
				bOverlap = (rCalc.top + nHeight[1] > rCalc.bottom) ? TRUE : bOverlap;
			}
			if (nLine < nLines  &&  nColumn == nColumns)
			{
				rCalc.DeflateRect(0, nHeight[0], 0, 0);
				continue;
			}
			break;
		}
		if (nPages >= 0)
		{
			if (nLine == nLines)
			{
				if (!szContents.GetSize())
				{
					if (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nFromPage > 1)
					{
						nPages = nPage = 0;
						break;
					}
					if (StartPrintJob(cDC))
					{
						if (cDC.StartPage() >= 0)
						{
							if (DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, pszTitle, szColumns, pFonts, nTabs, 1, 1, rClip))
							{
								nPages = nPage = 1;
								break;
							}
							cDC.EndPage();
						}
						EndPrintJob(cDC);
					}
					nPages = -1;
					break;
				}
				if (!nPages)
				{
					if (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || nPage >= nFromPage)
					{
						nPages = nPage;
						nPage = 0;
						continue;
					}
					nPages = nPage = 0;
				}
			}
			else
			{
				if (nPages > 0) cDC.AbortDoc();
				nPages = -1;
			}
		}
		break;
	}
	return(((!nPages || (nPages > 0 && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage < nFromPage) || (cDC.EndPage() >= 0 && EndPrintJob(cDC))))) && nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::EndPrintJob(CDC &cDC)
{
	return((cDC.EndDoc() >= 0) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocPage(CDC &cDC, CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, CONST RECT &rtMargin, BOOL bMetric, LPCTSTR pszTitle, CONST CStringArray &szColumns, CONST CPtrArray &pFonts, CONST CUIntArray &nTabs, INT nPages, INT nPage, LPRECT prClip)
{
	return((CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(prClip) != ERROR  &&  DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocSubTitle(cDC, prClip, GetPrintDocSubTitle(pszTitle), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUBTITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocListItemsTitle(cDC, prClip, szColumns, (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_SUMMARYLISTITEMSTITLE), nTabs, (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCONBOARDMEMORYIMAGES_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocSubTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocListItemsTitle(CDC &cDC, LPRECT prClip, CONST CStringArray &szColumns, CFont *pFont, CONST CUIntArray &nTabs, BOOL bCalc)
{
	CSize  rCalc;
	CFont  *pOldFont;
	CString  szItems;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		szItems = GetPrintDocListItemsTitle(szColumns);
		rCalc = (!bCalc) ? cDC.TabbedTextOut(prClip->left, prClip->top + cDC.GetTextExtent(szItems, szItems.GetLength()).cy, szItems, (INT)nTabs.GetSize(), (LPINT)nTabs.GetData(), prClip->left) : CSize(nTabs.GetAt(nTabs.GetSize() - 1), cDC.GetTextExtent(szItems, szItems.GetLength()).cy);
		prClip->top += 2 * rCalc.cy;
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocSymbol(CDC &cDC, LPRECT prClip, UINT nSymbolID, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nIDs;
	CImage  *pSymbol;

	for (nID = 0, nIDs = (nSymbolID != (UINT)-1) ? (INT)nSymbolIDs.GetSize() : -1; nID < nIDs; nID++)
	{
		if (nSymbolIDs.GetAt(nID) == nSymbolID) break;
		continue;
	}
	if ((pSymbol = (nID < nIDs) ? (CImage *)pSymbols.GetAt(nID) : (CImage *)NULL) && prClip->right - prClip->left > 0 && prClip->bottom - prClip->top > 0)
	{
		pSymbol->Draw(cDC.GetSafeHdc(), prClip->left, prClip->top, prClip->right - prClip->left, prClip->bottom - prClip->top);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCOnBoardMemoryImagesWnd::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocSubTitle(LPCTSTR pszTitle) CONST
{
	return pszTitle;
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocDetails(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	UINT  nCount;
	UINT  nRange[2];
	UINT  nStopCount;
	CString  szEvent;
	CString  szDetails[2];
	CTimeKey  tStopTime;

	for (; pJobInfo->GetPrintByRange(nRange[0], nRange[1]); )
	{
		szDetails[0].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYRANGE), nRange[0], nRange[1]);
		break;
	}
	if (pJobInfo->GetPrintBySide(nCount))
	{
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_FIRSTSIDE) szDetails[0].Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYFIRSTITEM), nCount);
		if (pJobInfo->GetPrintMode() & TCONBOARDMEMORYIMAGES_PRINT_LASTSIDE) szDetails[0].Format((nCount > 1) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTSIDE) : STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTBYLASTITEM), nCount);
	}
	for (szDetails[0] = (szDetails[0].IsEmpty()) ? STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTALL) : szDetails[0]; pJobInfo->GetPrintAtEvent(szEvent, tStopTime) || pJobInfo->GetPrintAtEvent(szEvent, nStopCount); )
	{
		szDetails[1].Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTATEVENT), (LPCTSTR)szEvent);
		szDetails[0] = szDetails[0] + CR + EOL + szDetails[1];
		break;
	}
	if (pJobInfo->GetPrintAtDownload(tStopTime) || pJobInfo->GetPrintAtDownload(nStopCount))
	{
		szDetails[1] = STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_PRINTATDOWNLOAD);
		szDetails[0] = szDetails[0] + CR + EOL + szDetails[1];
	}
	return szDetails[0];
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocComments(CONST CTCOnBoardMemoryImagesPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocListItemsTitle(CONST CStringArray &szColumns) CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szItems;

	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		szItems += (nColumn > 0) ? CString(TAB) : EMPTYSTRING;
		szItems += szColumns.GetAt(nColumn);
	}
	return szItems;
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCOnBoardMemoryImagesWnd::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCONBOARDMEMORYIMAGES_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

INT CTCOnBoardMemoryImagesWnd::ExtractPrintDocText(LPCTSTR pszText, CStringArray &szColumnsText) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szText;

	for (nPos[0] = 0, nLength = lstrlen(pszText), szColumnsText.RemoveAll(); nPos[0] <= nLength; nPos[0] += ++nPos[1])
	{
		if ((nPos[1] = (INT)_tcscspn((szText = pszText + nPos[0]), CString(CTextView::GetColumnDelimiter()))) < nLength - nPos[0])
		{
			szColumnsText.Add((nPos[1] > 0) ? szText.Left(nPos[1]) : EMPTYSTRING);
			continue;
		}
		szColumnsText.Add(szText);
		break;
	}
	return((INT)szColumnsText.GetSize());
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocSubTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocListItemsFonts(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CFont &cTitleFont, CFont &cItemsFont) CONST
{
	INT  nWidth;
	INT  nHeight;
	CFont  cFont[2];
	CUIntArray  nTabs;

	for (nHeight = max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))); nHeight < 0; nHeight++)
	{
		if (cFont[0].CreateFont(nHeight, 0, pTitleFont->lfEscapement, pTitleFont->lfOrientation, FW_BOLD, pTitleFont->lfItalic, pTitleFont->lfUnderline, pTitleFont->lfStrikeOut, pTitleFont->lfCharSet, pTitleFont->lfOutPrecision, pTitleFont->lfClipPrecision, pTitleFont->lfQuality, pTitleFont->lfPitchAndFamily, pTitleFont->lfFaceName))
		{
			if (cFont[1].CreateFont((4 * nHeight) / 5, 0, pItemsFont->lfEscapement, pItemsFont->lfOrientation, pItemsFont->lfWeight, pItemsFont->lfItalic, pItemsFont->lfUnderline, pItemsFont->lfStrikeOut, pItemsFont->lfCharSet, pItemsFont->lfOutPrecision, pItemsFont->lfClipPrecision, pItemsFont->lfQuality, pItemsFont->lfPitchAndFamily, pItemsFont->lfFaceName))
			{
				if (CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[0], &cFont[1], nTabs) > 0)
				{
					if ((nWidth = nTabs.GetAt(nTabs.GetSize() - 1)) > rArea.right - rArea.left)
					{
						nHeight = (nHeight*(rArea.right - rArea.left)) / nWidth - 1;
						cFont[0].DeleteObject();
						cFont[1].DeleteObject();
						continue;
					}
					cTitleFont.Attach(cFont[0].Detach());
					cItemsFont.Attach(cFont[1].Detach());
					break;
				}
				cFont[1].DeleteObject();
			}
			cFont[0].DeleteObject();
		}
	}
	return((cTitleFont.GetSafeHandle() && cItemsFont.GetSafeHandle()) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

INT CTCOnBoardMemoryImagesWnd::CalcPrintDocTitleWidth(CDC &cDC, LPCTSTR pszColumn, CFont *pTitleFont) CONST
{
	INT  nWidth;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pTitleFont)))
	{
		nWidth = cDC.GetTextExtent(pszColumn, lstrlen(pszColumn)).cx;
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}
INT CTCOnBoardMemoryImagesWnd::CalcPrintDocTitleWidth(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CFont *pTitleFont, CFont *pItemsFont, CUIntArray &nTabs) CONST
{
	INT  nIndent;
	INT  nColumn;
	INT  nColumns;
	INT  nWidth[2];
	CSize  sizeSymbol;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;
	CStringArray  szLines;

	for (nIndent = 0, sizeSymbol.cx = sizeSymbol.cy = 0, nTabs.RemoveAll(); (pOldFont = cDC.SelectObject(pTitleFont)); )
	{
		nIndent = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmAveCharWidth, nIndent) : nIndent;
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		if (cDC.GetTextMetrics(&tmFont))
		{
			sizeSymbol.cx = tmFont.tmHeight;
			sizeSymbol.cy = tmFont.tmHeight;
			nIndent = max(tmFont.tmAveCharWidth, nIndent);
		}
		cDC.SelectObject(pOldFont);
	}
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), szLines.Copy(szContents); nColumn < nColumns; nColumn++)
	{
		for (nWidth[0] = CalcPrintDocTitleWidth(cDC, szColumns.GetAt(nColumn), pTitleFont), nWidth[1] = CalcPrintDocColumnWidth(cDC, rArea, szColumns.GetAt(nColumn), szLines, pItemsFont); szColumns.GetAt(nColumn) == STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR); )
		{
			nWidth[1] += 3 * sizeSymbol.cx / 2;
			break;
		}
		nTabs.Add((nTabs.GetSize() > 0) ? (2 * nIndent + nTabs.GetAt(nTabs.GetSize() - 1) + max(nWidth[0], nWidth[1])) : (2 * nIndent + max(nWidth[0], nWidth[1])));
	}
	if (nTabs.GetSize() > 0)
	{
		nTabs.SetAt(nTabs.GetSize() - 1, nTabs.GetAt(nTabs.GetSize() - 1) - nIndent);
		return((INT)nTabs.GetSize());
	}
	return 0;
}

INT CTCOnBoardMemoryImagesWnd::CalcPrintDocColumnWidth(CDC &cDC, CONST RECT &rArea, LPCTSTR pszColumn, CStringArray &szContents, CFont *pItemsFont) CONST
{
	INT  nPos;
	INT  nLine;
	INT  nLines;
	INT  nWidth;
	CRect  rColumn;
	CFont  *pOldFont;
	CString  szLine;

	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		for (nLine = 0, nLines = (INT)szContents.GetSize(), nWidth = 0; nLine < nLines; nLine++)
		{
			if ((nPos = szContents.GetAt(nLine).Find(CTextView::GetColumnDelimiter())) >= 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = (!lstrcmp(pszColumn, STRING(IDS_TCONBOARDMEMORYIMAGES_TITLEITEM_PROCESSOR)) && szContents.GetAt(nLine).Left(nPos).Find(CTCOnBoardMemoryImagesSummaryTextView::GetSymbolDelimiter()) >= 0) ? szContents.GetAt(nLine).Left(nPos).Left(szContents.GetAt(nLine).Left(nPos).Find(CTCOnBoardMemoryImagesSummaryTextView::GetSymbolDelimiter())) : szContents.GetAt(nLine).Left(nPos))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, szContents.GetAt(nLine).Mid(nPos + 1));
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
			if (szContents.GetAt(nLine).GetLength() > 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = szContents.GetAt(nLine))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, EMPTYSTRING);
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
		}
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}

BOOL CTCOnBoardMemoryImagesWnd::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::SetLayoutInfo(CONST RECT &rPropertiesToolBar, CONST RECT &rOperationsToolBar, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizeSummaryPane, CONST SIZE &sizeDetailsPane, CONST LOGFONT *pSummaryPaneTitleFont, CONST LOGFONT *pSummaryPaneItemsFont, CONST LOGFONT *pDetailsPaneTitleFont, CONST LOGFONT *pDetailsPaneItemsFont, CONST LOGFONT *pDetailsPaneTableTitleFont, CONST LOGFONT *pDetailsPaneTableItemsFont, COLORREF nDetailsPaneTableTitleFontColor, COLORREF nDetailsPaneTableItemsFontColor, COLORREF nDetailsPaneTableTitleBackgroundColor, COLORREF nDetailsPaneTableItemsBackgroundColor, INT nIndex, INT nPage, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	CPane  *pPane;
	CRect  rToolBar[2];
	CDockSite  *pDockSite;
	CDockingPanesRow  *pPanesRow[2];

	if ((pDockSite = GetDockingManager()->FindDockSite(CBRS_ALIGN_TOP, TRUE)))
	{
		for (rToolBar[0] = rPropertiesToolBar, rToolBar[1] = rOperationsToolBar, ScreenToClient(&rToolBar[0]), ScreenToClient(&rToolBar[1]); rPropertiesToolBar.top != rOperationsToolBar.top && pDockSite->GetDockSiteRowsList().GetCount() == 1; )
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? pDockSite->AddRow(pDockSite->GetDockSiteRowsList().GetTailPosition(), (rPropertiesToolBar.top > rOperationsToolBar.top) ? (rPropertiesToolBar.bottom - rPropertiesToolBar.top) : (rOperationsToolBar.bottom - rOperationsToolBar.top)) : (CDockingPanesRow *)NULL))
			{
				pPanesRow[0]->RemovePane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
				pPanesRow[1]->AddPane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top], DM_RECT, &rToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
			}
			break;
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top  &&  pDockSite->GetDockSiteRowsList().GetCount() > 1)
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetTailPosition()) : (CDockingPanesRow *)NULL))
			{
				if ((pPane = (CPane *)pPanesRow[1]->GetPaneList().GetAt(pPanesRow[1]->GetPaneList().GetHeadPosition())))
				{
					pPanesRow[1]->RemovePane(pPane);
					pPanesRow[0]->AddPane(pPane, DM_RECT, &rToolBar[pPane->GetSafeHwnd() == m_wndToolBar[1].GetSafeHwnd()]);
				}
			}
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top) DockPaneLeftOf(&m_wndToolBar[rPropertiesToolBar.left > rOperationsToolBar.left], &m_wndToolBar[rPropertiesToolBar.left < rOperationsToolBar.left]);
		m_wndToolBar[0].CWnd::MoveWindow(rToolBar[0]);
		m_wndToolBar[1].CWnd::MoveWindow(rToolBar[1]);
	}
	return((m_wndView.SetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, nColumns, nWidths, sizeSummaryPane) && m_wndView.SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, pSummaryPaneTitleFont) && m_wndView.SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, pSummaryPaneItemsFont) && m_wndView.SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, pDetailsPaneTitleFont) && m_wndView.SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, pDetailsPaneItemsFont) && m_wndView.SetTablesOutline(pDetailsPaneTableTitleFont, pDetailsPaneTableItemsFont, nDetailsPaneTableTitleFontColor, nDetailsPaneTableItemsFontColor, nDetailsPaneTableTitleBackgroundColor, nDetailsPaneTableItemsBackgroundColor) && m_wndView.SetLayoutInfo(nIndex, nPage, pHorzScrollInfo, pVertScrollInfo)) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::GetLayoutInfo(RECT &rPropertiesToolBar, RECT &rOperationsToolBar, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizeSummaryPane, CSize &sizeDetailsPane, LOGFONT *pSummaryPaneTitleFont, LOGFONT *pSummaryPaneItemsFont, LOGFONT *pDetailsPaneTitleFont, LOGFONT *pDetailsPaneItemsFont, LOGFONT *pDetailsPaneTableTitleFont, LOGFONT *pDetailsPaneTableItemsFont, COLORREF &nDetailsPaneTableTitleFontColor, COLORREF &nDetailsPaneTableItemsFontColor, COLORREF &nDetailsPaneTableTitleBackgroundColor, COLORREF &nDetailsPaneTableItemsBackgroundColor, INT &nIndex, INT &nPage, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	CRect  rToolBar[2];

	m_wndToolBar[0].GetVirtualRect(rToolBar[0]);
	m_wndToolBar[1].GetVirtualRect(rToolBar[1]);
	m_wndToolBar[0].GetWindowRect(&rPropertiesToolBar);
	m_wndToolBar[1].GetWindowRect(&rOperationsToolBar);
	SetRect(&rPropertiesToolBar, rPropertiesToolBar.left, rPropertiesToolBar.top, rPropertiesToolBar.left + rToolBar[0].Width(), rPropertiesToolBar.top + rToolBar[0].Height());
	SetRect(&rOperationsToolBar, rOperationsToolBar.left, rOperationsToolBar.top, rOperationsToolBar.left + rToolBar[1].Width(), rOperationsToolBar.top + rToolBar[1].Height());
	return((m_wndView.GetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, nColumns, nWidths, sizeSummaryPane) && m_wndView.GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, pSummaryPaneTitleFont) && m_wndView.GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, pSummaryPaneItemsFont) && m_wndView.GetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, pDetailsPaneTitleFont) && m_wndView.GetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, pDetailsPaneItemsFont) && m_wndView.GetTablesOutline(pDetailsPaneTableTitleFont, pDetailsPaneTableItemsFont, nDetailsPaneTableTitleFontColor, nDetailsPaneTableItemsFontColor, nDetailsPaneTableTitleBackgroundColor, nDetailsPaneTableItemsBackgroundColor) && m_wndView.GetLayoutInfo(nIndex, nPage, pHorzScrollInfo, pVertScrollInfo)) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesWnd::RecalcLayout(CDisplayToolBar *pToolBar)
{
	if (IsWindow(m_wndView.GetSafeHwnd()))
	{
		m_wndView.RecalcLayout();
		return;
	}
}
void CTCOnBoardMemoryImagesWnd::RecalcLayout(BOOL bNotify)
{
	CDisplayWnd::RecalcLayout(bNotify);
}

BOOL CTCOnBoardMemoryImagesWnd::Lock()
{
	return((GetTCService()->Lock() && CDisplayWnd::Lock()) ? TRUE : FALSE);
}

BOOL CTCOnBoardMemoryImagesWnd::Unlock()
{
	return((CDisplayWnd::Unlock() && GetTCService()->Unlock()) ? TRUE : FALSE);
}

BEGIN_MESSAGE_MAP(CTCOnBoardMemoryImagesWnd, CDisplayWnd)
	//{{AFX_MSG_MAP(CTCOnBoardMemoryImagesWnd)
	ON_WM_CREATE()
	ON_WM_GETMINMAXINFO()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_MDIACTIVATE()
	ON_WM_SETFOCUS()
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESSETTINGS, OnSettings)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESACKNOWLEDGE, OnAcknowledge)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESPRINT, OnPrint)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESTRANSACT, OnTableTransact)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESDELETE, OnTableDelete)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESIMPORT, OnTableImport)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESEXPORT, OnTableExport)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWABOVE, OnTableInsertRowAbove)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWBELOW, OnTableInsertRowBelow)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNBEFORE, OnTableInsertColumnBefore)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNAFTER, OnTableInsertColumnAfter)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESCLEARTABLEROW, OnTableClearRow)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESDELETETABLEROW, OnTableDeleteRow)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESDELETETABLECOLUMN, OnTableDeleteColumn)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESCOPYTABLEROW, OnTableCopyRow)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESPASTETABLEROW, OnTablePasteRow)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESDISCARDTABLE, OnTableDiscard)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESRESETTABLE, OnTableReset)
	ON_COMMAND(IDM_TCONBOARDMEMORYIMAGESPRINTTABLE, OnTablePrint)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESSETTINGS, OnUpdateSettings)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESACKNOWLEDGE, OnUpdateAcknowledge)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESPRINT, OnUpdatePrint)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESTRANSACT, OnUpdateTableTransact)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESDELETE, OnUpdateTableDelete)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESIMPORT, OnUpdateTableImport)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESEXPORT, OnUpdateTableExport)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWABOVE, OnUpdateTableInsertRowAbove)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESINSERTTABLEROWBELOW, OnUpdateTableInsertRowBelow)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNBEFORE, OnUpdateTableInsertColumnBefore)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESINSERTTABLECOLUMNAFTER, OnUpdateTableInsertColumnAfter)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESCLEARTABLEROW, OnUpdateTableClearRow)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESDELETETABLEROW, OnUpdateTableDeleteRow)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESDELETETABLECOLUMN, OnUpdateTableDeleteColumn)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESCOPYTABLEROW, OnUpdateTableCopyRow)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESPASTETABLEROW, OnUpdateTablePasteRow)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESDISCARDTABLE, OnUpdateTableDiscard)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESRESETTABLE, OnUpdateTableReset)
	ON_UPDATE_COMMAND_UI(IDM_TCONBOARDMEMORYIMAGESPRINTTABLE, OnUpdateTablePrint)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MESSAGEPANE, OnUpdateStatusBarMessagePane)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_MODEPANE, OnUpdateStatusBarModePane)
	ON_UPDATE_COMMAND_UI(ID_TCONBOARDMEMORYIMAGES_STATUSBAR_DBMSPANE, OnUpdateStatusBarDBMSPane)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCOnBoardMemoryImagesWnd message handlers

int CTCOnBoardMemoryImagesWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CDisplayWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (EnableDocking(CBRS_ALIGN_TOP), m_bEnableFloatingBars = TRUE; CreateToolBars() && CreateStatusBar() && CreateView() && LoadAccelTable(MAKEINTRESOURCE(IDR_TCONBOARDMEMORYIMAGESFRAME)); )
		{
			UpdateBars();
			return 0;
		}
	}
	return -1;
}

void CTCOnBoardMemoryImagesWnd::OnGetMinMaxInfo(MINMAXINFO *lpMMI)
{
	CRect  rView;
	CRect  rStatusBar;

	for (rView.SetRectEmpty(); IsWindow(m_wndView.GetSafeHwnd()); )
	{
		m_wndView.GetWindowRect(rView);
		ScreenToClient(rView);
		rView.SetRect(rView.left, rView.top, rView.left + m_wndView.GetTrackSize().cx, rView.top + m_wndView.GetTrackSize().cy);
		break;
	}
	for (rStatusBar.SetRectEmpty(); IsWindow(m_wndStatusBar.GetSafeHwnd()); )
	{
		m_wndStatusBar.GetWindowRect(rStatusBar);
		break;
	}
	lpMMI->ptMinTrackSize.x = max(lpMMI->ptMinTrackSize.x, 2 * GetSystemMetrics(SM_CXFRAME) + rView.Width());
	lpMMI->ptMinTrackSize.y = max(lpMMI->ptMinTrackSize.y, 2 * (GetSystemMetrics(SM_CYFRAME) + GetSystemMetrics(SM_CYEDGE)) + GetSystemMetrics(SM_CYCAPTION) + rView.top + rView.Height() + rStatusBar.Height());
	CDisplayWnd::OnGetMinMaxInfo(lpMMI);
}

void CTCOnBoardMemoryImagesWnd::OnSize(UINT nType, int cx, int cy)
{
	CDisplayWnd::OnSize(nType, cx, cy);
	m_wndView.RecalcLayout(TRUE);
}

BOOL CTCOnBoardMemoryImagesWnd::OnEraseBkgnd(CDC *pDC)
{
	if (!IsInitialized())
	{
		m_wndView.UpdateWindow();
		m_wndToolBar[0].UpdateWindow();
		m_wndToolBar[1].UpdateWindow();
		m_wndStatusBar.UpdateWindow();
	}
	return TRUE;
}

void CTCOnBoardMemoryImagesWnd::OnMDIActivate(BOOL bActivate, CWnd *pActivateWnd, CWnd *pDeactivateWnd)
{
	m_wndView.UpdateLayout(bActivate);
	CDisplayWnd::OnMDIActivate(bActivate, pActivateWnd, pDeactivateWnd);
}

void CTCOnBoardMemoryImagesWnd::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd->GetSafeHwnd() == m_wndView.GetSafeHwnd())
	{
		GetParent()->SetFocus();
		return;
	}
	if (m_wndView.GetProcessorCount() > 0)
	{
		m_wndView.SetFocus();
		return;
	}
	CDisplayWnd::OnSetFocus(pOldWnd);
}

BOOL CTCOnBoardMemoryImagesWnd::OnCloseSettingsDialog(UINT nCode)
{
	BOOL  bDumps[2];
	BOOL  bToolTips;
	BOOL  bLogEvent;
	UINT  nLogPolicy;
	UINT  nLogCount;
	LOGFONT  sTitleFont[2];
	LOGFONT  sItemsFont[2];
	LOGFONT  sTableFont[2];
	CString  szLogFileName[2];
	COLORREF  nTableColor[4];
	DWORDLONG  dwLogRetention;
	CTimeSpan  tLogRetention;
	CTimeSpan  tDumpsDelay;
	CUIntArray  nColumns;
	CTCOnBoardMemoryImagesPrintJobs  pJobs;
	CTCOnBoardMemoryImagesProcessorItems  pProcessors;

	if (nCode == IDOK)
	{
		if (m_dlgSettings.IsLayoutModified())
		{
			m_dlgSettings.GetLayout(nColumns);
			m_dlgSettings.GetLayoutToolTipMode(bToolTips);
			m_dlgSettings.GetLayoutTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sTitleFont[0]);
			m_dlgSettings.GetLayoutTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sTitleFont[1]);
			m_dlgSettings.GetLayoutItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sItemsFont[0]);
			m_dlgSettings.GetLayoutItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sItemsFont[1]);
			m_dlgSettings.GetLayoutTablesOutline(&sTableFont[0], &sTableFont[1], nTableColor[0], nTableColor[1], nTableColor[2], nTableColor[3]);
			if (!SetLayout(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, nColumns) || !SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sTitleFont[0]) || !SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_SUMMARY, &sItemsFont[0]) || !SetPaneTitleFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sTitleFont[1]) || !SetPaneItemsFont(TCONBOARDMEMORYIMAGES_PANE_DETAILS, &sItemsFont[1]) || !SetTablesOutline(&sTableFont[0], &sTableFont[1], nTableColor[0], nTableColor[1], nTableColor[2], nTableColor[3]) || !EnableToolTipMode(bToolTips)) return FALSE;
		}
		if (m_dlgSettings.IsDumpsModified())
		{
			m_dlgSettings.GetDumpsVersioning(pProcessors);
			m_dlgSettings.GetDumpsFlashBehavior(tDumpsDelay, bDumps[0], bDumps[1]);
			if (!SetProcessors(pProcessors, FALSE) || !SetDBMSBehavior(tDumpsDelay, bDumps[0], bDumps[1])) return FALSE;
		}
		if (m_dlgSettings.IsLoggingModified())
		{
			m_dlgSettings.GetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent);
			if (!SetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent)) return FALSE;
		}
		if (m_dlgSettings.IsPrintingModified())
		{
			m_dlgSettings.GetPrintJobs(pJobs);
			if (!SetPrintJobs(pJobs)) return FALSE;
		}
		UpdateContents();
		UpdateAllPanes();
	}
	return TRUE;
}

void CTCOnBoardMemoryImagesWnd::OnSettings()
{
	ReportEvent((m_dlgSettings.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardMemoryImagesWnd::OnAcknowledge()
{
	CHourglassCursor  cCursor;

	DoAcknowledgeProcessor();
}

void CTCOnBoardMemoryImagesWnd::OnPrint()
{
	CHourglassCursor  cCursor;

	ReportEvent((!Print()) ? SYSTEM_WARNING_DISPLAY_PRINT_FAILURE : SYSTEM_NOERROR);
}

void CTCOnBoardMemoryImagesWnd::OnTableTransact()
{
	CHourglassCursor  cCursor;

	DoTransactOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesWnd::OnTableDelete()
{
	CHourglassCursor  cCursor;

	DoDeleteOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesWnd::OnTableImport()
{
	CHourglassCursor  cCursor;

	DoImportOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesWnd::OnTableExport()
{
	CHourglassCursor  cCursor;

	DoExportOnBoardMemoryImage();
}

void CTCOnBoardMemoryImagesWnd::OnTableInsertRowAbove()
{
	CHourglassCursor  cCursor;

	DoInsertOnBoardMemoryImageTableRowAbove();
}

void CTCOnBoardMemoryImagesWnd::OnTableInsertRowBelow()
{
	CHourglassCursor  cCursor;

	DoInsertOnBoardMemoryImageTableRowBelow();
}

void CTCOnBoardMemoryImagesWnd::OnTableInsertColumnBefore()
{
	CHourglassCursor  cCursor;

	DoInsertOnBoardMemoryImageTableColumnBefore();
}

void CTCOnBoardMemoryImagesWnd::OnTableInsertColumnAfter()
{
	CHourglassCursor  cCursor;

	DoInsertOnBoardMemoryImageTableColumnAfter();
}

void CTCOnBoardMemoryImagesWnd::OnTableClearRow()
{
	CHourglassCursor  cCursor;

	DoClearOnBoardMemoryImageTableRow();
}

void CTCOnBoardMemoryImagesWnd::OnTableDeleteRow()
{
	CHourglassCursor  cCursor;

	DoDeleteOnBoardMemoryImageTableRow();
}

void CTCOnBoardMemoryImagesWnd::OnTableDeleteColumn()
{
	CHourglassCursor  cCursor;

	DoDeleteOnBoardMemoryImageTableColumn();
}

void CTCOnBoardMemoryImagesWnd::OnTableCopyRow()
{
	CHourglassCursor  cCursor;

	DoCopyOnBoardMemoryImageTableRow();
}

void CTCOnBoardMemoryImagesWnd::OnTablePasteRow()
{
	CHourglassCursor  cCursor;

	DoPasteOnBoardMemoryImageTableRow();
}

void CTCOnBoardMemoryImagesWnd::OnTableDiscard()
{
	CHourglassCursor  cCursor;

	DoDiscardOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesWnd::OnTableReset()
{
	CHourglassCursor  cCursor;

	DoResetOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesWnd::OnTablePrint()
{
	CHourglassCursor  cCursor;

	DoPrintOnBoardMemoryImageTable();
}

void CTCOnBoardMemoryImagesWnd::OnUpdateSettings(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsWindow(m_dlgSettings.GetSafeHwnd()));
}

void CTCOnBoardMemoryImagesWnd::OnUpdateAcknowledge(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanAcknowledgeProcessor());
}

void CTCOnBoardMemoryImagesWnd::OnUpdatePrint(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((IsInitialized() && IsDefaultPrinterAvailable() && CanPrint()) ? TRUE : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableTransact(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanTransactOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableDelete(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanDeleteOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableImport(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanImportOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableExport(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanExportOnBoardMemoryImage()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableInsertRowAbove(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanInsertOnBoardMemoryImageTableRowAbove()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableInsertRowBelow(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanInsertOnBoardMemoryImageTableRowBelow()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableInsertColumnBefore(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanInsertOnBoardMemoryImageTableColumnBefore()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableInsertColumnAfter(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanInsertOnBoardMemoryImageTableColumnAfter()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableClearRow(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanClearOnBoardMemoryImageTableRow()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableDeleteRow(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanDeleteOnBoardMemoryImageTableRow()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableDeleteColumn(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanDeleteOnBoardMemoryImageTableColumn()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableCopyRow(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanCopyOnBoardMemoryImageTableRow()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTablePasteRow(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanPasteOnBoardMemoryImageTableRow()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableDiscard(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanDiscardOnBoardMemoryImageTable()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTableReset(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanResetOnBoardMemoryImageTable()) ? CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateTablePrint(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((CanPrintOnBoardMemoryImageTable()) ? (CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TCONBOARDSOFTWARESERVICES_CHANGE)) : FALSE);
}

void CTCOnBoardMemoryImagesWnd::OnUpdateStatusBarMessagePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCOnBoardMemoryImagesWnd::OnUpdateStatusBarModePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCOnBoardMemoryImagesWnd::OnUpdateStatusBarDBMSPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}
