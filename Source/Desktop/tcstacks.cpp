// TCSTACKS.CPP : Telecommand Stacks Related Interface Definition.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the telecommand stacks
// related interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 2007/04/04 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#include "SatView.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


static UINT BASED_CODE nTCManualStackMenuImageIDs[] =
{
	IDM_TCMANUALSTACKSETTINGS,
	IDM_TCMANUALSTACKOPEN,
	IDM_TCMANUALSTACKSAVE,
	IDM_TCMANUALSTACKLOAD,
	IDM_TCMANUALSTACKPROPERTIES,
	IDM_TCMANUALSTACKINSERTBEFORE,
	IDM_TCMANUALSTACKINSERTAFTER,
	IDM_TCMANUALSTACKMOVEUP,
	IDM_TCMANUALSTACKMOVEDOWN,
	IDM_TCMANUALSTACKDELETE,
	IDM_TCMANUALSTACKSTART,
	IDM_TCMANUALSTACKSUSPEND,
	IDM_TCMANUALSTACKSTOP,
	IDM_TCMANUALSTACKARM,
	IDM_TCMANUALSTACKGO,
	IDM_TCMANUALSTACKUNDISPATCH,
	IDM_TCMANUALSTACKACKNOWLEDGE,
	IDM_TCMANUALSTACKRELOAD,
	IDM_TCMANUALSTACKRESETINTERLOCKS,
	IDM_TCMANUALSTACKINTERLOCKCHECKS,
	IDM_TCMANUALSTACKRELEASEWAITMODE,
	IDM_TCMANUALSTACKAUTOREJECTIONMODE,
	IDM_TCMANUALSTACKFULLVIEWMODE,
	IDM_TCMANUALSTACKPRINT
};

static UINT BASED_CODE nTCManualStackStatusBarIndicators[] =
{
	ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE,
	ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE,
	ID_TCMANUALSTACK_STATUSBAR_PTVPANE,
	ID_TCMANUALSTACK_STATUSBAR_PEVPANE,
	ID_TCMANUALSTACK_STATUSBAR_CEVPANE,
	ID_TCMANUALSTACK_STATUSBAR_STATEPANE,
	ID_TCMANUALSTACK_STATUSBAR_MODEPANE
};


static UINT BASED_CODE nTCAutomaticStackMenuImageIDs[] =
{
	IDM_TCAUTOMATICSTACKSETTINGS,
	IDM_TCAUTOMATICSTACKOPEN,
	IDM_TCAUTOMATICSTACKSAVE,
	IDM_TCAUTOMATICSTACKIMPORT,
	IDM_TCAUTOMATICSTACKSYNCHRONIZE,
	IDM_TCAUTOMATICSTACKPROPERTIES,
	IDM_TCAUTOMATICSTACKDELETE,
	IDM_TCAUTOMATICSTACKSTART,
	IDM_TCAUTOMATICSTACKSUSPEND,
	IDM_TCAUTOMATICSTACKSTOP,
	IDM_TCAUTOMATICSTACKACKNOWLEDGE,
	IDM_TCAUTOMATICSTACKRESETINTERLOCKS,
	IDM_TCAUTOMATICSTACKINTERLOCKCHECKS,
	IDM_TCAUTOMATICSTACKSUBSYSTEMCHECKS,
	IDM_TCAUTOMATICSTACKRELEASEWAITMODE,
	IDM_TCAUTOMATICSTACKAUTOREJECTIONMODE,
	IDM_TCAUTOMATICSTACKFULLVIEWMODE,
	IDM_TCAUTOMATICSTACKPRINT
};

static UINT BASED_CODE nTCAutomaticStackStatusBarIndicators[] =
{
	ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE,
	ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE
};



/////////////////////////////////////////////////////////////////////////////
// CTCSavedStack

CTCSavedStack::CTCSavedStack() : CTCItems()
{
	m_tCreationDate = 0;
	m_tDatabaseVersion[0] = 0;
	m_tDatabaseVersion[1] = 0;
	m_bValidated = FALSE;
}

VOID CTCSavedStack::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCSavedStack::GetName() CONST
{
	return m_szName;
}

VOID CTCSavedStack::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CTCSavedStack::GetDescription() CONST
{
	return m_szDescription;
}

VOID CTCSavedStack::SetCreationDate(CONST CTimeKey &tDate)
{
	m_tCreationDate = tDate;
}

CTimeKey CTCSavedStack::GetCreationDate() CONST
{
	return m_tCreationDate;
}

VOID CTCSavedStack::SetAuthor(LPCTSTR pszAuthor)
{
	m_szAuthor = pszAuthor;
}

CString CTCSavedStack::GetAuthor() CONST
{
	return m_szAuthor;
}

VOID CTCSavedStack::SetOriginWorkstation(LPCTSTR pszWorkstation)
{
	m_szWorkstation = pszWorkstation;
}

CString CTCSavedStack::GetOriginWorkstation() CONST
{
	return m_szWorkstation;
}

VOID CTCSavedStack::SetSpacecraft(LPCTSTR pszSpacecraft)
{
	m_szSpacecraft = pszSpacecraft;
}

CString CTCSavedStack::GetSpacecraft() CONST
{
	return m_szSpacecraft;
}

VOID CTCSavedStack::SetDatabase(LPCTSTR pszDatabase)
{
	m_szDatabase = pszDatabase;
}

CString CTCSavedStack::GetDatabase() CONST
{
	return m_szDatabase;
}

VOID CTCSavedStack::SetDatabaseVersion(CONST CTimeKey &tCreationTime, CONST CTimeKey &tUpdateTime)
{
	m_tDatabaseVersion[0] = tCreationTime;
	m_tDatabaseVersion[1] = tUpdateTime;
}

BOOL CTCSavedStack::GetDatabaseVersion(CTimeKey &tCreationTime, CTimeKey &tUpdateTime) CONST
{
	tCreationTime = m_tDatabaseVersion[0];
	tUpdateTime = m_tDatabaseVersion[1];
	return((tCreationTime > 0 && tUpdateTime > 0) ? TRUE : FALSE);
}

VOID CTCSavedStack::Validate(BOOL bValidate)
{
	m_bValidated = bValidate;
}

BOOL CTCSavedStack::IsValidated() CONST
{
	return m_bValidated;
}

BOOL CTCSavedStack::Copy(CONST CTCSavedStack *pStack)
{
	m_szName = pStack->m_szName;
	m_szAuthor = pStack->m_szAuthor;
	m_szDatabase = pStack->m_szDatabase;
	m_szSpacecraft = pStack->m_szSpacecraft;
	m_szDescription = pStack->m_szDescription;
	m_szWorkstation = pStack->m_szWorkstation;
	m_tCreationDate = pStack->m_tCreationDate;
	m_tDatabaseVersion[0] = pStack->m_tDatabaseVersion[0];
	m_tDatabaseVersion[1] = pStack->m_tDatabaseVersion[1];
	m_bValidated = pStack->m_bValidated;
	return CTCItems::Copy(pStack);
}

BOOL CTCSavedStack::Compare(CONST CTCSavedStack *pStack) CONST
{
	return((pStack->m_szName == m_szName  &&  pStack->m_szDescription == m_szDescription  &&  pStack->m_szAuthor == m_szAuthor  &&  pStack->m_szWorkstation == m_szWorkstation  &&  pStack->m_szSpacecraft == m_szSpacecraft  &&  pStack->m_szDatabase == m_szDatabase  &&  pStack->m_tCreationDate == m_tCreationDate  &&  pStack->m_tDatabaseVersion[0] == m_tDatabaseVersion[0] && pStack->m_tDatabaseVersion[1] == m_tDatabaseVersion[1] && pStack->m_bValidated == m_bValidated) ? CTCItems::Compare(pStack) : FALSE);
}

BOOL CTCSavedStack::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemsData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbAuthor = (m_szAuthor.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDatabase = (m_szDatabase.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSpacecraft = (m_szSpacecraft.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbWorkstation = (m_szWorkstation.GetLength() + 1)*sizeof(TCHAR);
	sData.cbItems = (CTCItems::Map(nItemsData)) ? (INT)nItemsData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbAuthor + sData.cbWorkstation + sData.cbSpacecraft + sData.cbDatabase + max(sData.cbItems, 0))), sData.tCreationDate = m_tCreationDate.GetTime(), sData.tDatabaseVersion[0] = m_tDatabaseVersion[0].GetTime(), sData.tDatabaseVersion[1] = m_tDatabaseVersion[1].GetTime(), sData.bValidated = m_bValidated; nInfo.GetSize() == sData.cbSize && sData.cbItems >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szAuthor, sData.cbAuthor);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbAuthor), (LPCTSTR)m_szWorkstation, sData.cbWorkstation);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbWorkstation), (LPCTSTR)m_szSpacecraft, sData.cbSpacecraft);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSpacecraft), (LPCTSTR)m_szDatabase, sData.cbDatabase);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDatabase), nItemsData.GetData(), sData.cbItems);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCSavedStack::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemsData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbAuthor + sData.cbWorkstation + sData.cbSpacecraft + sData.cbDatabase + sData.cbItems && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbAuthor > 0 && sData.cbWorkstation > 0 && sData.cbSpacecraft > 0 && sData.cbDatabase > 0 && sData.cbItems >= 0; )
	{
		for (nItemsData.SetSize(sData.cbItems), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(m_szAuthor.GetBufferSetLength(STRINGCHARS(sData.cbAuthor)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbAuthor)), CopyMemory(m_szWorkstation.GetBufferSetLength(STRINGCHARS(sData.cbWorkstation)), nInfo.GetData() + (cbData = cbData + sData.cbAuthor), STRINGBYTES(sData.cbWorkstation)), CopyMemory(m_szSpacecraft.GetBufferSetLength(STRINGCHARS(sData.cbSpacecraft)), nInfo.GetData() + (cbData = cbData + sData.cbWorkstation), STRINGBYTES(sData.cbSpacecraft)), CopyMemory(m_szDatabase.GetBufferSetLength(STRINGCHARS(sData.cbDatabase)), nInfo.GetData() + (cbData = cbData + sData.cbSpacecraft), STRINGBYTES(sData.cbDatabase)), CopyMemory(nItemsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDatabase), sData.cbItems), m_tCreationDate = sData.tCreationDate, m_tDatabaseVersion[0] = sData.tDatabaseVersion[0], m_tDatabaseVersion[1] = sData.tDatabaseVersion[1], m_bValidated = sData.bValidated, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szAuthor.ReleaseBuffer(), m_szWorkstation.ReleaseBuffer(), m_szSpacecraft.ReleaseBuffer(), m_szDatabase.ReleaseBuffer(); CTCItems::Unmap(nItemsData); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCSavedStacks

CTCSavedStacks::CTCSavedStacks() : CPtrArray()
{
	return;
}

CTCSavedStacks::~CTCSavedStacks()
{
	RemoveAll();
}

INT CTCSavedStacks::Add(CTCSavedStack *pStack)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pStack->GetName(), TRUE)) >= 0) InsertAt(nIndex, pStack, 1);
	return nIndex;
}

INT CTCSavedStacks::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTCSavedStack *CTCSavedStacks::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCSavedStack *)CPtrArray::GetAt(nIndex) : (CTCSavedStack *)NULL);
}

CTCSavedStack *CTCSavedStacks::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCSavedStack *)CPtrArray::GetAt(nIndex) : (CTCSavedStack *)NULL);
}

VOID CTCSavedStacks::RemoveAll()
{
	INT  nStack;
	INT  nStacks;

	for (nStack = 0, nStacks = (INT)GetSize(); nStack < nStacks; nStack++)
	{
		delete GetAt(nStack);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCSavedStacks::Copy(CONST CTCSavedStacks *pStacks)
{
	INT  nStack;
	INT  nStacks;
	CTCSavedStack  *pStack;

	for (nStack = 0, nStacks = (INT)pStacks->GetSize(), RemoveAll(); nStack < nStacks; nStack++)
	{
		if ((pStack = new CTCSavedStack) != (CTCSavedStack *)NULL)
		{
			pStack->Copy(pStacks->GetAt(nStack));
			InsertAt(nStack, pStack, 1);
			continue;
		}
		break;
	}
	return((nStack == nStacks) ? TRUE : FALSE);
}

BOOL CTCSavedStacks::Compare(CONST CTCSavedStacks *pStacks) CONST
{
	INT  nStack;
	INT  nStacks;
	CTCSavedStack  *pStack;

	for (nStack = 0, nStacks = (pStacks->GetSize() == GetSize()) ? (INT)GetSize() : -1; nStack < nStacks; nStack++)
	{
		if ((pStack = pStacks->GetAt(nStack)) && pStack->Compare(GetAt(nStack))) continue;
		break;
	}
	return((nStack == nStacks) ? TRUE : FALSE);
}

BOOL CTCSavedStacks::Map(CByteArray &nInfo) CONST
{
	INT  nStack;
	INT  nStacks;
	CByteArray  nStackData;
	CTCSavedStack  *pStack;

	for (nStack = 0, nStacks = (INT)GetSize(), nInfo.RemoveAll(); nStack < nStacks; nStack++)
	{
		if ((pStack = GetAt(nStack)) && pStack->Map(nStackData) && nInfo.Append(nStackData) >= 0) continue;
		break;
	}
	return((nStack == nStacks) ? TRUE : FALSE);
}

BOOL CTCSavedStacks::Unmap(CONST CByteArray &nInfo)
{
	INT  cbStack;
	INT  cbStacks;
	CByteArray  nStackData;
	CTCSavedStack  *pStack;

	for (cbStacks = 0, RemoveAll(); cbStacks < nInfo.GetSize(); cbStacks += cbStack)
	{
		for (CopyMemory(&cbStack, nInfo.GetData() + cbStacks, sizeof(cbStack)), nStackData.SetSize(max(min(cbStack, nInfo.GetSize() - cbStacks), 0)); nStackData.GetSize() >= 0; )
		{
			CopyMemory(nStackData.GetData(), nInfo.GetData() + cbStacks, nStackData.GetSize());
			break;
		}
		if ((pStack = new CTCSavedStack))
		{
			if (pStack->Unmap(nStackData) && Add(pStack) >= 0) continue;
			delete pStack;
		}
		break;
	}
	return((cbStacks == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCSavedStacks::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCSavedStack  *pStack;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pStack = GetAt(nIndex[0]))) ? ((nIndex[1] = (pStack->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pStack = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pStack->GetName() == pszName) || (bInsert && (((pStack = GetAt(max(nIndex[0] - 1, 0))) && pStack->GetName() != pszName && (pStack = GetAt((INT)min(nIndex[0], GetUpperBound()))) && pStack->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchNumberDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchNumberDialog, CDisplayDialog)

CTCStackSearchNumberDialog::CTCStackSearchNumberDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchNumberDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchNumberDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchNumberDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchNumberDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchNumberDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchNumberDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchNumberDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchNumberDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNUMBER_CLOSE, OnClose)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNUMBER_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchNumberDialog message handlers

BOOL CTCStackSearchNumberDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_NUMBER), 1, INT_MAX);
	GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_NUMBER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_GOTO)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_COMMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_COMMENT)->EnableWindow();
	return TRUE;
}

void CTCStackSearchNumberDialog::OnClose()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CTCStackSearchNumberDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchNumberDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchNameDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchNameDialog, CDisplayDialog)

CTCStackSearchNameDialog::CTCStackSearchNameDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchNameDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchNameDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchNameDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchNameDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchNameDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchNameDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchNameDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchNameDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNAME_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCSTACK_SEARCHNAME_NAME, OnSelchangeName)
	ON_CBN_EDITCHANGE(IDC_TCSTACK_SEARCHNAME_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchNameDialog message handlers

BOOL CTCStackSearchNameDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szNames.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szNames.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHNAME_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHNAME_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_NAME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_ALL)->EnableWindow();
	return TRUE;
}

void CTCStackSearchNameDialog::OnSelchangeName()
{
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCStackSearchNameDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCSTACK_SEARCHNAME_FIND)->EnableWindow((GetDlgItem(IDC_TCSTACK_SEARCHNAME_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CTCStackSearchNameDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchNameDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchDescriptionDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchDescriptionDialog, CDisplayDialog)

CTCStackSearchDescriptionDialog::CTCStackSearchDescriptionDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchDescriptionDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchDescriptionDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchDescriptionDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchDescriptionDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchDescriptionDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchDescriptionDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDESCRIPTION_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, OnSelchangeDescription)
	ON_CBN_EDITCHANGE(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, OnEditchangeDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchDescriptionDialog message handlers

BOOL CTCStackSearchDescriptionDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szDescriptions.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szDescriptions.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDESCRIPTION_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_CASE)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_WORD)->EnableWindow();
	return TRUE;
}

void CTCStackSearchDescriptionDialog::OnSelchangeDescription()
{
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCStackSearchDescriptionDialog::OnEditchangeDescription()
{
	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_FIND)->EnableWindow((GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CTCStackSearchDescriptionDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchDescriptionDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCategoryDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchCategoryDialog, CDisplayDialog)

CTCStackSearchCategoryDialog::CTCStackSearchCategoryDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchCategoryDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchCategoryDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchCategoryDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchCategoryDialog::EnumCategories()
{
	INT  nCategory;
	INT  nCategories;
	CStringArray  szCategories;
	CLongUIntArray  nCategoryIDs;

	for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nCategoryIDs), SendDlgItemMessage(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY, CB_RESETCONTENT); nCategory < nCategories; nCategory++)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szCategories.GetAt(nCategory));
		continue;
	}
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchCategoryDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchCategoryDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchCategoryDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCATEGORY_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCategoryDialog message handlers

BOOL CTCStackSearchCategoryDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCATEGORY_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_ALL)->EnableWindow();
	EnumCategories();
	return TRUE;
}

BOOL CTCStackSearchCategoryDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchCategoryDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchSubSystemDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchSubSystemDialog, CDisplayDialog)

CTCStackSearchSubSystemDialog::CTCStackSearchSubSystemDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchSubSystemDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchSubSystemDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchSubSystemDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchSubSystemDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchSubSystemDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchSubSystemDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSUBSYSTEM_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, OnSelchangeSubSystem)
	ON_CBN_EDITCHANGE(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, OnEditchangeSubSystem)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchSubSystemDialog message handlers

BOOL CTCStackSearchSubSystemDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szSubSystems.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szSubSystems.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_CASE)->EnableWindow();
	return TRUE;
}

void CTCStackSearchSubSystemDialog::OnSelchangeSubSystem()
{
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCStackSearchSubSystemDialog::OnEditchangeSubSystem()
{
	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_FIND)->EnableWindow((GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CTCStackSearchSubSystemDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchSubSystemDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchArgumentsDialog, CDisplayDialog)

CTCStackSearchArgumentsDialog::CTCStackSearchArgumentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchArgumentsDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchArgumentsDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchArgumentsDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchArgumentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchArgumentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHARGUMENTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, OnSelchangeArgument)
	ON_CBN_EDITCHANGE(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, OnEditchangeArgument)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchArgumentsDialog message handlers

BOOL CTCStackSearchArgumentsDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nItem = 0, nItems = (INT)m_szArguments.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szArguments.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHARGUMENTS_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ALL)->EnableWindow();
	return TRUE;
}

void CTCStackSearchArgumentsDialog::OnSelchangeArgument()
{
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCStackSearchArgumentsDialog::OnEditchangeArgument()
{
	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_FIND)->EnableWindow((GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CTCStackSearchArgumentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchArgumentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchFlagsDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchFlagsDialog, CDisplayDialog)

CTCStackSearchFlagsDialog::CTCStackSearchFlagsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchFlagsDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchFlagsDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchFlagsDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchFlagsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchFlagsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchFlagsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING, OnInterlockingFlag)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED, OnInterlockedFlag)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED, OnGroupedFlag)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED, OnBlockedFlag)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchFlagsDialog message handlers

BOOL CTCStackSearchFlagsDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHFLAGS_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHFLAGS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FLAG_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_ALL)->EnableWindow();
	return TRUE;
}

void CTCStackSearchFlagsDialog::OnInterlockingFlag()
{
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCStackSearchFlagsDialog::OnInterlockedFlag()
{
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCStackSearchFlagsDialog::OnGroupedFlag()
{
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED));
}

void CTCStackSearchFlagsDialog::OnBlockedFlag()
{
	GetDlgItem(IDC_TCSTACK_SEARCHFLAGS_FIND)->EnableWindow(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED) || IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED));
}

BOOL CTCStackSearchFlagsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchFlagsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchTCPacketDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchTCPacketDialog, CDisplayDialog)

CTCStackSearchTCPacketDialog::CTCStackSearchTCPacketDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchTCPacketDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchTCPacketDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchTCPacketDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchTCPacketDialog::EnumTCPackets()
{
	INT  nPacket;
	INT  nPackets;
	CString  szPacket;
	CDatabaseTCPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTCPackets()->GetSize(), SendDlgItemMessage(IDC_TCSTACK_SEARCHTCPACKET_TAG, CB_RESETCONTENT); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = (CDatabaseTCPacket *)GetDatabase()->GetTCPackets()->GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
		{
			szPacket.Format(STRING(IDS_TCSTACKSEARCHDIALOG_TCPACKET_FORMAT), (LPCTSTR)pPacket->GetTag(), (LPCTSTR)pPacket->GetDescription());
			SendDlgItemMessage(IDC_TCSTACK_SEARCHTCPACKET_TAG, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPacket);
		}
	}
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHTCPACKET_TAG, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchTCPacketDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchTCPacketDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchTCPacketDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTCPACKET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchTCPacketDialog message handlers

BOOL CTCStackSearchTCPacketDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHTCPACKET_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_TAG_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_TAG)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_ALL)->EnableWindow();
	EnumTCPackets();
	return TRUE;
}

BOOL CTCStackSearchTCPacketDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchTCPacketDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchDispatchTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchDispatchTimeDialog, CDisplayDialog)

CTCStackSearchDispatchTimeDialog::CTCStackSearchDispatchTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchDispatchTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchDispatchTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchDispatchTimeDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchDispatchTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchDispatchTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchDispatchTimeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchDispatchTimeDialog message handlers

BOOL CTCStackSearchDispatchTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME), TCSTACKSEARCHDISPATCHTIME_MINIMUMINTERVAL, TCSTACKSEARCHDISPATCHTIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchDispatchTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchDispatchTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchDispatchTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchDispatchTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME), TCSTACKSEARCHDISPATCHTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchDispatchTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchDispatchTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchReleaseTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchReleaseTimeDialog, CDisplayDialog)

CTCStackSearchReleaseTimeDialog::CTCStackSearchReleaseTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchReleaseTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchReleaseTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchReleaseTimeDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchReleaseTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchReleaseTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchReleaseTimeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchReleaseTimeDialog message handlers

BOOL CTCStackSearchReleaseTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME), TCSTACKSEARCHRELEASETIME_MINIMUMINTERVAL, TCSTACKSEARCHRELEASETIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchReleaseTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchReleaseTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchReleaseTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchReleaseTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME), TCSTACKSEARCHRELEASETIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchReleaseTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchReleaseTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchReleaseTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchReleaseTimeOffsetDialog, CDisplayDialog)

CTCStackSearchReleaseTimeOffsetDialog::CTCStackSearchReleaseTimeOffsetDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchReleaseTimeOffsetDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchReleaseTimeOffsetDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchReleaseTimeOffsetDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchReleaseTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchReleaseTimeOffsetDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchReleaseTimeOffsetDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH, OnMatchTimeOffset)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL, OnIntervalTimeOffset)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchReleaseTimeOffsetDialog message handlers

BOOL CTCStackSearchReleaseTimeOffsetDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_OFFSET), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)));
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME), TCSTACKSEARCHRELEASETIMEOFFSET_MINIMUMINTERVAL, TCSTACKSEARCHRELEASETIMEOFFSET_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_OFFSET_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_OFFSET)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchReleaseTimeOffsetDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchReleaseTimeOffsetDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchReleaseTimeOffsetDialog::OnMatchTimeOffset()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchReleaseTimeOffsetDialog::OnIntervalTimeOffset()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME), TCSTACKSEARCHRELEASETIMEOFFSET_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchReleaseTimeOffsetDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchReleaseTimeOffsetDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchTransmissionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchTransmissionTimeDialog, CDisplayDialog)

CTCStackSearchTransmissionTimeDialog::CTCStackSearchTransmissionTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchTransmissionTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchTransmissionTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchTransmissionTimeDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchTransmissionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchTransmissionTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchTransmissionTimeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchTransmissionTimeDialog message handlers

BOOL CTCStackSearchTransmissionTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME), TCSTACKSEARCHTRANSMISSIONTIME_MINIMUMINTERVAL, TCSTACKSEARCHRELEASETIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchTransmissionTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchTransmissionTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchTransmissionTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchTransmissionTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME), TCSTACKSEARCHTRANSMISSIONTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchTransmissionTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchTransmissionTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchExecutionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchExecutionTimeDialog, CDisplayDialog)

CTCStackSearchExecutionTimeDialog::CTCStackSearchExecutionTimeDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchExecutionTimeDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchExecutionTimeDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchExecutionTimeDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchExecutionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchExecutionTimeDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchExecutionTimeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH, OnMatchTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL, OnIntervalTime)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchExecutionTimeDialog message handlers

BOOL CTCStackSearchExecutionTimeDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME), TCSTACKSEARCHEXECUTIONTIME_MINIMUMINTERVAL, TCSTACKSEARCHEXECUTIONTIME_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchExecutionTimeDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchExecutionTimeDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchExecutionTimeDialog::OnMatchTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchExecutionTimeDialog::OnIntervalTime()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME), TCSTACKSEARCHEXECUTIONTIME_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchExecutionTimeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchExecutionTimeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchExecutionTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchExecutionTimeOffsetDialog, CDisplayDialog)

CTCStackSearchExecutionTimeOffsetDialog::CTCStackSearchExecutionTimeOffsetDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchExecutionTimeOffsetDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchExecutionTimeOffsetDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchExecutionTimeOffsetDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchExecutionTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchExecutionTimeOffsetDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchExecutionTimeOffsetDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, OnDirectionUp)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, OnDirectionDown)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH, OnMatchTimeOffset)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, OnIntervalTimeOffset)
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchExecutionTimeOffsetDialog message handlers

BOOL CTCStackSearchExecutionTimeOffsetDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, TRUE);
	Timespinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET), CTimeKey(TCSTACKSEARCHEXECUTIONTIMEOFFSET_MINIMUMOFFSET), CTimeKey(TCSTACKSEARCHEXECUTIONTIMEOFFSET_MAXIMUMOFFSET));
	Timespinbox_SetTime(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET), CTimeKey(TCSTACKSEARCHEXECUTIONTIMEOFFSET_DEFAULTOFFSET));
	Spinbox_SetRange(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME), TCSTACKSEARCHEXECUTIONTIMEOFFSET_MINIMUMINTERVAL, TCSTACKSEARCHEXECUTIONTIMEOFFSET_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_FIND)->EnableWindow();
	return TRUE;
}

void CTCStackSearchExecutionTimeOffsetDialog::OnDirectionUp()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, FALSE);
}

void CTCStackSearchExecutionTimeOffsetDialog::OnDirectionDown()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_UP, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN, TRUE);
}

void CTCStackSearchExecutionTimeOffsetDialog::OnMatchTimeOffset()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_STATIC)->EnableWindow(FALSE);
}

void CTCStackSearchExecutionTimeOffsetDialog::OnIntervalTimeOffset()
{
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH, FALSE);
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME), TCSTACKSEARCHEXECUTIONTIMEOFFSET_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)->SetFocus();
}

BOOL CTCStackSearchExecutionTimeOffsetDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchExecutionTimeOffsetDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchAuthorizationDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchAuthorizationDialog, CDisplayDialog)

CTCStackSearchAuthorizationDialog::CTCStackSearchAuthorizationDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchAuthorizationDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchAuthorizationDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchAuthorizationDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchAuthorizationDialog::EnumAuthorizations()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_AUTHORIZATION_MANUAL));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_AUTHORIZATION_AUTOMATIC));
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchAuthorizationDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchAuthorizationDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchAuthorizationDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHAUTHORIZATION_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchAuthorizationDialog message handlers

BOOL CTCStackSearchAuthorizationDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL)->EnableWindow();
	EnumAuthorizations();
	return TRUE;
}

BOOL CTCStackSearchAuthorizationDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchAuthorizationDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchPTVTimeWindowDialog, CDisplayDialog)

CTCStackSearchPTVTimeWindowDialog::CTCStackSearchPTVTimeWindowDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchPTVTimeWindowDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchPTVTimeWindowDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchPTVTimeWindowDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchPTVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchPTVTimeWindowDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPTVTimeWindowDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVTimeWindowDialog message handlers

BOOL CTCStackSearchPTVTimeWindowDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_FIND)->EnableWindow();
	return TRUE;
}

BOOL CTCStackSearchPTVTimeWindowDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchPTVTimeWindowDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchPTVCheckDialog, CDisplayDialog)

CTCStackSearchPTVCheckDialog::CTCStackSearchPTVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchPTVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchPTVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchPTVCheckDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchPTVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_ON));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_OFF));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_DISABLED));
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchPTVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchPTVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPTVCheckDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVCheckDialog message handlers

BOOL CTCStackSearchPTVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

BOOL CTCStackSearchPTVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchPTVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchPTVResultDialog, CDisplayDialog)

CTCStackSearchPTVResultDialog::CTCStackSearchPTVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchPTVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchPTVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchPTVResultDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchPTVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_GO));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_WAIT));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_FAIL));
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHPTVRESULT_RESULT, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchPTVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchPTVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPTVResultDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPTVResultDialog message handlers

BOOL CTCStackSearchPTVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

BOOL CTCStackSearchPTVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchPTVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchPEVCheckDialog, CDisplayDialog)

CTCStackSearchPEVCheckDialog::CTCStackSearchPEVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchPEVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchPEVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchPEVCheckDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchPEVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_NONE));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_ON));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_OFF));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_DISABLED));
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchPEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchPEVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPEVCheckDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPEVCheckDialog message handlers

BOOL CTCStackSearchPEVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

BOOL CTCStackSearchPEVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchPEVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchPEVResultDialog, CDisplayDialog)

CTCStackSearchPEVResultDialog::CTCStackSearchPEVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchPEVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchPEVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchPEVResultDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchPEVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_GO));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_NOGO));
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHPEVRESULT_RESULT, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchPEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchPEVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPEVResultDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchPEVResultDialog message handlers

BOOL CTCStackSearchPEVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

BOOL CTCStackSearchPEVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchPEVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchCEVTimeWindowDialog, CDisplayDialog)

CTCStackSearchCEVTimeWindowDialog::CTCStackSearchCEVTimeWindowDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchCEVTimeWindowDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchCEVTimeWindowDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchCEVTimeWindowDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

void CTCStackSearchCEVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchCEVTimeWindowDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchCEVTimeWindowDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVTimeWindowDialog message handlers

BOOL CTCStackSearchCEVTimeWindowDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_TIME)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_FIND)->EnableWindow();
	return TRUE;
}

BOOL CTCStackSearchCEVTimeWindowDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchCEVTimeWindowDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchCEVCheckDialog, CDisplayDialog)

CTCStackSearchCEVCheckDialog::CTCStackSearchCEVCheckDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchCEVCheckDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchCEVCheckDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchCEVCheckDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchCEVCheckDialog::EnumCheckFlags()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_NONE));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_ON));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_OFF));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVCHECK_CHECK, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_DISABLED));
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVCHECK_CHECK, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchCEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchCEVCheckDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchPEVCheckDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVCHECK_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVCheckDialog message handlers

BOOL CTCStackSearchCEVCheckDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVCHECK_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_CHECK_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_CHECK)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_ALL)->EnableWindow();
	EnumCheckFlags();
	return TRUE;
}

BOOL CTCStackSearchCEVCheckDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchCEVCheckDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchCEVResultDialog, CDisplayDialog)

CTCStackSearchCEVResultDialog::CTCStackSearchCEVResultDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchCEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchCEVResultDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchCEVResultDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchCEVResultDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchCEVResultDialog::EnumCheckResults()
{
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_IDLE));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_PENDING));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_PASSED));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_FAILED));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_UNKNOWN));
	SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_UNVERIFIED));
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCSTACK_SEARCHCEVRESULT_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_PASSED))) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchCEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchCEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchCEVResultDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchCEVResultDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVRESULT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchCEVResultDialog message handlers

BOOL CTCStackSearchCEVResultDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVRESULT_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVRESULT_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_RESULT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_RESULT)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_ALL)->EnableWindow();
	EnumCheckResults();
	return TRUE;
}

BOOL CTCStackSearchCEVResultDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchCEVResultDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchStatusDialog dialog

IMPLEMENT_DYNCREATE(CTCStackSearchStatusDialog, CDisplayDialog)

CTCStackSearchStatusDialog::CTCStackSearchStatusDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCStackSearchStatusDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCStackSearchStatusDialog::Create(CWnd *pParentWnd, BOOL bHistorical)
{
	INT  nResult;

	m_bHistorical = bHistorical;
	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCStackSearchStatusDialog::IDD)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTextView *CTCStackSearchStatusDialog::GetParent() CONST
{
	return((CTextView *)CDisplayDialog::GetParent());
}

VOID CTCStackSearchStatusDialog::EnumStatus()
{
	if (!m_bHistorical)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_ONSTACK));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_ARMED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_DISPATCHED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_NOTRELEASED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDRELEASE));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_NOTEXECUTED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDEXECUTION));
	}
	else
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_RELEASED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_NOTRELEASED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDRELEASE));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_SENT));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDSEND));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_UPLINKED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDUPLINK));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_EXECUTED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_NOTEXECUTED));
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCSTACKSEARCHDIALOG_STATUS_FAILEDEXECUTION));
	}
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_FIND)->EnableWindow((SendDlgItemMessage(IDC_TCSTACK_SEARCHSTATUS_STATUS, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

void CTCStackSearchStatusDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCStackSearchStatusDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCStackSearchStatusDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCStackSearchStatusDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSTATUS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCStackSearchStatusDialog message handlers

BOOL CTCStackSearchStatusDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParent()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + 10 * GetSystemMetrics(SM_CXFRAME), rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSTATUS_ALL, TRUE);
	CheckDlgButton(IDC_TCSTACK_SEARCHSTATUS_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_STATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_STATUS)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_ALL)->EnableWindow();
	EnumStatus();
	return TRUE;
}

BOOL CTCStackSearchStatusDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCStackSearchStatusDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCSTACKSEARCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItem

CTCManualStackItem::CTCManualStackItem() : CTCItem()
{
	m_nSourceType = TCITEM_SOURCETYPE_MANUALSTACK;
	m_bSelected = FALSE;
}

BOOL CTCManualStackItem::Alert(UINT nType, UINT nMessage, LPCTSTR pszMessage, BOOL bOverwrite)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = (!bOverwrite) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if (nMessage == m_nAlertMessages.GetAt(nIndex)) break;
		continue;
	}
	if (nType >= TCMANUALSTACKITEM_ALERTTYPE_INFORMATION  &&  nType <= TCMANUALSTACKITEM_ALERTTYPE_ERROR)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, pszMessage);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackItem::Alert(UINT nType, UINT nMessage, BOOL bEnable)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = ((nType != TCMANUALSTACKITEM_ALERTTYPE_ANY && !bEnable) || nMessage == (UINT)-1) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if ((bEnable  &&  nMessage == m_nAlertMessages.GetAt(nIndex)) || (!bEnable  &&  nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))) break;
		continue;
	}
	if (nType >= TCMANUALSTACKITEM_ALERTTYPE_INFORMATION  &&  nType <= TCMANUALSTACKITEM_ALERTTYPE_ERROR  &&  nMessage != (UINT)-1 && bEnable)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, EMPTYSTRING);
		return TRUE;
	}
	if (!bEnable)
	{
		if (nMessage != (UINT)-1)
		{
			if (nType == TCMANUALSTACKITEM_ALERTTYPE_ANY  &&  nIndex < nCount)
			{
				m_nAlertTypes.RemoveAt(nCount - nIndex - 1);
				m_nAlertMessages.RemoveAt(nCount - nIndex - 1);
				m_szAlertMessages.RemoveAt(nCount - nIndex - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = ((nType >= TCMANUALSTACKITEM_ALERTTYPE_INFORMATION && nType <= TCMANUALSTACKITEM_ALERTTYPE_ERROR) || nType == TCMANUALSTACKITEM_ALERTTYPE_NONE) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if ((nType == TCMANUALSTACKITEM_ALERTTYPE_NONE || m_nAlertTypes.GetAt(nIndex) == nType) && m_nAlertMessages.GetAt(nIndex) == nMessage)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
		if (nMessage == (UINT)-1)
		{
			if (nType == TCMANUALSTACKITEM_ALERTTYPE_ANY  &&  nCount > 0)
			{
				m_nAlertTypes.RemoveAt(nCount - 1);
				m_nAlertMessages.RemoveAt(nCount - 1);
				m_szAlertMessages.RemoveAt(nCount - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = (nType >= TCMANUALSTACKITEM_ALERTTYPE_INFORMATION && nType <= TCMANUALSTACKITEM_ALERTTYPE_ERROR) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if (m_nAlertTypes.GetAt(nIndex) == nType)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			if (nType == TCMANUALSTACKITEM_ALERTTYPE_NONE)
			{
				m_nAlertTypes.RemoveAll();
				m_nAlertMessages.RemoveAll();
				m_szAlertMessages.RemoveAll();
				return TRUE;
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

UINT CTCManualStackItem::IsAlerted(UINT nMessage, CString &szMessage) CONST
{
	INT  nIndex;
	INT  nCount;
	UINT  nType;

	for (nIndex = 0, nCount = (INT)m_nAlertMessages.GetSize(), nType = TCMANUALSTACKITEM_ALERTTYPE_NONE, szMessage.Empty(); nIndex < nCount; nIndex++)
	{
		if (nMessage != (UINT)-1 && nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			break;
		}
		if (nMessage == (UINT)-1 && nType < m_nAlertTypes.GetAt(nCount - nIndex - 1) && m_nAlertMessages.GetAt(nCount - nIndex - 1) > 0)
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			nType = m_nAlertTypes.GetAt(nCount - nIndex - 1);
		}
	}
	return((nIndex < nCount) ? m_nAlertTypes.GetAt(nCount - nIndex - 1) : nType);
}
UINT CTCManualStackItem::IsAlerted(UINT nMessage) CONST
{
	CString  szMessage;

	return IsAlerted(nMessage, szMessage);
}

INT CTCManualStackItem::GetAlertCount(UINT nType) CONST
{
	INT  nIndex;
	INT  nCount[2];

	for (nIndex = 0, nCount[0] = (INT)m_nAlertTypes.GetSize(), nCount[1] = 0; nIndex < nCount[0]; nIndex++)
	{
		if (m_nAlertTypes.GetAt(nIndex) == nType || nType == TCMANUALSTACKITEM_ALERTTYPE_ANY)
		{
			nCount[1]++;
			continue;
		}
	}
	return nCount[1];
}

VOID CTCManualStackItem::Select(BOOL bSelect)
{
	m_bSelected = bSelect;
}

BOOL CTCManualStackItem::IsSelected() CONST
{
	return m_bSelected;
}

BOOL CTCManualStackItem::Copy(CONST CTCManualStackItem *pItem)
{
	m_bSelected = pItem->m_bSelected;
	m_nAlertTypes.Copy(pItem->m_nAlertTypes);
	m_nAlertMessages.Copy(pItem->m_nAlertMessages);
	m_szAlertMessages.Copy(pItem->m_szAlertMessages);
	return CTCItem::Copy(pItem);
}

BOOL CTCManualStackItem::Compare(CONST CTCManualStackItem *pItem) CONST
{
	INT  nMessage;
	INT  nMessages;

	for (nMessage = 0, nMessages = (pItem->m_nAlertTypes.GetSize() == m_nAlertTypes.GetSize() && pItem->m_nAlertMessages.GetSize() == m_nAlertMessages.GetSize() && !memcmp(pItem->m_nAlertTypes.GetData(), m_nAlertTypes.GetData(), m_nAlertTypes.GetSize()*sizeof(UINT)) && !memcmp(pItem->m_nAlertMessages.GetData(), m_nAlertMessages.GetData(), m_nAlertMessages.GetSize()*sizeof(UINT)) && pItem->m_szAlertMessages.GetSize() == m_szAlertMessages.GetSize() && pItem->m_bSelected == m_bSelected) ? (INT)m_szAlertMessages.GetSize() : -1; nMessage < nMessages; nMessage++)
	{
		if (pItem->m_szAlertMessages.GetAt(nMessage) != m_szAlertMessages.GetAt(nMessage)) break;
		continue;
	}
	return((nMessage == nMessages) ? CTCItem::Compare(pItem) : FALSE);
}

BOOL CTCManualStackItem::Map(CByteArray &nInfo) CONST
{
	return CTCItem::Map(nInfo);
}

BOOL CTCManualStackItem::Unmap(CONST CByteArray &nInfo)
{
	return CTCItem::Unmap(nInfo);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItems

CTCManualStackItems::CTCManualStackItems() : CTCItems()
{
	return;
}

CTCManualStackItems::~CTCManualStackItems()
{
	RemoveAll();
}

INT CTCManualStackItems::Add(CTCManualStackItem *pItem)
{
	return CTCItems::Add(pItem);
}

INT CTCManualStackItems::Collect(INT nIndex, CTCManualStackItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem[2];

	for (nItem = 0, nItems = Collect(nIndex, nItemIDs), pItems.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = GetAt(nItemIDs.GetAt(nItem)))) ? new CTCManualStackItem : (CTCManualStackItem *)NULL))
		{
			if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0) continue;
			delete pItem[1];
		}
		pItems.RemoveAll();
		break;
	}
	return((INT)pItems.GetSize());
}
INT CTCManualStackItems::Collect(INT nIndex, CUIntArray &nItemIDs) CONST
{
	return CTCItems::Collect(nIndex, nItemIDs);
}
INT CTCManualStackItems::Collect(INT nIndex, CPtrArray &pItems) CONST
{
	return CTCItems::Collect(nIndex, pItems);
}

CTCManualStackItem *CTCManualStackItems::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackItem *)CPtrArray::GetAt(nIndex) : (CTCManualStackItem *)NULL);
}

CTCManualStackItem *CTCManualStackItems::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackItem *)CPtrArray::GetAt(nIndex) : (CTCManualStackItem *)NULL);
}

VOID CTCManualStackItems::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackItems::Copy(CONST CTCManualStackItems *pItems)
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems->GetSize(), RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
		{
			pItem->Copy(pItems->GetAt(nItem));
			InsertAt(nItem, pItem, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackItems::Compare(CONST CTCManualStackItems *pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = (pItems->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = pItems->GetAt(nItem)) && pItem->Compare(GetAt(nItem))) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackItems::Map(CByteArray &nInfo) CONST
{
	INT  nItem;
	INT  nItems;
	CByteArray  nItemData;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(), nInfo.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->Map(nItemData) && nInfo.Append(nItemData) >= 0) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackItems::Unmap(CONST CByteArray &nInfo)
{
	INT  cbItem;
	INT  cbItems;
	CByteArray  nItemData;
	CTCManualStackItem  *pItem;

	for (cbItems = 0, RemoveAll(); cbItems < nInfo.GetSize(); cbItems += cbItem)
	{
		for (CopyMemory(&cbItem, nInfo.GetData() + cbItems, sizeof(cbItem)), nItemData.SetSize(max(min(cbItem, nInfo.GetSize() - cbItems), 0)); nItemData.GetSize() >= 0; )
		{
			CopyMemory(nItemData.GetData(), nInfo.GetData() + cbItems, nItemData.GetSize());
			break;
		}
		if ((pItem = new CTCManualStackItem))
		{
			if (pItem->Unmap(nItemData) && Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	return((cbItems == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackComposedItem

CTCManualStackComposedItem::CTCManualStackComposedItem() : CTCManualStackItems()
{
	return;
}

VOID CTCManualStackComposedItem::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCManualStackComposedItem::GetName() CONST
{
	return m_szName;
}

VOID CTCManualStackComposedItem::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CTCManualStackComposedItem::GetDescription() CONST
{
	return m_szDescription;
}

VOID CTCManualStackComposedItem::SetParameters(CONST CDatabaseTCParameters &pParameters)
{
	m_pParameters.Copy(&pParameters);
}

INT CTCManualStackComposedItem::GetParameters(CDatabaseTCParameters &pParameters) CONST
{
	pParameters.Copy(&m_pParameters);
	return((INT)pParameters.GetSize());
}

BOOL CTCManualStackComposedItem::Copy(CONST CTCManualStackComposedItem *pItem)
{
	m_szName = pItem->m_szName;
	m_szDescription = pItem->m_szDescription;
	return((m_pParameters.Copy(&pItem->m_pParameters)) ? CTCManualStackItems::Copy(pItem) : FALSE);
}

BOOL CTCManualStackComposedItem::Compare(CONST CTCManualStackComposedItem *pItem) CONST
{
	return((pItem->m_szName == m_szName  &&  pItem->m_szDescription == m_szDescription  &&  pItem->m_pParameters.Compare(&m_pParameters)) ? CTCManualStackItems::Compare(pItem) : FALSE);
}

BOOL CTCManualStackComposedItem::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;
	CByteArray  nEntriesData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameters = (m_pParameters.Map(nParametersData)) ? (INT)nParametersData.GetSize() : -1;
	sData.cbEntries = (CTCManualStackItems::Map(nEntriesData)) ? (INT)nEntriesData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + max(sData.cbParameters, 0) + max(sData.cbEntries, 0))); nInfo.GetSize() == sData.cbSize && sData.cbParameters >= 0 && sData.cbEntries >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nParametersData.GetData(), sData.cbParameters);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameters), nEntriesData.GetData(), sData.cbEntries);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackComposedItem::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;
	CByteArray  nEntriesData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbParameters + sData.cbEntries && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbParameters >= 0 && sData.cbEntries >= 0; )
	{
		for (nParametersData.SetSize(sData.cbParameters), nEntriesData.SetSize(sData.cbEntries), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbParameters), CopyMemory(nEntriesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameters), sData.cbEntries), m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(); m_pParameters.Unmap(nParametersData); ) return CTCManualStackItems::Unmap(nEntriesData);
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemTemplate

VOID CTCManualStackItemTemplate::SetTemplateName(LPCTSTR pszName)
{
	m_szTemplate[0] = pszName;
}

CString CTCManualStackItemTemplate::GetTemplateName() CONST
{
	return m_szTemplate[0];
}

VOID CTCManualStackItemTemplate::SetTemplateDescription(LPCTSTR pszDescription)
{
	m_szTemplate[1] = pszDescription;
}

CString CTCManualStackItemTemplate::GetTemplateDescription() CONST
{
	return m_szTemplate[1];
}

BOOL CTCManualStackItemTemplate::Copy(CONST CTCManualStackItemTemplate *pTemplate)
{
	m_szTemplate[0] = pTemplate->m_szTemplate[0];
	m_szTemplate[1] = pTemplate->m_szTemplate[1];
	return CTCManualStackItem::Copy(pTemplate);
}

BOOL CTCManualStackItemTemplate::Compare(CONST CTCManualStackItemTemplate *pTemplate) CONST
{
	return((pTemplate->m_szTemplate[0] == m_szTemplate[0] && pTemplate->m_szTemplate[1] == m_szTemplate[1]) ? CTCManualStackItem::Compare(pTemplate) : FALSE);
}

BOOL CTCManualStackItemTemplate::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	sData.cbTemplate[0] = (m_szTemplate[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbTemplate[1] = (m_szTemplate[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbItem = (CTCManualStackItem::Map(nItemData)) ? (INT)nItemData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + max(sData.cbItem, 0))); nInfo.GetSize() == sData.cbSize && sData.cbItem >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTemplate[0], sData.cbTemplate[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), (LPCTSTR)m_szTemplate[1], sData.cbTemplate[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), nItemData.GetData(), sData.cbItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackItemTemplate::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + sData.cbItem && sData.cbTemplate[0] > 0 && sData.cbTemplate[1] > 0 && sData.cbItem >= 0; )
	{
		for (nItemData.SetSize(sData.cbItem), CopyMemory(m_szTemplate[0].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTemplate[0])), CopyMemory(m_szTemplate[1].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[1])), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), STRINGBYTES(sData.cbTemplate[1])), CopyMemory(nItemData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), sData.cbItem), m_szTemplate[0].ReleaseBuffer(), m_szTemplate[1].ReleaseBuffer(); CTCManualStackItem::Unmap(nItemData); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemTemplates

CTCManualStackItemTemplates::CTCManualStackItemTemplates() : CPtrArray()
{
	return;
}

CTCManualStackItemTemplates::~CTCManualStackItemTemplates()
{
	RemoveAll();
}

INT CTCManualStackItemTemplates::Add(CTCManualStackItemTemplate *pTemplate)
{
	INT  nIndex;

	for (nIndex = FindIndex(pTemplate->GetName(), TRUE); nIndex >= 0 && nIndex <= GetSize(); nIndex++)
	{
		if (nIndex == GetSize() || GetAt(nIndex)->GetName() != pTemplate->GetName() || GetAt(nIndex)->GetTemplateName() > pTemplate->GetTemplateName())
		{
			InsertAt(nIndex, pTemplate, 1);
			return nIndex;
		}
		if (GetAt(nIndex)->GetTemplateName() == pTemplate->GetTemplateName()) break;
	}
	return -1;
}

INT CTCManualStackItemTemplates::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

INT CTCManualStackItemTemplates::Enum(LPCTSTR pszName, CStringArray &szTemplates) CONST
{
	INT  nIndex;
	CTCManualStackItemTemplate  *pTemplate;

	for (nIndex = FindIndex(pszName), szTemplates.RemoveAll(); nIndex >= 0 && nIndex < GetSize(); nIndex++)
	{
		if ((pTemplate = GetAt(nIndex)) != (CTCManualStackItemTemplate *)NULL  &&  pTemplate->GetName() == pszName)
		{
			szTemplates.Add(pTemplate->GetTemplateName() + TAB + pTemplate->GetTemplateDescription());
			continue;
		}
		break;
	}
	return((INT)szTemplates.GetSize());
}

CTCManualStackItemTemplate *CTCManualStackItemTemplates::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCManualStackItemTemplate *)NULL);
}

CTCManualStackItemTemplate *CTCManualStackItemTemplates::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCManualStackItemTemplate *)NULL);
}

VOID CTCManualStackItemTemplates::RemoveAll()
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (INT)GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		delete GetAt(nTemplate);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackItemTemplates::Copy(CONST CTCManualStackItemTemplates *pTemplates)
{
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)pTemplates->GetSize(), RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = new CTCManualStackItemTemplate) != (CTCManualStackItemTemplate *)NULL)
		{
			pTemplate->Copy(pTemplates->GetAt(nTemplate));
			InsertAt(nTemplate, pTemplate, 1);
			continue;
		}
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackItemTemplates::Compare(CONST CTCManualStackItemTemplates *pTemplates) CONST
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (pTemplates->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (!pTemplates->GetAt(nTemplate)->Compare(GetAt(nTemplate))) break;
		continue;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackItemTemplates::Map(CByteArray &nInfo) CONST
{
	INT  nTemplate;
	INT  nTemplates;
	CByteArray  nTemplateData;
	CTCManualStackItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)GetSize(), nInfo.RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = GetAt(nTemplate)) && pTemplate->Map(nTemplateData) && nInfo.Append(nTemplateData) >= 0) continue;
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackItemTemplates::Unmap(CONST CByteArray &nInfo)
{
	INT  cbTemplate;
	INT  cbTemplates;
	CByteArray  nTemplateData;
	CTCManualStackItemTemplate  *pTemplate;

	for (cbTemplates = 0, RemoveAll(); cbTemplates < nInfo.GetSize(); cbTemplates += cbTemplate)
	{
		for (CopyMemory(&cbTemplate, nInfo.GetData() + cbTemplates, sizeof(cbTemplate)), nTemplateData.SetSize(max(min(cbTemplate, nInfo.GetSize() - cbTemplates), 0)); nTemplateData.GetSize() >= 0; )
		{
			CopyMemory(nTemplateData.GetData(), nInfo.GetData() + cbTemplates, nTemplateData.GetSize());
			break;
		}
		if ((pTemplate = new CTCManualStackItemTemplate))
		{
			if (pTemplate->Unmap(nTemplateData) && Add(pTemplate) >= 0) continue;
			delete pTemplate;
		}
		break;
	}
	return((cbTemplates == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCManualStackItemTemplates::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCManualStackItemTemplate  *pTemplate;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTemplate = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTemplate->GetName() < pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTemplate = GetAt((nIndex[0] = max(nIndex[0], 0)))) && pTemplate->GetName() == pszName) || bInsert) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackComposedItemTemplate

VOID CTCManualStackComposedItemTemplate::SetTemplateName(LPCTSTR pszName)
{
	m_szTemplate[0] = pszName;
}

CString CTCManualStackComposedItemTemplate::GetTemplateName() CONST
{
	return m_szTemplate[0];
}

VOID CTCManualStackComposedItemTemplate::SetTemplateDescription(LPCTSTR pszDescription)
{
	m_szTemplate[1] = pszDescription;
}

CString CTCManualStackComposedItemTemplate::GetTemplateDescription() CONST
{
	return m_szTemplate[1];
}

BOOL CTCManualStackComposedItemTemplate::Copy(CONST CTCManualStackComposedItemTemplate *pTemplate)
{
	m_szTemplate[0] = pTemplate->m_szTemplate[0];
	m_szTemplate[1] = pTemplate->m_szTemplate[1];
	return CTCManualStackComposedItem::Copy(pTemplate);
}

BOOL CTCManualStackComposedItemTemplate::Compare(CONST CTCManualStackComposedItemTemplate *pTemplate) CONST
{
	return((pTemplate->m_szTemplate[0] == m_szTemplate[0] && pTemplate->m_szTemplate[1] == m_szTemplate[1]) ? CTCManualStackComposedItem::Compare(pTemplate) : FALSE);
}

BOOL CTCManualStackComposedItemTemplate::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	sData.cbTemplate[0] = (m_szTemplate[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbTemplate[1] = (m_szTemplate[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbItem = (CTCManualStackComposedItem::Map(nItemData)) ? (INT)nItemData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + max(sData.cbItem, 0))); nInfo.GetSize() == sData.cbSize && sData.cbItem >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTemplate[0], sData.cbTemplate[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), (LPCTSTR)m_szTemplate[1], sData.cbTemplate[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), nItemData.GetData(), sData.cbItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackComposedItemTemplate::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + sData.cbItem && sData.cbTemplate[0] > 0 && sData.cbTemplate[1] > 0 && sData.cbItem >= 0; )
	{
		for (nItemData.SetSize(sData.cbItem), CopyMemory(m_szTemplate[0].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTemplate[0])), CopyMemory(m_szTemplate[1].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[1])), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), STRINGBYTES(sData.cbTemplate[1])), CopyMemory(nItemData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), sData.cbItem), m_szTemplate[0].ReleaseBuffer(), m_szTemplate[1].ReleaseBuffer(); CTCManualStackComposedItem::Unmap(nItemData); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackComposedItemTemplates

CTCManualStackComposedItemTemplates::CTCManualStackComposedItemTemplates() : CPtrArray()
{
	return;
}

CTCManualStackComposedItemTemplates::~CTCManualStackComposedItemTemplates()
{
	RemoveAll();
}

INT CTCManualStackComposedItemTemplates::Add(CTCManualStackComposedItemTemplate *pTemplate)
{
	INT  nIndex;

	for (nIndex = FindIndex(pTemplate->GetName(), TRUE); nIndex >= 0 && nIndex <= GetSize(); nIndex++)
	{
		if (nIndex == GetSize() || GetAt(nIndex)->GetName() != pTemplate->GetName() || GetAt(nIndex)->GetTemplateName() > pTemplate->GetTemplateName())
		{
			InsertAt(nIndex, pTemplate, 1);
			return nIndex;
		}
		if (GetAt(nIndex)->GetTemplateName() == pTemplate->GetTemplateName()) break;
	}
	return -1;
}

INT CTCManualStackComposedItemTemplates::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

INT CTCManualStackComposedItemTemplates::Enum(LPCTSTR pszName, CStringArray &szTemplates) CONST
{
	INT  nIndex;
	CTCManualStackComposedItemTemplate  *pTemplate;

	for (nIndex = FindIndex(pszName), szTemplates.RemoveAll(); nIndex >= 0 && nIndex < GetSize(); nIndex++)
	{
		if ((pTemplate = GetAt(nIndex)) != (CTCManualStackComposedItemTemplate *)NULL  &&  pTemplate->GetName() == pszName)
		{
			szTemplates.Add(pTemplate->GetTemplateName() + TAB + pTemplate->GetTemplateDescription());
			continue;
		}
		break;
	}
	return((INT)szTemplates.GetSize());
}

CTCManualStackComposedItemTemplate *CTCManualStackComposedItemTemplates::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackComposedItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCManualStackComposedItemTemplate *)NULL);
}

CTCManualStackComposedItemTemplate *CTCManualStackComposedItemTemplates::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackComposedItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCManualStackComposedItemTemplate *)NULL);
}

VOID CTCManualStackComposedItemTemplates::RemoveAll()
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (INT)GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		delete GetAt(nTemplate);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackComposedItemTemplates::Copy(CONST CTCManualStackComposedItemTemplates *pTemplates)
{
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackComposedItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)pTemplates->GetSize(), RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = new CTCManualStackComposedItemTemplate))
		{
			pTemplate->Copy(pTemplates->GetAt(nTemplate));
			InsertAt(nTemplate, pTemplate, 1);
			continue;
		}
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackComposedItemTemplates::Compare(CONST CTCManualStackComposedItemTemplates *pTemplates) CONST
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (pTemplates->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (!pTemplates->GetAt(nTemplate)->Compare(GetAt(nTemplate))) break;
		continue;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackComposedItemTemplates::Map(CByteArray &nInfo) CONST
{
	INT  nTemplate;
	INT  nTemplates;
	CByteArray  nTemplateData;
	CTCManualStackComposedItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)GetSize(), nInfo.RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = GetAt(nTemplate)) && pTemplate->Map(nTemplateData) && nInfo.Append(nTemplateData) >= 0) continue;
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCManualStackComposedItemTemplates::Unmap(CONST CByteArray &nInfo)
{
	INT  cbTemplate;
	INT  cbTemplates;
	CByteArray  nTemplateData;
	CTCManualStackComposedItemTemplate  *pTemplate;

	for (cbTemplates = 0, RemoveAll(); cbTemplates < nInfo.GetSize(); cbTemplates += cbTemplate)
	{
		for (CopyMemory(&cbTemplate, nInfo.GetData() + cbTemplates, sizeof(cbTemplate)), nTemplateData.SetSize(max(min(cbTemplate, nInfo.GetSize() - cbTemplates), 0)); nTemplateData.GetSize() >= 0; )
		{
			CopyMemory(nTemplateData.GetData(), nInfo.GetData() + cbTemplates, nTemplateData.GetSize());
			break;
		}
		if ((pTemplate = new CTCManualStackComposedItemTemplate))
		{
			if (pTemplate->Unmap(nTemplateData) && Add(pTemplate) >= 0) continue;
			delete pTemplate;
		}
		break;
	}
	return((cbTemplates == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCManualStackComposedItemTemplates::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCManualStackComposedItemTemplate  *pTemplate;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTemplate = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTemplate->GetName() < pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTemplate = GetAt((nIndex[0] = max(nIndex[0], 0)))) && pTemplate->GetName() == pszName) || bInsert) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchGroup

CTCManualStackSearchGroup::CTCManualStackSearchGroup() : CObject()
{
	m_nType = TCMANUALSTACKSEARCHGROUP_TYPE_NONE;
}

VOID CTCManualStackSearchGroup::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCManualStackSearchGroup::GetName() CONST
{
	return m_szName;
}

VOID CTCManualStackSearchGroup::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CTCManualStackSearchGroup::GetType() CONST
{
	return m_nType;
}

VOID CTCManualStackSearchGroup::SetMembers(CONST CStringArray &szMembers)
{
	m_szMembers.Copy(szMembers);
}

INT CTCManualStackSearchGroup::GetMembers(CStringArray &szMembers) CONST
{
	szMembers.Copy(m_szMembers);
	return((INT)szMembers.GetSize());
}

VOID CTCManualStackSearchGroup::Copy(CONST CTCManualStackSearchGroup *pGroup)
{
	m_nType = pGroup->m_nType;
	m_szName = pGroup->m_szName;
	m_szMembers.Copy(pGroup->m_szMembers);
}

BOOL CTCManualStackSearchGroup::Compare(CONST CTCManualStackSearchGroup *pGroup) CONST
{
	INT  nMember[2];
	INT  nMembers[2];

	for (nMember[0] = 0, nMembers[0] = (pGroup->m_nType == m_nType && pGroup->m_szName == m_szName && pGroup->m_szMembers.GetSize() == m_szMembers.GetSize()) ? (INT)m_szMembers.GetSize() : -1; nMember[0] < nMembers[0]; nMember[0]++)
	{
		for (nMember[1] = 0, nMembers[1] = nMembers[0]; nMember[1] < nMembers[1]; nMember[1]++)
		{
			if (pGroup->m_szMembers.GetAt(nMember[0]) == m_szMembers.GetAt(nMember[1])) break;
			continue;
		}
		if (nMember[1] == nMembers[1]) break;
	}
	return((nMember[0] == nMembers[0]) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchGroup::Map(CByteArray &nInfo) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nMember;
	INT  nMembers;
	CByteArray  nMembersData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nMember = 0, nMembers = (INT)m_szMembers.GetSize(), sData.cbMembers = 0; nMember < nMembers; nMember++, sData.cbMembers += cbData)
	{
		nMembersData.SetSize(sData.cbMembers + (cbData = (m_szMembers.GetAt(nMember).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nMembersData.GetData() + sData.cbMembers, (LPCTSTR)m_szMembers.GetAt(nMember), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbMembers)), sData.nType = m_nType; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nMembersData.GetData(), sData.cbMembers);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackSearchGroup::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbMember;
	INT  cbMembers;
	CByteArray  nMembersData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbMembers && sData.cbName > 0 && sData.cbMembers >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), nMembersData.SetSize(sData.cbMembers), CopyMemory(nMembersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbMembers), m_nType = sData.nType, m_szName.ReleaseBuffer(), m_szMembers.RemoveAll(), cbMember = cbMembers = 0; cbMembers < sData.cbMembers; cbMembers += (cbMember = (m_szMembers.GetAt(m_szMembers.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szMembers.Add((LPCTSTR)(nMembersData.GetData() + cbMembers));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchGroups

CTCManualStackSearchGroups::CTCManualStackSearchGroups() : CPtrArray()
{
	return;
}

CTCManualStackSearchGroups::~CTCManualStackSearchGroups()
{
	RemoveAll();
}

INT CTCManualStackSearchGroups::Add(CTCManualStackSearchGroup *pGroup)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pGroup->GetName(), TRUE)) >= 0) InsertAt(nIndex, pGroup, 1);
	return nIndex;
}

INT CTCManualStackSearchGroups::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTCManualStackSearchGroup *CTCManualStackSearchGroups::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackSearchGroup *)CPtrArray::GetAt(nIndex) : (CTCManualStackSearchGroup *)NULL);
}

CTCManualStackSearchGroup *CTCManualStackSearchGroups::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackSearchGroup *)CPtrArray::GetAt(nIndex) : (CTCManualStackSearchGroup *)NULL);
}

VOID CTCManualStackSearchGroups::RemoveAll()
{
	INT  nGroup;
	INT  nGroups;

	for (nGroup = 0, nGroups = (INT)GetSize(); nGroup < nGroups; nGroup++)
	{
		delete GetAt(nGroup);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackSearchGroups::Copy(CONST CTCManualStackSearchGroups *pGroups)
{
	INT  nGroup;
	INT  nGroups;
	CTCManualStackSearchGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)pGroups->GetSize(), RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = new CTCManualStackSearchGroup))
		{
			pGroup->Copy(pGroups->GetAt(nGroup));
			InsertAt(nGroup, pGroup, 1);
			continue;
		}
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchGroups::Compare(CONST CTCManualStackSearchGroups *pGroups) CONST
{
	INT  nGroup;
	INT  nGroups;

	for (nGroup = 0, nGroups = (pGroups->GetSize() == GetSize()) ? (INT)GetSize() : -1; nGroup < nGroups; nGroup++)
	{
		if (!pGroups->GetAt(nGroup)->Compare(GetAt(nGroup))) break;
		continue;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchGroups::Map(CByteArray &nInfo) CONST
{
	INT  nGroup;
	INT  nGroups;
	CByteArray  nGroupData;
	CTCManualStackSearchGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)GetSize(), nInfo.RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = GetAt(nGroup)) && pGroup->Map(nGroupData) && nInfo.Append(nGroupData) >= 0) continue;
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchGroups::Unmap(CONST CByteArray &nInfo)
{
	INT  cbGroup;
	INT  cbGroups;
	CByteArray  nGroupData;
	CTCManualStackSearchGroup  *pGroup;

	for (cbGroups = 0, RemoveAll(); cbGroups < nInfo.GetSize(); cbGroups += cbGroup)
	{
		for (CopyMemory(&cbGroup, nInfo.GetData() + cbGroups, sizeof(cbGroup)), nGroupData.SetSize(max(min(cbGroup, nInfo.GetSize() - cbGroups), 0)); nGroupData.GetSize() >= 0; )
		{
			CopyMemory(nGroupData.GetData(), nInfo.GetData() + cbGroups, nGroupData.GetSize());
			break;
		}
		if ((pGroup = new CTCManualStackSearchGroup))
		{
			if (pGroup->Unmap(nGroupData) && Add(pGroup) >= 0) continue;
			delete pGroup;
		}
		break;
	}
	return((cbGroups == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCManualStackSearchGroups::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCManualStackSearchGroup  *pGroup;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pGroup = GetAt(nIndex[0]))) ? ((nIndex[1] = (pGroup->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pGroup = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pGroup->GetName() == pszName) || (bInsert && (((pGroup = GetAt(max(nIndex[0] - 1, 0))) && pGroup->GetName() != pszName && (pGroup = GetAt((INT)min(nIndex[0], GetUpperBound()))) && pGroup->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFilter

CTCManualStackSearchFilter::CTCManualStackSearchFilter() : CObject()
{
	m_nType = TCMANUALSTACKSEARCHFILTER_TYPE_NONE;
}

VOID CTCManualStackSearchFilter::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCManualStackSearchFilter::GetName() CONST
{
	return m_szName;
}

VOID CTCManualStackSearchFilter::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CTCManualStackSearchFilter::GetType() CONST
{
	return m_nType;
}

VOID CTCManualStackSearchFilter::SetSearchKeys(CONST CStringArray &szKeys, CONST CStringArray &szValues)
{
	m_szSearchKeys.Copy(szKeys);
	m_szSearchValues.Copy(szValues);
}

INT CTCManualStackSearchFilter::GetSearchKeys(CStringArray &szKeys, CStringArray &szValues) CONST
{
	szKeys.Copy(m_szSearchKeys);
	szValues.Copy(m_szSearchValues);
	return((INT)szKeys.GetSize());
}

VOID CTCManualStackSearchFilter::Copy(CONST CTCManualStackSearchFilter *pFilter)
{
	m_nType = pFilter->m_nType;
	m_szName = pFilter->m_szName;
	m_szSearchKeys.Copy(pFilter->m_szSearchKeys);
	m_szSearchValues.Copy(pFilter->m_szSearchValues);
}

BOOL CTCManualStackSearchFilter::Compare(CONST CTCManualStackSearchFilter *pFilter) CONST
{
	INT  nKey;
	INT  nKeys;

	for (nKey = 0, nKeys = (pFilter->m_nType == m_nType && pFilter->m_szName == m_szName && pFilter->m_szSearchKeys.GetSize() == m_szSearchKeys.GetSize() && pFilter->m_szSearchValues.GetSize() == m_szSearchValues.GetSize()) ? (INT)m_szSearchKeys.GetSize() : -1; nKey < nKeys; nKey++)
	{
		if (pFilter->m_szSearchKeys.GetAt(nKey) != m_szSearchKeys.GetAt(nKey) || pFilter->m_szSearchValues.GetAt(nKey) != m_szSearchValues.GetAt(nKey)) break;
		continue;
	}
	return((nKey == nKeys) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchFilter::Map(CByteArray &nInfo) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nValue;
	INT  nValues;
	INT  cbData;
	DATA  sData;
	CByteArray  nKeysData;
	CByteArray  nValuesData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nKey = 0, nKeys = (INT)m_szSearchKeys.GetSize(), sData.cbSearchKeys = 0; nKey < nKeys; nKey++, sData.cbSearchKeys += cbData)
	{
		nKeysData.SetSize(sData.cbSearchKeys + (cbData = (m_szSearchKeys.GetAt(nKey).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nKeysData.GetData() + sData.cbSearchKeys, (LPCTSTR)m_szSearchKeys.GetAt(nKey), cbData);
	}
	for (nValue = 0, nValues = (INT)m_szSearchValues.GetSize(), sData.cbSearchValues = 0; nValue < nValues; nValue++, sData.cbSearchValues += cbData)
	{
		nValuesData.SetSize(sData.cbSearchValues + (cbData = (m_szSearchValues.GetAt(nValue).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nValuesData.GetData() + sData.cbSearchValues, (LPCTSTR)m_szSearchValues.GetAt(nValue), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbSearchKeys + sData.cbSearchValues)), sData.nType = m_nType; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nKeysData.GetData(), sData.cbSearchKeys);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSearchKeys), nValuesData.GetData(), sData.cbSearchValues);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackSearchFilter::Unmap(CONST CByteArray &nInfo)
{
	INT  cbKey;
	INT  cbKeys;
	INT  cbValue;
	INT  cbValues;
	INT  cbData;
	DATA  sData;
	CByteArray  nKeysData;
	CByteArray  nValuesData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbSearchKeys + sData.cbSearchValues && sData.cbName > 0 && sData.cbSearchKeys >= 0 && sData.cbSearchValues >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), nKeysData.SetSize(sData.cbSearchKeys), nValuesData.SetSize(sData.cbSearchValues), CopyMemory(nKeysData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbSearchKeys), CopyMemory(nValuesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSearchKeys), sData.cbSearchValues), m_nType = sData.nType, m_szName.ReleaseBuffer(), m_szSearchKeys.RemoveAll(), m_szSearchValues.RemoveAll(), cbKey = cbKeys = 0; cbKeys < sData.cbSearchKeys; cbKeys += (cbKey = (m_szSearchKeys.GetAt(m_szSearchKeys.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szSearchKeys.Add((LPCTSTR)(nKeysData.GetData() + cbKeys));
			continue;
		}
		for (cbValue = cbValues = 0; cbValues < sData.cbSearchValues; cbValues += (cbValue = (m_szSearchValues.GetAt(m_szSearchValues.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szSearchValues.Add((LPCTSTR)(nValuesData.GetData() + cbValues));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFilters

CTCManualStackSearchFilters::CTCManualStackSearchFilters() : CPtrArray()
{
	return;
}

CTCManualStackSearchFilters::~CTCManualStackSearchFilters()
{
	RemoveAll();
}

INT CTCManualStackSearchFilters::Add(CTCManualStackSearchFilter *pFilter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFilter->GetName(), TRUE)) >= 0) InsertAt(nIndex, pFilter, 1);
	return nIndex;
}

INT CTCManualStackSearchFilters::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTCManualStackSearchFilter *CTCManualStackSearchFilters::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackSearchFilter *)CPtrArray::GetAt(nIndex) : (CTCManualStackSearchFilter *)NULL);
}

CTCManualStackSearchFilter *CTCManualStackSearchFilters::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackSearchFilter *)CPtrArray::GetAt(nIndex) : (CTCManualStackSearchFilter *)NULL);
}

VOID CTCManualStackSearchFilters::RemoveAll()
{
	INT  nFilter;
	INT  nFilters;

	for (nFilter = 0, nFilters = (INT)GetSize(); nFilter < nFilters; nFilter++)
	{
		delete GetAt(nFilter);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackSearchFilters::Copy(CONST CTCManualStackSearchFilters *pFilters)
{
	INT  nFilter;
	INT  nFilters;
	CTCManualStackSearchFilter  *pFilter;

	for (nFilter = 0, nFilters = (INT)pFilters->GetSize(), RemoveAll(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = new CTCManualStackSearchFilter))
		{
			pFilter->Copy(pFilters->GetAt(nFilter));
			InsertAt(nFilter, pFilter, 1);
			continue;
		}
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchFilters::Compare(CONST CTCManualStackSearchFilters *pFilters) CONST
{
	INT  nFilter;
	INT  nFilters;

	for (nFilter = 0, nFilters = (pFilters->GetSize() == GetSize()) ? (INT)GetSize() : -1; nFilter < nFilters; nFilter++)
	{
		if (!pFilters->GetAt(nFilter)->Compare(GetAt(nFilter))) break;
		continue;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchFilters::Map(CByteArray &nInfo) CONST
{
	INT  nFilter;
	INT  nFilters;
	CByteArray  nFilterData;
	CTCManualStackSearchFilter  *pFilter;

	for (nFilter = 0, nFilters = (INT)GetSize(), nInfo.RemoveAll(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = GetAt(nFilter)) && pFilter->Map(nFilterData) && nInfo.Append(nFilterData) >= 0) continue;
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCManualStackSearchFilters::Unmap(CONST CByteArray &nInfo)
{
	INT  cbFilter;
	INT  cbFilters;
	CByteArray  nFilterData;
	CTCManualStackSearchFilter  *pFilter;

	for (cbFilters = 0, RemoveAll(); cbFilters < nInfo.GetSize(); cbFilters += cbFilter)
	{
		for (CopyMemory(&cbFilter, nInfo.GetData() + cbFilters, sizeof(cbFilter)), nFilterData.SetSize(max(min(cbFilter, nInfo.GetSize() - cbFilters), 0)); nFilterData.GetSize() >= 0; )
		{
			CopyMemory(nFilterData.GetData(), nInfo.GetData() + cbFilters, nFilterData.GetSize());
			break;
		}
		if ((pFilter = new CTCManualStackSearchFilter))
		{
			if (pFilter->Unmap(nFilterData) && Add(pFilter) >= 0) continue;
			delete pFilter;
		}
		break;
	}
	return((cbFilters == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCManualStackSearchFilters::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCManualStackSearchFilter  *pFilter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pFilter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pFilter->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pFilter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pFilter->GetName() == pszName) || (bInsert && (((pFilter = GetAt(max(nIndex[0] - 1, 0))) && pFilter->GetName() != pszName && (pFilter = GetAt((INT)min(nIndex[0], GetUpperBound()))) && pFilter->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackPrintJobInfo

CTCManualStackPrintJobInfo::CTCManualStackPrintJobInfo() : CObject()
{
	m_nPrintMode = 0;
	m_nPrintRange[0] = 0;
	m_nPrintRange[1] = 0;
	m_tPrintRange[0] = 0;
	m_tPrintRange[1] = 0;
}

VOID CTCManualStackPrintJobInfo::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCManualStackPrintJobInfo::GetName() CONST
{
	return m_szName;
}

VOID CTCManualStackPrintJobInfo::SetProfile(LPCTSTR pszProfile)
{
	m_szProfile = pszProfile;
}

CString CTCManualStackPrintJobInfo::GetProfile() CONST
{
	return m_szProfile;
}

VOID CTCManualStackPrintJobInfo::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CTCManualStackPrintJobInfo::GetComments() CONST
{
	return m_szComments;
}

BOOL CTCManualStackPrintJobInfo::SetPrintMode(UINT nMode)
{
	m_nPrintMode = nMode;
	return TRUE;
}

UINT CTCManualStackPrintJobInfo::GetPrintMode() CONST
{
	return m_nPrintMode;
}

BOOL CTCManualStackPrintJobInfo::SetPrintRange(UINT nMin, UINT nMax)
{
	if (m_nPrintMode & TCMANUALSTACK_PRINT_ITEMRANGE)
	{
		m_nPrintRange[0] = nMin;
		m_nPrintRange[1] = nMax;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackPrintJobInfo::SetPrintRange(CONST CTimeKey &tMin, CONST CTimeKey &tMax)
{
	if (m_nPrintMode & TCMANUALSTACK_PRINT_TIMERANGE)
	{
		m_tPrintRange[0] = tMin;
		m_tPrintRange[1] = tMax;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackPrintJobInfo::GetPrintRange(UINT &nMin, UINT &nMax) CONST
{
	if (m_nPrintMode & TCMANUALSTACK_PRINT_ITEMRANGE)
	{
		nMin = m_nPrintRange[0];
		nMax = m_nPrintRange[1];
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackPrintJobInfo::GetPrintRange(CTimeKey &tMin, CTimeKey &tMax) CONST
{
	if (m_nPrintMode & TCMANUALSTACK_PRINT_TIMERANGE)
	{
		tMin = m_tPrintRange[0];
		tMax = m_tPrintRange[1];
		return TRUE;
	}
	return FALSE;
}

VOID CTCManualStackPrintJobInfo::Copy(CONST CTCManualStackPrintJobInfo *pJobInfo)
{
	m_szName = pJobInfo->m_szName;
	m_szProfile = pJobInfo->m_szProfile;
	m_szComments = pJobInfo->m_szComments;
	m_nPrintMode = pJobInfo->m_nPrintMode;
	m_nPrintRange[0] = pJobInfo->m_nPrintRange[0];
	m_nPrintRange[1] = pJobInfo->m_nPrintRange[1];
	m_tPrintRange[0] = pJobInfo->m_tPrintRange[0];
	m_tPrintRange[1] = pJobInfo->m_tPrintRange[1];
}

BOOL CTCManualStackPrintJobInfo::Compare(CONST CTCManualStackPrintJobInfo *pJobInfo) CONST
{
	return((pJobInfo->m_szName == m_szName  &&  pJobInfo->m_szProfile == m_szProfile  &&  pJobInfo->m_szComments == m_szComments  &&  pJobInfo->m_nPrintMode == m_nPrintMode && ((m_nPrintMode & TCMANUALSTACK_PRINT_ITEMRANGE) != TCMANUALSTACK_PRINT_ITEMRANGE || (pJobInfo->m_nPrintRange[0] == m_nPrintRange[0] && pJobInfo->m_nPrintRange[1] == m_nPrintRange[1])) && ((m_nPrintMode & TCMANUALSTACK_PRINT_TIMERANGE) != TCMANUALSTACK_PRINT_TIMERANGE || (pJobInfo->m_tPrintRange[0] == m_tPrintRange[0] && pJobInfo->m_tPrintRange[1] == m_tPrintRange[1]))) ? TRUE : FALSE);
}

BOOL CTCManualStackPrintJobInfo::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProfile = (m_szProfile.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments)), sData.nPrintMode = m_nPrintMode, sData.nPrintRange[0] = m_nPrintRange[0], sData.nPrintRange[1] = m_nPrintRange[1], sData.tPrintRange[0] = m_tPrintRange[0].GetTime(), sData.tPrintRange[1] = m_tPrintRange[1].GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szProfile, sData.cbProfile);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbProfile), (LPCTSTR)m_szComments, sData.cbComments);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackPrintJobInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments && sData.cbName > 0 && sData.cbProfile > 0 && sData.cbComments > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szProfile.GetBufferSetLength(STRINGCHARS(sData.cbProfile)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbProfile));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbProfile), STRINGBYTES(sData.cbComments));
		m_nPrintMode = sData.nPrintMode;
		m_nPrintRange[0] = sData.nPrintRange[0];
		m_nPrintRange[1] = sData.nPrintRange[1];
		m_tPrintRange[0] = sData.tPrintRange[0];
		m_tPrintRange[1] = sData.tPrintRange[1];
		m_szName.ReleaseBuffer();
		m_szProfile.ReleaseBuffer();
		m_szComments.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackPrintJobs

CTCManualStackPrintJobs::CTCManualStackPrintJobs() : CPtrArray()
{
	return;
}

CTCManualStackPrintJobs::~CTCManualStackPrintJobs()
{
	RemoveAll();
}

INT CTCManualStackPrintJobs::Add(CTCManualStackPrintJobInfo *pJobInfo)
{
	return((INT)CPtrArray::Add(pJobInfo));
}

INT CTCManualStackPrintJobs::Find(LPCTSTR pszName) CONST
{
	INT  nJob;
	INT  nJobs;
	CTCManualStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->GetName() == pszName) break;
		continue;
	}
	return((nJob < nJobs) ? nJob : -1);
}

CTCManualStackPrintJobInfo *CTCManualStackPrintJobs::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCManualStackPrintJobInfo *)NULL);
}

CTCManualStackPrintJobInfo *CTCManualStackPrintJobs::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCManualStackPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCManualStackPrintJobInfo *)NULL);
}

VOID CTCManualStackPrintJobs::RemoveAll()
{
	INT  nJob;
	INT  nJobs;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		delete GetAt(nJob);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCManualStackPrintJobs::Copy(CONST CTCManualStackPrintJobs *pPrintJobs)
{
	INT  nJob;
	INT  nJobs;
	CTCManualStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)pPrintJobs->GetSize(), RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = new CTCManualStackPrintJobInfo))
		{
			pJobInfo->Copy(pPrintJobs->GetAt(nJob));
			InsertAt(nJob, pJobInfo, 1);
			continue;
		}
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCManualStackPrintJobs::Compare(CONST CTCManualStackPrintJobs *pPrintJobs) CONST
{
	INT  nJob[2];
	INT  nJobs[2];

	for (nJob[0] = 0, nJobs[0] = (INT)GetSize(), nJobs[1] = (INT)pPrintJobs->GetSize(); nJob[0] < nJobs[0]; nJob[0]++)
	{
		for (nJob[1] = (nJobs[0] != nJobs[1]) ? nJobs[1] : 0; nJob[1] < nJobs[1]; nJob[1]++)
		{
			if (pPrintJobs->GetAt(nJob[0])->Compare(GetAt(nJob[1]))) break;
			continue;
		}
		if (nJob[1] == nJobs[1]) break;
	}
	return((nJob[0] == nJobs[0] && nJobs[0] == nJobs[1]) ? TRUE : FALSE);
}

BOOL CTCManualStackPrintJobs::Map(CByteArray &nInfo) CONST
{
	INT  nJob;
	INT  nJobs;
	CByteArray  nJobData;
	CTCManualStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(), nInfo.RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->Map(nJobData) && nInfo.Append(nJobData) >= 0) continue;
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCManualStackPrintJobs::Unmap(CONST CByteArray &nInfo)
{
	INT  cbJob;
	INT  cbJobs;
	CByteArray  nJobData;
	CTCManualStackPrintJobInfo  *pJobInfo;

	for (cbJobs = 0, RemoveAll(); cbJobs < nInfo.GetSize(); cbJobs += cbJob)
	{
		for (CopyMemory(&cbJob, nInfo.GetData() + cbJobs, sizeof(cbJob)), nJobData.SetSize(max(min(cbJob, nInfo.GetSize() - cbJobs), 0)); nJobData.GetSize() >= 0; )
		{
			CopyMemory(nJobData.GetData(), nInfo.GetData() + cbJobs, nJobData.GetSize());
			break;
		}
		if ((pJobInfo = new CTCManualStackPrintJobInfo))
		{
			if (pJobInfo->Unmap(nJobData) && Add(pJobInfo) >= 0) continue;
			delete pJobInfo;
		}
		break;
	}
	if ((pJobInfo = (!GetSize()) ? new CTCManualStackPrintJobInfo : (CTCManualStackPrintJobInfo *)NULL))
	{
		for (pJobInfo->SetName(STRING(IDS_PRINTJOB_DEFAULTNAME)), pJobInfo->SetProfile(STRING(IDS_PRINTPROFILE_DEFAULTNAME)), pJobInfo->SetPrintMode(TCMANUALSTACK_PRINT_ONSTACKITEMS); Add(pJobInfo) >= 0; ) return TRUE;
		delete pJobInfo;
		return FALSE;
	}
	return((cbJobs == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsLayoutPage property page

IMPLEMENT_DYNCREATE(CTCManualStackSettingsLayoutPage, CLocalePropertyPage)

CTCManualStackSettingsLayoutPage::CTCManualStackSettingsLayoutPage() : CLocalePropertyPage(CTCManualStackSettingsLayoutPage::IDD)
{
	//{{AFX_DATA_INIT(CTCManualStackSettingsLayoutPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCManualStackSettingsLayoutPage::Initialize()
{
	if (GetParentDisplay()->GetLayout(m_nColumns[0]) && GetParentDisplay()->GetListTitleFont(&m_fntTitle[0]) && GetParentDisplay()->GetListItemsFont(&m_fntItems[0]) && GetParentDisplay()->GetGridBackgroundColor(m_nGridBackgroundColor[0]))
	{
		CopyMemory(&m_fntTitle[1], &m_fntTitle[0], sizeof(LOGFONT));
		CopyMemory(&m_fntItems[1], &m_fntItems[0], sizeof(LOGFONT));
		m_bToolTips[1] = m_bToolTips[0] = GetParentDisplay()->IsToolTipModeEnabled();
		m_nGridBackgroundColor[1] = m_nGridBackgroundColor[0];
		m_nColumns[1].Copy(m_nColumns[0]);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackSettingsLayoutPage::GetColumns(CUIntArray &nColumns) CONST
{
	nColumns.Copy(m_nColumns[0]);
	return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::GetTitleFont(LPLOGFONT pTitleFont) CONST
{
	CopyMemory(pTitleFont, &m_fntTitle[0], sizeof(LOGFONT));
	return Check(FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::GetItemsFont(LPLOGFONT pItemsFont) CONST
{
	CopyMemory(pItemsFont, &m_fntItems[0], sizeof(LOGFONT));
	return Check(FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	nColor = m_nGridBackgroundColor[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::GetToolTipMode(BOOL &bEnable) CONST
{
	bEnable = m_bToolTips[0];
	return Check(FALSE);
}

CTCManualStackSettingsDialog *CTCManualStackSettingsLayoutPage::GetParentDialog() CONST
{
	return((CTCManualStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCManualStackWnd *CTCManualStackSettingsLayoutPage::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCManualStackSettingsLayoutPage::EnumLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;
	CStringArray  szColumns;

	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_NUMBER));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_NAME));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_DESCRIPTION));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_CATEGORY));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_SUBSYSTEM));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_ARGUMENTS));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_FLAGS));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_TCPACKET));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_DISPATCHTIME));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_RELEASETIME));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_EXECUTIONTIME));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_AUTHORIZATION));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_PTVCHECKS));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_PTVRESULT));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_PEVCHECKS));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_PEVRESULT));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_CEVCHECKS));
	szColumns.Add(LookupColumnName(TCMANUALSTACK_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szColumns.GetAt(nColumn));
		continue;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_SETCURSEL);
	return((nColumn == nColumns) ? TRUE : FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::ShowLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_nColumns[0].GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW, LVM_DELETEALLITEMS), m_nColumnIndex = 0; nColumn < nColumns; nColumn++)
	{
		if ((nColumn >= m_szColumns.GetSize() && InsertLayoutColumn(nColumn, LookupColumnName(m_nColumns[0].GetAt(nColumn)))) || (nColumn < m_szColumns.GetSize() && ModifyLayoutColumn(nColumn, LookupColumnName(m_nColumns[0].GetAt(nColumn))))) continue;
		break;
	}
	while (nColumn < m_szColumns.GetSize())
	{
		if (!RemoveLayoutColumn(nColumn)) break;
		continue;
	}
	for (nColumn = (nColumn != nColumns) ? (nColumns + 1) : 0; nColumn < nColumns; nColumn++)
	{
		if ((!nColumn  &&  !Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, EMPTYSTRING)) || (nColumn > 0 && !Listview_SetText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, nColumn, EMPTYSTRING))) break;
		continue;
	}
	return((nColumn == nColumns) ? SetCurLayoutColumn() : FALSE);
}

VOID CTCManualStackSettingsLayoutPage::ShowLayoutFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? m_fntTitle[0].lfFaceName : m_fntItems[0].lfFaceName))); (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE) && cFontTools.EnumerateFont(m_fntTitle[0].lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS) && cFontTools.EnumerateFont(m_fntItems[0].lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_fntTitle[0])), 0));
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[0])), max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[1])), 0)));
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_fntItems[0])), 0));
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[0])), max(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[1])), 0)));
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackSettingsLayoutPage::ShowLayoutFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

BOOL CTCManualStackSettingsLayoutPage::InsertLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.InsertAt(nIndex, pszColumn);
	m_nColumnIndex = (nIndex <= m_nColumnIndex) ? (INT)min(m_nColumnIndex + 1, m_szColumns.GetSize() - 1) : m_nColumnIndex;
	return Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCManualStackSettingsLayoutPage::ModifyLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.SetAt(nIndex, pszColumn);
	return Listview_SetColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCManualStackSettingsLayoutPage::RemoveLayoutColumn(INT nIndex)
{
	if (Listview_DeleteColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex))
	{
		m_nColumnIndex = (nIndex >= m_nColumnIndex) ? ((nIndex > m_nColumnIndex) ? m_nColumnIndex : 0) : max(m_nColumnIndex - 1, 0);
		m_szColumns.RemoveAt(nIndex);
		return SetCurLayoutColumn(m_nColumnIndex);
	}
	return FALSE;
}

BOOL CTCManualStackSettingsLayoutPage::SetCurLayoutColumn(INT nIndex)
{
	if (nIndex < m_nColumns[0].GetSize())
	{
		for (m_szColumns.SetAt(m_nColumnIndex, (m_szColumns.GetAt(m_nColumnIndex).Right(lstrlen(STRING(IDS_TCMANUALSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER))) == STRING(IDS_TCMANUALSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)) ? (m_szColumns.GetAt(m_nColumnIndex).Left(m_szColumns.GetAt(m_nColumnIndex).GetLength() - lstrlen(STRING(IDS_TCMANUALSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)))) : m_szColumns.GetAt(m_nColumnIndex)), m_szColumns.SetAt(nIndex, m_szColumns.GetAt(nIndex) + STRING(IDS_TCMANUALSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)); TRUE; )
		{
			Listview_SetColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), m_nColumnIndex, m_szColumns.GetAt(m_nColumnIndex), CalcColumnWidth(m_szColumns.GetAt(m_nColumnIndex)));
			Listview_SetColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(m_szColumns.GetAt((m_nColumnIndex = nIndex))));
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE)->EnableWindow((m_nColumnIndex > 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) : FALSE);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) : FALSE);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
		return TRUE;
	}
	return FALSE;
}

INT CTCManualStackSettingsLayoutPage::GetCurLayoutColumn() CONST
{
	return m_nColumnIndex;
}

BOOL CTCManualStackSettingsLayoutPage::CheckLayoutColumn() CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;

	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn);
	for (nColumn = 0, nColumns = (INT)m_nColumns[0].GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName(m_nColumns[0].GetAt(nColumn)) == szColumn) break;
		continue;
	}
	return((nColumn == nColumns) ? TRUE : FALSE);
}

CString CTCManualStackSettingsLayoutPage::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCMANUALSTACK_TITLEITEM_NUMBER) return STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER);
	if (nColumn == TCMANUALSTACK_TITLEITEM_NAME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_DESCRIPTION) return STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CATEGORY) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY);
	if (nColumn == TCMANUALSTACK_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCMANUALSTACK_TITLEITEM_ARGUMENTS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_FLAGS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_TCPACKET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVRESULT) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVRESULT) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_STATUS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCManualStackSettingsLayoutPage::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)))) return TCMANUALSTACK_TITLEITEM_NUMBER;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME)))) return TCMANUALSTACK_TITLEITEM_NAME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION)))) return TCMANUALSTACK_TITLEITEM_DESCRIPTION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY)))) return TCMANUALSTACK_TITLEITEM_CATEGORY;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM)))) return TCMANUALSTACK_TITLEITEM_SUBSYSTEM;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS)))) return TCMANUALSTACK_TITLEITEM_ARGUMENTS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS)))) return TCMANUALSTACK_TITLEITEM_FLAGS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET)))) return TCMANUALSTACK_TITLEITEM_TCPACKET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME)))) return TCMANUALSTACK_TITLEITEM_DISPATCHTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME)))) return TCMANUALSTACK_TITLEITEM_RELEASETIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET)))) return TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME)))) return TCMANUALSTACK_TITLEITEM_EXECUTIONTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET)))) return TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION)))) return TCMANUALSTACK_TITLEITEM_AUTHORIZATION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW)))) return TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS)))) return TCMANUALSTACK_TITLEITEM_PTVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT)))) return TCMANUALSTACK_TITLEITEM_PTVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS)))) return TCMANUALSTACK_TITLEITEM_PEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT)))) return TCMANUALSTACK_TITLEITEM_PEVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW)))) return TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS)))) return TCMANUALSTACK_TITLEITEM_CEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS), lstrlen(STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS)))) return TCMANUALSTACK_TITLEITEM_STATUS;
	return 0;
}

INT CTCManualStackSettingsLayoutPage::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nWidths.Add((nIndex > 0) ? (nWidths.GetAt(nIndex - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex)))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex))));
		continue;
	}
	return((nCount == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

INT CTCManualStackSettingsLayoutPage::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	UINT  nColumn;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			if (pDC->GetTextMetrics(&tmFont) && tmFont.tmAveCharWidth > 0)
			{
				nWidth = ((nColumn = LookupColumnName(pszColumn)) == TCMANUALSTACK_TITLEITEM_NUMBER) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackNumberColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : 0;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_NAME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackNameColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_DESCRIPTION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackDescriptionColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CATEGORY) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackCategoryColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_SUBSYSTEM) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackSubSystemColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_ARGUMENTS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackArgumentsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_FLAGS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackFlagsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_TCPACKET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackTCPacketColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_DISPATCHTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackDispatchTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackReleaseTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackReleaseTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackExecutionTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackExecutionTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_AUTHORIZATION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackAuthorizationColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackPTVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackPTVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackPTVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackPEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PEVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackPEVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackCEVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackCEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_STATUS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCManualStackStatusColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (!nWidth) ? (2 * CalcColumnIndent() + pDC->GetTextExtent(pszColumn).cx) : nWidth;
				pDC->SelectObject(pOldFont);
				ReleaseDC(pDC);
				return nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
	return 0;
}

INT CTCManualStackSettingsLayoutPage::CalcColumnIndent() CONST
{
	return 3 * GetSystemMetrics(SM_CXEDGE);
}

VOID CTCManualStackSettingsLayoutPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, bCheck);
}

BOOL CTCManualStackSettingsLayoutPage::IsModified(BOOL bAll) CONST
{
	INT  nColumn;
	INT  nColumns;
	CFontTools  cFontTools;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nColumn = 0, nColumns = (m_nColumns[0].GetSize() == m_nColumns[1].GetSize() && !lstrcmp(m_fntTitle[0].lfFaceName, m_fntTitle[1].lfFaceName) && (m_fntTitle[0].lfHeight == m_fntTitle[1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[1]))) && m_fntTitle[0].lfWeight == m_fntTitle[1].lfWeight && m_fntTitle[0].lfItalic == m_fntTitle[1].lfItalic && !lstrcmp(m_fntItems[0].lfFaceName, m_fntItems[1].lfFaceName) && (m_fntItems[0].lfHeight == m_fntItems[1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[1]))) && m_fntItems[0].lfWeight == m_fntItems[1].lfWeight && m_fntItems[0].lfItalic == m_fntItems[1].lfItalic && m_nGridBackgroundColor[0] == m_nGridBackgroundColor[1] && m_bToolTips[0] == m_bToolTips[1]) ? (INT)m_nColumns[0].GetSize() : -1; nColumn < nColumns; nColumn++)
		{
			if (m_nColumns[0].GetAt(nColumn) != m_nColumns[1].GetAt(nColumn)) break;
			continue;
		}
		return((nColumn != nColumns) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTCManualStackSettingsLayoutPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_nColumns[0].GetSize() > 0 && m_nColumns[0].GetAt(0) == TCMANUALSTACK_TITLEITEM_NUMBER  &&  GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowTextLength() > 0 && (!IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID) || GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->SendMessage(CB_GETCURSEL) >= 0)) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCManualStackSettingsLayoutPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSettingsLayoutPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSettingsLayoutPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nColumns[0].RemoveAll();
	m_nColumns[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSettingsLayoutPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCManualStackSettingsLayoutPage)
	ON_WM_PAINT()
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE, OnInsertColumnBefore)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER, OnInsertColumnAfter)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE, OnRemoveColumn)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, OnGridBackground)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, OnToolTips)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, OnTitleFont)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, OnItemsFont)
	ON_CBN_EDITCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, OnSelchangeColumnName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, OnSelchangeGridBackgroundColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsLayoutPage message handlers

BOOL CTCManualStackSettingsLayoutPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckRadioButton(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, (m_nGridBackgroundColor[0] != GetSysColor(COLOR_WINDOW)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS, m_bToolTips[0]);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_CHARACTERISTICS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES)->EnableWindow();
	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_fntTitle[0].lfFaceName));
	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nGridBackgroundColor[0]);
	EnumLayoutColumns();
	ShowLayoutColumns();
	ShowLayoutFontDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackSettingsLayoutPage::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect((IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? &m_fntTitle[0] : &m_fntItems[0]); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? GetSysColor(COLOR_WINDOWTEXT) : GetSysColor(COLOR_GRAYTEXT));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

BOOL CTCManualStackSettingsLayoutPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMLISTVIEW  *pNotifyInfo = (NMLISTVIEW *)lParam;

	if (pNotifyInfo->hdr.idFrom == IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW)
	{
		if (pNotifyInfo->hdr.code == LVN_COLUMNCLICK) SetCurLayoutColumn(pNotifyInfo->iSubItem);
		if (pNotifyInfo->hdr.code == LVN_ITEMCHANGING  &&  !(pNotifyInfo->uChanged & LVIF_TEXT))
		{
			*pResult = TRUE;
			return TRUE;
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackSettingsLayoutPage::OnInsertColumnBefore()
{
	INT  nIndex;
	CString  szColumn;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); InsertLayoutColumn((nIndex = m_nColumnIndex), szColumn); )
	{
		m_nColumns[0].InsertAt(nIndex, LookupColumnName(szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnInsertColumnAfter()
{
	INT  nIndex;
	CString  szColumn;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); InsertLayoutColumn((nIndex = m_nColumnIndex + 1), szColumn); )
	{
		m_nColumns[0].InsertAt(nIndex, LookupColumnName(szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnRemoveColumn()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if (RemoveLayoutColumn((nIndex = m_nColumnIndex)))
	{
		m_nColumns[0].RemoveAt(nIndex);
		SetCurLayoutColumn();
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnGridBackground()
{
	COLORREF  nColor;

	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (nColor = VGA_COLOR_GRAY));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID));
	m_nGridBackgroundColor[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID)) ? nColor : GetSysColor(COLOR_WINDOW);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnToolTips()
{
	m_bToolTips[0] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_TOOLTIPS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnTitleFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCManualStackSettingsLayoutPage::OnItemsFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCManualStackSettingsLayoutPage::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnSelchangeColumnName()
{
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTBEFORE)->EnableWindow((m_nColumnIndex > 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCManualStackSettingsLayoutPage::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		_tcscpy_s(m_fntTitle[0].lfFaceName, sizeof(m_fntTitle[0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		_tcscpy_s(m_fntItems[0].lfFaceName, sizeof(m_fntItems[0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntTitle[0].lfWeight, m_fntTitle[0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_fntTitle[0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_fntTitle[0]);
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntItems[0].lfWeight, m_fntItems[0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_fntItems[0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_fntItems[0]);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnSelchangeFontStyle()
{
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntTitle[0].lfWeight, m_fntTitle[0].lfItalic);
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntItems[0].lfWeight, m_fntItems[0].lfItalic);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnSelchangeFontSize()
{
	CString  szSize;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_fntTitle[0].lfHeight);
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_fntItems[0].lfHeight);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLayoutPage::OnSelchangeGridBackgroundColor()
{
	m_nGridBackgroundColor[0] = (COLORREF)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsOperationsPage property page

IMPLEMENT_DYNCREATE(CTCManualStackSettingsOperationsPage, CLocalePropertyPage)

CTCManualStackSettingsOperationsPage::CTCManualStackSettingsOperationsPage() : CLocalePropertyPage(CTCManualStackSettingsOperationsPage::IDD)
{
	//{{AFX_DATA_INIT(CTCManualStackSettingsOperationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCManualStackSettingsOperationsPage::Initialize()
{
	for (m_bModes[0][0] = m_bModes[1][0] = (GetParentDisplay()->GetTelecommandingMode() & TCMANUALSTACK_MODE_MASTERMANUAL) ? TRUE : FALSE, m_bModes[0][1] = m_bModes[1][1] = GetParentDisplay()->IsTelecommandingReleaseWaitModeEnabled(), m_bModes[0][2] = m_bModes[1][2] = GetParentDisplay()->IsTelecommandingAutoRejectionModeEnabled(), m_bModes[0][3] = m_bModes[1][3] = GetParentDisplay()->IsTelecommandingInterlockModeEnabled(), m_bAlerts[0] = m_bAlerts[1] = FALSE, m_nArguments[0] = m_nArguments[1] = -1, m_bArguments[0] = m_bArguments[1] = FALSE; GetParentDisplay()->GetListOptions(m_nArguments[0], m_bArguments[0]); )
	{
		m_nArguments[1] = m_nArguments[0];
		m_bArguments[1] = m_bArguments[0];
		break;
	}
	for (m_bStateFlags[0] = m_bStateFlags[1] = (GetParentDisplay()->GetTelecommandingState() & TCMANUALSTACK_STATE_DISABLED) ? TRUE : FALSE, m_nCheckFlags[0] = m_nCheckFlags[1] = GetParentDisplay()->GetTelecommandingChecks(), m_nChecks[0] = m_nChecks[1] = 0; GetParentDisplay()->GetListUpdateChecks(m_nChecks[0]); )
	{
		m_nChecks[1] = m_nChecks[0];
		break;
	}
	for (m_nMiscellaneousOptions[0] = m_nMiscellaneousOptions[1] = 0; GetParentDisplay()->GetMiscellaneousOptions(m_nMiscellaneousOptions[0]); )
	{
		m_nMiscellaneousOptions[1] = m_nMiscellaneousOptions[0];
		break;
	}
	for (m_tDefaultReleaseTimeWindow[0] = m_tDefaultReleaseTimeWindow[1] = TCMANUALSTACK_RELEASETIMEWINDOW_DEFAULTINTERVAL; GetParentDisplay()->GetDefaultReleaseTimeWindow(m_tDefaultReleaseTimeWindow[0]); )
	{
		m_tDefaultReleaseTimeWindow[1] = m_tDefaultReleaseTimeWindow[0];
		break;
	}
	for (m_tDispatchTimeWindow[0] = m_tDispatchTimeWindow[1] = TCMANUALSTACK_DISPATCHTIMEWINDOW_DEFAULTINTERVAL; GetParentDisplay()->GetDispatchTimeWindow(m_tDispatchTimeWindow[0]); )
	{
		m_tDispatchTimeWindow[1] = m_tDispatchTimeWindow[0];
		break;
	}
	return TRUE;
}

BOOL CTCManualStackSettingsOperationsPage::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	nArguments = m_nArguments[0];
	bAll = m_bArguments[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetListCheckOptions(UINT &nFlags, INT &nCount) CONST
{
	nFlags = m_nCheckFlags[0];
	nCount = m_nChecks[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	nOptions = m_nMiscellaneousOptions[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDefaultReleaseTimeWindow[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDispatchTimeWindow[0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetMasterManualModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][0];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetReleaseWaitModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][1];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetAutoRejectionModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][2];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetInterlockModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][3];
	return Check(FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::GetDisabledStateFlag(BOOL &bFlag) CONST
{
	bFlag = m_bStateFlags[0];
	return Check(FALSE);
}

CTCManualStackSettingsDialog *CTCManualStackSettingsOperationsPage::GetParentDialog() CONST
{
	return((CTCManualStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCManualStackWnd *CTCManualStackSettingsOperationsPage::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCManualStackSettingsOperationsPage::ShowConfiguration()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, m_bModes[0][0]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, m_bModes[0][1]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, m_bModes[0][2]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, m_bStateFlags[0]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, m_bModes[0][3]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_PTV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_PEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_CEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_PTV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_PEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, (m_nCheckFlags[0] & TCMANUALSTACK_CHECKS_CEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, (m_nChecks[0] > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, (m_nArguments[0] >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, m_bArguments[0]);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, (m_nMiscellaneousOptions[0] & TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, (m_nMiscellaneousOptions[0] & TCMANUALSTACK_OPTION_UNDISPATCHONEXIT) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), m_tDefaultReleaseTimeWindow[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), m_tDispatchTimeWindow[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), m_nArguments[0]);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), m_nChecks[0]);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE) || !IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT));
}

VOID CTCManualStackSettingsOperationsPage::AdjustToPrivileges()
{
	BOOL  bCheck[2];

	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, (bCheck[0] = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, (bCheck[1] = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || bCheck[0]));
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, bCheck[0]);
}

BOOL CTCManualStackSettingsOperationsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_bModes[0][0] != m_bModes[1][0] || m_bModes[0][1] != m_bModes[1][1] || m_bModes[0][2] != m_bModes[1][2] || m_bModes[0][3] != m_bModes[1][3] || m_bStateFlags[0] != m_bStateFlags[1] || m_nCheckFlags[0] != m_nCheckFlags[1] || m_nChecks[0] != m_nChecks[1] || m_nMiscellaneousOptions[0] != m_nMiscellaneousOptions[1] || m_nArguments[0] != m_nArguments[1] || m_bArguments[0] != m_bArguments[1] || m_tDefaultReleaseTimeWindow[0] != m_tDefaultReleaseTimeWindow[1] || m_tDispatchTimeWindow[0] != m_tDispatchTimeWindow[1] || m_bAlerts[0] != m_bAlerts[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCManualStackSettingsOperationsPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCManualStackSettingsOperationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSettingsOperationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSettingsOperationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCManualStackSettingsOperationsPage)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, OnMasterManualMode)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, OnReleaseWaitMode)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, OnAutomaticRejectionMode)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, OnDisabledState)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, OnInterlockChecks)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, OnUpdateChecks)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_ALERTS, OnAlerts)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, OnLimitArguments)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, OnAllArguments)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, OnAlwaysAllowExit)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, OnUndispatchOnExit)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT, OnSpinchangeUpdateChecksCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT, OnSpinchangeArgumentsCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, OnSpinchangeDefaultReleaseTimeWindow)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, OnSpinchangeDispatchTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsOperationsPage message handlers

BOOL CTCManualStackSettingsOperationsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), TCMANUALSTACKSETTINGSOPERATIONSPAGE_MINIMUMCHECKCOUNT, TCMANUALSTACKSETTINGSOPERATIONSPAGE_MAXIMUMCHECKCOUNT);
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), TCMANUALSTACKSETTINGSOPERATIONSPAGE_MINIMUMARGUMENTS, TCMANUALSTACKSETTINGSOPERATIONSPAGE_MAXIMUMARGUMENTS);
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), TCMANUALSTACKSETTINGSOPERATIONSPAGE_MINIMUMDEFAULTRELEASETIMEWINDOW, TCMANUALSTACKSETTINGSOPERATIONSPAGE_MAXIMUMDEFAULTRELEASETIMEWINDOW);
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), TCMANUALSTACKSETTINGSOPERATIONSPAGE_MINIMUMDISPATCHTIMEWINDOW, TCMANUALSTACKSETTINGSOPERATIONSPAGE_MAXIMUMDISPATCHTIMEWINDOW);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_ALERTS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT)->EnableWindow();
	ShowConfiguration();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackSettingsOperationsPage::OnMasterManualMode()
{
	m_bModes[0][0] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnReleaseWaitMode()
{
	m_bModes[0][1] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnAutomaticRejectionMode()
{
	m_bModes[0][2] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnDisabledState()
{
	m_bStateFlags[0] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnOverridePTV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PTV_DISABLE) | TCMANUALSTACK_CHECKS_PTV_OVERRIDE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PTV_OVERRIDE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_PTV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnDisablePTV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PTV_OVERRIDE) | TCMANUALSTACK_CHECKS_PTV_DISABLE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PTV_DISABLE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_PTV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnOverridePEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PEV_DISABLE) | TCMANUALSTACK_CHECKS_PEV_OVERRIDE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PEV_OVERRIDE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_PEV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnDisablePEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PEV_OVERRIDE) | TCMANUALSTACK_CHECKS_PEV_DISABLE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_PEV_DISABLE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_PEV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnOverrideCEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_CEV_DISABLE) | TCMANUALSTACK_CHECKS_CEV_OVERRIDE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_CEV_OVERRIDE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_CEV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnDisableCEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV)) ? ((m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_CEV_OVERRIDE) | TCMANUALSTACK_CHECKS_CEV_DISABLE) : (m_nCheckFlags[0] & ~TCMANUALSTACK_CHECKS_CEV_DISABLE); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV); )
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, FALSE);
		m_nCheckFlags[0] &= ~TCMANUALSTACK_CHECKS_CEV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnInterlockChecks()
{
	m_bModes[0][3] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnUpdateChecks()
{
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), (m_nChecks[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE)) ? TCMANUALSTACK_UPDATELISTCHECKS_DEFAULTCOUNT : 0));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnAlerts()
{
	CTCManualStackAlertOptionsDialog  cAlertOptionsDialog;

	m_bAlerts[0] = (cAlertOptionsDialog.Create(this) == IDOK) ? TRUE : FALSE;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnLimitArguments()
{
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), (m_nArguments[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED)) ? TCMANUALSTACKSETTINGSOPERATIONSPAGE_DEFAULTARGUMENTS : -1));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnAllArguments()
{
	m_bArguments[0] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnAlwaysAllowExit()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, ((m_nMiscellaneousOptions[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT)) ? (m_nMiscellaneousOptions[0] | TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT) : (m_nMiscellaneousOptions[0] & ~(TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT | TCMANUALSTACK_OPTION_UNDISPATCHONEXIT))) & TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT) ? IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnUndispatchOnExit()
{
	m_nMiscellaneousOptions[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)) ? (m_nMiscellaneousOptions[0] | TCMANUALSTACK_OPTION_UNDISPATCHONEXIT) : (m_nMiscellaneousOptions[0] & ~TCMANUALSTACK_OPTION_UNDISPATCHONEXIT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnSpinchangeUpdateChecksCount()
{
	m_nChecks[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnSpinchangeArgumentsCount()
{
	m_nArguments[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnSpinchangeDefaultReleaseTimeWindow()
{
	m_tDefaultReleaseTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsOperationsPage::OnSpinchangeDispatchTimeWindow()
{
	m_tDispatchTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsLoggingPage property page

IMPLEMENT_DYNCREATE(CTCManualStackSettingsLoggingPage, CLocalePropertyPage)

CTCManualStackSettingsLoggingPage::CTCManualStackSettingsLoggingPage() : CLocalePropertyPage(CTCManualStackSettingsLoggingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCManualStackSettingsLoggingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCManualStackSettingsLoggingPage::Initialize()
{
	if (GetParentDisplay()->GetLoggingOptions(m_nArchivalPolicy[0], m_szArchivalFileName[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0], m_nRetrievalReloadCount[0], m_bShowAsEvent[0]))
	{
		m_nArchivalPolicy[1] = m_nArchivalPolicy[0] = m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET;
		m_szArchivalFileName[1] = m_szArchivalFileName[0];
		m_dwArchivalRetention[1] = m_dwArchivalRetention[0];
		m_tArchivalRetention[1] = m_tArchivalRetention[0];
		m_szRetrievalFileName[1] = m_szRetrievalFileName[0];
		m_nRetrievalReloadCount[1] = m_nRetrievalReloadCount[0];
		m_bShowAsEvent[1] = m_bShowAsEvent[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackSettingsLoggingPage::GetOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	nArchivalPolicy = m_nArchivalPolicy[0];
	szArchivalFileName = m_szArchivalFileName[0];
	dwArchivalRetention = m_dwArchivalRetention[0];
	tArchivalRetention = m_tArchivalRetention[0];
	szRetrievalFileName = m_szRetrievalFileName[0];
	nRetrievalReloadCount = m_nRetrievalReloadCount[0];
	bShowAsEvent = m_bShowAsEvent[0];
	return Check(FALSE);
}

CTCManualStackSettingsDialog *CTCManualStackSettingsLoggingPage::GetParentDialog() CONST
{
	return((CTCManualStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCManualStackWnd *CTCManualStackSettingsLoggingPage::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCManualStackSettingsLoggingPage::ShowLoggingDetails()
{
	for (Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCMANUALSTACKSETTINGSLOGGINGPAGE_MINIMUMRELOADCOUNT, TCMANUALSTACKSETTINGSLOGGINGPAGE_MAXIMUMRELOADCOUNT), Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCMANUALSTACKSETTINGSLOGGINGPAGE_MINIMUMRETRIEVALSTOPCOUNT, TCMANUALSTACKSETTINGSLOGGINGPAGE_MAXIMUMRETRIEVALSTOPCOUNT), CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME, TRUE), CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE), CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, m_bShowAsEvent[0]); m_nRetrievalReloadCount[0] > 0; )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), m_nRetrievalReloadCount[0]);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD, TRUE);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	SetTimer(TCMANUALSTACKSETTINGSLOGGINGPAGE_TIMERID, TCMANUALSTACKSETTINGSLOGGINGPAGE_TIMEOUT, NULL);
	RetrieveLogEntries();
}

VOID CTCManualStackSettingsLoggingPage::ShowLogEntries(CONST CTCLogEntries &pEntries)
{
	INT  nEntry;
	INT  nEntries;
	CTCLogEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)pEntries.GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pEntry = pEntries.GetAt(nEntry)))
		{
			ShowLogEntry(pEntry, nEntry);
			continue;
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST), nEntries);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackSettingsLoggingPage::ShowLogEntry(CONST CTCLogEntry *pEntry, INT nIndex)
{
	INT  nColumn;
	INT  nColumns;
	CString  szEntry;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME); )
		{
			szEntry = pEntry->GetName();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION); )
		{
			szEntry = pEntry->GetDescription();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY); )
		{
			szEntry = pEntry->GetActivity();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME); )
		{
			szEntry = pEntry->GetTime().FormatGmt();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_USER); )
		{
			szEntry = pEntry->GetUser();
			break;
		}
		if ((nIndex >= SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) || nIndex < 0) && !nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) : nIndex, szEntry);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)(SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) - 1) : nIndex, nColumn, szEntry);
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackSettingsLoggingPage::RetrieveLogEntries()
{
	CTCLogEntries  pEntries;

	if (RetrieveLogEntries(pEntries))
	{
		ShowLogEntries(pEntries);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackSettingsLoggingPage::RetrieveLogEntries(CTCLogEntries &pEntries)
{
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	for (pEntries.RemoveAll(); IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME); )
	{
		if ((nCount = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)) : 0) > 0)
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.SeekFromEnd(nCount))
				{
					do
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry) != (CTCLogEntry *)NULL)
							{
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					} while (TRUE);
					for (nEntry = 0, nEntries = (INT)(pEntries.GetSize() - nCount); nEntry < nEntries; nEntry++)
					{
						if ((pEntry = pEntries.GetAt(nEntry)))
						{
							pEntries.RemoveAt(nEntry);
							delete pEntry;
							nEntries--;
							nEntry--;
						}
					}
					m_cRetrievalFile.Close();
					return TRUE;
				}
				if (m_cRetrievalFile.IsEmpty())
				{
					m_cRetrievalFile.Close();
					return TRUE;
				}
				m_cRetrievalFile.Close();
			}
			return FALSE;
		}
		return TRUE;
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL))
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
		{
			for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)), nCount = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)); m_cRetrievalFile.SeekTo(tStartTime); )
			{
				do
				{
					if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && tLogTime <= tStopTime)
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && nCount > pEntries.GetSize())
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
					}
					break;
				} while (TRUE);
				m_cRetrievalFile.Close();
				return TRUE;
			}
			if (m_cRetrievalFile.IsEmpty())
			{
				m_cRetrievalFile.Close();
				return TRUE;
			}
			m_cRetrievalFile.Close();
		}
	}
	return FALSE;
}

VOID CTCManualStackSettingsLoggingPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, bCheck);
	AccessControl(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, bCheck);
}

BOOL CTCManualStackSettingsLoggingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1]) || m_nRetrievalReloadCount[0] != m_nRetrievalReloadCount[1] || m_bShowAsEvent[0] != m_bShowAsEvent[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCManualStackSettingsLoggingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCManualStackSettingsLoggingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSettingsLoggingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSettingsLoggingPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSettingsLoggingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCManualStackSettingsLoggingPage)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME, OnRealtime)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD, OnReloadCount)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, OnStopAtTime)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, OnStopAtLimit)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, OnStopAtEnd)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE, OnRetrieve)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, OnShowAsEvent)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT, OnSpinchangeReloadCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsLoggingPage message handlers

BOOL CTCManualStackSettingsLoggingPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_USER));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME)) ? (rColumns.Width() / 4) : (rColumns.Width() / 5))));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_MODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT)->EnableWindow();
	ShowLoggingDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackSettingsLoggingPage::OnRealtime()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
}

void CTCManualStackSettingsLoggingPage::OnHistorical()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), CTimeKey(CTime::GetCurrentTime().GetTime() - SECONDSPERHOUR));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
}

void CTCManualStackSettingsLoggingPage::OnReloadCount()
{
	m_nRetrievalReloadCount[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD)) ? TCMANUALSTACKSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT : 0;
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCMANUALSTACKSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLoggingPage::OnStopAtTime()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), CTimeKey(CTime::GetCurrentTime().GetTime()));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->SetFocus();
}

void CTCManualStackSettingsLoggingPage::OnStopAtLimit()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCMANUALSTACKSETTINGSLOGGINGPAGE_DEFAULTRETRIEVALSTOPCOUNT);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->SetFocus();
}

void CTCManualStackSettingsLoggingPage::OnStopAtEnd()
{
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
}

void CTCManualStackSettingsLoggingPage::OnOptions()
{
	CTCManualStackLoggingOptionsDialog  cLoggingOptionsDialog;

	for (cLoggingOptionsDialog.Create(this, m_szArchivalFileName[0], m_nArchivalPolicy[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0]); m_nArchivalPolicy[0] & LOGFILE_POLICY_RESET; )
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			m_cRetrievalFile.Reset();
			m_cRetrievalFile.Close();
			RetrieveLogEntries();
		}
		m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RESET;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLoggingPage::OnRetrieve()
{
	CHourglassCursor  cCursor;

	RetrieveLogEntries();
}

void CTCManualStackSettingsLoggingPage::OnShowAsEvent()
{
	m_bShowAsEvent[0] = IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLoggingPage::OnSpinchangeReloadCount()
{
	m_nRetrievalReloadCount[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsLoggingPage::OnSpinchangeStartTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), tTime[0]);
		break;
	}
}

void CTCManualStackSettingsLoggingPage::OnSpinchangeStopTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), tTime[1]);
		break;
	}
}

void CTCManualStackSettingsLoggingPage::OnTimer(UINT_PTR nEventID)
{
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	if (nEventID == TCMANUALSTACKSETTINGSLOGGINGPAGE_TIMERID)
	{
		if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_LOGGINGPAGE_REALTIME))
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.IsWatched() || m_cRetrievalFile.BeginWatch())
				{
					if (m_cRetrievalFile.Watch(nLogData))
					{
						do
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (pEntry->Unmap(nLogData)) ShowLogEntry(pEntry);
								delete pEntry;
							}
						} while (m_cRetrievalFile.Watch(nLogData));
					}
				}
				m_cRetrievalFile.Close();
			}
		}
	}
	CLocalePropertyPage::OnTimer(nEventID);
}

void CTCManualStackSettingsLoggingPage::OnDestroy()
{
	if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
	{
		m_cRetrievalFile.EndWatch();
		m_cRetrievalFile.Close();
	}
	KillTimer(TCMANUALSTACKSETTINGSLOGGINGPAGE_TIMERID);
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsPrintingComments

IMPLEMENT_DYNCREATE(CTCManualStackSettingsPrintingComments, CEdit)

BEGIN_MESSAGE_MAP(CTCManualStackSettingsPrintingComments, CEdit)
	//{{AFX_MSG_MAP(CTCManualStackSettingsPrintingComments)
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsPrintingComments message handlers

void CTCManualStackSettingsPrintingComments::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_TAB)
	{
		if (!HIBYTE(GetKeyState(VK_SHIFT)))
		{
			GetParent()->GetParent()->GetNextDlgTabItem(GetParent())->SetFocus();
			return;
		}
	}
	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsPrintingPage property page

IMPLEMENT_DYNCREATE(CTCManualStackSettingsPrintingPage, CLocalePropertyPage)

CTCManualStackSettingsPrintingPage::CTCManualStackSettingsPrintingPage() : CLocalePropertyPage(CTCManualStackSettingsPrintingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCManualStackSettingsPrintingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCManualStackSettingsPrintingPage::Initialize()
{
	return((GetParentDisplay()->GetPrintJobs(m_pJobs[0])) ? m_pJobs[1].Copy(&m_pJobs[0]) : FALSE);
}

BOOL CTCManualStackSettingsPrintingPage::GetJobs(CTCManualStackPrintJobs &pJobs) CONST
{
	return((pJobs.Copy(&m_pJobs[0])) ? Check(FALSE) : FALSE);
}

CTCManualStackSettingsDialog *CTCManualStackSettingsPrintingPage::GetParentDialog() CONST
{
	return((CTCManualStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCManualStackWnd *CTCManualStackSettingsPrintingPage::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCManualStackSettingsPrintingPage::ShowJobInfo()
{
	UINT  nMode;
	UINT  nRange[2];
	CTimeKey  tRange[2];
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, ((nMode = pJobInfo->GetPrintMode()) & TCMANUALSTACK_PRINT_ONSTACKITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, (nMode & TCMANUALSTACK_PRINT_DISPATCHEDITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, (nMode & TCMANUALSTACK_PRINT_NOTRELEASEDITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, (nMode & TCMANUALSTACK_PRINT_FAILEDRELEASEITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, (nMode & TCMANUALSTACK_PRINT_ITEMRANGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, (nMode & TCMANUALSTACK_PRINT_TIMERANGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (nMode & TCMANUALSTACK_PRINT_CLEARCOMMENTS) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetProfile()));
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[0] : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[1] : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[0] : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[1] : 0);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(pJobInfo->GetComments());
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!pJobInfo->GetComments().IsEmpty());
		return;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(FALSE);
}

CTCManualStackPrintJobInfo *CTCManualStackSettingsPrintingPage::FindJobInfo() CONST
{
	return m_pJobs[0].GetAt(m_pJobs[0].Find(STRING(IDS_PRINTJOB_DEFAULTNAME)));
}

BOOL CTCManualStackSettingsPrintingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pJobs[0].Compare(&m_pJobs[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCManualStackSettingsPrintingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE)->SendMessage(CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK) || IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED) || IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED) || IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)) && (!IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER) || Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)) <= Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH))) && (!IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME) || Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)))) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCManualStackSettingsPrintingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSettingsPrintingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSettingsPrintingPage::PostNcDestroy()
{
	m_pJobs[0].RemoveAll();
	m_pJobs[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSettingsPrintingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCManualStackSettingsPrintingPage)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, OnPrintOnStackItems)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, OnPrintDispatchedItems)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, OnPrintNotReleasedItems)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, OnPrintFailedReleaseItems)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, OnPrintItemRange)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, OnPrintTimeRange)
	ON_BN_CLICKED(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, OnResetComments)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE, OnSelchangeProfile)
	ON_EN_CHANGE(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT, OnEditchangeComments)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW, OnSpinchangeLowItemRange)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH, OnSpinchangeHighItemRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START, OnSpinchangeStartTimeRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP, OnSpinchangeStopTimeRange)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsPrintingPage message handlers

BOOL CTCManualStackSettingsPrintingPage::OnInitDialog()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	for (nProfile = 0, nProfiles = (EnumPrintProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0, Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), TCMANUALSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCMANUALSTACKSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), TCMANUALSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCMANUALSTACKSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), m_wndComments.SubclassWindow(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetSafeHwnd()); nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	ShowJobInfo();
	return TRUE;
}

void CTCManualStackSettingsPrintingPage::OnPrintOnStackItems()
{
	UINT  nMode;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_ONSTACKITEMS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_ONSTACKITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnPrintDispatchedItems()
{
	UINT  nMode;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_DISPATCHEDITEMS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_DISPATCHEDITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnPrintNotReleasedItems()
{
	UINT  nMode;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_NOTRELEASEDITEMS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_NOTRELEASEDITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnPrintFailedReleaseItems()
{
	UINT  nMode;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_FAILEDRELEASEITEMS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_FAILEDRELEASEITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnPrintItemRange()
{
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_ITEMRANGE);
			pJobInfo->SetPrintRange(TCMANUALSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCMANUALSTACKSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
		}
		else
		{
			pJobInfo->SetPrintRange(0, 0);
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_ITEMRANGE);
		}
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), TCMANUALSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), TCMANUALSTACKSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnPrintTimeRange()
{
	CTimeKey  tTime;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_TIMERANGE);
			pJobInfo->SetPrintRange(tTime, tTime.GetTime() + SECONDSPERHOUR);
		}
		else
		{
			pJobInfo->SetPrintRange(CTimeKey(0), CTimeKey(0));
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_TIMERANGE);
		}
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), CTimeKey(tTime.GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnSelchangeProfile()
{
	CString  szProfile;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_PROFILE)->GetWindowText(szProfile);
		pJobInfo->SetProfile(szProfile);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnSpinchangeLowItemRange()
{
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo())) pJobInfo->SetPrintRange((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnSpinchangeHighItemRange()
{
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo())) pJobInfo->SetPrintRange((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnSpinchangeStartTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]), tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)); tTime[0] > tRange[1]; )
		{
			tRange[1] = tTime[0];
			break;
		}
		pJobInfo->SetPrintRange(tTime[0], tRange[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), tTime[0]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnSpinchangeStopTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[1] < tRange[0]; )
		{
			tRange[0] = tTime[1];
			break;
		}
		pJobInfo->SetPrintRange(tRange[0], tTime[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), tTime[1]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnEditchangeComments()
{
	CString  szComments;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetWindowText(szComments);
		GetDlgItem(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!szComments.IsEmpty());
		CheckDlgButton(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (!szComments.IsEmpty()) ? IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS) : FALSE);
		pJobInfo->SetPrintMode((IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_CLEARCOMMENTS));
		pJobInfo->SetComments(szComments);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSettingsPrintingPage::OnResetComments()
{
	UINT  nMode;
	CTCManualStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCMANUALSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCMANUALSTACK_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_CLEARCOMMENTS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsTabCtrl

IMPLEMENT_DYNCREATE(CTCManualStackSettingsTabCtrl, CTabCtrl)

BEGIN_MESSAGE_MAP(CTCManualStackSettingsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCManualStackSettingsTabCtrl)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsTabCtrl message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsDialog

IMPLEMENT_DYNCREATE(CTCManualStackSettingsDialog, CDisplayPropertySheetDialog)

CTCManualStackSettingsDialog::CTCManualStackSettingsDialog() : CDisplayPropertySheetDialog()
{
	AddPage(&m_pageLayout);
	AddPage(&m_pageOperations);
	AddPage(&m_pageLogging);
	AddPage(&m_pagePrinting);
}

BOOL CTCManualStackSettingsDialog::GetColumns(CUIntArray &nColumns) CONST
{
	return m_pageLayout.GetColumns(nColumns);
}

BOOL CTCManualStackSettingsDialog::GetTitleFont(LPLOGFONT pTitleFont) CONST
{
	return m_pageLayout.GetTitleFont(pTitleFont);
}

BOOL CTCManualStackSettingsDialog::GetItemsFont(LPLOGFONT pItemsFont) CONST
{
	return m_pageLayout.GetItemsFont(pItemsFont);
}

BOOL CTCManualStackSettingsDialog::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	return m_pageLayout.GetGridBackgroundColor(nColor);
}

BOOL CTCManualStackSettingsDialog::GetToolTipMode(BOOL &bEnable) CONST
{
	return m_pageLayout.GetToolTipMode(bEnable);
}

BOOL CTCManualStackSettingsDialog::IsLayoutModified() CONST
{
	return m_pageLayout.IsModified();
}

BOOL CTCManualStackSettingsDialog::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return m_pageOperations.GetListOptions(nArguments, bAll);
}

BOOL CTCManualStackSettingsDialog::GetListCheckOptions(UINT &nFlags, INT &nCount) CONST
{
	return m_pageOperations.GetListCheckOptions(nFlags, nCount);
}

BOOL CTCManualStackSettingsDialog::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return m_pageOperations.GetMiscellaneousOptions(nOptions);
}

BOOL CTCManualStackSettingsDialog::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pageOperations.GetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCManualStackSettingsDialog::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pageOperations.GetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCManualStackSettingsDialog::GetMasterManualModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetMasterManualModeFlag(bEnabled);
}

BOOL CTCManualStackSettingsDialog::GetReleaseWaitModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetReleaseWaitModeFlag(bEnabled);
}

BOOL CTCManualStackSettingsDialog::GetAutoRejectionModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetAutoRejectionModeFlag(bEnabled);
}

BOOL CTCManualStackSettingsDialog::GetInterlockModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetInterlockModeFlag(bEnabled);
}

BOOL CTCManualStackSettingsDialog::GetDisabledStateFlag(BOOL &bFlag) CONST
{
	return m_pageOperations.GetDisabledStateFlag(bFlag);
}

BOOL CTCManualStackSettingsDialog::IsOperationsModified() CONST
{
	return m_pageOperations.IsModified();
}

BOOL CTCManualStackSettingsDialog::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	return m_pageLogging.GetOptions(nArchivalPolicy, szArchivalFileName, dwArchivalRetention, tArchivalRetention, szRetrievalFileName, nRetrievalReloadCount, bShowAsEvent);
}

BOOL CTCManualStackSettingsDialog::IsLoggingModified() CONST
{
	return m_pageLogging.IsModified();
}

BOOL CTCManualStackSettingsDialog::GetPrintJobs(CTCManualStackPrintJobs &pPrintJobs) CONST
{
	return m_pagePrinting.GetJobs(pPrintJobs);
}

BOOL CTCManualStackSettingsDialog::IsPrintingModified() CONST
{
	return m_pagePrinting.IsModified();
}

CTCManualStackWnd *CTCManualStackSettingsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayPropertySheetDialog::GetParentDisplay());
}

BEGIN_MESSAGE_MAP(CTCManualStackSettingsDialog, CDisplayPropertySheetDialog)
	//{{AFX_MSG_MAP(CTCManualStackSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSettingsDialog message handlers

BOOL CTCManualStackSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayPropertySheetDialog::OnInitDialog();
	SetTitle(STRING(IDS_TCMANUALSTACKSETTINGSDIALOG_TITLE));
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTCManualStackSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	ReportEvent((!GetParentDisplay()->OnCloseSettingsDialog(IDOK)) ? SYSTEM_WARNING_TCMANUALSTACK_SETUP_FAILURE : SYSTEM_NOERROR);
	CDisplayPropertySheetDialog::OnOK();
}

void CTCManualStackSettingsDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->OnCloseSettingsDialog(IDCANCEL);
	CDisplayPropertySheetDialog::OnCancel();
}

BOOL CTCManualStackSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackAlertOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackAlertOptionsDialog, CDisplayDialog)

CTCManualStackAlertOptionsDialog::CTCManualStackAlertOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackAlertOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackAlertOptionsDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCManualStackAlertOptionsDialog::IDD);
}

BOOL CTCManualStackAlertOptionsDialog::Initialize()
{
	if (GetParentDisplay()->GetAlertOptions(m_nTypes[0], m_szAuditions[0], m_szNotifications[0], m_nAcknowledgeColors[0], m_bAcknowledgments[0]))
	{
		m_nTypes[1].Copy(m_nTypes[0]);
		m_szAuditions[1].Copy(m_szAuditions[0]);
		m_szNotifications[1].Copy(m_szNotifications[0]);
		m_nAcknowledgeColors[1].Copy(m_nAcknowledgeColors[0]);
		m_bAcknowledgments[1].Copy(m_bAcknowledgments[0]);
		return TRUE;
	}
	return FALSE;
}

CTCManualStackOperationsPage *CTCManualStackAlertOptionsDialog::GetParentDialog() CONST
{
	return((CTCManualStackOperationsPage *)CDisplayDialog::GetParent());
}

CTCManualStackWnd *CTCManualStackAlertOptionsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackAlertOptionsDialog::EnumTypes()
{
	if (SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_INSERTSTRING, TCMANUALSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_ALERTTYPE_TELECOMMANDRELEASEFAILURE)) >= 0 && SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_INSERTSTRING, TCMANUALSTACK_ALERTTYPE_INTERLOCKFAILURE, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_ALERTTYPE_INTERLOCKFAILURE)) >= 0)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_ALERTTYPE_TELECOMMANDRELEASEFAILURE)));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackAlertOptionsDialog::EnumAuditions()
{
	INT  nAudition;
	INT  nAuditions;
	CStringArray  szAuditions;

	for (nAudition = 0, nAuditions = (EnumAuditionProfiles(szAuditions)) ? (INT)szAuditions.GetSize() : 0; nAudition < nAuditions; nAudition++)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szAuditions.GetAt(nAudition));
		continue;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE));
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackAlertOptionsDialog::EnumNotifications()
{
	INT  nNotification;
	INT  nNotifications;
	CStringArray  szNotifications;

	for (nNotification = 0, nNotifications = (EnumNotificationProfiles(szNotifications)) ? (INT)szNotifications.GetSize() : 0; nNotification < nNotifications; nNotification++)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szNotifications.GetAt(nNotification));
		continue;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE));
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackAlertOptionsDialog::ShowAlertDetails()
{
	INT  nPos;
	INT  nAlertType;
	CString  szAudition;
	CString  szNotification[2];

	for (szNotification[0] = ((nAlertType = FindAlertType()) >= 0) ? m_szNotifications[0].GetAt(nAlertType) : EMPTYSTRING, SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_RESETCONTENT); !szNotification[0].IsEmpty(); )
	{
		for (szNotification[1] = szNotification[0]; (nPos = szNotification[0].Find(TAB)) >= 0; )
		{
			szNotification[1] = szNotification[0].Left(nPos);
			szNotification[0] = szNotification[0].Mid(nPos + 1);
			break;
		}
		for (szNotification[0] = (nPos >= 0) ? szNotification[0] : EMPTYSTRING; SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[1]) < 0; )
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[1]);
			break;
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szAudition = (nAlertType >= 0 && !m_szAuditions[0].GetAt(nAlertType).IsEmpty()) ? m_szAuditions[0].GetAt(nAlertType) : STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE))));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE)), 0));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)((nAlertType >= 0) ? m_nAcknowledgeColors[0].GetAt(nAlertType) : GetSysColor(COLOR_WINDOWTEXT)));
	CheckDlgButton(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, (szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE) && nAlertType >= 0) ? m_bAcknowledgments[0].GetAt(nAlertType) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR_STATIC)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification[0] = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[0]) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCManualStackAlertOptionsDialog::FindAlertType() CONST
{
	INT  nType;
	INT  nTypes;
	INT  nAlertType;

	for (nType = 0, nTypes = (INT)m_nTypes[0].GetSize(), nAlertType = (INT)GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE)->SendMessage(CB_GETCURSEL); nType < nTypes; nType++)
	{
		if (m_nTypes[0].GetAt(nType) == nAlertType) break;
		continue;
	}
	return((nType < nTypes) ? nType : -1);
}

VOID CTCManualStackAlertOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, bCheck);
}

BOOL CTCManualStackAlertOptionsDialog::IsModified() CONST
{
	INT  nType[2];
	INT  nTypes[2];

	for (nType[0] = 0, nTypes[0] = (m_nTypes[0].GetSize() == m_nTypes[1].GetSize()) ? (INT)m_nTypes[0].GetSize() : -1; nType[0] < nTypes[0]; nType[0]++)
	{
		for (nType[1] = 0, nTypes[1] = (INT)m_nTypes[1].GetSize(); nType[1] < nTypes[1]; nType[1]++)
		{
			if (m_nTypes[0].GetAt(nType[0]) == m_nTypes[1].GetAt(nType[1])) break;
			continue;
		}
		if (nType[1] == nTypes[1] || m_szAuditions[0].GetAt(nType[0]) != m_szAuditions[1].GetAt(nType[1]) || m_szNotifications[0].GetAt(nType[0]) != m_szNotifications[1].GetAt(nType[1]) || m_nAcknowledgeColors[0].GetAt(nType[0]) != m_nAcknowledgeColors[1].GetAt(nType[1]) || m_bAcknowledgments[0].GetAt(nType[0]) != m_bAcknowledgments[1].GetAt(nType[1])) break;
	}
	return((nType[0] != nTypes[0]) ? TRUE : FALSE);
}

void CTCManualStackAlertOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackAlertOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackAlertOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackAlertOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, OnAuditionBlink)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD, OnAddNotification)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE, OnRemoveNotification)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL, OnRemoveAllNotifications)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ALERTOPTIONS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, OnSelchangeType)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, OnSelchangeAudition)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, OnSelchangeAuditionColor)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, OnSelchangeNotification)
	ON_LBN_SELCHANGE(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, OnSelchangeNotificationList)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackAlertOptionsDialog message handlers

BOOL CTCManualStackAlertOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->EnableWindow();
	EnumTypes();
	EnumAuditions();
	EnumNotifications();
	ShowAlertDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackAlertOptionsDialog::OnAuditionBlink()
{
	INT  nAlertType;
	CHourglassCursor  cCursor;

	for (; (nAlertType = FindAlertType()) >= 0; )
	{
		m_bAcknowledgments[0].SetAt(nAlertType, IsDlgButtonChecked(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnAddNotification()
{
	INT  nIndex;
	INT  nAlertType[2];
	CString  szAudition;
	CString  szNotification;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)(szNotification = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))))) >= 0)
	{
		for (nAlertType[0] = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_GETCURSEL), SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL, nIndex), szAudition = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_GETCURSEL)), szAudition = (szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? szAudition : EMPTYSTRING; (nAlertType[1] = FindAlertType()) >= 0; )
		{
			m_szNotifications[0].SetAt(nAlertType[1], (!m_szNotifications[0].GetAt(nAlertType[1]).IsEmpty()) ? (m_szNotifications[0].GetAt(nAlertType[1]) + TAB + szNotification) : szNotification);
			break;
		}
		if (nAlertType[1] < 0)
		{
			m_nTypes[0].Add(nAlertType[0]);
			m_szAuditions[0].Add(szAudition);
			m_szNotifications[0].Add(szNotification);
			m_nAcknowledgeColors[0].Add((DWORD)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
			m_bAcknowledgments[0].Add(IsDlgButtonChecked(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		}
	}
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnRemoveNotification()
{
	INT  nPos;
	INT  nIndex;
	INT  nAlertType;
	CString  szNotification;
	CHourglassCursor  cCursor;

	for (szNotification = Listbox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST), (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL))); SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_DELETESTRING, nIndex) >= 0; )
	{
		for (SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL); (nAlertType = FindAlertType()) >= 0; )
		{
			if (m_szNotifications[0].GetAt(nAlertType) == szNotification)
			{
				if (m_szAuditions[0].GetAt(nAlertType).IsEmpty())
				{
					m_nTypes[0].RemoveAt(nAlertType);
					m_szAuditions[0].RemoveAt(nAlertType);
					m_szNotifications[0].RemoveAt(nAlertType);
					m_nAcknowledgeColors[0].RemoveAt(nAlertType);
					m_bAcknowledgments[0].RemoveAt(nAlertType);
					break;
				}
				m_szNotifications[0].SetAt(nAlertType, EMPTYSTRING);
				break;
			}
			for (; (nPos = m_szNotifications[0].GetAt(nAlertType).Find(szNotification)) >= 0; )
			{
				m_szNotifications[0].SetAt(nAlertType, (nPos + szNotification.GetLength() < m_szNotifications[0].GetAt(nAlertType).GetLength()) ? (m_szNotifications[0].GetAt(nAlertType).Left(nPos) + m_szNotifications[0].GetAt(nAlertType).Mid(nPos + szNotification.GetLength() + 1)) : m_szNotifications[0].GetAt(nAlertType).Left(max(nPos - 1, 0)));
				break;
			}
			break;
		}
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnRemoveAllNotifications()
{
	INT  nAlertType;
	CString  szNotification;
	CHourglassCursor  cCursor;

	for (SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_RESETCONTENT); (nAlertType = FindAlertType()) >= 0; )
	{
		if (m_szAuditions[0].GetAt(nAlertType).IsEmpty())
		{
			m_nTypes[0].RemoveAt(nAlertType);
			m_szAuditions[0].RemoveAt(nAlertType);
			m_szNotifications[0].RemoveAt(nAlertType);
			m_nAcknowledgeColors[0].RemoveAt(nAlertType);
			m_bAcknowledgments[0].RemoveAt(nAlertType);
			break;
		}
		m_szNotifications[0].SetAt(nAlertType, EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnSelchangeType()
{
	ShowAlertDetails();
}

void CTCManualStackAlertOptionsDialog::OnSelchangeAudition()
{
	INT  nAlertType[2];
	CString  szAudition;

	for (nAlertType[0] = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_TYPE, CB_GETCURSEL), GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION)->GetWindowText(szAudition); (nAlertType[1] = FindAlertType()) >= 0; )
	{
		for (m_szAuditions[0].SetAt(nAlertType[1], (szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? szAudition : EMPTYSTRING); szAudition == STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE) && m_szNotifications[0].GetAt(nAlertType[1]).IsEmpty(); )
		{
			m_nTypes[0].RemoveAt(nAlertType[1]);
			m_szAuditions[0].RemoveAt(nAlertType[1]);
			m_szNotifications[0].RemoveAt(nAlertType[1]);
			m_nAcknowledgeColors[0].RemoveAt(nAlertType[1]);
			m_bAcknowledgments[0].RemoveAt(nAlertType[1]);
			break;
		}
		break;
	}
	if (nAlertType[1] < 0)
	{
		if (szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE))
		{
			m_nTypes[0].Add(nAlertType[0]);
			m_szAuditions[0].Add(szAudition);
			m_szNotifications[0].Add(EMPTYSTRING);
			m_nAcknowledgeColors[0].Add((DWORD)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
			m_bAcknowledgments[0].Add(IsDlgButtonChecked(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		}
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, (szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? IsDlgButtonChecked(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR_STATIC)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR)->EnableWindow((szAudition != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnSelchangeAuditionColor()
{
	INT  nAlertType;

	for (; (nAlertType = FindAlertType()) >= 0; )
	{
		m_nAcknowledgeColors[0].SetAt(nAlertType, (DWORD)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackAlertOptionsDialog::OnSelchangeNotification()
{
	CString  szNotification;

	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->GetWindowText(szNotification);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow((szNotification != STRING(IDS_TCMANUALSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCManualStackAlertOptionsDialog::OnSelchangeNotificationList()
{
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCManualStackAlertOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SetAlertOptions(m_nTypes[0], m_szAuditions[0], m_szNotifications[0], m_nAcknowledgeColors[0], m_bAcknowledgments[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackAlertOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKALERTOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackAlertOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKALERTOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoggingOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackLoggingOptionsDialog, CDisplayDialog)

CTCManualStackLoggingOptionsDialog::CTCManualStackLoggingOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackLoggingOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackLoggingOptionsDialog::Create(CWnd *pParentWnd, CString &szArchivalFileName, UINT &nArchivalPolicy, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName)
{
	INT  nResult;

	for (m_nArchivalPolicy[0] = m_nArchivalPolicy[1] = nArchivalPolicy, m_szArchivalFileName[0] = m_szArchivalFileName[1] = szArchivalFileName, m_dwArchivalRetention[0] = m_dwArchivalRetention[1] = dwArchivalRetention, m_tArchivalRetention[0] = m_tArchivalRetention[1] = tArchivalRetention, m_szRetrievalFileName[0] = m_szRetrievalFileName[1] = szRetrievalFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackLoggingOptionsDialog::IDD)) == IDOK; )
	{
		szRetrievalFileName = m_szRetrievalFileName[0];
		szArchivalFileName = m_szArchivalFileName[0];
		dwArchivalRetention = m_dwArchivalRetention[0];
		tArchivalRetention = m_tArchivalRetention[0];
		nArchivalPolicy = m_nArchivalPolicy[0];
		break;
	}
	return nResult;
}

CTCManualStackLoggingPage *CTCManualStackLoggingOptionsDialog::GetParentDialog() CONST
{
	return((CTCManualStackLoggingPage *)CDisplayDialog::GetParent());
}

CTCManualStackWnd *CTCManualStackLoggingOptionsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCManualStackLoggingOptionsDialog::ShowLoggingOptions()
{
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DISABLED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME) != LOGFILE_POLICY_RETENTIONBYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) != LOGFILE_POLICY_CYCLICMODE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) != LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS), m_tArchivalRetention[0].GetTotalSeconds() / SECONDSPERDAY);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), m_dwArchivalRetention[0] / 1024);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME)->SetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED));
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED));
}

VOID CTCManualStackLoggingOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DISABLED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM, bCheck);
	AccessControl(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_RESET, bCheck);
}

BOOL CTCManualStackLoggingOptionsDialog::IsModified() CONST
{
	return((m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1])) ? TRUE : FALSE);
}

BOOL CTCManualStackLoggingOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szArchivalFileName[0].IsEmpty() && !m_szRetrievalFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackLoggingOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackLoggingOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackLoggingOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackLoggingOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_RETRIEVALS, OnRetrievals)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, OnOverwriteLogs)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, OnOverwriteOldLogs)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, OnOverwriteNoLogs)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_RESET, OnResetSize)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOGGINGOPTIONS_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS, OnSpinchangeDays)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM, OnSpinchangeSize)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoggingOptionsDialog message handlers

BOOL CTCManualStackLoggingOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS), TCMANUALSTACKLOGGINGOPTIONS_MINIMUMDAYS, TCMANUALSTACKLOGGINGOPTIONS_MAXIMUMDAYS);
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), TCMANUALSTACKLOGGINGOPTIONS_MINIMUMSIZE, TCMANUALSTACKLOGGINGOPTIONS_MAXIMUMSIZE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_RETRIEVALS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_RESET)->EnableWindow();
	ShowLoggingOptions();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackLoggingOptionsDialog::OnRetrievals()
{
	CTCManualStackRetrievalOptionsDialog  cRetrievalOptions;

	cRetrievalOptions.Create(this, m_szRetrievalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME)->SetWindowText((m_szArchivalFileName[0] = cFileBrowseDialog.GetPathName()));
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnOverwriteLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnOverwriteOldLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = SECONDSPERDAY*TCMANUALSTACKLOGGINGOPTIONS_DEFAULTDAYS).GetTotalSeconds() / SECONDSPERDAY);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnOverwriteNoLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_NONCYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnUnlimitedSize()
{
	m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 0));
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnLimitedSize()
{
	m_nArchivalPolicy[0] |= LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 1024 * TCMANUALSTACKLOGGINGOPTIONS_DEFAULTSIZE) / 1024);
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnResetSize()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_RESET)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_RESET) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnDisabled()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOGGINGOPTIONS_DISABLED)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_DISABLED) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnSpinchangeDays()
{
	m_tArchivalRetention[0] = SECONDSPERDAY*Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_POLICY_DAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnSpinchangeSize()
{
	m_dwArchivalRetention[0] = 1024 * Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCMANUALSTACK_LOGGINGOPTIONS_FILENAME)->GetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoggingOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCManualStackLoggingOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackLoggingOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackRetrievalOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackRetrievalOptionsDialog, CDisplayDialog)

CTCManualStackRetrievalOptionsDialog::CTCManualStackRetrievalOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackRetrievalOptionsDialog::Create(CWnd *pParentWnd, CString &szFileName)
{
	INT  nResult;

	for (m_szFileName[0] = m_szFileName[1] = szFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackRetrievalOptionsDialog::IDD)) == IDOK; )
	{
		szFileName = m_szFileName[0];
		break;
	}
	return nResult;
}

CTCManualStackLoggingOptionsDialog *CTCManualStackRetrievalOptionsDialog::GetParentDialog() CONST
{
	return((CTCManualStackLoggingOptionsDialog *)CDisplayDialog::GetParent());
}

CTCManualStackWnd *CTCManualStackRetrievalOptionsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCManualStackRetrievalOptionsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME, CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
}

BOOL CTCManualStackRetrievalOptionsDialog::IsModified() CONST
{
	return((m_szFileName[0].CompareNoCase(m_szFileName[1])) ? TRUE : FALSE);
}

BOOL CTCManualStackRetrievalOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackRetrievalOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackRetrievalOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackRetrievalOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackRetrievalOptionsDialog message handlers

BOOL CTCManualStackRetrievalOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME)->SetWindowText(m_szFileName[0]);
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackRetrievalOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackRetrievalOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCMANUALSTACK_RETRIEVALOPTIONS_FILENAME)->GetWindowText(m_szFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackRetrievalOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCManualStackRetrievalOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackRetrievalOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchGroupsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchGroupsDialog, CDisplayDialog)

CTCManualStackSearchGroupsDialog::CTCManualStackSearchGroupsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchGroupsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackSearchGroupsDialog::Create(CWnd *pParentWnd, UINT nType, LPCTSTR pszGroup)
{
	INT  nResult;

	for (m_nType = nType, m_szGroup = pszGroup; (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackSearchGroupsDialog::IDD)) == IDOK; ) break;
	return nResult;
}
INT CTCManualStackSearchGroupsDialog::Create(CWnd *pParentWnd, CONST CDatabaseTCFunctions &pFunctions)
{
	INT  nResult;

	for (m_nType = TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS, m_szGroup.Empty(), m_pFunctions.Copy(&pFunctions); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackSearchGroupsDialog::IDD)) == IDOK; ) break;
	return nResult;
}
INT CTCManualStackSearchGroupsDialog::Create(CWnd *pParentWnd, CONST CDatabaseTCSequences &pSequences)
{
	INT  nResult;

	for (m_nType = TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES, m_szGroup.Empty(), m_pSequences.Copy(&pSequences); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackSearchGroupsDialog::IDD)) == IDOK; ) break;
	return nResult;
}

BOOL CTCManualStackSearchGroupsDialog::Initialize()
{
	GetParentDisplay()->GetSearchGroups(m_nType, m_pGroups[0]);
	return m_pGroups[1].Copy(&m_pGroups[0]);
}

CTCManualStackWnd *CTCManualStackSearchGroupsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackSearchGroupsDialog::EnumGroups()
{
	INT  nGroup;
	INT  nGroups;
	CTCManualStackSearchGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)m_pGroups[0].GetSize(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = m_pGroups[0].GetAt(nGroup)) != (CTCManualStackSearchGroup *)NULL)
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pGroup->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szGroup));
	return TRUE;
}

BOOL CTCManualStackSearchGroupsDialog::EnumTelecommands()
{
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	CString  szFunction;
	CString  szSequence;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;

	for (nFunction = 0, nFunctions = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS) ? (INT)GetDatabase()->GetTCFunctions()->GetSize() : 0; nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && (pFunction->GetAttributes() & (TCFUNCTION_EXETYPE_NOTSTANDALONE | TCFUNCTION_EXETYPE_NOTALLOWED)) == 0)
		{
			szFunction.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_FUNCTIONS_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFunction);
		}
	}
	for (nSequence = 0, nSequences = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES) ? (INT)GetDatabase()->GetTCSequences()->GetSize() : 0; nSequence < nSequences; nSequence++)
	{
		if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
		{
			szSequence.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_SEQUENCES_FORMAT), (LPCTSTR)pSequence->GetName(), (LPCTSTR)pSequence->GetDescription());
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSequence);
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_SETCURSEL);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_FUNCTIONS_STATIC)->ShowWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_SEQUENCES_STATIC)->ShowWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_STACKS_STATIC)->ShowWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_STACKS) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_FUNCTIONS_STATIC)->EnableWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS  &&  SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_SEQUENCES_STATIC)->EnableWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES  &&  SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_STACKS_STATIC)->EnableWindow((m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_STACKS  &&  SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

VOID CTCManualStackSearchGroupsDialog::ShowContents()
{
	INT  nColumn;
	INT  nColumns;
	INT  nMember;
	INT  nMembers;
	BOOL  bMember;
	CString  szItem;
	CString  szMember;
	CStringArray  szMembers;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CTCManualStackSearchGroup  *pGroup;

	for (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_DELETEALLITEMS), bMember = FALSE; (pGroup = FindGroup()); )
	{
		for (nMember = 0, nMembers = pGroup->GetMembers(szMembers); nMember < nMembers; nMember = nMember + 1)
		{
			if ((pFunction = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(szMembers.GetAt(nMember))) : (CDatabaseTCFunction *)NULL))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
					{
						szItem = pFunction->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
					{
						szItem = pFunction->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, nColumn, szItem);
				}
				szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_FUNCTIONS_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
				bMember = (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMember) != SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL)) ? bMember : TRUE;
				continue;
			}
			if ((pSequence = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES) ? GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(szMembers.GetAt(nMember))) : (CDatabaseTCSequence *)NULL))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
					{
						szItem = pSequence->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
					{
						szItem = pSequence->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, nColumn, szItem);
				}
				szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_SEQUENCES_FORMAT), (LPCTSTR)pSequence->GetName(), (LPCTSTR)pSequence->GetDescription());
				bMember = (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMember) != SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL)) ? bMember : TRUE;
				continue;
			}
		}
		break;
	}
	for (nMember = 0, nMembers = (INT)m_pFunctions.GetSize(); nMember < nMembers; nMember++)
	{
		if ((pFunction = m_pFunctions.GetAt(nMember)) != (CDatabaseTCFunction *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
				{
					szItem = pFunction->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunction->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, nColumn, szItem);
			}
			szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_FUNCTIONS_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription());
			bMember = (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMember) != SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL)) ? bMember : TRUE;
		}
	}
	for (nMember = 0, nMembers = (INT)m_pSequences.GetSize(); nMember < nMembers; nMember++)
	{
		if ((pSequence = m_pSequences.GetAt(nMember)) != (CDatabaseTCSequence *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
				{
					szItem = pSequence->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
				{
					szItem = pSequence->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, nColumn, szItem);
			}
			szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_SEQUENCES_FORMAT), (LPCTSTR)pSequence->GetName(), (LPCTSTR)pSequence->GetDescription());
			bMember = (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMember) != SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL)) ? bMember : TRUE;
		}
	}
	m_pFunctions.RemoveAll();
	m_pSequences.RemoveAll();
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), 0);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL) >= 0 && !bMember) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

CTCManualStackSearchGroup *CTCManualStackSearchGroupsDialog::FindGroup() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->GetWindowText(szName);
	return m_pGroups[0].GetAt(m_pGroups[0].Find(szName));
}

INT CTCManualStackSearchGroupsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackSearchGroupsDialog::IsModified() CONST
{
	return !m_pGroups[0].Compare(&m_pGroups[1]);
}

BOOL CTCManualStackSearchGroupsDialog::Check(BOOL bModified) CONST
{
	INT  nGroup;
	INT  nGroups;
	CStringArray  szMembers;
	CTCManualStackSearchGroup  *pGroup;

	for (nGroup = 0, nGroups = (GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->GetWindowTextLength() > 0 || !m_pGroups[0].GetSize()) ? (INT)m_pGroups[0].GetSize() : -1; nGroup < nGroups; nGroup++)
	{
		if ((pGroup = m_pGroups[0].GetAt(nGroup)) && !pGroup->GetMembers(szMembers)) break;
		continue;
	}
	return((nGroup == nGroups) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackSearchGroupsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchGroupsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSearchGroupsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pGroups[0].RemoveAll();
	m_pGroups[1].RemoveAll();
	m_pFunctions.RemoveAll();
	m_pSequences.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchGroupsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchGroupsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD, OnAddMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHGROUPS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, OnSelchangeTelecommand)
	ON_CBN_EDITCHANGE(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchGroupsDialog message handlers

BOOL CTCManualStackSearchGroupsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME)) ? (rColumns.Width() / 3) : ((2 * rColumns.Width()) / 3));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_CONTENTS)->EnableWindow();
	EnumGroups();
	EnumTelecommands();
	ShowContents();
	return TRUE;
}

BOOL CTCManualStackSearchGroupsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackSearchGroupsDialog::OnAdd()
{
	INT  nIndex;
	INT  nMember;
	INT  nMembers;
	CString  szName;
	CStringArray  szMembers;
	CTCManualStackSearchGroup  *pGroup;
	CHourglassCursor  cCursor;

	if ((pGroup = new CTCManualStackSearchGroup))
	{
		for (GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->GetWindowText(szName); (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName)) >= 0; )
		{
			for (nMember = 0, nMembers = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT); nMember < nMembers; nMember++)
			{
				szMembers.Add(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME))));
				continue;
			}
			pGroup->SetName(szName);
			pGroup->SetType(m_nType);
			pGroup->SetMembers(szMembers);
			m_pGroups[0].InsertAt(nIndex, pGroup, 1);
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_SETCURSEL, nIndex);
			break;
		}
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnRemove()
{
	INT  nIndex;
	CTCManualStackSearchGroup  *pGroup;
	CHourglassCursor  cCursor;

	if ((pGroup = m_pGroups[0].GetAt((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCURSEL)))))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_SETCURSEL);
		m_pGroups[0].RemoveAt(nIndex);
		delete pGroup;
	}
	ShowContents();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pGroups[0].RemoveAll();
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnAddMember()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szMember;
	CStringArray  szMembers;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CTCManualStackSearchGroup  *pGroup;
	CHourglassCursor  cCursor;

	if ((pGroup = FindGroup()))
	{
		for (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL), pGroup->GetMembers(szMembers); m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS; )
		{
			if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nIndex)))
			{
				szMembers.Add(pFunction->GetName());
				pGroup->SetMembers(szMembers);
			}
			break;
		}
		if (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES)
		{
			if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nIndex)))
			{
				szMembers.Add(pSequence->GetName());
				pGroup->SetMembers(szMembers);
			}
		}
	}
	for (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL); m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS; )
	{
		if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nIndex)) != (CDatabaseTCFunction *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
				{
					szItem = szMember = pFunction->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
				{
					szItem = pFunction->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT), szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
			}
		}
		break;
	}
	if (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES)
	{
		if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nIndex)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME); )
				{
					szItem = szMember = pSequence->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION); )
				{
					szItem = pSequence->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT), szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) - 1);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow((szMember.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnRemoveMember()
{
	INT  nIndex;
	CString  szMember;
	CStringArray  szMembers;
	CTCManualStackSearchGroup  *pGroup;
	CHourglassCursor  cCursor;

	if ((pGroup = FindGroup()))
	{
		for (pGroup->GetMembers(szMembers); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS))) >= 0 && nIndex < szMembers.GetSize(); )
		{
			szMembers.RemoveAt(nIndex);
			break;
		}
		pGroup->SetMembers(szMembers);
	}
	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS))) >= 0)
	{
		for (szMember.Empty(); m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS; )
		{
			szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_FUNCTIONS_FORMAT), (LPCTSTR)Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME))), (LPCTSTR)Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION))));
			break;
		}
		for (; m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES; )
		{
			szMember.Format(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_SEQUENCES_FORMAT), (LPCTSTR)Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME))), (LPCTSTR)Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_DESCRIPTION))));
			break;
		}
		Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nIndex);
		Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), 0);
	}
	for (GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE); SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMember) == SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow();
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnRemoveAllMembers()
{
	CStringArray  szMembers;
	CTCManualStackSearchGroup  *pGroup;
	CHourglassCursor  cCursor;

	for (; (pGroup = FindGroup()); )
	{
		pGroup->SetMembers(szMembers);
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchGroupsDialog::OnSelchangeName()
{
	INT  nIndex;

	for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_GETCURSEL)) >= 0; )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_SETCURSEL, nIndex);
		break;
	}
	ShowContents();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_REMOVEALL)->EnableWindow();
}

void CTCManualStackSearchGroupsDialog::OnSelchangeTelecommand()
{
	INT  nIndex;
	INT  nMember;
	INT  nMembers;
	CString  szMember;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_LIST, CB_GETCURSEL)) >= 0)
	{
		for (; (pFunction = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS) ? GetDatabase()->GetTCFunctions()->GetAt(nIndex) : (CDatabaseTCFunction *)NULL); )
		{
			szMember = pFunction->GetName();
			break;
		}
		for (; (pSequence = (m_nType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES) ? GetDatabase()->GetTCSequences()->GetAt(nIndex) : (CDatabaseTCSequence *)NULL); )
		{
			szMember = pSequence->GetName();
			break;
		}
		for (nMember = 0, nMembers = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS, LVM_GETITEMCOUNT); nMember < nMembers; nMember++)
		{
			if (Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBERS), nMember, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHGROUPS_TITLEITEM_NAME))) == szMember) break;
			continue;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_MEMBER_ADD)->EnableWindow((nMember == nMembers) ? TRUE : FALSE);
	}
}

void CTCManualStackSearchGroupsDialog::OnEditchangeName()
{
	CString  szName;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHGROUPS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHGROUPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0 && !szName.IsEmpty()) ? TRUE : FALSE);
}

void CTCManualStackSearchGroupsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SetSearchGroups(m_nType, m_pGroups[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackSearchGroupsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSEARCHGROUPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackSearchGroupsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSEARCHGROUPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFilterDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchFilterDialog, CDisplayDialog)

CTCManualStackSearchFilterDialog::CTCManualStackSearchFilterDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchFilterDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackSearchFilterDialog::Create(CWnd *pParentWnd, CTCManualStackSearchFilter *pFilter)
{
	INT  nResult;

	for (m_cFilter[0].Copy(pFilter), m_cFilter[1].Copy(pFilter); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackSearchFilterDialog::IDD)) == IDOK; )
	{
		pFilter->Copy(&m_cFilter[0]);
		break;
	}
	return nResult;
}

BOOL CTCManualStackSearchFilterDialog::EnumSearchKeys()
{
	INT  nKey;
	INT  nKeys;
	INT  nIndex;
	INT  nCount;
	INT  nEvent;
	INT  nEvents;
	INT  nTCID[2];
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nSubSystem;
	INT  nSubSystems;
	INT  nSubSchedule;
	INT  nSubSchedules;
	CString  szExample;
	CStringArray  szTypes;
	CStringArray  szCategories;
	CStringArray  szSubSystems;
	CStringArray  szSubSchedules;
	CStringArray  szMissionPlannerEvents;
	CLongUIntArray  nAttributes;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CStringTools  cStringTools;

	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS)
	{
		for (nKey = 0, nKeys = MAXTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY - MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey)); !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TYPE)); )
			{
				if (GetDatabase()->EnumTCFunctionTypes(szTypes, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TYPE), (LPCTSTR)szTypes.GetAt(rand() % szTypes.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCTYPE)); )
			{
				if (GetDatabase()->EnumTCFunctionTCTypes(szTypes, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCTYPE), (LPCTSTR)szTypes.GetAt(rand() % szTypes.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCID)); )
			{
				if (GetDatabase()->GetTCFunctionTCIDRange(nTCID[0], nTCID[1]))
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCID), (LPCTSTR)cStringTools.ConvertIntToString(nTCID[0] + rand() % (nTCID[1] - nTCID[0] + 1), 16));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCPACKET)); )
			{
				if ((nCount = (INT)GetDatabase()->GetTCPackets()->GetSize()) > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCPACKET), (LPCTSTR)GetDatabase()->GetTCPackets()->GetAt(rand() % nCount)->GetTag());
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_CATEGORY)); )
			{
				if (GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_CATEGORY), (LPCTSTR)szCategories.GetAt(rand() % szCategories.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSYSTEM)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetDestinationSubSystem().IsEmpty())
					{
						for (nSubSystem = 0, nSubSystems = (INT)szSubSystems.GetSize(); nSubSystem < nSubSystems; nSubSystem++)
						{
							if (pFunction->GetDestinationSubSystem() == szSubSystems.GetAt(nSubSystem)) break;
							continue;
						}
						if (nSubSystem == nSubSystems)
						{
							szSubSystems.Add(pFunction->GetDestinationSubSystem());
							continue;
						}
					}
				}
				if (szSubSystems.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_SUBSYSTEM), (LPCTSTR)szSubSystems.GetAt(rand() % szSubSystems.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSCHEDULE)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetDestinationSubSchedule().IsEmpty())
					{
						for (nSubSchedule = 0, nSubSchedules = (INT)szSubSchedules.GetSize(); nSubSchedule < nSubSchedules; nSubSchedule++)
						{
							if (pFunction->GetDestinationSubSchedule() == szSubSchedules.GetAt(nSubSchedule)) break;
							continue;
						}
						if (nSubSchedule == nSubSchedules)
						{
							szSubSchedules.Add(pFunction->GetDestinationSubSchedule());
							continue;
						}
					}
				}
				if (szSubSchedules.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_SUBSCHEDULE), (LPCTSTR)szSubSchedules.GetAt(rand() % szSubSchedules.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_MISSIONPLANNEREVENT)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction = nFunction + 1)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetMissionPlannerEvent().IsEmpty())
					{
						for (nEvent = 0, nEvents = (INT)szMissionPlannerEvents.GetSize(); nEvent < nEvents; nEvent++)
						{
							if (pFunction->GetMissionPlannerEvent() == szMissionPlannerEvents.GetAt(nEvent)) break;
							continue;
						}
						if (nEvent == nEvents)
						{
							szMissionPlannerEvents.Add(pFunction->GetMissionPlannerEvent());
							continue;
						}
					}
				}
				if (szMissionPlannerEvents.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_MISSIONPLANNEREVENT), (LPCTSTR)szMissionPlannerEvents.GetAt(rand() % szMissionPlannerEvents.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES)
	{
		for (nKey = 0, nKeys = MAXTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY - MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey)); !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_USER)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_FUNCTION)); )
			{
				if ((nCount = (INT)GetDatabase()->GetTCFunctions()->GetSize()) > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_FUNCTION), (LPCTSTR)GetDatabase()->GetTCFunctions()->GetAt(rand() % nCount)->GetName());
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_SUBSCHEDULE)); )
			{
				for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
				{
					if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) && !pSequence->GetDestinationSubSchedule().IsEmpty())
					{
						for (nSubSchedule = 0, nSubSchedules = (INT)szSubSchedules.GetSize(); nSubSchedule < nSubSchedules; nSubSchedule++)
						{
							if (pSequence->GetDestinationSubSchedule() == szSubSchedules.GetAt(nSubSchedule)) break;
							continue;
						}
						if (nSubSchedule == nSubSchedules)
						{
							szSubSchedules.Add(pFunction->GetDestinationSubSchedule());
							continue;
						}
					}
				}
				if (szSubSchedules.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_SUBSCHEDULE), (LPCTSTR)szSubSchedules.GetAt(rand() % szSubSchedules.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_MISSIONPLANNEREVENT)); )
			{
				for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence = nSequence + 1)
				{
					if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) && !pSequence->GetMissionPlannerEvent().IsEmpty())
					{
						for (nEvent = 0, nEvents = (INT)szMissionPlannerEvents.GetSize(); nEvent < nEvents; nEvent++)
						{
							if (pSequence->GetMissionPlannerEvent() == szMissionPlannerEvents.GetAt(nEvent)) break;
							continue;
						}
						if (nEvent == nEvents)
						{
							szMissionPlannerEvents.Add(pFunction->GetMissionPlannerEvent());
							continue;
						}
					}
				}
				if (szMissionPlannerEvents.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_MISSIONPLANNEREVENT), (LPCTSTR)szMissionPlannerEvents.GetAt(rand() % szMissionPlannerEvents.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_STACKS)
	{
		for (nKey = 0, nKeys = MAXTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY - MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey)); !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_NAME)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_AUTHOR)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_WORKSTATION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS)); )
			{
				m_szFilterExamples.Add(STRING(MINTCMANUALSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackSearchFilterDialog::ShowFilterInfo()
{
	INT  nKey;
	INT  nKeys;
	INT  nColumn;
	INT  nColumns;
	CString  szKey;
	CString  szItem;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_NAME)->SetWindowText(m_cFilter[0].GetName());
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY); )
			{
				szItem = szKeys.GetAt(nKey);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE); )
			{
				szItem = szValues.GetAt(nKey);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), nKey, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), nKey, nColumn, szItem);
		}
		if (szKey == szKeys.GetAt(nKey))
		{
			for (; SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValues.GetAt(nKey))) < 0; )
			{
				GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValues.GetAt(nKey));
				break;
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCManualStackSearchFilterDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackSearchFilterDialog::IsModified() CONST
{
	return !m_cFilter[0].Compare(&m_cFilter[1]);
}

BOOL CTCManualStackSearchFilterDialog::Check(BOOL bModified) CONST
{
	CString  szName;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_NAME)->GetWindowText(szName);
	return((!szName.IsEmpty() && GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackSearchFilterDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchFilterDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSearchFilterDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szFilterExamples.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchFilterDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchFilterDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHFILTER_ADD, OnAddSearchKey)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE, OnRemoveSearchKey)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL, OnRemoveAllSearchKeys)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SEARCHFILTER_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, OnEditchangeKeyValue)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, OnSelchangeKeyValue)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, OnSelchangeSearchKey)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_SEARCHFILTER_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFilterDialog message handlers

BOOL CTCManualStackSearchFilterDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE));
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY)) ? (rColumns.Width() / 3) : ((2 * rColumns.Width()) / 3));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_NAME)->EnableWindow();
	EnumSearchKeys();
	ShowFilterInfo();
	return TRUE;
}

BOOL CTCManualStackSearchFilterDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackSearchFilterDialog::OnAddSearchKey()
{
	INT  nColumn;
	INT  nColumns;
	CString  szKey;
	CString  szItem;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), m_cFilter[0].GetSearchKeys(szKeys, szValues), szKeys.Add(szKey), szValues.Add(szValue), m_cFilter[0].SetSearchKeys(szKeys, szValues); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY); )
		{
			szItem = szKey;
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE); )
		{
			szItem = szValue;
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT), szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) - 1);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow((!SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnRemoveSearchKey()
{
	INT  nKey;
	INT  nKeys;
	CString  szValue;
	CString  szKey[2];
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey[0]);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues), szKey[1] = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY))); nKey < nKeys; nKey++)
	{
		if (szKey[1] == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST))))
		{
			Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), 0);
			szKeys.RemoveAt(nKey);
			szValues.RemoveAt(nKey);
			m_cFilter[0].SetSearchKeys(szKeys, szValues);
		}
	}
	for (GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE); szKey[0] == szKey[1]; )
	{
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow(!szValue.IsEmpty());
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnRemoveAllSearchKeys()
{
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	m_cFilter[0].SetSearchKeys(szKeys, szValues);
	SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow(!szValue.IsEmpty());
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnSelchangeSearchKey()
{
	INT  nKey;
	INT  nKeys;
	INT  nType;
	INT  nTypes;
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nCategory;
	INT  nCategories;
	CString  szKey;
	CString  szValue;
	CString  szExample;
	CStringArray  szKeys;
	CStringArray  szTypes;
	CStringArray  szValues;
	CStringArray  szCategories;
	CLongUIntArray  nAttributes;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;

	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TYPE); )
		{
			for (nType = 0, nTypes = GetDatabase()->EnumTCFunctionTypes(szTypes, nAttributes); nType < nTypes; nType++)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTypes.GetAt(nType));
				continue;
			}
			break;
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCTYPE))
		{
			for (nType = 0, nTypes = GetDatabase()->EnumTCFunctionTCTypes(szTypes, nAttributes); nType < nTypes; nType++)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTypes.GetAt(nType));
				continue;
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCPACKET))
		{
			for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
			{
				if ((pPacket = GetDatabase()->GetTCPackets()->GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
				{
					SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pPacket->GetTag());
					continue;
				}
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_CATEGORY))
		{
			for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nAttributes); nCategory < nCategories; nCategory++)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szCategories.GetAt(nCategory));
				continue;
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSYSTEM))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSystem()) < 0 && !pFunction->GetDestinationSubSystem().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSystem());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSCHEDULE))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSchedule()) < 0 && !pFunction->GetDestinationSubSchedule().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSchedule());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_MISSIONPLANNEREVENT))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetMissionPlannerEvent()) < 0 && !pFunction->GetMissionPlannerEvent().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetMissionPlannerEvent());
						continue;
					}
				}
			}
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_USER); )
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetUser()) < 0 && !pSequence->GetUser().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pSequence->GetUser());
						continue;
					}
				}
			}
			break;
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_FUNCTION))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetName());
					continue;
				}
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_SUBSCHEDULE))
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetDestinationSubSchedule()) < 0 && !pSequence->GetDestinationSubSchedule().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetDestinationSubSchedule());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_MISSIONPLANNEREVENT))
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetMissionPlannerEvent()) < 0 && !pSequence->GetMissionPlannerEvent().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetMissionPlannerEvent());
						continue;
					}
				}
			}
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	if (m_cFilter[0].GetType() == TCMANUALSTACKSEARCHFILTER_TYPE_STACKS)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS); )
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED));
			SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED));
			break;
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow(FALSE);
}

void CTCManualStackSearchFilterDialog::OnSelchangeKeyValue()
{
	INT  nKey;
	INT  nKeys;
	CString  szKey;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	szValue = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE, CB_GETCURSEL));
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		if (szKey == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		szValues.SetAt(nKey, szValue);
		m_cFilter[0].SetSearchKeys(szKeys, szValues);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), nKey, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE)), szValue);
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow((nKey == nKeys) ? !szValue.IsEmpty() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnEditchangeName()
{
	CString  szName;

	for (GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_NAME)->GetWindowText(szName); szName.GetLength() >= 0; )
	{
		m_cFilter[0].SetName(szName);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnEditchangeKeyValue()
{
	INT  nKey;
	INT  nKeys;
	CString  szKey;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		if (szKey == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		szValues.SetAt(nKey, szValue);
		m_cFilter[0].SetSearchKeys(szKeys, szValues);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_KEYSLIST), nKey, FindColumnIndex(STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE)), szValue);
	}
	GetDlgItem(IDC_TCMANUALSTACK_SEARCHFILTER_ADD)->EnableWindow((nKey == nKeys) ? !szValue.IsEmpty() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSearchFilterDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCManualStackSearchFilterDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSEARCHFILTERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackSearchFilterDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSEARCHFILTERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesParametersCalibrationPage, CLocalePropertyPage)

CTCManualStackItemPropertiesParametersCalibrationPage::CTCManualStackItemPropertiesParametersCalibrationPage() : CLocalePropertyPage(CTCManualStackItemPropertiesParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCManualStackItemPropertiesParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nIndex;
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_nCalTableIDs.RemoveAll(); pDatabaseTCParameter != (CONST CDatabaseTCParameter *) NULL; )
	{
		if ((m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))) != (CDatabaseTCNumCalTable *)NULL)
			{
				for (szName.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))))
			{
				for (szName.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCManualStackItemPropertiesParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCManualStackItemPropertiesParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCManualStackItemPropertiesParametersFolder *CTCManualStackItemPropertiesParametersCalibrationPage::GetParent() CONST
{
	return((CTCManualStackItemPropertiesParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCManualStackItemPropertiesParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCManualStackItemPropertiesParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemPropertiesParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersCalibrationPage message handlers

BOOL CTCManualStackItemPropertiesParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCManualStackItemPropertiesParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackItemPropertiesParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesParametersFolderTabCtrl, CTabCtrl)

CTCManualStackItemPropertiesParametersFolder *CTCManualStackItemPropertiesParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCManualStackItemPropertiesParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersFolderTabCtrl message handlers

UINT CTCManualStackItemPropertiesParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCManualStackItemPropertiesParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersFolder

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesParametersFolder, CLocalePropertySheetDialog)

CTCManualStackItemPropertiesParametersFolder::CTCManualStackItemPropertiesParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCManualStackItemPropertiesParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCManualStackItemPropertiesParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pDatabaseTCParameter);
}

BOOL CTCManualStackItemPropertiesParametersFolder::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szX, szY);
}

CTCManualStackItemPropertiesParametersDialog *CTCManualStackItemPropertiesParametersFolder::GetParent() CONST
{
	return((CTCManualStackItemPropertiesParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersFolder message handlers

void CTCManualStackItemPropertiesParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesParametersDialog, CDisplayDialog)

CTCManualStackItemPropertiesParametersDialog::CTCManualStackItemPropertiesParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemPropertiesParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszParameter, CString &szValue)
{
	CString  szX;
	CString  szY;
	INT  nResult;

	for (m_szParameter = pszParameter, szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return nResult;
}

VOID CTCManualStackItemPropertiesParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
}

BOOL CTCManualStackItemPropertiesParametersDialog::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CDisplayDialog *CTCManualStackItemPropertiesParametersDialog::GetParent() CONST
{
	return((CDisplayDialog *)CDisplayDialog::GetParent());
}

BOOL CTCManualStackItemPropertiesParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTCParameter  *pParameter;

	if ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(m_szParameter))))
	{
		if (pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_szParameter, EMPTYSTRING);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackItemPropertiesParametersDialog::ShowParameterInfo()
{
	CString  szParameter[2];
	CDatabaseTCParameter  *pParameter;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM)->GetWindowText(szParameter[0]), szParameter[1].Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), EMPTYSTRING, EMPTYSTRING), szParameter[0] = (szParameter[0].Find(szParameter[1]) >= 0) ? szParameter[0].Left(szParameter[0].Find(szParameter[1])) : szParameter[0]; (pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter[0]))); )
	{
		m_wndFolderCtrl.ShowParameterInfo(pParameter);
		return;
	}
	m_wndFolderCtrl.ShowParameterInfo();
}

CRect CTCManualStackItemPropertiesParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCManualStackItemPropertiesParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParametersDialog message handlers

BOOL CTCManualStackItemPropertiesParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CDisplayDialog::OnInitDialog(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	return TRUE;
}

void CTCManualStackItemPropertiesParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCManualStackItemPropertiesParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemPropertiesParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemPropertiesParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParameterSetsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesParameterSetsDialog, CDisplayDialog)

CTCManualStackItemPropertiesParameterSetsDialog::CTCManualStackItemPropertiesParameterSetsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesParameterSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemPropertiesParameterSetsDialog::Create(CWnd *pParentWnd, CONST CTCManualStackItem *pItem, CString &szParameterSet)
{
	INT  nResult;

	for (m_cItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesParameterSetsDialog::IDD)) == IDOK; )
	{
		szParameterSet = m_szParameterSet;
		break;
	}
	return nResult;
}

BOOL CTCManualStackItemPropertiesParameterSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CString  szParameterSet;
	CStringArray  szParameterSets;
	CDatabaseTCParameterSet  *pParameterSet;

	for (nSet = 0, nSets = m_cItem.GetParameterSets(szParameterSets); nSet < nSets; nSet++)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
		{
			szParameterSet.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_FORMAT), (LPCTSTR)pParameterSet->GetName(), (LPCTSTR)pParameterSet->GetDescription());
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameterSet);
		}
	}
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCManualStackItemPropertiesParameterSetsDialog::ShowParameterSetContents()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CStringTools  cStringTools;
	CStringArray  szParameterSets;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];

	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_DELETEALLITEMS);
	if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_cItem.GetName()))))
	{
		if ((pParameterSet = ((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_GETCURSEL)) < m_cItem.GetParameterSets(szParameterSets)) ? GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nIndex))) : (CDatabaseTCParameterSet *)NULL))
		{
			for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) != (CDatabaseTCFunctionElement *)NULL)
				{
					if ((pFunctionElement[1] = m_cItem.GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))))
					{
						if (pFunctionElement[0]->GetName() == pFunctionElement[1]->GetName() && pFunctionElement[0]->GetWidth() == pFunctionElement[1]->GetWidth())
						{
							for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
							{
								if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET)))) > 8 * pFunctionElement[1]->GetBytePos() + pFunctionElement[1]->GetBitPos()) break;
								continue;
							}
							for (nColumn = 0, nColumns = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
							{
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG); )
								{
									szItem = pFunctionElement[0]->GetName();
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION); )
								{
									szItem = pFunctionElement[0]->GetDescription();
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE))
								{
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_RAW) : EMPTYSTRING;
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_NUMERICAL) : szItem;
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_STATUS) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET); )
								{
									szItem = cStringTools.ConvertIntToString(8 * pFunctionElement[1]->GetBytePos() + pFunctionElement[1]->GetBitPos());
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH); )
								{
									szItem = cStringTools.ConvertIntToString(pFunctionElement[1]->GetWidth());
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING))
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_DATETIME) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_STRING) : szItem;
									szItem = ((pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN)) : szItem;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX))
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_OCTAL) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG); )
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_FIXED) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_VARIABLE);
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE); )
								{
									szItem = pFunctionElement[0]->GetConstValueAsText();
									break;
								}
								if (!nColumn)
								{
									Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, szItem);
									continue;
								}
								Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, nColumn, szItem);
							}
						}
					}
				}
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), 0);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

INT CTCManualStackItemPropertiesParameterSetsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackItemPropertiesParameterSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTCManualStackItemPropertiesParameterSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesParameterSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemPropertiesParameterSetsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesParameterSetsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesParameterSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, OnSelchangeSet)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesParameterSetsDialog message handlers

BOOL CTCManualStackItemPropertiesParameterSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME)->EnableWindow();
	EnumParameterSets();
	ShowParameterSetContents();
	return TRUE;
}

void CTCManualStackItemPropertiesParameterSetsDialog::OnSelchangeSet()
{
	ShowParameterSetContents();
}

void CTCManualStackItemPropertiesParameterSetsDialog::OnOK()
{
	INT  nIndex;
	CStringArray  szParameterSets;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_GETCURSEL)) >= 0 && nIndex < m_cItem.GetParameterSets(szParameterSets)) m_szParameterSet = szParameterSets.GetAt(nIndex);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemPropertiesParameterSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemPropertiesParameterSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesSaveTemplateDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesSaveTemplateDialog, CDisplayDialog)

CTCManualStackItemPropertiesSaveTemplateDialog::CTCManualStackItemPropertiesSaveTemplateDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesSaveTemplateDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemPropertiesSaveTemplateDialog::Create(CWnd *pParentWnd, CONST CTCManualStackItem *pItem)
{
	m_cItem.Copy(pItem);
	return CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesSaveTemplateDialog::IDD);
}
INT CTCManualStackItemPropertiesSaveTemplateDialog::Create(CWnd *pParentWnd, CONST CTCManualStackComposedItem *pItem)
{
	m_cComposedItem.Copy(pItem);
	return CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesSaveTemplateDialog::IDD);
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::Initialize()
{
	for (m_pItemTemplates[0].RemoveAll(), m_pItemTemplates[1].RemoveAll(); !m_cComposedItem.GetSize(); )
	{
		GetParentDisplay()->GetItemTemplates(m_pItemTemplates[0]);
		return m_pItemTemplates[1].Copy(&m_pItemTemplates[0]);
	}
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	GetParentDisplay()->GetItemTemplates(m_pComposedItemTemplates[0]);
	return m_pComposedItemTemplates[1].Copy(&m_pComposedItemTemplates[0]);
}

CTCManualStackWnd *CTCManualStackItemPropertiesSaveTemplateDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCManualStackItemPropertiesSaveTemplateDialog::EnumTemplates()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	INT  nTemplate;
	INT  nTemplates;
	CString  szItem;

	for (nTemplate = 0, nTemplates = ((!m_cComposedItem.GetSize() && m_pItemTemplates[0].Enum(m_cItem.GetName(), m_szTemplates) >= 0) || (m_cComposedItem.GetSize() > 0 && m_pComposedItemTemplates[0].Enum(m_cComposedItem.GetName(), m_szTemplates) >= 0)) ? (INT)m_szTemplates.GetSize() : 0; nTemplate < nTemplates; nTemplate++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
		{
			for (nPos = m_szTemplates.GetAt(nTemplate).Find(TAB); m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Left(nPos) : m_szTemplates.GetAt(nTemplate);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_DESCRIPTION); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nTemplate, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nTemplate, nColumn, szItem);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::IsModified() CONST
{
	return(((!m_cComposedItem.GetSize() && !m_pItemTemplates[0].Compare(&m_pItemTemplates[1])) || (m_cComposedItem.GetSize() > 0 && !m_pComposedItemTemplates[0].Compare(&m_pComposedItemTemplates[1]))) ? TRUE : FALSE);
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::Check(BOOL bModified) CONST
{
	INT  nPos;
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;
	CString  szDescription;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->GetWindowText(szDescription);
	for (nTemplate = 0, nTemplates = (INT)m_szTemplates.GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		if (((nPos = m_szTemplates.GetAt(nTemplate).Find(TAB)) >= 0 && m_szTemplates.GetAt(nTemplate).Left(nPos) == szName) || (nPos < 0 && m_szTemplates.GetAt(nTemplate) == szName)) break;
		continue;
	}
	return((nTemplate == nTemplates) ? (!bModified || IsModified() || (!szName.IsEmpty() && !szDescription.IsEmpty())) : FALSE);
}

void CTCManualStackItemPropertiesSaveTemplateDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesSaveTemplateDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemPropertiesSaveTemplateDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szTemplates.RemoveAll();
	m_pItemTemplates[0].RemoveAll();
	m_pItemTemplates[1].RemoveAll();
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesSaveTemplateDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesSaveTemplateDialog)
	ON_WM_CREATE()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE, OnRemoveTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL, OnRemoveAllTemplates)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, OnEditchangeTemplateName)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION, OnEditchangeTemplateDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesSaveTemplateDialog message handlers

int CTCManualStackItemPropertiesSaveTemplateDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	INT  nPos[3];
	CString  szTitle[2];

	if (CDisplayDialog::OnCreate(lpCreateStruct) != -1)
	{
		for (GetWindowText(szTitle[0]), GetParent()->GetWindowText(szTitle[1]), nPos[0] = szTitle[0].ReverseFind(SPACE[0]), nPos[1] = szTitle[1].Find(SPACE[0]), nPos[2] = szTitle[1].ReverseFind(SPACE[0]); nPos[0] > 0 && nPos[1] > 0 && nPos[1] < nPos[2]; )
		{
			SetWindowText(szTitle[0].Left(nPos[0]) + szTitle[1].Mid(nPos[1], nPos[2] - nPos[1]) + szTitle[0].Mid(nPos[0]));
			break;
		}
		return 0;
	}
	return -1;
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : (3 * rColumns.Width() / 4));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->EnableWindow();
	EnumTemplates();
	return TRUE;
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnRemoveTemplate()
{
	INT  nIndex;
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					if (pItemTemplate->GetTemplateName() + TAB + pItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
					{
						m_pItemTemplates[0].RemoveAt(nTemplate);
						m_szTemplates.RemoveAt(nIndex);
						delete pItemTemplate;
						nTemplates--;
						nTemplate--;
						break;
					}
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() + TAB + pComposedItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
				{
					m_pComposedItemTemplates[0].RemoveAt(nTemplate);
					m_szTemplates.RemoveAt(nIndex);
					delete pComposedItemTemplate;
					nTemplates--;
					nTemplate--;
					break;
				}
				continue;
			}
			break;
		}
		break;
	}
	Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nIndex);
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), 0);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnRemoveAllTemplates()
{
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					m_pItemTemplates[0].RemoveAt(nTemplate);
					delete pItemTemplate;
					nTemplates--;
					nTemplate--;
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				m_pComposedItemTemplates[0].RemoveAt(nTemplate);
				delete pComposedItemTemplate;
				nTemplates--;
				nTemplate--;
				continue;
			}
			break;
		}
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, EM_SETSEL, 0, -1);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnEditchangeTemplateName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnEditchangeTemplateDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnOK()
{
	CString  szName;
	CString  szDescription;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->GetWindowText(szDescription); !m_cComposedItem.GetSize(); )
	{
		if (!szName.IsEmpty() && !szDescription.IsEmpty())
		{
			if ((pItemTemplate = new CTCManualStackItemTemplate))
			{
				pItemTemplate->SetTemplateName(szName);
				pItemTemplate->SetTemplateDescription(szDescription);
				if (pItemTemplate->CTCManualStackItem::Copy(&m_cItem) && m_pItemTemplates[0].Add(pItemTemplate) >= 0)
				{
					GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
					break;
				}
				delete pItemTemplate;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
		break;
	}
	for (; m_cComposedItem.GetSize() > 0; )
	{
		if (!szName.IsEmpty() && !szDescription.IsEmpty())
		{
			if ((pComposedItemTemplate = new CTCManualStackComposedItemTemplate))
			{
				pComposedItemTemplate->SetTemplateName(szName);
				pComposedItemTemplate->SetTemplateDescription(szDescription);
				if (pComposedItemTemplate->CTCManualStackComposedItem::Copy(&m_cComposedItem) && m_pComposedItemTemplates[0].Add(pComposedItemTemplate) >= 0)
				{
					GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
					break;
				}
				delete pComposedItemTemplate;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
		break;
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemPropertiesSaveTemplateDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemPropertiesSaveTemplateDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesLoadTemplateDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesLoadTemplateDialog, CDisplayDialog)

CTCManualStackItemPropertiesLoadTemplateDialog::CTCManualStackItemPropertiesLoadTemplateDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesLoadTemplateDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemPropertiesLoadTemplateDialog::Create(CWnd *pParentWnd, CTCManualStackItem *pItem)
{
	INT  nResult;

	for (m_cItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesLoadTemplateDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cItem)) return nResult;
		break;
	}
	return -1;
}
INT CTCManualStackItemPropertiesLoadTemplateDialog::Create(CWnd *pParentWnd, CTCManualStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cComposedItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesLoadTemplateDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cComposedItem)) return nResult;
		break;
	}
	return -1;
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::Initialize()
{
	for (m_pItemTemplates[0].RemoveAll(), m_pItemTemplates[1].RemoveAll(); !m_cComposedItem.GetSize(); )
	{
		GetParentDisplay()->GetItemTemplates(m_pItemTemplates[0]);
		return m_pItemTemplates[1].Copy(&m_pItemTemplates[0]);
	}
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	GetParentDisplay()->GetItemTemplates(m_pComposedItemTemplates[0]);
	return m_pComposedItemTemplates[1].Copy(&m_pComposedItemTemplates[0]);
}

CTCManualStackWnd *CTCManualStackItemPropertiesLoadTemplateDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::EnumTemplates()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	INT  nTemplate;
	INT  nTemplates;
	CString  szItem;

	for (nTemplate = 0, nTemplates = ((!m_cComposedItem.GetSize() && m_pItemTemplates[0].Enum(m_cItem.GetName(), m_szTemplates) >= 0) || (m_cComposedItem.GetSize() >= 0 && m_pComposedItemTemplates[0].Enum(m_cComposedItem.GetName(), m_szTemplates) >= 0)) ? (INT)m_szTemplates.GetSize() : 0; nTemplate < nTemplates; nTemplate++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
		{
			for (nPos = m_szTemplates.GetAt(nTemplate).Find(TAB); m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Left(nPos) : m_szTemplates.GetAt(nTemplate);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_DESCRIPTION); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nTemplate, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nTemplate, nColumn, szItem);
		}
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::IsModified() CONST
{
	return(((!m_cComposedItem.GetSize() && !m_pItemTemplates[0].Compare(&m_pItemTemplates[1])) || (m_cComposedItem.GetSize() > 0 && !m_pComposedItemTemplates[0].Compare(&m_pComposedItemTemplates[1]))) ? TRUE : FALSE);
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::Check(BOOL bModified) CONST
{
	INT  nPos;
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName);
	for (nTemplate = 0, nTemplates = (!szName.IsEmpty()) ? (INT)m_szTemplates.GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (((nPos = m_szTemplates.GetAt(nTemplate).Find(TAB)) >= 0 && m_szTemplates.GetAt(nTemplate).Left(nPos) == szName) || (nPos < 0 && m_szTemplates.GetAt(nTemplate) == szName)) break;
		continue;
	}
	return((nTemplate < nTemplates || nTemplates < 0) ? (!bModified || IsModified() || !szName.IsEmpty()) : FALSE);
}

void CTCManualStackItemPropertiesLoadTemplateDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesLoadTemplateDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemPropertiesLoadTemplateDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szTemplates.RemoveAll();
	m_pItemTemplates[0].RemoveAll();
	m_pItemTemplates[1].RemoveAll();
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesLoadTemplateDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesLoadTemplateDialog)
	ON_WM_CREATE()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE, OnRemoveTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL, OnRemoveAllTemplates)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, OnEditchangeTemplateName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesLoadTemplateDialog message handlers

int CTCManualStackItemPropertiesLoadTemplateDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	INT  nPos[3];
	CString  szTitle[2];

	if (CDisplayDialog::OnCreate(lpCreateStruct) != -1)
	{
		for (GetWindowText(szTitle[0]), GetParent()->GetWindowText(szTitle[1]), nPos[0] = szTitle[0].ReverseFind(SPACE[0]), nPos[1] = szTitle[1].Find(SPACE[0]), nPos[2] = szTitle[1].ReverseFind(SPACE[0]); nPos[0] > 0 && nPos[1] > 0 && nPos[1] < nPos[2]; )
		{
			SetWindowText(szTitle[0].Left(nPos[0]) + szTitle[1].Mid(nPos[1], nPos[2] - nPos[1]) + szTitle[0].Mid(nPos[0]));
			break;
		}
		return 0;
	}
	return -1;
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : (3 * rColumns.Width() / 4));
		continue;
	}
	EnumTemplates();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	return FALSE;
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), pNotifyListView->iItem, 0));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDOK)->EnableWindow(Check());
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackItemPropertiesLoadTemplateDialog::OnRemoveTemplate()
{
	INT  nIndex;
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					if (pItemTemplate->GetTemplateName() + TAB + pItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
					{
						m_pItemTemplates[0].RemoveAt(nTemplate);
						m_szTemplates.RemoveAt(nIndex);
						delete pItemTemplate;
						nTemplates--;
						nTemplate--;
						break;
					}
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() + TAB + pComposedItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
				{
					m_pComposedItemTemplates[0].RemoveAt(nTemplate);
					m_szTemplates.RemoveAt(nIndex);
					delete pComposedItemTemplate;
					nTemplates--;
					nTemplate--;
					break;
				}
				continue;
			}
			break;
		}
		break;
	}
	for (Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nIndex), Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), 0), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, EM_SETSEL, 0, -1); !SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesLoadTemplateDialog::OnRemoveAllTemplates()
{
	INT  nTemplate;
	INT  nTemplates;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					m_pItemTemplates[0].RemoveAt(nTemplate);
					delete pItemTemplate;
					nTemplates--;
					nTemplate--;
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				m_pComposedItemTemplates[0].RemoveAt(nTemplate);
				delete pComposedItemTemplate;
				nTemplates--;
				nTemplate--;
				continue;
			}
			break;
		}
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, EM_SETSEL, 0, -1);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesLoadTemplateDialog::OnEditchangeTemplateName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesLoadTemplateDialog::OnOK()
{
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;
	CTCManualStackItemTemplate  *pItemTemplate;
	CTCManualStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; !m_cComposedItem.GetSize(); )
	{
		for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName); nTemplate < nTemplates; nTemplate++)
		{
			if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
			{
				if (pItemTemplate->GetTemplateName() == szName)
				{
					m_cItem.Copy(pItemTemplate);
					break;
				}
				continue;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
		break;
	}
	for (; m_cComposedItem.GetSize() > 0; )
	{
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() == szName)
				{
					m_cComposedItem.Copy(pComposedItemTemplate);
					break;
				}
				continue;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
		break;
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemPropertiesLoadTemplateDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemPropertiesLoadTemplateDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseConstraintsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemReleaseConstraintsDialog, CDisplayDialog)

CTCManualStackItemReleaseConstraintsDialog::CTCManualStackItemReleaseConstraintsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemReleaseConstraintsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemReleaseConstraintsDialog::Create(CWnd *pParentWnd, CTCManualStackItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(pItem), m_nItemIndex = 0; (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemReleaseConstraintsDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cItem[0])) return nResult;
		break;
	}
	return -1;
}
INT CTCManualStackItemReleaseConstraintsDialog::Create(CWnd *pParentWnd, CTCManualStackComposedItem *pComposedItem, INT nIndex)
{
	INT  nResult;

	for (m_cComposedItem[0].Copy(pComposedItem), m_cComposedItem[1].Copy(pComposedItem), m_nItemIndex = (nIndex < pComposedItem->GetSize()) ? nIndex : 0; (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemReleaseConstraintsDialog::IDD)) == IDOK; )
	{
		if (pComposedItem->Copy(&m_cComposedItem[0])) return nResult;
		break;
	}
	return -1;
}

BOOL CTCManualStackItemReleaseConstraintsDialog::Initialize()
{
	GetTCService()->GetTCInterlocks(TCINTERLOCK_SOURCETYPE_MANUALSTACK, m_pInterlocks[0]);
	return m_pInterlocks[1].Copy(&m_pInterlocks[0]);
}

CTCManualStackWnd *CTCManualStackItemReleaseConstraintsDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackItemReleaseConstraintsDialog::EnumInterlocks()
{
	INT  nItem;
	INT  nItems;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CTCManualStackItem  *pItem;

	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_RESETCONTENT);
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) != (CTCInterlock *)NULL)
		{
			for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
				{
					if (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION || pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION || CheckTCVerificationStage(pItem, (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? TCVERIFICATIONSTAGE_ACCEPTANCE : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? TCVERIFICATIONSTAGE_START : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? TCVERIFICATIONSTAGE_PROGRESS : TCVERIFICATIONSTAGE_COMPLETION)))) break;
					continue;
				}
			}
			if ((!nItems && (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION || pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION || CheckTCVerificationStage(&m_cItem[0], (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? TCVERIFICATIONSTAGE_ACCEPTANCE : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? TCVERIFICATIONSTAGE_START : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? TCVERIFICATIONSTAGE_PROGRESS : TCVERIFICATIONSTAGE_COMPLETION))))) || nItem < nItems) SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
			if (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
		}
	}
	if (!SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE));
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CTCManualStackItemReleaseConstraintsDialog::EnumBlocks()
{
	CString  szBlockMacro;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctionBlock  *pBlock;

	for (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_RESETCONTENT); (pFunction = ((pBlock = ((pItem = (m_cComposedItem[0].GetSize() > 0) ? m_cComposedItem[0].GetAt(m_nItemIndex) : (CTCManualStackItem *)NULL) && GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()) >= 0) ? GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName())) : (CDatabaseTCFunctionBlock *)NULL)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pBlock->GetName())) : (CDatabaseTCFunction *)NULL); )
	{
		szBlockMacro.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASECONSTRAINTSDIALOG_BLOCKMACRO_FORMAT), (LPCTSTR)pBlock->GetName(), (LPCTSTR)pFunction->GetDescription());
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szBlockMacro);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED)->EnableWindow((m_cComposedItem[0].GetSize() > 1 && m_nItemIndex > 0) ? TRUE : FALSE);
	return TRUE;
}

VOID CTCManualStackItemReleaseConstraintsDialog::ShowConstraints()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CString  szInterlock[4];
	CTimeKey  tTimeKey;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tInterval;
	CTCManualStackItem  *pItem[2];

	if ((pItem[0] = m_cComposedItem[0].GetAt(m_nItemIndex)))
	{
		for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
			{
				if (!pItem[1]->GetInterlock().IsEmpty() && szInterlock[0].IsEmpty())
				{
					szInterlock[0] = pItem[1]->GetInterlock();
					continue;
				}
				if (pItem[1]->GetReleaseInterlock(szInterlock[3], bInterlock) && szInterlock[1].IsEmpty())
				{
					szInterlock[2] = (bInterlock) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE);
					szInterlock[1] = szInterlock[3];
				}
			}
		}
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[0]) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[1]) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, ((pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pItem[0]->GetName()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED, (pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, ((!pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || !tOpenTime.GetTime()) && (!pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) || !tOpenTime.GetTime()) && !pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) && tInterval.GetTotalSeconds() > 0) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[0]));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[1]));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCURSEL) >= 0) ? SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[2]) : -1));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)((pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) ? (LPCTSTR)pItem[0]->GetName() : EMPTYSTRING)));
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET), (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET), (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME), ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? tOpenTime.GetTimeInSeconds() : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME), (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? (tCloseTime.GetTimeInSeconds()) : tTimeKey);
		Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), (pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? tInterval.GetTotalSeconds() : 0);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->ShowWindow((m_cComposedItem[0].GetName().IsEmpty() || (!pItem[0]->GetMembershipID() && m_cComposedItem[0].GetSize() == 1)) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->ShowWindow((!m_cComposedItem[0].GetName().IsEmpty() && (pItem[0]->GetMembershipID() > 0 || m_cComposedItem[0].GetSize() > 1)) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->EnableWindow((m_cComposedItem[0].GetName().IsEmpty() || (!pItem[0]->GetMembershipID() && m_cComposedItem[0].GetSize() == 1)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->EnableWindow((!m_cComposedItem[0].GetName().IsEmpty() && (pItem[0]->GetMembershipID() > 0 || m_cComposedItem[0].GetSize() > 1)) ? TRUE : FALSE);
	}
	else
	{
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetInterlock()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? (LPCTSTR)szInterlock[0] : EMPTYSTRING)) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, ((m_cItem[0].GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetName()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED, (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, ((!m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || !tOpenTime.GetTime()) && (!m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) || !tOpenTime.GetTime()) && !m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) && tInterval.GetTotalSeconds() > 0) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetInterlock()));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? (LPCTSTR)szInterlock[0] : EMPTYSTRING)));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCURSEL) >= 0) ? SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? ((bInterlock) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE)) : EMPTYSTRING)) : -1));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)((m_cItem[0].GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) ? (LPCTSTR)m_cItem[0].GetName() : EMPTYSTRING)));
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET), (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET), (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME), ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? tOpenTime.GetTimeInSeconds() : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME), (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? tCloseTime.GetTimeInSeconds() : tTimeKey);
		Spinbox_SetPos(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? tInterval.GetTotalSeconds() : 0);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->EnableWindow(TRUE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL));
}

BOOL CTCManualStackItemReleaseConstraintsDialog::CheckTCVerificationStage(CONST CTCManualStackItem *pItem, UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;

	if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())))
	{
		for (nParameter = 0, nParameters = (INT)pGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pGroupParameter = pGroup->GetAt(nParameter)) && pGroupParameter->GetStage() == nStage) break;
			continue;
		}
		return((nParameter < nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCManualStackItemReleaseConstraintsDialog::CheckPrivileges() CONST
{
	CTCManualStackItem  *pItem;

	return(((!m_cComposedItem[0].GetSize() && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) || ((pItem = m_cComposedItem[0].GetAt(m_nItemIndex)) && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

VOID CTCManualStackItemReleaseConstraintsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (bCheck = CheckPrivileges()));
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME, bCheck);
}

BOOL CTCManualStackItemReleaseConstraintsDialog::IsModified() CONST
{
	return((!m_cItem[0].Compare(&m_cItem[1]) || !m_cComposedItem[0].Compare(&m_cComposedItem[1]) || !m_pInterlocks[0].Compare(&m_pInterlocks[1])) ? TRUE : FALSE);
}

BOOL CTCManualStackItemReleaseConstraintsDialog::Check(BOOL bModified) CONST
{
	CString  szInterlock[2];

	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->GetWindowText(szInterlock[0]);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[1]);
	return(((!IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK) || GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED) || (GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->SendMessage(CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->SendMessage(CB_GETCURSEL) >= 0)) && (!IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK) || !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED) || szInterlock[0] != szInterlock[1]) && (!IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED) || GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->SendMessage(CB_GETCURSEL) >= 0) && (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN)) && (!IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN) || !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE) || Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)))) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackItemReleaseConstraintsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemReleaseConstraintsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemReleaseConstraintsDialog::PostNcDestroy()
{
	m_pInterlocks[0].RemoveAll();
	m_pInterlocks[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemReleaseConstraintsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemReleaseConstraintsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, OnInterlock)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKS, OnInterlocks)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, OnInterlocked)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, OnBlocked)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO, OnBlockMacro)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED, OnGrouped)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, OnTimeWindowImmediately)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, OnTimeWindowAfterPrevious)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, OnTimeWindowAfterDispatch)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, OnTimeWindowOpen)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, OnTimeWindowClose)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, OnTimeWindowInterval)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, OnSelchangeInterlock)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, OnSelchangeInterlocked)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, OnSelchangeInterlockedResult)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET, OnSpinchangeTimeWindowAfterPrevious)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET, OnSpinchangeTimeWindowAfterDispatch)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME, OnSpinchangeTimeWindowOpen)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME, OnSpinchangeTimeWindowClose)
	ON_CONTROL(SBXN_CHANGE, IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD, OnSpinchangeTimeWindowInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseConstraintsDialog message handlers

BOOL CTCManualStackItemReleaseConstraintsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), TCMANUALSTACKITEMRELEASECONSTRAINTSDIALOG_MINIMUMTIMEWINDOWINTERVAL, TCMANUALSTACKITEMRELEASECONSTRAINTSDIALOG_MAXIMUMTIMEWINDOWINTERVAL);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE)->EnableWindow();
	EnumInterlocks();
	EnumBlocks();
	ShowConstraints();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackItemReleaseConstraintsDialog::OnInterlock()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetInterlock(EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetInterlock(EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnInterlocks()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCManualStackItem  *pItem;
	CTCManualStackItemReleaseInterlocksDialog  cInterlocksDialog;

	if (cInterlocksDialog.Create(this, (!m_cComposedItem[0].GetSize()) ? (m_cItem[0].GetAttributes() & (TCFUNCTION_ILSCOPE_NONE | TCFUNCTION_ILSCOPE_GLOBAL | TCFUNCTION_ILSCOPE_LOCAL | TCFUNCTION_ILSCOPE_GLOBALSUBSYSTEM | TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM | TCFUNCTION_ILSTAGE_RECEPTION | TCFUNCTION_ILSTAGE_UPLINK | TCFUNCTION_ILSTAGE_ONBOARD | TCFUNCTION_ILSTAGE_ACCEPTANCE | TCFUNCTION_ILSTAGE_COMPLETION)) : 0, m_pInterlocks[0]) == IDOK)
	{
		for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), EnumInterlocks(); nItem < nItems; nItem++)
		{
			if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
			{
				for (pItem->SetInterlock((m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pItem->GetInterlock()) >= 0) ? pItem->GetInterlock() : EMPTYSTRING), pItem->GetReleaseInterlock(szInterlock, bInterlock); m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock) < 0; )
				{
					pItem->SetReleaseInterlock(EMPTYSTRING);
					break;
				}
			}
		}
		if (!nItems)
		{
			for (m_cItem[0].SetInterlock((m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, m_cItem[0].GetInterlock()) >= 0) ? m_cItem[0].GetInterlock() : EMPTYSTRING), m_cItem[0].GetReleaseInterlock(szInterlock, bInterlock); m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock) < 0; )
			{
				m_cItem[0].SetReleaseInterlock(EMPTYSTRING);
				break;
			}
		}
		ShowConstraints();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnInterlocked()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetReleaseInterlock(EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnBlocked()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunctionBlock  *pBlock;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED))
			{
				if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
				{
					pItem->SetFlags(pItem->GetFlags() | TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED);
					pItem->SetReleaseBlock(pBlock->GetName());
					pItem->SetReleaseBlockID(nItem);
					break;
				}
				continue;
			}
			pItem->SetFlags(pItem->GetFlags() & ~TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED);
			pItem->SetReleaseBlock(EMPTYSTRING);
			pItem->SetReleaseBlockID(-1);
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED)) ? 0 : -1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnBlockMacro()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	BOOL  bGrouped;
	BOOL  bBlocked;
	BOOL  bBlockMacro;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szInterlock;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTCManualStackComposedItem  pItems;
	CTCManualStackItemReleaseBlockMacroDialog  cBlockMacroDialog;

	for (nItem = m_nItemIndex, nItems = (INT)m_cComposedItem[0].GetSize(), szInterlock.Empty(), bGrouped = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL && (pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED))
		{
			szInterlock = (((pItem[1] = m_cComposedItem[0].GetAt(nItem + 1)) && (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) || nItem == nItems - 1) ? pItem[0]->GetInterlock() : EMPTYSTRING;
			bGrouped = (pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : bGrouped;
			pItems.InsertAt(pItems.GetSize(), pItem[0], 1);
			m_cComposedItem[0].RemoveAt(nItem);
			nItems = nItems - 1;
			nItem = nItem - 1;
			continue;
		}
		break;
	}
	for (bBlockMacro = (cBlockMacroDialog.Create(this, &pItems) == IDOK) ? TRUE : FALSE, nItem = 0, nItems = (INT)pItems.GetSize(), nCount = 0; nItem < nItems; nItem++)
	{
		if ((pItem[0] = pItems.GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			m_cComposedItem[0].InsertAt(m_nItemIndex + nCount, pItem[0], 1);
			pItems.RemoveAt(nItem);
			nCount++;
			nItems--;
			nItem--;
		}
	}
	for (nItem = 0, nItems = (bBlockMacro) ? (INT)(m_cComposedItem[0].GetSize() - 1) : 0; nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = m_cComposedItem[0].GetAt(nItem))) ? m_cComposedItem[0].GetAt(nItem + 1) : (CTCManualStackItem *)NULL))
		{
			if ((pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) || (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED))
			{
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
				pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), bBlocked = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) && (pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED))
		{
			pItem[0]->SetFlags((bGrouped  &&  bBlocked) ? (pItem[0]->GetFlags() | TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) : pItem[0]->GetFlags());
			pItem[0]->SetInterlock((((pItem[1] = m_cComposedItem[0].GetAt(nItem + 1)) && (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) || nItem == nItems - 1) ? szInterlock : EMPTYSTRING);
			bBlocked = TRUE;
		}
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnGrouped()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem[0]->SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_GROUPED) && ((pItem[0]->GetMembershipID() > 0 && pItem[0]->GetMembershipID() != (UINT)-1) || nItem > 0)) ? (pItem[0]->GetFlags() | TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) : (pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED));
			continue;
		}
	}
	for (nItem = 0, nItems = (INT)(m_cComposedItem[0].GetSize() - 1); nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = m_cComposedItem[0].GetAt(nItem))) ? m_cComposedItem[0].GetAt(nItem + 1) : (CTCManualStackItem *)NULL))
		{
			if ((pItem[0]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) || (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED))
			{
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
			}
		}
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowImmediately()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetReleaseTimeWindow(CTimeTag(0));
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(CTimeTag(0));
		break;
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowAfterPrevious()
{
	INT  nItem;
	INT  nItems;
	CTimeSpan  tTimeWindow;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetFlags((pItem->GetFlags() & ~TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN) | TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS);
			pItem->SetReleaseTimeWindow(0, tTimeWindow, FALSE);
		}
	}
	if (!nItems)
	{
		m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN) | TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS);
		m_cItem[0].SetReleaseTimeWindow(0, tTimeWindow, FALSE);
	}
	ShowConstraints();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowAfterDispatch()
{
	INT  nItem;
	INT  nItems;
	CTimeSpan  tTimeWindow;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetFlags(pItem->GetFlags() & ~(TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN | TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS));
			pItem->SetReleaseTimeWindow(0, tTimeWindow, TRUE);
		}
	}
	if (!nItems)
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~(TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN | TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS));
		m_cItem[0].SetReleaseTimeWindow(0, tTimeWindow, TRUE);
	}
	ShowConstraints();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowOpen()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tTime[2];
	CTimeSpan  tTimeWindow;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow), tTime[0] = 1000000 * SECONDSPERMINUTE*(tTime[0].GetTime() / (1000000 * SECONDSPERMINUTE) + 1), tTime[1] = tTime[0] + 1000000 * tTimeWindow.GetTotalSeconds(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetReleaseTimeWindow(tTime[0], tTime[1]);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(tTime[0], tTime[1]);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowClose()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tTimeWindow[2];
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow[0]); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, (!tCloseTime.GetTime()) ? (tOpenTime + 1000000 * tTimeWindow[0].GetTotalSeconds()) : 0);
				continue;
			}
			if (!pItem->GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
			{
				pItem->GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]);
				pItem->SetReleaseTimeWindow(tOpenTime, CTimeTag(1000000 * max(tOpenTime.GetTimeInSeconds(), SECONDSPERMINUTE*((CTime::GetCurrentTime().GetTime() + tTimeWindow[0].GetTotalSeconds()) / SECONDSPERMINUTE))));
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, (!tCloseTime.GetTime()) ? (tOpenTime + 1000000 * tTimeWindow[0].GetTotalSeconds()) : 0);
			break;
		}
		if (!m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
		{
			m_cItem[0].GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]);
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, CTimeTag(1000000 * max(tOpenTime.GetTimeInSeconds(), SECONDSPERMINUTE*((CTime::GetCurrentTime().GetTime() + tTimeWindow[0].GetTotalSeconds()) / SECONDSPERMINUTE))));
			break;
		}
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnTimeWindowInterval()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tTimeWindow[2];
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow[0]); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
			{
				pItem->SetReleaseTimeWindow(dwOpenOffset, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0, bAfterDispatch);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, tTimeWindow[0]);
				continue;
			}
			pItem->SetReleaseTimeWindow(CTimeTag(0), tTimeWindow[0]);
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
		{
			m_cItem[0].SetReleaseTimeWindow(dwOpenOffset, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0, bAfterDispatch);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, tTimeWindow[0]);
			break;
		}
		m_cItem[0].SetReleaseTimeWindow(CTimeTag(0), tTimeWindow[0]);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSelchangeInterlock()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock;
	CTCManualStackItem  *pItem;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->GetWindowText(szInterlock);
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetInterlock((nItem == nItems - 1) ? szInterlock : EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetInterlock(szInterlock);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSelchangeInterlocked()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock[2];
	CTCManualStackItem  *pItem;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[0]), GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->GetWindowText(szInterlock[1]); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCURSEL) < 0; )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szInterlock[1] = STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS))));
		break;
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetReleaseInterlock((!nItem) ? szInterlock[0] : EMPTYSTRING, (szInterlock[1] == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) && !nItem) ? TRUE : FALSE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(szInterlock[0], (szInterlock[1] == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS)) ? TRUE : FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSelchangeInterlockedResult()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock[2];
	CTCManualStackItem  *pItem;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[0]), GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->GetWindowText(szInterlock[1]); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCURSEL) < 0; )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szInterlock[1] = STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS))));
		break;
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetReleaseInterlock((!nItem) ? szInterlock[0] : EMPTYSTRING, (szInterlock[1] == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) && !nItem) ? TRUE : FALSE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(szInterlock[0], (szInterlock[1] == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS)) ? TRUE : FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowAfterPrevious()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) && pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch))
		{
			pItem->SetReleaseTimeWindow((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), tInterval, FALSE);
			continue;
		}
	}
	if (!nItems  &&  m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) m_cItem[0].SetReleaseTimeWindow((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), tInterval, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowAfterDispatch()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) && pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch))
		{
			pItem->SetReleaseTimeWindow(max((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), 1), tInterval, TRUE);
			continue;
		}
	}
	if (!nItems  &&  m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) m_cItem[0].SetReleaseTimeWindow(max((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), 1), tInterval, TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowOpen()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tReleaseTime, tCloseTime);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tInterval))
			{
				pItem->SetReleaseTimeWindow(tReleaseTime, tInterval);
				continue;
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tReleaseTime, tCloseTime);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval))
		{
			m_cItem[0].SetReleaseTimeWindow(tReleaseTime, tInterval);
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowClose()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeKey  tReleaseTime;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime);
			pItem->SetReleaseTimeWindow(tOpenTime, tReleaseTime);
		}
	}
	if (!nItems)
	{
		m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime);
		m_cItem[0].SetReleaseTimeWindow(tOpenTime, tReleaseTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowInterval()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeSpan  tInterval[2];
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = ((tInterval[0] = Spinbox_GetPos(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval[1], bAfterDispatch))
			{
				pItem->SetReleaseTimeWindow(dwOpenOffset, tInterval[0], bAfterDispatch);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tInterval[1]))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, tInterval[0]);
				continue;
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval[1], bAfterDispatch))
		{
			m_cItem[0].SetReleaseTimeWindow(dwOpenOffset, tInterval[0], bAfterDispatch);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval[1]))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, tInterval[0]);
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseConstraintsDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock[3];
	CString  szInterlock[3];
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (; !pItem->GetInterlock().IsEmpty() && szInterlock[0].IsEmpty(); )
			{
				szInterlock[0] = pItem->GetInterlock();
				break;
			}
			if (pItem->GetReleaseInterlock(szInterlock[2], bInterlock[2]) && szInterlock[1].IsEmpty())
			{
				szInterlock[1] = szInterlock[2];
				bInterlock[1] = bInterlock[2];
			}
			pItem->SetInterlock(EMPTYSTRING);
			pItem->SetReleaseInterlock(EMPTYSTRING);
		}
	}
	if (!szInterlock[0].IsEmpty())
	{
		for (; (pItem = m_cComposedItem[0].GetAt((INT)m_cComposedItem[0].GetUpperBound())); )
		{
			pItem->SetInterlock(szInterlock[0]);
			break;
		}
	}
	if (!szInterlock[1].IsEmpty())
	{
		for (; (pItem = m_cComposedItem[0].GetAt(0)); )
		{
			pItem->SetReleaseInterlock(szInterlock[1], bInterlock[1]);
			break;
		}
	}
	GetTCService()->SetTCInterlocks(TCINTERLOCK_SOURCETYPE_MANUALSTACK, m_pInterlocks[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemReleaseConstraintsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASECONSTRAINTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemReleaseConstraintsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASECONSTRAINTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseInterlocksDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemReleaseInterlocksDialog, CDisplayDialog)

CTCManualStackItemReleaseInterlocksDialog::CTCManualStackItemReleaseInterlocksDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemReleaseInterlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemReleaseInterlocksDialog::Create(CWnd *pParentWnd, ULONGLONG nInterlockFlags, CTCInterlocks &pInterlocks)
{
	INT  nResult;

	for (m_nInterlockFlags = nInterlockFlags, m_pInterlocks[0].Copy(&pInterlocks), m_pInterlocks[1].Copy(&pInterlocks); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemReleaseInterlocksDialog::IDD)) == IDOK; )
	{
		pInterlocks.Copy(&m_pInterlocks[0]);
		break;
	}
	return nResult;
}

BOOL CTCManualStackItemReleaseInterlocksDialog::EnumInterlocks()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock))) SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	return TRUE;
}

BOOL CTCManualStackItemReleaseInterlocksDialog::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

VOID CTCManualStackItemReleaseInterlocksDialog::ShowProperties()
{
	UINT  nScope;
	UINT  nStage;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, ((nScope = TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope())) == TCINTERLOCK_SCOPE_GLOBAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, (nScope == TCINTERLOCK_SCOPE_LOCAL || nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, ((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) && SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, (nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT || (nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT  &&  SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, (nScope == TCINTERLOCK_SCOPE_COMMANDS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, ((nStage = pInterlock->GetStage()) == TCINTERLOCK_STAGE_RECEPTION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, (nStage == TCINTERLOCK_STAGE_START) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, (nStage == TCINTERLOCK_STAGE_PROGRESS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, (nStage == TCINTERLOCK_STAGE_COMPLETION) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)TranslateIDToSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope()))) : -1));
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		AdjustToPrivileges();
		return;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, (m_nInterlockFlags & TCFUNCTION_ILSCOPE_GLOBAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, (m_nInterlockFlags & TCFUNCTION_ILSCOPE_LOCAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, ((m_nInterlockFlags & TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM) && SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_RECEPTION) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_UPLINK) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_ONBOARD) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_ACCEPTANCE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_COMPLETION) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	AdjustToPrivileges();
}

CTCInterlock *CTCManualStackItemReleaseInterlocksDialog::FindInterlock() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName);
	return m_pInterlocks[0].GetAt(m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szName));
}

UINT CTCManualStackItemReleaseInterlocksDialog::TranslateToSubSystemID(LPCTSTR pszSubSystem) CONST
{
	return GetTCService()->TranslateTCSubSystemToID(pszSubSystem);
}

CString CTCManualStackItemReleaseInterlocksDialog::TranslateIDToSubSystem(UINT nSubSystemID) CONST
{
	return GetTCService()->TranslateIDToTCSubSystem(nSubSystemID);
}

BOOL CTCManualStackItemReleaseInterlocksDialog::CanAddInterlock() CONST
{
	return((!FindInterlock() && Check(FALSE)) ? ((CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

BOOL CTCManualStackItemReleaseInterlocksDialog::CanRemoveInterlock() CONST
{
	CTCInterlock  *pInterlock;

	return(((pInterlock = FindInterlock()) && !pInterlock->IsAutomatic()) ? ((CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) && TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

BOOL CTCManualStackItemReleaseInterlocksDialog::CanRemoveAllInterlocks() CONST
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && !pInterlock->IsAutomatic() && ((CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) && TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) break;
		continue;
	}
	return((nInterlock < nInterlocks) ? TRUE : FALSE);
}

VOID CTCManualStackItemReleaseInterlocksDialog::AdjustToPrivileges()
{
	BOOL  bCheck[2];
	CTCInterlock  *pInterlock;

	for (bCheck[0] = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE), bCheck[1] = CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE), bCheck[0] = bCheck[0] || bCheck[1]; (pInterlock = FindInterlock()); )
	{
		bCheck[0] = ((pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && !pInterlock->IsAutomatic()) ? bCheck[0] : FALSE;
		bCheck[1] = ((pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && !pInterlock->IsAutomatic()) ? bCheck[1] : FALSE;
		bCheck[0] = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL || bCheck[1]) ? bCheck[0] : FALSE;
		break;
	}
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, bCheck[1]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, bCheck[0]);
	AccessControl(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, bCheck[0]);
}

BOOL CTCManualStackItemReleaseInterlocksDialog::IsModified() CONST
{
	return !m_pInterlocks[0].Compare(&m_pInterlocks[1]);
}

BOOL CTCManualStackItemReleaseInterlocksDialog::Check(BOOL bModified) CONST
{
	return(((GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) || (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SendMessage(CB_GETCURSEL) >= 0) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) && (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION))) || (!GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowTextLength() && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION))) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackItemReleaseInterlocksDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemReleaseInterlocksDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackItemReleaseInterlocksDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemReleaseInterlocksDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, OnScopeGlobal)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, OnScopeLocal)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, OnScopeSubSystem)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, OnScopeTeleommands)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, OnScopeNoWaitState)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, OnStageReception)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, OnStageTransmission)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, OnStageAcceptance)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, OnStageStart)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, OnStageProgress)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, OnStageCompletion)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, OnSelchangeSubSystem)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseInterlocksDialog message handlers

BOOL CTCManualStackItemReleaseInterlocksDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION)->EnableWindow();
	EnumInterlocks();
	EnumSubSystems();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCManualStackItemReleaseInterlocksDialog::OnAdd()
{
	UINT  nScope;
	UINT  nStage;
	CString  szName;
	CString  szSubSystem;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (; (pInterlock = new CTCInterlock); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		nScope = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)) ? TCINTERLOCK_SCOPE_GLOBAL : TCINTERLOCK_SCOPE_NONE;
		nScope = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? ((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALNOWAIT : TCINTERLOCK_SCOPE_LOCAL) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? ((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT : TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) ? TCINTERLOCK_SCOPE_COMMANDS : nScope;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION)) ? TCINTERLOCK_STAGE_RECEPTION : TCINTERLOCK_STAGE_NONE;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)) ? TCINTERLOCK_STAGE_TRANSMISSION : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)) ? TCINTERLOCK_STAGE_ACCEPTANCE : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START)) ? TCINTERLOCK_STAGE_START : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS)) ? TCINTERLOCK_STAGE_PROGRESS : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION)) ? TCINTERLOCK_STAGE_COMPLETION : nStage;
		for (pInterlock->SetName(szName), pInterlock->SetSourceType(TCINTERLOCK_SOURCETYPE_MANUALSTACK), pInterlock->SetScope((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? MAKETCINTERLOCKSCOPECODE(nScope, TranslateToSubSystemID(szSubSystem)) : MAKETCINTERLOCKSCOPECODE(nScope, 0)), pInterlock->SetStage(nStage); m_pInterlocks[0].Add(pInterlock) >= 0; )
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName));
			break;
		}
		if (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0)
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
			break;
		}
		delete pInterlock;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnRemove()
{
	INT  nIndex;
	CString  szName;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName); (pInterlock = m_pInterlocks[0].GetAt((nIndex = m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szName)))); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		m_nInterlockFlags = TCINTERLOCK_SCOPE_NONE | TCINTERLOCK_STAGE_NONE;
		m_pInterlocks[0].RemoveAt(nIndex);
		delete pInterlock;
		ShowProperties();
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnRemoveAll()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && (pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)))
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName()));
			m_nInterlockFlags = TCINTERLOCK_SCOPE_NONE | TCINTERLOCK_STAGE_NONE;
			m_pInterlocks[0].RemoveAt(nInterlock);
			delete pInterlock;
			nInterlocks--;
			nInterlock--;
		}
	}
	if (!SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		ShowProperties();
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnScopeGlobal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_GLOBAL, 0));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnScopeLocal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnScopeSubSystem()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1));
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnScopeTeleommands()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_COMMANDS, 0));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnScopeNoWaitState()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? ((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1)) : ((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageReception()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_RECEPTION);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageTransmission()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_TRANSMISSION);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageAcceptance()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_ACCEPTANCE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageStart()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_START);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageProgress()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_PROGRESS);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnStageCompletion()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_COMPLETION);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	AdjustToPrivileges();
}

void CTCManualStackItemReleaseInterlocksDialog::OnSelchangeName()
{
	if (SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_GETCURSEL)) >= 0)
	{
		AdjustToPrivileges();
		ShowProperties();
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnSelchangeSubSystem()
{
	CString  szSubSystem;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()), TranslateToSubSystemID(szSubSystem)));
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseInterlocksDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemReleaseInterlocksDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASEINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemReleaseInterlocksDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASEINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseBlockMacroDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemReleaseBlockMacroDialog, CDisplayDialog)

CTCManualStackItemReleaseBlockMacroDialog::CTCManualStackItemReleaseBlockMacroDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemReleaseBlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemReleaseBlockMacroDialog::Create(CWnd *pParentWnd, CTCManualStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemReleaseBlockMacroDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

CTCManualStackWnd *CTCManualStackItemReleaseBlockMacroDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::EnumBlockMembers()
{
	INT  nIndex;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	CString  szElement;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctionBlock  *pBlock;
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	if ((pItem = m_cItem[0].GetAt(0)))
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_NAME)->SetWindowText(pItem->GetName());
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION)->SetWindowText(pItem->GetDescription());
		if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
		{
			for (nElement = 0, nElements = (INT)pBlock->GetSize(), m_szMembers.RemoveAll(); nElement < nElements; nElement++)
			{
				if ((pBlockElement = pBlock->GetAt(nElement)) != (CDatabaseTCFunctionBlockElement *)NULL)
				{
					if ((pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION) == TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION)
					{
						if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pBlockElement->GetName()))))
						{
							for (szElement.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
							{
								for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
								{
									m_szMembers.InsertAt(nIndex, pFunction->GetName());
									break;
								}
								break;
							}
						}
						continue;
					}
					if (pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_PACKET)
					{
						for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
						{
							if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && GetDatabase()->GetTCPackets()->Find(pBlockElement->GetName()) == pFunction->GetTCPacketRef() && pFunction->GetTCPacketRef() >= 0)
							{
								for (szElement.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
								{
									for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
									{
										m_szMembers.InsertAt(nIndex, pFunction->GetName());
										break;
									}
									break;
								}
							}
						}
						continue;
					}
					if (pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE)
					{
						for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
						{
							if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && (GetDatabase()->TranslateTCFunctionType(pBlockElement->GetName()) & pFunction->GetAttributes()))
							{
								for (szElement.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
								{
									for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
									{
										m_szMembers.InsertAt(nIndex, pFunction->GetName());
										break;
									}
									break;
								}
							}
						}
						continue;
					}
				}
			}
		}
		SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_SETCURSEL);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		return TRUE;
	}
	return FALSE;
}

VOID CTCManualStackItemReleaseBlockMacroDialog::ShowMacroContents()
{
	INT  nItem;
	INT  nItems;
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nMember;
	INT  nMembers;
	CString  szItem;
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;

	for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(), nDigits = max(cStringTools.ConvertIntToString(nItems).GetLength(), 3); nItem < nItems; nItem++)
	{
		if ((pItem = (CTCManualStackItem *)m_cItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (nMember = 0, nMembers = (INT)m_szMembers.GetSize(); nMember < nMembers; nMember++)
			{
				if (m_szMembers.GetAt(nMember) == pItem->GetName()) break;
				continue;
			}
			for (nColumn = 0, nColumns = (!nItem || nMember < nMembers) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem, nDigits);
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (nItem >= SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItem, nColumn, szItem);
			}
			if (nItem > 0 && nMember == nMembers)
			{
				m_cItem[0].RemoveAt(nItem);
				delete pItem;
				nItems--;
				nItem--;
			}
		}
	}
	while (nItems < SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItems);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), max(Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)), 0));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && !CheckMacroSize()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->ShowWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && !CheckMacroSize()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && CheckMacroSize()) ? CheckPrivileges() : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)) > 0) ? CheckPrivileges() : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 1) ? CheckPrivileges() : FALSE);
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::CheckMacroSize() CONST
{
	INT  nItem;
	INT  nItems;
	INT  nElement;
	INT  nElements;
	INT  nMaxLength;
	INT  nByteOffset;
	INT  nBitOffset[2];
	INT  nBlockLength[2];
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunctionBlock  *pBlock;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nByteOffset = 0, nMaxLength = 0, nBlockLength[0] = nBlockLength[1] = 0; (pItem = m_cItem[0].GetAt(0)) && pItem->GetTCPacket(&cPacket); )
	{
		if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
		{
			for (; pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LI, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NI, nByteOffset, nMaxLength)) break;
				break;
			}
			for (; pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LTT, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NTT, nByteOffset, nMaxLength)) break;
				break;
			}
			for (; pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_L2S, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_N2S, nByteOffset, nMaxLength)) break;
				break;
			}
		}
		break;
	}
	for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (nElement = 0, nElements = (INT)pItem->GetSize(), nBitOffset[0] = nBitOffset[1] = 0; nElement < nElements; nElement++)
			{
				if ((pFunctionElement = (CDatabaseTCFunctionElement *)pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					for (; 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() < nBitOffset[1] || !nBitOffset[1]; )
					{
						nBitOffset[1] = 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos();
						break;
					}
					for (; 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() + pFunctionElement->GetWidth() > nBitOffset[0]; )
					{
						nBitOffset[0] = 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() + pFunctionElement->GetWidth();
						break;
					}
				}
			}
			if (nItem > 0)
			{
				nBlockLength[0] += max(nBitOffset[0] - nBitOffset[1], 0);
				nBlockLength[1]++;
			}
		}
	}
	return((cPacket.GetDataSize() > nByteOffset + nBlockLength[0] / 8 && nBlockLength[1] <= nMaxLength) ? TRUE : FALSE);
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::CheckPrivileges() CONST
{
	CTCManualStackItem  *pItem;

	return(((pItem = m_cItem[0].GetAt(0)) && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) ? (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) : FALSE);
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::Check(BOOL bModified) CONST
{
	CTCManualStackItem  *pItem;

	return(((pItem = m_cItem[0].GetAt(0)) && GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()) >= 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackItemReleaseBlockMacroDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemReleaseBlockMacroDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemReleaseBlockMacroDialog::PostNcDestroy()
{
	m_szMembers.RemoveAll();
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemReleaseBlockMacroDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemReleaseBlockMacroDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD, OnAddMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemReleaseBlockMacroDialog message handlers

BOOL CTCManualStackItemReleaseBlockMacroDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_DESCRIPTION));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER)) ? (rColumns.Width() / 10) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME)) ? ((9 * rColumns.Width()) / 40) : ((27 * rColumns.Width()) / 40)));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION)->EnableWindow();
	EnumBlockMembers();
	ShowMacroContents();
	return TRUE;
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD)->EnableWindow((CheckMacroSize()) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE)->EnableWindow((pNotifyListView->iItem > 0) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 1) ? CheckPrivileges() : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackItemReleaseBlockMacroDialog::OnAddMember()
{
	INT  nIndex[2];
	BOOL  bBlockMacro;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CTCManualStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (; (pItem[0] = new CTCManualStackItem); )
	{
		if ((pItem[1] = m_cItem[0].GetAt(0)) != (CTCManualStackItem *)NULL)
		{
			if ((pFunction = ((nIndex[0] = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCURSEL)) >= 0 && nIndex[0] < m_szMembers.GetSize()) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_szMembers.GetAt(nIndex[0]))) : (CDatabaseTCFunction *)NULL))
			{
				for (pItem[0]->SetName(pFunction->GetName()), pItem[0]->SetType(pItem[1]->GetType()), pItem[0]->SetFlags(pItem[1]->GetFlags()); TRUE; )
				{
					if (pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
					{
						pItem[0]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
						pItem[0]->SetReleaseTime(pItem[1]->GetReleaseTime());
						break;
					}
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
					{
						pItem[0]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
						break;
					}
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
					{
						pItem[0]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
						break;
					}
					pItem[0]->SetReleaseTimeWindow(CTimeTag(0));
					break;
				}
				for (nIndex[1] = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)); (pPacket = GetDatabase()->GetTCPackets()->GetAt(pFunction->GetTCPacketRef())) && pItem[0]->CDatabaseTCFunction::Copy(pFunction) && pItem[0]->SetTCPacket(pPacket); )
				{
					for (m_cItem[0].InsertAt(nIndex[1] + 1, pItem[0], 1); (bBlockMacro = CheckMacroSize()); )
					{
						ShowMacroContents();
						nIndex[1]++;
						break;
					}
					for (; !bBlockMacro; )
					{
						m_cItem[0].RemoveAt(nIndex[1] + 1);
						break;
					}
					break;
				}
				if (nIndex[1] == Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)))
				{
					GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->EnableWindow();
					GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->ShowWindow(SW_SHOW);
					delete pItem[0];
				}
				Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nIndex[1]);
				break;
			}
		}
		delete pItem[0];
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseBlockMacroDialog::OnRemoveMember()
{
	INT  nIndex;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	if ((pItem = m_cItem[0].GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS))))))
	{
		m_cItem[0].RemoveAt(nIndex);
		delete pItem;
	}
	ShowMacroContents();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseBlockMacroDialog::OnRemoveAllMembers()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 1, nItems = (INT)m_cItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cItem[0].GetAt(nItem)))
		{
			m_cItem[0].RemoveAt(nItem);
			delete pItem;
			nItems--;
			nItem--;
			continue;
		}
		break;
	}
	ShowMacroContents();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemReleaseBlockMacroDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	if ((pItem[0] = m_cItem[0].GetAt(0)))
	{
		for (nItem = 1, nItems = (INT)m_cItem[0].GetSize(), pItem[0]->SetFlags(pItem[0]->GetFlags() | TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED), pItem[0]->SetReleaseBlock(pItem[0]->GetName()), pItem[0]->SetReleaseBlockID(0); nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_cItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
			{
				pItem[1]->SetFlags(pItem[1]->GetFlags() | TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED);
				pItem[1]->SetReleaseBlock(pItem[0]->GetReleaseBlock());
				pItem[1]->SetReleaseBlockID(pItem[0]->GetReleaseBlockID() + nItem);
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
			}
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemReleaseBlockMacroDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASEBLOCKMACRODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemReleaseBlockMacroDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMRELEASEBLOCKMACRODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackItemPropertiesDialog, CDisplayDialog)

CTCManualStackItemPropertiesDialog::CTCManualStackItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackItemPropertiesDialog::Create(CWnd *pParentWnd, CTCManualStackItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(&m_cItem[0]); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackItemPropertiesDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

CTCManualStackWnd *CTCManualStackItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCManualStackItemPropertiesDialog::ShowProperties()
{
	UINT  nExecutionOBRT;
	CString  szExecutionTime;
	CTimeTag  tExecutionTime;
	CStringTools  cStringTools;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_NAME)->SetWindowText(m_cItem[0].GetName());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_cItem[0].GetDescription());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((m_cItem[0].GetExecutionOBRT(nExecutionOBRT)) ? cStringTools.ConvertUIntToString(nExecutionOBRT, 16) : EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szExecutionTime = (m_cItem[0].GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) ? tExecutionTime.FormatGmt() : EMPTYSTRING));
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), (m_cItem[0].GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && m_cItem[0].GetExecutionTime(tExecutionTime)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && m_cItem[0].GetExecutionOBRT(nExecutionOBRT)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, (m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP))) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_START) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, (m_cItem[0].GetFlags() & TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT)->EnableWindow(m_cItem[0].GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP)->EnableWindow((m_cItem[0].GetAttributes() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? TRUE : FALSE);
	ShowParameters();
}

VOID CTCManualStackItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = 0, nParameters = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
		{
			for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE) || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pPacketParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pPacketParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
					{
						szItem = pPacketParameter->GetConstValueAsText();
						break;
					}
					for (szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pPacketParameter->GetConstValueAsText().IsEmpty(); )
					{
						szItem.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pPacketParameter->GetConstValueAsText());
						break;
					}
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nCount, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nCount, nColumn, szItem);
				nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
			}
		}
	}
	for (nElement = 0, nElements = (INT)m_cItem[0].GetSize(); nElement < nElements; nElement++)
	{
		if ((pFunctionElement = m_cItem[0].GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
			{
				if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
				continue;
			}
			for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					if ((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pFunctionElement->GetConstValueAsText().IsEmpty(); )
					{
						szItem.Format(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pFunctionElement->GetConstValueAsText());
						break;
					}
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LOADVALUES)->EnableWindow((m_cItem[0].GetParameterSets(szSets) > 0) ? CheckPrivileges() : FALSE); SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow(FALSE);
}

VOID CTCManualStackItemPropertiesDialog::EvaluateParameters()
{
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunction  cFunction;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	if (cFunction.Copy(&m_cItem[0]) && m_cItem[0].GetTCPacket(&cPacket))
	{
		for (nElement = 0, nElements = (INT)cFunction.GetSize(); nElement < nElements; nElement++)
		{
			if ((pFunctionElement = cFunction.GetAt(nElement)) && !pFunctionElement->HasConstValue())
			{
				if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT)
				{
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 2)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 8)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 16)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText())));
						continue;
					}
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 10)));
				}
			}
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)) && !pPacketParameter->HasConstValue())
			{
				if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED)
				{
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 2)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 8)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 16)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText())));
						continue;
					}
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 10)));
				}
			}
		}
		for (nFunction = 0, nFunctions = (GetTCService()->GenerateTCPackets(&cFunction, &cPacket, m_cItem[0].GetMemoryPatch(), m_cItem[0].GetExecutionTime(tExecutionTime) || m_cItem[0].GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) || m_cItem[0].GetExecutionOBRT(nExecutionOBRT), FALSE, FALSE, TRUE, pFunctions, pPackets) >= 0) ? (INT)pFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
		{
			if ((pFunction = pFunctions.GetAt(nFunction)) && pFunction->GetName() == cFunction.GetName())
			{
				for (m_cItem[0].CDatabaseTCFunction::Copy(pFunction); (pPacket = pPackets.GetAt(nFunction)); )
				{
					m_cItem[0].SetTCPacket(pPacket);
					break;
				}
				break;
			}
		}
	}
}

BOOL CTCManualStackItemPropertiesDialog::HasTemplates() CONST
{
	CStringArray  szTemplates;
	CTCManualStackItemTemplates  pTemplates;

	return((GetParentDisplay()->GetItemTemplates(pTemplates) && pTemplates.Enum(m_cItem[0].GetName(), szTemplates) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackItemPropertiesDialog::CheckTCVerificationStage(UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;

	if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(m_cItem[0].GetExeVerGroupRef())))
	{
		for (nParameter = 0, nParameters = (INT)pGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pGroupParameter = pGroup->GetAt(nParameter)) && pGroupParameter->GetStage() == nStage) break;
			continue;
		}
		return((nParameter < nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCManualStackItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCFunctionElement *pFunctionElement) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pFunctionElement->GetName()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}
BOOL CTCManualStackItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCPacketParameter *pPacketParameter) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pPacketParameter->GetTag()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}

INT CTCManualStackItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackItemPropertiesDialog::CheckPrivileges() CONST
{
	return(((m_cItem[0].GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) ? TRUE : FALSE);
}

VOID CTCManualStackItemPropertiesDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (bCheck = CheckPrivileges()));
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, bCheck);
	AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, bCheck);
}

BOOL CTCManualStackItemPropertiesDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCManualStackItemPropertiesDialog::Check(BOOL bModified) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	UINT  nExecutionOBRT;
	BOOL  bAfterDispatch;
	DWORD  dwTimeOffset;
	CTimeKey  tTimeKey;
	CTimeTag  tTimeTag[3];
	CTimeSpan  tInterval;
	CTimeSpan  tMinOffset;
	CTimeSpan  tMaxOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	if (((m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && tInterval > 0 && (tTimeKey <= tTimeTag[0].GetTimeInSeconds() + tInterval.GetTotalSeconds() || (tTimeTag[0] == 0 && !m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch)))) || (m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && tTimeTag[0] <= tTimeTag[1] && tTimeKey <= tTimeTag[1].GetTimeInSeconds()) || m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch) || (m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && tInterval == 0 && tTimeTag[1] == 0) || (!m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && !m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && !m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch))) && (((m_cItem[0].GetExecutionTime(tTimeTag[2]) || (m_cItem[0].GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tTimeTag[2]))) && GetTCService()->GetTCFunctionExecutionTimeOffsets(tMinOffset, tMaxOffset) && (m_cItem[0].GetReleaseTime() == 0 || tTimeTag[2] >= m_cItem[0].GetReleaseTime() + 1000000 * tMinOffset.GetTotalSeconds()) && tTimeTag[2].GetTimeInSeconds() >= tTimeKey.GetTime() + tMinOffset.GetTotalSeconds() && tTimeTag[2].GetTimeInSeconds() <= tTimeKey.GetTime() + tMaxOffset.GetTotalSeconds()) || (!m_cItem[0].GetExecutionTime(tTimeTag[2]) && !m_cItem[0].GetExecutionOBRT(nExecutionOBRT))))
	{
		for (nElement = 0, nElements = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)m_cItem[0].GetSize() : -1; nElement < nElements; nElement++)
		{
			if ((pFunctionElement = m_cItem[0].GetAt(nElement)))
			{
				if (!pFunctionElement->GetConstValueAsText().IsEmpty())
				{
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
			}
			break;
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)))
			{
				if (!pPacketParameter->GetConstValueAsText().IsEmpty())
				{
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
					{
						if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
				}
				if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
			}
			break;
		}
		return((nElement == nElements  &&  nParameter == nParameters) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCManualStackItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, OnPreAuthorize)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_RELEASE, OnReleaseConstraints)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, OnExecuteAtOBRT)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, OnExecuteAs2Step)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, OnAcknowledgeAcceptance)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, OnAcknowledgeStart)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, OnAcknowledgeProgress)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, OnAcknowledgeCompletion)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE, OnLoadDynamicParameterValue)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_SAVETEMPLATE, OnSaveTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_LOADTEMPLATE, OnLoadTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_ITEMPROPERTIES_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, OnEditchangeExecutionOBRT)
	ON_CONTROL(EN_CHANGE, IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackItemPropertiesDialog message handlers

BOOL CTCManualStackItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), EvaluateParameters(); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	ShowProperties();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_RELEASE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_SAVETEMPLATE)->EnableWindow(CheckPrivileges());
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCManualStackItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL  bValue;
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCManualStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE, AccessControl(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, (szFlag != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC)) ? CheckPrivileges() : FALSE); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, (pFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pFunctionElement);
				break;
			}
			if ((pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL))
			{
				CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, (pPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pPacketParameter);
			}
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow((szFlag != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) && bValue) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) == IDOK  &&  !szValue.IsEmpty() && CheckPrivileges())
			{
				GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? TRUE : FALSE);
				GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackItemPropertiesDialog::OnOverridePTV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnOverridePEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnOverrideCEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnDisablePTV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnDisablePEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnDisableCEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV);
		CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnPreAuthorize()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnReleaseConstraints()
{
	CTCManualStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	if (cReleaseConstraintsDialog.Create(this, &m_cItem[0]) == IDOK) ShowParameters();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnExecuteImmediately()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE), m_cItem[0].SetExecutionTime(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tTime;
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED), m_cItem[0].SetExecutionTime(1000000 * ((tTime = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + 2 * SECONDSPERHOUR) / SECONDSPERHOUR)).GetTime())); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), tTime);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnExecuteAtOBRT()
{
	CString  szOBRT;
	CTimeTag  tOBRT;
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED), m_cItem[0].SetExecutionOBRT(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT = (GetTCService()->ConvertOBRTToTime(0, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_LIMITTEXT, cStringTools.ConvertUIntToString(UINT_MAX, 16).GetLength());
	SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnExecuteAs2Step()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP), m_cItem[0].SetExecutionTime(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnAcknowledgeAcceptance()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnAcknowledgeStart()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_START) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_START));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnAcknowledgeProgress()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnAcknowledgeCompletion()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION)) ? (m_cItem[0].GetFlags() | TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION) : (m_cItem[0].GetFlags() & ~TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szOffset;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
	{
		pFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION)) ? ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCManualStackItemPropertiesDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CString  szOolStatus;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (m_cItem[0].GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			for (pFunctionElement->SetConstValueAsText(szValue), pFunctionElement->SetConstValue(), EvaluateParameters(); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, nByte, nBit))); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szOolStatus = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szFlag = (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				szOolStatus = (!bOolStatus) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szOolStatus;
				break;
			}
			break;
		}
		if ((pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))))
		{
			for (pPacketParameter->SetConstValueAsText(szValue), pPacketParameter->SetConstValue(), m_cItem[0].SetTCPacket(&cPacket), EvaluateParameters(); (pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szOolStatus = STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szOolStatus = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szFlag = (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				szOolStatus = (!bOolStatus) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szOolStatus;
				break;
			}
		}
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szOolStatus);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTCManualStackItemPropertiesParameterSetsDialog  cParameterSetsDialog;

	if (cParameterSetsDialog.Create(this, &m_cItem[0], szParameterSet) == IDOK)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
		{
			if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_cItem[0].GetName()))))
			{
				for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) && pFunctionElement[0]->HasConstValue())
					{
						if ((pFunctionElement[1] = m_cItem[0].GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))) && (pFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
						{
							pFunctionElement[1]->SetAttributes((pFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
							pFunctionElement[1]->SetConstValueAsText(pFunctionElement[0]->GetConstValueAsText());
							pFunctionElement[1]->SetConstValue(pFunctionElement[0]->GetConstValue());
						}
					}
				}
			}
		}
		ShowParameters();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnLoadDynamicParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	ULONGLONG  nFlags;
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szValue.Empty(); (nIndex = (m_cItem[0].GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), nFlags = 0; (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pFunctionElement->GetName());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pFunctionElement->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		for (; (pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pPacketParameter->GetTag());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pPacketParameter->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		if ((pTCParameter = (GetTCService()->Initialize(pTCParameters)) ? pTCParameters.GetAt(0) : (CTCParameter *)NULL) && pTCParameter->GetValueAsText(GetDatabase(), 0, nFlags, szValue))
		{
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(szValue);
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetFocus();
		}
		break;
	}
}

void CTCManualStackItemPropertiesDialog::OnSaveTemplate()
{
	CTCManualStackItemPropertiesSaveTemplateDialog  cSaveTemplateDialog;

	if (cSaveTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
		return;
	}
}

void CTCManualStackItemPropertiesDialog::OnLoadTemplate()
{
	CTCManualStackItemPropertiesLoadTemplateDialog  cLoadTemplateDialog;

	if (cLoadTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
		ShowProperties();
	}
	for (; !SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) && !HasTemplates(); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_SAVETEMPLATE)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->GetWindowText(szValue);
	for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pFunctionElement = (szValue.IsEmpty()) ? m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		bValue = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	for (; (pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket) && szValue.IsEmpty()) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL); )
	{
		bValue = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckPrivileges() : FALSE);
}

void CTCManualStackItemPropertiesDialog::OnEditchangeExecutionOBRT()
{
	INT  nPos;
	UINT  nOBRT;
	CTimeTag  tOBRT;
	CString  szOBRT[2];
	CString  szDigit[2];
	CStringTools  cStringTools;

	if (IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT))
	{
		for (GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->GetWindowText(szOBRT[0]), szOBRT[0].MakeUpper(), nOBRT = 0, szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16), nPos = 0; nPos < szOBRT[0].GetLength(); nPos++)
		{
			if (_istxdigit(szOBRT[0].GetAt(nPos)))
			{
				if (_istdigit(szOBRT[0].GetAt(nPos)))
				{
					nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[0].GetAt(0));
					continue;
				}
				nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[1].GetAt(0)) + 10;
				continue;
			}
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((szOBRT[0] = (nPos < szOBRT[0].GetLength() - 1) ? (szOBRT[0].Left(nPos) + szOBRT[0].Mid(nPos + 1)) : szOBRT[0].Left(nPos)));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime((UINT)_ttoi64(szOBRT[0]), tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			CAudioDevice::AlertBySound();
			break;
		}
		if (nPos == szOBRT[0].GetLength())
		{
			for (m_cItem[0].SetExecutionOBRT(nOBRT); IsDlgButtonChecked(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szOBRT[0].GetLength(); )
			{
				GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
				SendDlgItemMessage(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
				break;
			}
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime(nOBRT, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnSpinchangeExecutionTime()
{
	m_cItem[0].SetExecutionTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackItemPropertiesDialog::OnOK()
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	ULONGLONG  nConstValue;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (nElement = 0, nElements = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)m_cItem[0].GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pFunctionElement = m_cItem[0].GetAt(nElement)) && GetTCService()->ConvertTCParameterValue(pFunctionElement->GetName(), pFunctionElement->GetAttributes(), pFunctionElement->GetConstValueAsText(), nConstValue))
		{
			pFunctionElement->SetConstValue(nConstValue);
			continue;
		}
	}
	for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) && GetTCService()->ConvertTCParameterValue(pPacketParameter->GetTag(), pPacketParameter->GetAttributes(), pPacketParameter->GetConstValueAsText(), nConstValue))
		{
			pPacketParameter->SetConstValue(nConstValue);
			continue;
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackComposedItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackComposedItemPropertiesDialog, CDisplayDialog)

CTCManualStackComposedItemPropertiesDialog::CTCManualStackComposedItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackComposedItemPropertiesDialog::Create(CWnd *pParentWnd, CTCManualStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(&m_cItem[0]); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackComposedItemPropertiesDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

CTCManualStackWnd *CTCManualStackComposedItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCManualStackComposedItemPropertiesDialog::EnumEntries()
{
	INT  nEntry;
	INT  nEntries;
	INT  nDigits;
	CString  szEntry[2];
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;

	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->GetWindowText(szEntry[0]);
	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), nDigits = cStringTools.ConvertIntToString(nEntries).GetLength(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = (CTCManualStackItem *)m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			for (szEntry[1].Format(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_ENTRY_FORMAT), (LPCTSTR)cStringTools.ConvertIntToPaddedString(nEntry + 1, nDigits), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetDescription()); SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[1]) < 0; )
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_INSERTSTRING, nEntry, (LPARAM)(LPCTSTR)szEntry[1]);
				break;
			}
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_DELETESTRING, nEntries);
		continue;
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[0]), 0));
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCManualStackComposedItemPropertiesDialog::ShowProperties()
{
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CString  szExecutionOBRT;
	CTimeTag  tExecutionTime;
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameters  pParameters;

	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_NAME)->SetWindowText((!m_cItem[0].GetName().IsEmpty()) ? m_cItem[0].GetName() : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULT_NAME));
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION)->SetWindowText((!m_cItem[0].GetName().IsEmpty()) ? m_cItem[0].GetDescription() : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULT_DESCRIPTION));
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)->EnableWindow((m_cItem[0].GetParameters(pParameters) > 0) ? TRUE : FALSE);
	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) != (CTCManualStackItem *)NULL)
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), (pItem->GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), (pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? ((bEarlierExecution) ? -CTimeKey(dwExecutionOffset / 1000).GetTime() : CTimeKey(dwExecutionOffset / 1000)) : CTimeKey(0));
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionTime(tExecutionTime)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS)) == (TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionOBRT(nExecutionOBRT)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP))) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION  &&  pItem->GetExecutionOBRT(nExecutionOBRT)) ? cStringTools.ConvertUIntToString(nExecutionOBRT, 16) : EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szExecutionOBRT = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION  &&  pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) ? tExecutionTime.FormatGmt() : EMPTYSTRING));
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET));
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP)->EnableWindow((pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG));
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET));
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT));
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? TRUE : FALSE);
	}
	else
	{
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	}
	ShowParameters();
}

VOID CTCManualStackComposedItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = nParameters = 0, nElement = nElements = 0; IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST); )
	{
		for (nParameter = 0, nParameters = m_cItem[0].GetParameters(pParameters); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (szItem = (m_szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)) ? szItem : EMPTYSTRING; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? cStringTools.ConvertIntToString(pParameter->GetWidth()) : EMPTYSTRING;
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) ? ((pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pParameter->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0)
						{
							if (GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						szItem.Empty();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, nColumn, szItem);
				}
			}
		}
		CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, FALSE);
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetMembershipParameters(pParameters) >= 0)
		{
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, pItem->GetParameterSets(szSets), nCount = 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
				{
					for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pPacketParameter->GetTag();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pPacketParameter->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pPacketParameter->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pPacketParameter->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pPacketParameter->GetConstValueAsText());
								break;
							}
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, nColumn, szItem);
						nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
					}
				}
			}
			for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
					{
						if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
						continue;
					}
					for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pFunctionElement->GetName();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pFunctionElement->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							szItem += (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FORMAL) : EMPTYSTRING;
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pFunctionElement->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pFunctionElement->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pFunctionElement->GetConstValueAsText());
								break;
							}
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, nColumn, szItem);
					}
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0 || m_cItem[0].GetSize() > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST) : FALSE), GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADVALUES)->EnableWindow((szSets.GetSize() > 0) ? CheckPrivileges() : FALSE); SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow(FALSE);
}

VOID CTCManualStackComposedItemPropertiesDialog::EvaluateParameters()
{
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPackets  pPackets;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  cFunction;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) && cFunction.Copy(pItem) && pItem->GetTCPacket(&cPacket))
		{
			for (nElement = 0, nElements = (INT)cFunction.GetSize(); nElement < nElements; nElement = nElement + 1)
			{
				if ((pFunctionElement = cFunction.GetAt(nElement)) && !pFunctionElement->HasConstValue())
				{
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT)
					{
						if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
						{
							pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 2)));
							continue;
						}
						if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
						{
							pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 8)));
							continue;
						}
						if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
						{
							pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 16)));
							continue;
						}
						if (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
						{
							pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText())));
							continue;
						}
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 10)));
					}
				}
			}
			for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && !pPacketParameter->HasConstValue())
				{
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED)
					{
						if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
						{
							pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 2)));
							continue;
						}
						if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
						{
							pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 8)));
							continue;
						}
						if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
						{
							pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 16)));
							continue;
						}
						if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
						{
							pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText())));
							continue;
						}
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 10)));
					}
				}
			}
			for (nFunction = 0, nFunctions = (GetTCService()->GenerateTCPackets(&cFunction, &cPacket, pItem->GetMemoryPatch(), pItem->GetExecutionTime(tExecutionTime) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) || pItem->GetExecutionOBRT(nExecutionOBRT), FALSE, FALSE, TRUE, pFunctions, pPackets) >= 0) ? (INT)pFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = pFunctions.GetAt(nFunction)) && pFunction->GetName() == cFunction.GetName())
				{
					for (pItem->CDatabaseTCFunction::Copy(pFunction); (pPacket = pPackets.GetAt(nFunction)); )
					{
						pItem->SetTCPacket(pPacket);
						break;
					}
					break;
				}
			}
		}
	}
}

BOOL CTCManualStackComposedItemPropertiesDialog::HasTemplates() CONST
{
	CStringArray  szTemplates;
	CTCManualStackComposedItemTemplates  pTemplates;

	return((GetParentDisplay()->GetItemTemplates(pTemplates) && pTemplates.Enum(m_cItem[0].GetName(), szTemplates) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackComposedItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCFunctionElement *pFunctionElement) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pFunctionElement->GetName()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}
BOOL CTCManualStackComposedItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCPacketParameter *pPacketParameter) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pPacketParameter->GetTag()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}

INT CTCManualStackComposedItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackComposedItemPropertiesDialog::CheckPrivileges() CONST
{
	CTCManualStackItem  *pItem;

	return(((pItem = m_cItem[0].GetAt((INT)GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->SendMessage(CB_GETCURSEL))) && (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE))) ? TRUE : FALSE);
}

VOID CTCManualStackComposedItemPropertiesDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL, (bCheck = CheckPrivileges()));
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? bCheck : FALSE);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, bCheck);
	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, bCheck);
}

BOOL CTCManualStackComposedItemPropertiesDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCManualStackComposedItemPropertiesDialog::Check(BOOL bModified) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nEntry[3];
	INT  nEntries[3];
	UINT  nOolStatus;
	BOOL  bAfterDispatch;
	DWORD  dwTimeOffset[2];
	CTimeTag  tTimeTag[3];
	CTimeSpan  tInterval;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
	{
		for (nElement = 0, nElements = ((pItem = m_cItem[0].GetAt(nEntry[0])) && pItem->GetTCPacket(&cPacket)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
		{
			if ((pFunctionElement = pItem->GetAt(nElement)))
			{
				if (!pFunctionElement->GetConstValueAsText().IsEmpty())
				{
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT) continue;
						}
						break;
					}
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
					break;
				}
				if ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) || (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO)) continue;
			}
			break;
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)))
			{
				if (!pPacketParameter->GetConstValueAsText().IsEmpty())
				{
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
					{
						if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT) continue;
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT) continue;
						}
						break;
					}
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
					break;
				}
				if ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO)) continue;
			}
			break;
		}
		if (nElement != nElements || nParameter != nParameters) break;
	}
	for (nEntry[1] = 0, nEntries[1] = (nEntry[0] == nEntries[0]) ? nEntries[0] : -1, tTimeTag[0] = 0; nEntry[1] < nEntries[1]; nEntry[1]++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry[1])) != (CTCManualStackItem *)NULL)
		{
			if (!pItem->GetReleaseTimeWindow(dwTimeOffset[1], tInterval, bAfterDispatch))
			{
				if (pItem->GetReleaseTime() >= tTimeTag[0])
				{
					tTimeTag[0] = pItem->GetReleaseTime();
					continue;
				}
				break;
			}
		}
	}
	for (nEntry[2] = 0, nEntries[2] = (nEntry[1] == nEntries[1]) ? nEntries[1] : -1, tTimeTag[0] = 0, tTimeTag[1] = 0, dwTimeOffset[0] = 0; nEntry[2] < nEntries[2]; nEntry[2]++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry[2])) != (CTCManualStackItem *)NULL)
		{
			if (!pItem->GetReleaseTimeWindow(dwTimeOffset[1], tInterval, bAfterDispatch))
			{
				if (tTimeTag[1].GetTime() / 1000 + dwTimeOffset[0] <= pItem->GetReleaseTime().GetTime() / 1000)
				{
					tTimeTag[0] = (tTimeTag[0] == 0) ? pItem->GetReleaseTime() : tTimeTag[0];
					tTimeTag[1] = pItem->GetReleaseTime();
					dwTimeOffset[0] = 0;
					continue;
				}
				break;
			}
			if ((pItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) == 0 && (tTimeTag[1].GetTime() - tTimeTag[0].GetTime()) / 1000 + dwTimeOffset[0] > dwTimeOffset[1]) break;
			dwTimeOffset[0] += dwTimeOffset[1];
		}
	}
	return((nEntry[0] == nEntries[0] && nEntry[1] == nEntries[1] && nEntry[2] == nEntries[2]) ? (!bModified || IsModified()) : FALSE);
}

void CTCManualStackComposedItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackComposedItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackComposedItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackComposedItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL, OnApplyToAll)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, OnPreAuthorize)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASE, OnReleaseConstraints)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, OnExecuteAtOffset)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, OnExecuteAtOffsetAfterPrevious)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, OnExecuteAtOBRT)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, OnExecuteAs2Step)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, OnShowFormalParameters)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE, OnLoadDynamicParameterValue)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE, OnSaveTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE, OnLoadTemplate)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, OnSelchangeEntry)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, OnEditchangeExecutionOBRT)
	ON_CONTROL(EN_CHANGE, IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME, OnSpinchangeExecutionOffset)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackComposedItemPropertiesDialog message handlers

BOOL CTCManualStackComposedItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	Timespinbox_SetRange(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), CTimeKey(TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_MINIMUMEXECUTIONTIMEOFFSET), CTimeKey(TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_MAXIMUMEXECUTIONTIMEOFFSET));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (EvaluateParameters(); EnumEntries(); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASE)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE)->EnableWindow(CheckPrivileges());
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
		ShowProperties();
		break;
	}
	AdjustToPrivileges();
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

BOOL CTCManualStackComposedItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL  bValue;
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCManualStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE, AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, (!szType.IsEmpty() && szFlag != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC)) ? CheckPrivileges() : FALSE); (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
			{
				CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, ((pFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pFunctionElement);
				break;
			}
			if ((pPacketParameter = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL))
			{
				CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, ((pPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pPacketParameter);
			}
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow((!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST) && szFlag != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) && bValue) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) == IDOK  &&  !szValue.IsEmpty() && CheckPrivileges())
			{
				GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? TRUE : FALSE);
				GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackComposedItemPropertiesDialog::OnApplyToAll()
{
	CHourglassCursor  cCursor;

	AccessControl(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? CheckPrivileges() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnOverridePTV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnOverridePEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnOverrideCEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnDisablePTV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnDisablePEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnDisableCEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV : 0;
			nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV);
		nFlags &= ~TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnPreAuthorize()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED;
			nFlags |= (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)) ? TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED : 0;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL)) pItem->SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)) ? (pItem->GetFlags() | TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) : (pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnReleaseConstraints()
{
	INT  nIndex;
	INT  nEntry[2];
	INT  nEntries[2];
	CTCManualStackItem  *pItem[4];
	CTCManualStackComposedItem  cComposedItem;
	CTCManualStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	for (; !IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL); )
	{
		if ((pItem[0] = m_cItem[0].GetAt((nIndex = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))))
		{
			for (nEntry[0] = nIndex, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] >= 0; nEntry[0]--)
			{
				if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])) != (CTCManualStackItem *)NULL)
				{
					if (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) continue;
					if ((pItem[2] = m_cItem[0].GetAt(nEntry[0] - 1)) && (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && (pItem[2]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem[1]->GetReleaseBlockID() == pItem[2]->GetReleaseBlockID() + 1) continue;
				}
				break;
			}
			for (nEntry[1] = nEntries[1] = nEntry[0]; nEntry[0] < nEntries[0]; nEntry[0]++, nEntries[1]++)
			{
				if ((pItem[2] = ((pItem[1] = m_cItem[0].GetAt(nEntry[0]))) ? new CTCManualStackItem : (CTCManualStackItem *)NULL))
				{
					if (((pItem[1]->GetFlags() & (TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED | TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED)) || ((pItem[3] = m_cItem[0].GetAt(nEntry[0] + 1)) && (pItem[3]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED))) && pItem[2]->Copy(pItem[1]) && cComposedItem.Add(pItem[2]) >= 0) continue;
					if (nEntry[0] == nEntry[1] && pItem[2]->Copy(pItem[1]) && cComposedItem.Add(pItem[2]) >= 0)
					{
						nEntries[1]++;
						break;
					}
					delete pItem[2];
				}
				break;
			}
			if (cReleaseConstraintsDialog.Create(this, &cComposedItem, nIndex) == IDOK)
			{
				for (nEntry[0] = nEntry[1], nEntries[0] = nEntries[1]; nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
					{
						m_cItem[0].RemoveAt(nEntry[0]);
						delete pItem[1];
						nEntries[0]--;
						nEntry[0]--;
					}
				}
				for (nEntry[0] = 0, nEntries[0] = (INT)cComposedItem.GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					m_cItem[0].InsertAt(nEntry[0] + nEntry[1], cComposedItem.GetAt(nEntry[0]), 1);
					continue;
				}
				for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
					{
						pItem[1]->SetMembership(m_cItem[0].GetName());
						pItem[1]->SetMembershipDescription(m_cItem[0].GetDescription());
						pItem[1]->SetMembershipID((!m_cItem[0].GetName().IsEmpty()) ? nEntry[0] : -1);
						pItem[1]->SetMembershipSize((!m_cItem[0].GetName().IsEmpty()) ? nEntries[0] : 0);
					}
				}
				cComposedItem.CPtrArray::RemoveAll();
				EvaluateParameters();
				EnumEntries();
			}
		}
		break;
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
	{
		if (cReleaseConstraintsDialog.Create(this, &m_cItem[0]) == IDOK)
		{
			for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
			{
				if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
				{
					pItem[1]->SetMembership(m_cItem[0].GetName());
					pItem[1]->SetMembershipDescription(m_cItem[0].GetDescription());
					pItem[1]->SetMembershipID((!m_cItem[0].GetName().IsEmpty()) ? nEntry[0] : -1);
					pItem[1]->SetMembershipSize((!m_cItem[0].GetName().IsEmpty()) ? nEntries[0] : 0);
				}
			}
			EvaluateParameters();
			EnumEntries();
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteImmediately()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, nFlags[0] = TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE, nFlags[1] = ~(TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset();
			pItem->SetExecutionTime(0);
			pItem->SetExecutionOBRT();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteAtTime()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CTimeKey  tTime;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, tTime = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + 2 * SECONDSPERHOUR) / SECONDSPERHOUR), nFlags[0] = TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTime(1000000 * tTime.GetTime());
			pItem->SetExecutionTimeOffset();
			pItem->SetExecutionOBRT();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTime(1000000 * tTime.GetTime());
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), tTime);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteAtOffset()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	DWORD  dwOffset;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, dwOffset = 1000 * TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULTEXECUTIONTIMEOFFSET, nFlags[0] = TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset(dwOffset);
			pItem->SetExecutionTime(0);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset(dwOffset);
		pItem->SetExecutionTime(0);
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	Timespinbox_SetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), CTimeKey(dwOffset / 1000));
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteAtOffsetAfterPrevious()
{
	INT  nEntry;
	INT  nEntries;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry))) pItem->SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)) ? ((pItem->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN) | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) : ((pItem->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN));
		continue;
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL)) pItem->SetFlags((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)) ? ((pItem->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN) | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) : ((pItem->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteAtOBRT()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CString  szOBRT;
	CTimeTag  tOBRT;
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, nFlags[0] = TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset();
			pItem->SetExecutionTime(0);
			pItem->SetExecutionOBRT();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT = (GetTCService()->ConvertOBRTToTime(0, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
	SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_LIMITTEXT, cStringTools.ConvertUIntToString(UINT_MAX, 16).GetLength());
	SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnExecuteAs2Step()
{
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))))
	{
		pItem->SetFlags((pItem->GetFlags() & ~(TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnShowFormalParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCManualStackComposedItemPropertiesDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szOffset;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		pFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION)) ? ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCManualStackComposedItemPropertiesDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szItem;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? (((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)) : -1) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pFunctionElement = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? pItem->GetAt(pItem->Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8))) : pItem->GetAt(pItem->Find(szTag))); )
		{
			for (pFunctionElement->SetConstValueAsText(szValue), pFunctionElement->SetConstValue(), EvaluateParameters(); (pFunctionElement = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? pItem->GetAt(pItem->Find(szTag, nByte, nBit)) : pItem->GetAt(pItem->Find(szTag))); )
			{
				if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
				{
					if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
				break;
			}
			szFlag = (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
			break;
		}
		if ((pPacketParameter = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL))
		{
			for (pPacketParameter->SetConstValueAsText(szValue), pPacketParameter->SetConstValue(), pItem->SetTCPacket(&cPacket), EvaluateParameters(); (pPacketParameter = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szItem = (!bOolStatus) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szItem;
				szFlag = (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				break;
			}
		}
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szItem);
		break;
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		for (nParameter = 0, nParameters = m_cItem[0].GetParameters(pParameters), szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pParameters.GetAt(nParameter)) && pParameter->GetTag() == szTag)
			{
				for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(), pParameter->SetConstValueAsText(szValue); nItem < nItems; nItem++)
				{
					if ((pItem = m_cItem[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
					{
						for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
						{
							if ((pFunctionElement = pItem->GetAt(nElement)))
							{
								if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_SEQUENCE)
								{
									if (pFunctionElement->GetConstValueSource() == pParameter->GetTag())
									{
										pFunctionElement->SetConstValueAsText(pParameter->GetConstValueAsText());
										continue;
									}
								}
								if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
								{
									if (pFunctionElement->GetConstValueSource() == pParameter->GetTag())
									{
										pFunctionElement->SetConstValueAsText(pParameter->GetConstValueAsText());
										continue;
									}
								}
							}
						}
					}
				}
				for (m_cItem[0].SetParameters(pParameters); (bOolStatus = GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus)); )
				{
					if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), (szItem = (!bOolStatus) ? STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szItem));
				break;
			}
		}
	}
	Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTCManualStackItemPropertiesParameterSetsDialog  cParameterSetsDialog;

	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && cParameterSetsDialog.Create(this, pItem, szParameterSet) == IDOK)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
		{
			if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pItem->GetName()))))
			{
				for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) && pFunctionElement[0]->HasConstValue())
					{
						if ((pFunctionElement[1] = pItem->GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))) && (pFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
						{
							pFunctionElement[1]->SetAttributes((pFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
							pFunctionElement[1]->SetConstValueAsText(pFunctionElement[0]->GetConstValueAsText());
							pFunctionElement[1]->SetConstValue(pFunctionElement[0]->GetConstValue());
						}
					}
				}
			}
		}
		ShowParameters();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnLoadDynamicParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	ULONGLONG  nFlags;
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szValue.Empty(); (nIndex = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), nFlags = 0; (pFunctionElement = pItem->GetAt(pItem->Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pFunctionElement->GetName());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pFunctionElement->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		for (; (pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pPacketParameter->GetTag());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pPacketParameter->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		if ((pTCParameter = (GetTCService()->Initialize(pTCParameters)) ? pTCParameters.GetAt(0) : (CTCParameter *)NULL) && pTCParameter->GetValueAsText(GetDatabase(), 0, nFlags, szValue))
		{
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(szValue);
			SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetFocus();
		}
		break;
	}
}

void CTCManualStackComposedItemPropertiesDialog::OnSaveTemplate()
{
	CTCManualStackItemPropertiesSaveTemplateDialog  cSaveTemplateDialog;

	if (cSaveTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
		return;
	}
}

void CTCManualStackComposedItemPropertiesDialog::OnLoadTemplate()
{
	CTCManualStackItemPropertiesLoadTemplateDialog  cLoadTemplateDialog;

	if (cLoadTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges() : FALSE);
		ShowProperties();
	}
	for (; !SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) && !HasTemplates(); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnSelchangeEntry()
{
	ShowProperties();
	ShowParameters();
	AdjustToPrivileges();
}

void CTCManualStackComposedItemPropertiesDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->GetWindowText(szValue);
	for (szTag = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && szValue.IsEmpty()) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		bValue = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	for (; (pPacketParameter = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket) && szValue.IsEmpty()) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL); )
	{
		bValue = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckPrivileges() : FALSE);
}

void CTCManualStackComposedItemPropertiesDialog::OnEditchangeExecutionOBRT()
{
	INT  nPos;
	INT  nEntry;
	INT  nEntries;
	UINT  nOBRT;
	CTimeTag  tOBRT;
	CString  szOBRT[2];
	CString  szDigit[2];
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;

	if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT))
	{
		for (GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->GetWindowText(szOBRT[0]), szOBRT[0].MakeUpper(), nOBRT = 0, szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16), nPos = 0; nPos < szOBRT[0].GetLength(); nPos++)
		{
			if (_istxdigit(szOBRT[0].GetAt(nPos)))
			{
				if (_istdigit(szOBRT[0].GetAt(nPos)))
				{
					nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[0].GetAt(0));
					continue;
				}
				nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[1].GetAt(0)) + 10;
				continue;
			}
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((szOBRT[0] = (nPos < szOBRT[0].GetLength() - 1) ? (szOBRT[0].Left(nPos) + szOBRT[0].Mid(nPos + 1)) : szOBRT[0].Left(nPos)));
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime((UINT)_ttoi64(szOBRT[0]), tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			CAudioDevice::AlertBySound();
			break;
		}
		if (nPos == szOBRT[0].GetLength())
		{
			for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
			{
				if ((pItem = m_cItem[0].GetAt(nEntry)))
				{
					pItem->SetExecutionOBRT(nOBRT);
					continue;
				}
			}
			for (; (pItem = (!IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCManualStackItem *)NULL); )
			{
				pItem->SetExecutionOBRT(nOBRT);
				break;
			}
			if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szOBRT[0].GetLength())
			{
				GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
				SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			}
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime(nOBRT, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnSpinchangeExecutionTime()
{
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tTime;
	CTCManualStackItem  *pItem;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
			{
				pItem->SetExecutionTime(1000000 * tTime.GetTime());
				continue;
			}
			if (nEntry == SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))
			{
				pItem->SetExecutionTime(1000000 * tTime.GetTime());
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnSpinchangeExecutionOffset()
{
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tTime;
	CTCManualStackItem  *pItem;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
			{
				pItem->SetExecutionTimeOffset((DWORD)(1000 * tTime.GetTime()), tTime < 0);
				continue;
			}
			if (nEntry == SendDlgItemMessage(IDC_TCMANUALSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))
			{
				pItem->SetExecutionTimeOffset((DWORD)(1000 * tTime.GetTime()), tTime < 0);
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackComposedItemPropertiesDialog::OnOK()
{
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	ULONGLONG  nConstValue;
	CTimeSpan  tReleaseInterval;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCManualStackItem *)NULL)
		{
			for (nElement = 0, nElements = (pItem->GetTCPacket(&cPacket)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) && GetTCService()->ConvertTCParameterValue(pFunctionElement->GetName(), pFunctionElement->GetAttributes(), pFunctionElement->GetConstValueAsText(), nConstValue))
				{
					pFunctionElement->SetConstValue(nConstValue);
					continue;
				}
			}
			for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && GetTCService()->ConvertTCParameterValue(pPacketParameter->GetTag(), pPacketParameter->GetAttributes(), pPacketParameter->GetConstValueAsText(), nConstValue))
				{
					pPacketParameter->SetConstValue(nConstValue);
					continue;
				}
			}
			if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
			{
				pItem->SetReleaseTime(0);
				continue;
			}
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackComposedItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackComposedItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSaveContentsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSaveContentsDialog, CDisplayDialog)

CTCManualStackSaveContentsDialog::CTCManualStackSaveContentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSaveContentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackSaveContentsDialog::Create(CWnd *pParentWnd, CONST CTCManualStackItems &pItems)
{
	return((m_pItems[0].Copy(&pItems) && m_pItems[1].Copy(&pItems)) ? CDisplayDialog::Create(pParentWnd, CTCManualStackSaveContentsDialog::IDD) : -1);
}

CTCManualStackWnd *CTCManualStackSaveContentsDialog::GetParent() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCManualStackSaveContentsDialog::EnumStackMembers()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	BOOL  bAbsoluteTime[2];
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CString  szItem;
	CString  szArgument;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bAbsoluteTime[0] = bAbsoluteTime[1] = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem + 1, max(cStringTools.ConvertIntToString(nItems).GetLength(), 3));
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS))
				{
					for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
					{
						if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							szArgument.Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
					{
						if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							for (szArgument.Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText()); (pParameter = ((pFunctionElement->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL)) && pItem->GetMembershipParameters(pParameters) > 0) ? pParameters.GetAt(pParameters.Find(pFunctionElement->GetConstValueSource())) : (CDatabaseTCParameter *)NULL); )
							{
								szArgument.Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pParameter->GetConstValueAsText());
								break;
							}
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					szItem += (nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_NOARGUMENTS) : EMPTYSTRING;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS); )
				{
					if ((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED))
					{
						szItem.Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_FLAGSFORMAT), STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_GROUPEDFLAG), STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_BLOCKEDFLAG));
						break;
					}
					if (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED)
					{
						szItem = STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_GROUPEDFLAG);
						break;
					}
					if (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED)
					{
						szItem = STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_BLOCKEDFLAG);
						break;
					}
					szItem.Empty();
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIME))
				{
					for (szReleaseTime[0].Empty(); (tReleaseTime = pItem->GetReleaseTime()) > 0; )
					{
						szReleaseTime[0] = tReleaseTime.FormatGmt(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_FORMAT));
						break;
					}
					if (!tReleaseTime.GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (pItem->GetMembership().IsEmpty() || !pItem->GetMembershipID()) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_WITHPREVIOUS);
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET))
				{
					for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
					{
						szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT));
						szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[2].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[3].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
						break;
					}
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIME))
				{
					szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
					szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
					szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
					szItem = szExecutionTime[0];
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET))
				{
					for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
					{
						szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OFFSETFORMAT));
						szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
						szExecutionTime[1].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[2].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[3].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
						break;
					}
					szItem = szExecutionTime[0];
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, nColumn, szItem);
			}
			bAbsoluteTime[0] = (!nItem) ? (pItem->GetReleaseTime() > 0) : bAbsoluteTime[0];
			bAbsoluteTime[1] = (!nItem) ? pItem->GetExecutionTime(tExecutionTime) : bAbsoluteTime[1];
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_STATIC)->EnableWindow(bAbsoluteTime[0] || bAbsoluteTime[1]);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES)->EnableWindow(bAbsoluteTime[0]);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES)->EnableWindow(bAbsoluteTime[1]);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackSaveContentsDialog::EnumRepositoryMembers()
{
	INT  nStack;
	INT  nStacks;
	INT  nColumn;
	INT  nColumns;
	CString  szName;
	CString  szItem;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;

	SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_DELETEALLITEMS);
	for (GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); LoadRepository(szFileName, pRepository); )
	{
		for (nStack = 0, nStacks = (INT)pRepository.GetSize(); nStack < nStacks; nStack++)
		{
			if ((pStack = pRepository.GetAt(nStack)) != (CTCSavedStack *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME); )
					{
						szItem = pStack->GetName();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION); )
					{
						szItem = pStack->GetDescription();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR); )
					{
						szItem = pStack->GetAuthor();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE); )
					{
						szItem = pStack->GetCreationDate().FormatGmt(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_TIMEFORMAT));
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION); )
					{
						szItem = pStack->GetOriginWorkstation();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_STATUS); )
					{
						szItem = (pStack->IsValidated()) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_VALIDATED) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_NOTVALIDATED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), nStack, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), nStack, nColumn, szItem);
				}
			}
		}
		break;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow((pRepository.Find(szName) >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow((pRepository.Find(szName) >= 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackSaveContentsDialog::SaveRepository(CFileEx &cFile, CONST CTCSavedStacks &pStacks)
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	for (cFile.SeekToBegin(); pStacks.Map(nRepositoryData) && WriteFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL); )
	{
		cFile.SetLength(nRepositoryData.GetSize());
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackSaveContentsDialog::SaveRepository(LPCTSTR pszFileName, CONST CTCSavedStacks &pStacks)
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCManualStackSaveContentsDialog::LoadRepository(CFileEx &cFile, CTCSavedStacks &pStacks) CONST
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	nRepositoryData.SetSize((INT_PTR)cFile.GetLength());
	return((ReadFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL) && pStacks.Unmap(nRepositoryData)) ? TRUE : FALSE);
}
BOOL CTCManualStackSaveContentsDialog::LoadRepository(LPCTSTR pszFileName, CTCSavedStacks &pStacks) CONST
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeRead))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (LoadRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCManualStackSaveContentsDialog::LogActivity(LPCTSTR pszFileName, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetDescription(pszFileName), cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}
BOOL CTCManualStackSaveContentsDialog::LogActivity(CONST CTCSavedStack *pStack, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(pStack->GetName()), cEntry.SetDescription(pStack->GetDescription()), cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_SAVING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_SAVEDSTACK)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_SAVEDSTACK));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}

INT CTCManualStackSaveContentsDialog::FindColumnIndex(UINT nID, LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (nID == IDC_TCMANUALSTACK_SAVECONTENTS_LIST) ? (INT)m_szColumns[0].GetSize() : ((nID == IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST) ? (INT)m_szColumns[1].GetSize() : -1); nColumn < nColumns; nColumn++)
	{
		if ((nID == IDC_TCMANUALSTACK_SAVECONTENTS_LIST  &&  m_szColumns[0].GetAt(nColumn) == pszColumn) || (nID == IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST  &&  m_szColumns[1].GetAt(nColumn) == pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackSaveContentsDialog::Check(BOOL bModified) CONST
{
	CString  szName;
	CString  szDescription;
	CString  szFileName;

	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_DESCRIPTION)->GetWindowText(szDescription);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	return((!szName.IsEmpty() && !szDescription.IsEmpty() && !szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CTCManualStackSaveContentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSaveContentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackSaveContentsDialog::PostNcDestroy()
{
	m_pItems[0].RemoveAll();
	m_pItems[1].RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackSaveContentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackSaveContentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES, OnRelativeReleaseTimes)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES, OnRelativeExecutionTimes)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_INSPECT, OnInspectRepository)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_SAVECONTENTS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_SAVECONTENTS_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_SAVECONTENTS_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSaveContentsDialog message handlers

BOOL CTCManualStackSaveContentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIME));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIME));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER)) ? (rColumns[0].Width() / 12) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME)) ? (rColumns[0].Width() / 6) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION)) ? (rColumns[0].Width() / 2) : (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS)) ? (rColumns[0].Width() / 10) : rColumns[0].Width() / 4))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME)) ? (rColumns[1].Width() / 4) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR)) ? (rColumns[1].Width() / 4) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION)) ? (rColumns[1].Width() / 5) : (rColumns[1].Width() / 6))))));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_STATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_STATUS_VALIDATED)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_BROWSE)->EnableWindow();
	EnumStackMembers();
	return TRUE;
}

void CTCManualStackSaveContentsDialog::OnRelativeReleaseTimes()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseTime[2];
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (tReleaseTime[0] = (!nItem) ? pItem[0]->GetReleaseTime() : tReleaseTime[0]; IsDlgButtonChecked(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES) && !pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
			{
				for (pItem[0]->SetReleaseTimeWindow((dwReleaseOffset = (pItem[0]->GetReleaseTime() > 0) ? (1000 * (DWORD)max(pItem[0]->GetReleaseTime().GetTimeInSeconds() - tReleaseTime[0].GetTimeInSeconds(), 0)) : 0), (pItem[0]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]) && tReleaseTime[1] > 0) ? max(tReleaseTime[2].GetTimeInSeconds() - tReleaseTime[1].GetTimeInSeconds(), 0) : ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) ? tReleaseInterval.GetTotalSeconds() : 0), TRUE), pItem[0]->SetReleaseTime(0); pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS; )
				{
					pItem[0]->SetFlags((pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) | TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN);
					break;
				}
				szReleaseTime[0].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)));
				szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)));
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET)), (!nItem) ? szReleaseTime[0] : szReleaseTime[1]);
				break;
			}
			if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES))
			{
				if ((pItem[1] = m_pItems[1].GetAt(nItem)) && !pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2])) pItem[0]->SetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]);
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) pItem[0]->SetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval);
					if (!pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]) && !pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) pItem[0]->SetReleaseTimeWindow(pItem[1]->GetReleaseTime());
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET)), EMPTYSTRING);
				}
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnRelativeExecutionTimes()
{
	INT  nItem;
	INT  nItems;
	BOOL  bExecutionOffset;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT[2];
	DWORD  dwExecutionOffset;
	CString  szExecutionTime;
	CTimeTag  tExecutionTime[2];
	CTCManualStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (tExecutionTime[0] = (!nItem) ? ((pItem[0]->GetExecutionTime(tExecutionTime[1])) ? tExecutionTime[1] : 0) : tExecutionTime[0], nExecutionOBRT[0] = (!nItem) ? ((pItem[0]->GetExecutionOBRT(nExecutionOBRT[1])) ? nExecutionOBRT[1] : 0) : nExecutionOBRT[0]; IsDlgButtonChecked(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES); )
			{
				for (bExecutionOffset = pItem[0]->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); pItem[0]->GetExecutionTime(tExecutionTime[1]); )
				{
					pItem[0]->SetExecutionTimeOffset((dwExecutionOffset = (DWORD)abs(tExecutionTime[1].GetTime() / 1000 - tExecutionTime[0].GetTime() / 1000)), (bEarlierExecution = (tExecutionTime[0] > tExecutionTime[1])));
					pItem[0]->SetExecutionTime(0);
					bExecutionOffset = TRUE;
					break;
				}
				if (pItem[0]->GetExecutionOBRT(nExecutionOBRT[1]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT[0], tExecutionTime[0]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT[1], tExecutionTime[1]))
				{
					pItem[0]->SetExecutionTimeOffset((dwExecutionOffset = (nExecutionOBRT[0] != nExecutionOBRT[1]) ? (DWORD)abs(tExecutionTime[1].GetTime() / 1000 - tExecutionTime[0].GetTime() / 1000) : 0), (bEarlierExecution = (nExecutionOBRT[0] != nExecutionOBRT[1]) ? (tExecutionTime[0] > tExecutionTime[1]) : FALSE));
					pItem[0]->SetExecutionTime(0);
					bExecutionOffset = TRUE;
				}
				for (pItem[0]->SetFlags((pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN), szExecutionTime = CTimeSpan(dwExecutionOffset / 1000).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OFFSETFORMAT)), szExecutionTime = (!bEarlierExecution) ? (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime) : (STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime); nItem > 0; )
				{
					szExecutionTime.Format(STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime);
					break;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET)), (bExecutionOffset) ? szExecutionTime : EMPTYSTRING);
				break;
			}
			if (!IsDlgButtonChecked(IDC_TCMANUALSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES))
			{
				if ((pItem[1] = m_pItems[1].GetAt(nItem)) && (pItem[1]->GetExecutionTime(tExecutionTime[1]) || pItem[1]->GetExecutionOBRT(nExecutionOBRT[1])))
				{
					if (pItem[1]->GetExecutionTime(tExecutionTime[1])) pItem[0]->SetExecutionTime(tExecutionTime[1]);
					if (pItem[1]->GetExecutionOBRT(nExecutionOBRT[1])) pItem[0]->SetExecutionOBRT(nExecutionOBRT[1]);
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCMANUALSTACK_SAVECONTENTS_LIST, STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET)), EMPTYSTRING);
				}
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnInspectRepository()
{
	CHourglassCursor  cCursor;

	EnumRepositoryMembers();
}

void CTCManualStackSaveContentsDialog::OnRemoveMember()
{
	INT  nIndex[2];
	CFileEx  cFile;
	CString  szName[2];
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->GetWindowText(szName[0]), GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if ((pStack = (LoadRepository(cFile, pRepository)) ? pRepository.GetAt((nIndex[1] = pRepository.Find((szName[1] = Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), (nIndex[0] = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST))), FindColumnIndex(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, STRING(IDS_TCMANUALSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME))))))) : (CTCSavedStack *)NULL))
			{
				for (pRepository.RemoveAt(nIndex[1]); SaveRepository(cFile, pRepository); )
				{
					for (Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), nIndex[0]); szName[0] == szName[1]; )
					{
						GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
						GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
						break;
					}
					LogActivity(pStack, TRUE);
					break;
				}
				delete pStack;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST), 0); !SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
		break;
	}
}

void CTCManualStackSaveContentsDialog::OnRemoveAllMembers()
{
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pRepository))
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_DELETEALLITEMS);
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				LogActivity(szFileName);
				cFile.Close();
				break;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	if (!SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT))
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
	}
}

void CTCManualStackSaveContentsDialog::OnEditchangeName()
{
	CString  szName;
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow((LoadRepository(szFileName, pRepository) && pRepository.Find(szName) >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow((pRepository.Find(szName) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnEditchangeDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnEditchangeFileName()
{
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME_INSPECT)->EnableWindow((LoadRepository(szFileName, pRepository) && pRepository.GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackSaveContentsDialog::OnOK()
{
	CFileEx  cFile;
	CString  szName;
	CString  szMessage;
	CString  szFileName;
	CString  szDescription;
	CTimeKey  tCreationDate;
	CByteArray  nFileData;
	CTCSavedStack  *pStack[2];
	CTCSavedStacks  pRepository;
	CComputerToken  cComputerToken;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	if ((pStack[0] = new CTCSavedStack))
	{
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_DESCRIPTION)->GetWindowText(szDescription);
		GetDlgItem(IDC_TCMANUALSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
		for (pStack[0]->SetName(szName), pStack[0]->SetDescription(szDescription), pStack[0]->SetCreationDate(tCreationDate), pStack[0]->SetOriginWorkstation(cComputerToken.GetComputerName()), pStack[0]->SetSpacecraft(GetAccountSpacecraftName()), pStack[0]->SetAuthor(GetAccountUserName()), pStack[0]->SetDatabase(GetAccountDatabase()), pStack[0]->SetDatabaseVersion(GetDatabase()->GetCreationTime(), GetDatabase()->GetLastUpdateTime()), pStack[0]->Validate(IsDlgButtonChecked(IDC_TCMANUALSTACK_SAVECONTENTS_STATUS_VALIDATED)); pStack[0]->CTCItems::Copy(&m_pItems[0]); )
		{
			if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
			{
				if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
				{
					for (LoadRepository(cFile, pRepository); (pStack[1] = pRepository.GetAt(pRepository.Find(pStack[0]->GetName()))); )
					{
						if (pStack[1]->Copy(pStack[0]) && pRepository.Map(nFileData))
						{
							if (SaveRepository(cFile, pRepository))
							{
								LogActivity(pStack[0]);
								delete pStack[0];
								break;
							}
						}
						nFileData.RemoveAll();
						delete pStack[0];
						break;
					}
					if (pRepository.Find(szName) < 0)
					{
						if (pRepository.Add(pStack[0]) >= 0)
						{
							for (; !pRepository.Map(nFileData) || !SaveRepository(cFile, pRepository); )
							{
								nFileData.RemoveAll();
								break;
							}
							for (; nFileData.GetSize() > 0; )
							{
								LogActivity(pStack[0]);
								break;
							}
							UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
							cFile.Close();
							break;
						}
						nFileData.RemoveAll();
						delete pStack[0];
					}
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				}
				cFile.Close();
			}
			break;
		}
	}
	if (!nFileData.GetSize())
	{
		szMessage.Format(STRING(IDS_TCMANUALSTACK_MESSAGE_SAVECONTENTS_FAILURE), (LPCTSTR)szName);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackSaveContentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSAVECONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackSaveContentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKSAVECONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoadContentsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackLoadContentsDialog, CDisplayDialog)

CTCManualStackLoadContentsDialog::CTCManualStackLoadContentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackLoadContentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackLoadContentsDialog::Create(CWnd *pParentWnd)
{
	m_pItems.RemoveAll();
	m_pRepository.RemoveAll();
	return CDisplayDialog::Create(pParentWnd, CTCManualStackLoadContentsDialog::IDD);
}

BOOL CTCManualStackLoadContentsDialog::Initialize()
{
	GetParent()->GetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
	return TRUE;
}

CTCManualStackWnd *CTCManualStackLoadContentsDialog::GetParent() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCManualStackLoadContentsDialog::EnumFilters()
{
	INT  nFilter;
	INT  nFilters;
	CTCManualStackSearchFilter  *pFilter;

	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_RESETCONTENT);
	for (nFilter = 0, nFilters = (INT)m_pFilters.GetSize(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = m_pFilters.GetAt(nFilter)) != (CTCManualStackSearchFilter *)NULL)
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFilter->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE));
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_ADD)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

BOOL CTCManualStackLoadContentsDialog::EnumRepositoryMembers()
{
	INT  nStack;
	INT  nStacks;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szFileName;
	CTCSavedStack  *pStack;

	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_DELETEALLITEMS);
	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); LoadRepository(szFileName, m_pRepository); )
	{
		for (nStack = 0, nStacks = (INT)m_pRepository.GetSize(); nStack < nStacks; nStack++)
		{
			if ((pStack = m_pRepository.GetAt(nStack)) != (CTCSavedStack *)NULL  &&  CheckFilter(pStack))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME); )
					{
						szItem = pStack->GetName();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION); )
					{
						szItem = pStack->GetDescription();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR); )
					{
						szItem = pStack->GetAuthor();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE); )
					{
						szItem = pStack->GetCreationDate().FormatGmt(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TIMEFORMAT));
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION); )
					{
						szItem = pStack->GetOriginWorkstation();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS); )
					{
						szItem = (pStack->IsValidated()) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_VALIDATED) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_NOTVALIDATED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT), szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
				}
			}
		}
		break;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackLoadContentsDialog::EnumStackMembers()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bStackValidity;
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CString  szItem;
	CString  szArgument;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CTimeKey  tVersionTime[2];
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringTools  cStringTools;
	CTCSavedStack  *pStack;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS), CheckDlgButton(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE), m_pItems.RemoveAll(); (pStack = m_pRepository.GetAt((nIndex = m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME))))))); )
	{
		for (nItem = 0, nItems = (INT)pStack->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
			{
				pItem->CTCItem::Copy(pStack->GetAt(nItem));
				m_pItems.InsertAt(nItem, pItem, 1);
			}
		}
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow((bStackValidity = (pStack->GetSpacecraft() != GetDatabase()->GetSpacecraft() || pStack->GetDatabase() != GetDatabase()->GetName() || !pStack->GetDatabaseVersion(tVersionTime[0], tVersionTime[1]) || GetDatabase()->GetCreationTime() != tVersionTime[0] || GetDatabase()->GetLastUpdateTime() != tVersionTime[1] || !pStack->IsValidated())) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(bStackValidity);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(bStackValidity);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(bStackValidity);
		break;
	}
	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem + 1, max(cStringTools.ConvertIntToString(nItems).GetLength(), 3));
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS))
				{
					for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
					{
						if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							szArgument.Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
					{
						if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							for (szArgument.Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText()); (pParameter = ((pFunctionElement->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL)) && pItem->GetMembershipParameters(pParameters) > 0) ? pParameters.GetAt(pParameters.Find(pFunctionElement->GetConstValueSource())) : (CDatabaseTCParameter *)NULL); )
							{
								szArgument.Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pParameter->GetConstValueAsText());
								break;
							}
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					szItem += (nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_NOARGUMENTS) : EMPTYSTRING;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS); )
				{
					if ((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED))
					{
						szItem.Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_FLAGSFORMAT), STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_GROUPEDFLAG), STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_BLOCKEDFLAG));
						break;
					}
					if (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED)
					{
						szItem = STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_GROUPEDFLAG);
						break;
					}
					if (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED)
					{
						szItem = STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_BLOCKEDFLAG);
						break;
					}
					szItem.Empty();
					break;
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIME))
				{
					for (szReleaseTime[0].Empty(); (tReleaseTime = pItem->GetReleaseTime()) > 0; )
					{
						szReleaseTime[0] = tReleaseTime.FormatGmt(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_FORMAT));
						break;
					}
					if (!tReleaseTime.GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (pItem->GetMembership().IsEmpty() || !pItem->GetMembershipID()) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_WITHPREVIOUS);
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIMEOFFSET))
				{
					for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
					{
						szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_OFFSETFORMAT));
						szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[2].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[3].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
						break;
					}
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIME))
				{
					szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
					szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
					szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
					szItem = szExecutionTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIMEOFFSET))
				{
					for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
					{
						szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_OFFSETFORMAT));
						szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
						szExecutionTime[1].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[2].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[3].Format(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
						break;
					}
					szItem = szExecutionTime[0];
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), 0); nIndex < 0; )
	{
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackLoadContentsDialog::SaveRepository(CFileEx &cFile, CONST CTCSavedStacks &pStacks)
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	for (cFile.SeekToBegin(); pStacks.Map(nRepositoryData) && WriteFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL); )
	{
		cFile.SetLength(nRepositoryData.GetSize());
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackLoadContentsDialog::SaveRepository(LPCTSTR pszFileName, CONST CTCSavedStacks &pStacks)
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCManualStackLoadContentsDialog::LoadRepository(CFileEx &cFile, CTCSavedStacks &pStacks) CONST
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	nRepositoryData.SetSize((INT_PTR)cFile.GetLength());
	return((ReadFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL) && pStacks.Unmap(nRepositoryData)) ? TRUE : FALSE);
}
BOOL CTCManualStackLoadContentsDialog::LoadRepository(LPCTSTR pszFileName, CTCSavedStacks &pStacks) CONST
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeRead))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (LoadRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCManualStackLoadContentsDialog::LogActivity(LPCTSTR pszFileName, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetDescription(pszFileName), cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_STACKREPOSITORY));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}
BOOL CTCManualStackLoadContentsDialog::LogActivity(CONST CTCSavedStack *pStack, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(pStack->GetName()), cEntry.SetDescription(pStack->GetDescription()), cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_LOADING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_SAVEDSTACK)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_SAVEDSTACK));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}

BOOL CTCManualStackLoadContentsDialog::CheckFilter(CONST CTCSavedStack *pStack) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nValue;
	INT  nValues;
	BOOL  bSearch;
	CString  szFilter;
	CUIntArray  nOperators;
	CStringArray  szKeys;
	CStringArray  szValues[2];
	CTCManualStackSearchFilter  *pFilter;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter);
	if ((pFilter = m_pFilters.GetAt(m_pFilters.Find(szFilter))) != (CTCManualStackSearchFilter *)NULL)
	{
		for (nKey = 0, nKeys = pFilter->GetSearchKeys(szKeys, szValues[0]); nKey < nKeys; nKey = nKey + 1)
		{
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_NAME))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetName().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pStack->GetName().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pStack->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_AUTHOR))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetAuthor() == szValues[1].GetAt(nValue))) : (bSearch || (pStack->GetAuthor() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_WORKSTATION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetOriginWorkstation() == szValues[1].GetAt(nValue))) : (bSearch || (pStack->GetOriginWorkstation() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && ((pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED)) || (!pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED)))) : (bSearch || ((pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED)) || (!pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED))));
					continue;
				}
				if (!bSearch) break;
			}
		}
		return((nKey == nKeys) ? TRUE : FALSE);
	}
	return TRUE;
}

INT CTCManualStackLoadContentsDialog::ExtractFilterValues(LPCTSTR pszValues, CStringArray &szSearchValues, CUIntArray &nSearchOperators) CONST
{
	INT  nPos[3];
	CString  szValue;
	CString  szValues;

	for (nPos[0] = 0, nPos[1] = (szValues = pszValues).Find(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_OR)), szSearchValues.RemoveAll(), nSearchOperators.RemoveAll(); nPos[1] >= 0 || nPos[2] >= 0; nPos[1] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_OR)))
	{
		if (nPos[1] >= 0 && (nPos[2] < 0 || nPos[1] < nPos[2]))
		{
			nSearchOperators.Add(TCMANUALSTACKSEARCHFILTER_OPERATOR_AND);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[1])));
			nPos[0] += nPos[1] + lstrlen(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_AND));
			continue;
		}
		if (nPos[2] >= 0 && (nPos[1] < 0 || nPos[2] < nPos[1]))
		{
			nSearchOperators.Add(TCMANUALSTACKSEARCHFILTER_OPERATOR_OR);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[2])));
			nPos[0] += nPos[2] + lstrlen(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_OR));
			continue;
		}
		break;
	}
	if (nPos[0] < szValues.GetLength())
	{
		for (szValue = ExtractFilterValue(szValues.Mid(nPos[0])); !szValue.IsEmpty(); )
		{
			szSearchValues.Add(szValue);
			break;
		}
	}
	return((INT)szSearchValues.GetSize());
}
CString CTCManualStackLoadContentsDialog::ExtractFilterValue(LPCTSTR pszValue) CONST
{
	CString  szValue;

	for (szValue = pszValue; szValue.GetLength() > 0 && _istspace(szValue.GetAt(0)); )
	{
		szValue = szValue.Mid(1);
		continue;
	}
	while (szValue.GetLength() > 0 && _istspace(szValue.GetAt(szValue.GetLength() - 1)))
	{
		szValue = szValue.Mid(0, szValue.GetLength() - 1);
		continue;
	}
	if (szValue.GetLength() > 1 && szValue.GetAt(0) == STRINGCHAR(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER) && szValue.GetAt(szValue.GetLength() - 1) == STRINGCHAR(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_TEXT_DELIMITER))
	{
		szValue = szValue.Left(szValue.GetLength() - lstrlen(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER)));
		szValue = szValue.Mid(lstrlen(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER)));
	}
	return szValue;
}

INT CTCManualStackLoadContentsDialog::FindColumnIndex(UINT nID, LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (nID == IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST) ? (INT)m_szColumns[0].GetSize() : ((nID == IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST) ? (INT)m_szColumns[1].GetSize() : -1); nColumn < nColumns; nColumn++)
	{
		if ((nID == IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST  &&  m_szColumns[0].GetAt(nColumn) == pszColumn) || (nID == IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST  &&  m_szColumns[1].GetAt(nColumn) == pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackLoadContentsDialog::Check(BOOL bModified) CONST
{
	CTimeKey  tVersionTime[2];
	CTCSavedStack  *pStack;

	return(((((pStack = m_pRepository.GetAt(m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))) && pStack->GetSpacecraft() == GetDatabase()->GetSpacecraft() && pStack->GetDatabase() == GetDatabase()->GetName() && pStack->GetDatabaseVersion(tVersionTime[0], tVersionTime[1]) && GetDatabase()->GetCreationTime() == tVersionTime[0] && GetDatabase()->GetLastUpdateTime() == tVersionTime[1] && pStack->IsValidated()) || IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)) && GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTCManualStackLoadContentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackLoadContentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackLoadContentsDialog::PostNcDestroy()
{
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackLoadContentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackLoadContentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_INSPECT, OnInspectRepository)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_DELETE, OnDeleteRepository)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_ADD, OnAddFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_MODIFY, OnModifyFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVE, OnRemoveFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL, OnRemoveAllFilters)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE, OnValidateMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, OnLoadMemberAnyway)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCONTENTS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, OnSelchangeFilter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoadContentsDialog message handlers

BOOL CTCManualStackLoadContentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION));
	m_szColumns[0].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIME));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIMEOFFSET));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIME));
	m_szColumns[1].Add(STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIMEOFFSET));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)) ? (rColumns[0].Width() / 4) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR)) ? (rColumns[0].Width() / 4) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION)) ? (rColumns[0].Width() / 5) : (rColumns[0].Width() / 6))))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER)) ? (rColumns[1].Width() / 12) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME)) ? (rColumns[1].Width() / 6) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION)) ? (rColumns[1].Width() / 2) : (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS)) ? (rColumns[1].Width() / 10) : rColumns[1].Width() / 4))));
		continue;
	}
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->EnableWindow();
	EnumFilters();
	return TRUE;
}

BOOL CTCManualStackLoadContentsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) EnumStackMembers();
		GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackLoadContentsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnInspectRepository()
{
	CHourglassCursor  cCursor;

	for (; !EnumRepositoryMembers(); )
	{
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnDeleteRepository()
{
	BOOL  bRepository;
	CString  szFileName;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); (bRepository = CFileEx::Remove(szFileName)); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_INSPECT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_DELETE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	if (bRepository)
	{
		LogActivity(szFileName, TRUE);
		EnumRepositoryMembers();
		EnumStackMembers();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnAddFilter()
{
	CTCManualStackSearchFilter  *pFilter[2];
	CTCManualStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCManualStackSearchFilter))
	{
		for (pFilter[0]->SetType(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
		{
			if ((pFilter[1] = m_pFilters.GetAt(m_pFilters.Find(pFilter[0]->GetName()))))
			{
				pFilter[1]->Copy(pFilter[0]);
				delete pFilter[0];
				return;
			}
			if (m_pFilters.Add(pFilter[0]) >= 0)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFilter[0]->GetName());
				GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow();
				GetParent()->SetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
				return;
			}
			break;
		}
		delete pFilter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnModifyFilter()
{
	CString  szFilter;
	CTCManualStackSearchFilter  *pFilter[2];
	CTCManualStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCManualStackSearchFilter))
	{
		for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter); (pFilter[1] = m_pFilters.GetAt(m_pFilters.Find(szFilter))); )
		{
			for (pFilter[0]->Copy(pFilter[1]); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
			{
				pFilter[1]->Copy(pFilter[0]);
				EnumRepositoryMembers();
				EnumStackMembers();
				break;
			}
			GetParent()->SetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
			break;
		}
		delete pFilter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnRemoveFilter()
{
	INT  nIndex;
	CString  szFilter;
	CTCManualStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter); (pFilter = m_pFilters.GetAt((nIndex = m_pFilters.Find(szFilter)))); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilter));
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->SetFocus();
		m_pFilters.RemoveAt(nIndex);
		delete pFilter;
		break;
	}
	for (GetParent()->SetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters); szFilter != STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE)));
		EnumRepositoryMembers();
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnRemoveAllFilters()
{
	INT  nIndex;
	INT  nFilter;
	INT  nFilters;
	CString  szFilter[2];
	CTCManualStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (nFilter = 0, nFilters = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT), GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter[0]); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = ((szFilter[1] = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER), nFilter)) != STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? m_pFilters.GetAt((nIndex = m_pFilters.Find(szFilter[1]))) : (CTCManualStackSearchFilter *)NULL))
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_DELETESTRING, nFilter);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->SetFocus();
			m_pFilters.RemoveAt(nIndex);
			delete pFilter;
			nFilters--;
			nFilter--;
		}
	}
	for (GetParent()->SetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters); szFilter[0] != STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE)));
		EnumRepositoryMembers();
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnValidateMember()
{
	INT  nItem;
	INT  nItems;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CTCItem  *pItem;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCProcedure  *pProcedure;
	CDatabaseTCPacketParameter  *pPacketParameter[2];
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CHourglassCursor  cCursor;

	if ((pStack = m_pRepository.GetAt(m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))))
	{
		for (nItem = 0, nItems = (INT)pStack->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCItem *)pStack->GetAt(nItem)) != (CTCItem *)NULL)
			{
				if ((pFunction = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pItem->GetName())) : (CDatabaseTCFunction *)NULL) && pFunction->GetTCID() == pItem->GetTCID())
				{
					if ((pPacket[1] = ((pPacket[0] = new CDatabaseTCPacket) && pItem->GetTCPacket(pPacket[0])) ? GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pPacket[0]->GetTag())) : (CDatabaseTCPacket *)NULL) && pPacket[0]->GetAPID() == pPacket[1]->GetAPID())
					{
						for (nParameter = 0, nParameters = (INT)pPacket[0]->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pPacketParameter[0] = pPacket[0]->GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
							{
								if ((pPacketParameter[1] = pPacket[1]->GetAt(pPacket[1]->Find(pPacketParameter[0]->GetTag(), pPacketParameter[0]->GetBytePos(), pPacketParameter[0]->GetBitPos()))))
								{
									if (pPacketParameter[0]->GetAttributes() != pPacketParameter[1]->GetAttributes() || pPacketParameter[0]->GetWidth() != pPacketParameter[1]->GetWidth()) break;
									continue;
								}
								break;
							}
						}
						for (nElement = 0, nElements = (INT)pFunction->GetSize(); nElement < nElements; nElement++)
						{
							if ((pFunctionElement[0] = pFunction->GetAt(nParameter)) != (CDatabaseTCFunctionElement *)NULL)
							{
								if ((pFunctionElement[1] = pItem->GetAt(pItem->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))))
								{
									if (pFunctionElement[0]->GetAttributes() != pFunctionElement[1]->GetAttributes() || pFunctionElement[0]->GetWidth() != pFunctionElement[1]->GetWidth()) break;
									continue;
								}
								break;
							}
						}
						if (nParameter == nParameters  &&  nElement == nElements)
						{
							delete pPacket[0];
							continue;
						}
					}
					delete pPacket[0];
				}
				if ((pProcedure = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE) ? GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pItem->GetName())) : (CDatabaseTCProcedure *)NULL)) continue;
			}
			break;
		}
		for (pStack->Validate((nItem == nItems) ? TRUE : FALSE); nItem == nItems; )
		{
			pStack->SetDatabaseVersion(GetDatabase()->GetCreationTime(), GetDatabase()->GetLastUpdateTime());
			GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName);
			SaveRepository(szFileName, m_pRepository);
			break;
		}
		CheckDlgButton(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow((nItem != nItems) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS)), (nItem == nItems) ? STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_VALIDATED) : STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_NOTVALIDATED));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnLoadMemberAnyway()
{
	CHourglassCursor  cCursor;

	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnRemoveMember()
{
	INT  nIndex[2];
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if ((pStack = (LoadRepository(cFile, pRepository)) ? pRepository.GetAt((nIndex[1] = pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), (nIndex[0] = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST))), FindColumnIndex(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))) : (CTCSavedStack *)NULL))
			{
				for (pRepository.RemoveAt(nIndex[1]); SaveRepository(cFile, pRepository); )
				{
					Listview_DeleteText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), nIndex[0]);
					LogActivity(pStack, TRUE);
					break;
				}
				delete pStack;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), 0); !SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS);
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
		CheckDlgButton(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnRemoveAllMembers()
{
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pRepository))
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_DELETEALLITEMS);
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				LogActivity(szFileName);
				cFile.Close();
				break;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST), 0); !SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS);
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
		CheckDlgButton(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnEditchangeFileName()
{
	BOOL  bRepository;
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_INSPECT)->EnableWindow(((bRepository = LoadRepository(szFileName, pRepository)) && pRepository.GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILENAME_DELETE)->EnableWindow(bRepository);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnSelchangeFilter()
{
	CString  szFilter;

	for (; !EnumRepositoryMembers(); )
	{
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow((szFilter != STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow((szFilter != STRING(IDS_TCMANUALSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadContentsDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2]))
			{
				for (pItem->SetSourceType(TCITEM_SOURCETYPE_MANUALSTACK), pItem->SetReleaseTime(0); pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED; )
				{
					pItem->SetFlags(pItem->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					break;
				}
				continue;
			}
			pItem->SetSourceType(TCITEM_SOURCETYPE_MANUALSTACK);
			pItem->SetReleaseTime(0);
		}
	}
	GetParent()->LoadTelecommands(m_pItems);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackLoadContentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOADCONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackLoadContentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOADCONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoadCommandDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackLoadCommandDialog, CDisplayDialog)

CTCManualStackLoadCommandDialog::CTCManualStackLoadCommandDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackLoadCommandDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackLoadCommandDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCManualStackLoadCommandDialog::IDD);
}

BOOL CTCManualStackLoadCommandDialog::Initialize()
{
	GetParent()->GetSearchGroups(TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS, m_pGroups[TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS - 1]);
	GetParent()->GetSearchGroups(TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES, m_pGroups[TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES - 1]);
	GetParent()->GetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS, m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS - 1]);
	GetParent()->GetSearchFilters(TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES, m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES - 1]);
	return TRUE;
}

CTCManualStackWnd *CTCManualStackLoadCommandDialog::GetParent() CONST
{
	return((CTCManualStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCManualStackLoadCommandDialog::EnumSources()
{
	INT  nGroup;
	INT  nGroups;
	UINT  nGroupType;
	CString  szSource;
	CTCManualStackSearchGroup  *pGroup;

	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_RESETCONTENT);
	for (nGroup = 0, nGroups = (INT)m_pGroups[(nGroupType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES : TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS) - 1].GetSize(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = (CTCManualStackSearchGroup *)m_pGroups[nGroupType - 1].GetAt(nGroup)) != (CTCManualStackSearchGroup *)NULL)
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pGroup->GetName());
			continue;
		}
	}
	szSource.Format(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_SOURCE_FORMAT), (LPCTSTR)GetAccountDatabase());
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_INSERTSTRING, 0, (LPARAM)(LPCTSTR)szSource);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_GROUPS)->EnableWindow(((IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES) && GetDatabase()->GetTCSequences()->GetSize() > 0) || (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS) && GetDatabase()->GetTCFunctions()->GetSize() > 0)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow(FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

BOOL CTCManualStackLoadCommandDialog::EnumFilters()
{
	INT  nFilter;
	INT  nFilters;
	UINT  nFilterType;
	CTCManualStackSearchFilter  *pFilter;

	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_RESETCONTENT);
	for (nFilter = 0, nFilters = (INT)m_pFilters[(nFilterType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES : TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS) - 1].GetSize(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = (CTCManualStackSearchFilter *)m_pFilters[nFilterType - 1].GetAt(nFilter)) != (CTCManualStackSearchFilter *)NULL)
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFilter->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE));
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_ADD)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCManualStackLoadCommandDialog::ShowSourceContents()
{
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nMember;
	INT  nMembers;
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	UINT  nGroupType;
	CString  szItem;
	CString  szItems;
	CString  szSource;
	CStringArray  szMembers;
	CStringTools  cStringTools;
	CDatabaseTCFunction  *pFunction[2];
	CDatabaseTCSequence  *pSequence[2];
	CTCManualStackSearchGroup  *pGroup;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE)->GetWindowText(szSource);
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST, LVM_DELETEALLITEMS);
	for (nGroupType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES : TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS, m_pFunctions.RemoveAll(), m_pSequences.RemoveAll(), nCount = 0; TRUE; )
	{
		if ((pGroup = m_pGroups[nGroupType - 1].GetAt(m_pGroups[nGroupType - 1].Find(szSource))))
		{
			for (nMember = 0, nMembers = pGroup->GetMembers(szMembers); nMember < nMembers; nMember++)
			{
				if ((pFunction[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(szMembers.GetAt(nMember))) : (CDatabaseTCFunction *)NULL))
				{
					for (nColumn = 0, nColumns = (CheckFilter(pFunction[0])) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME); )
						{
							szItem = pFunction[0]->GetName();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_DESCRIPTION); )
						{
							szItem = pFunction[0]->GetDescription();
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, nColumn, szItem);
					}
					if (nColumns > 0)
					{
						if ((pFunction[1] = new CDatabaseTCFunction))
						{
							if (pFunction[1]->Copy(pFunction[0]) && m_pFunctions.Add(pFunction[1]) >= 0)
							{
								nCount++;
								continue;
							}
							delete pFunction[1];
						}
						nCount++;
					}
					continue;
				}
				if ((pSequence[0] = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(szMembers.GetAt(nMember))) : (CDatabaseTCSequence *)NULL))
				{
					for (nColumn = 0, nColumns = (CheckFilter(pSequence[0])) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME); )
						{
							szItem = pSequence[0]->GetName();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_DESCRIPTION); )
						{
							szItem = pSequence[0]->GetDescription();
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, nColumn, szItem);
					}
					if (nColumns > 0)
					{
						if ((pSequence[1] = new CDatabaseTCSequence))
						{
							if (pSequence[1]->Copy(pSequence[0]) && m_pSequences.Add(pSequence[1]) >= 0)
							{
								nCount++;
								continue;
							}
							delete pSequence[1];
						}
						nCount++;
					}
					continue;
				}
			}
			break;
		}
		for (nFunction = 0, nFunctions = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)) ? (INT)GetDatabase()->GetTCFunctions()->GetSize() : 0; nFunction < nFunctions; nFunction++)
		{
			if ((pFunction[0] = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && (pFunction[0]->GetAttributes() & (TCFUNCTION_EXETYPE_NOTSTANDALONE | TCFUNCTION_EXETYPE_NOTALLOWED)) == 0)
			{
				for (nColumn = 0, nColumns = (CheckFilter(pFunction[0])) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME); )
					{
						szItem = pFunction[0]->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_DESCRIPTION); )
					{
						szItem = pFunction[0]->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, szItem);
						GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->UpdateWindow();
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, nColumn, szItem);
				}
				if (nColumns > 0)
				{
					if ((pFunction[1] = new CDatabaseTCFunction))
					{
						if (pFunction[1]->Copy(pFunction[0]) && m_pFunctions.Add(pFunction[1]) >= 0)
						{
							nCount++;
							continue;
						}
						delete pFunction[1];
					}
					nCount++;
				}
				continue;
			}
		}
		for (nSequence = 0, nSequences = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? (INT)GetDatabase()->GetTCSequences()->GetSize() : 0; nSequence < nSequences; nSequence++)
		{
			if ((pSequence[0] = GetDatabase()->GetTCSequences()->GetAt(nSequence)) && (pSequence[0]->GetAttributes() & TCSEQUENCE_EXETYPE_NOTSTANDALONE) == 0)
			{
				for (nColumn = 0, nColumns = (CheckFilter(pSequence[0])) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME); )
					{
						szItem = pSequence[0]->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_DESCRIPTION); )
					{
						szItem = pSequence[0]->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, szItem);
						GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->UpdateWindow();
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nCount, nColumn, szItem);
				}
				if (nColumns > 0)
				{
					if ((pSequence[1] = new CDatabaseTCSequence))
					{
						if (pSequence[1]->Copy(pSequence[0]) && m_pSequences.Add(pSequence[1]) >= 0)
						{
							nCount++;
							continue;
						}
						delete pSequence[1];
					}
					nCount++;
				}
				continue;
			}
		}
		break;
	}
	for (szItems.Format(((nCount = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST, LVM_GETITEMCOUNT)) != 1) ? STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_SOURCE_ITEMSFORMAT) : STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_SOURCE_ITEMFORMAT), (LPCTSTR)cStringTools.ConvertIntToStructuredString(nCount)); IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS); )
	{
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->SetWindowText(szItems);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->EnableWindow(FALSE);
		break;
	}
	if (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES))
	{
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->SetWindowText(szItems);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->EnableWindow();
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCEITEMS)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONITEMS)->EnableWindow(FALSE);
	}
	SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_NAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->SetFocus();
}

BOOL CTCManualStackLoadCommandDialog::InitializeDefaults(CONST CDatabaseTCFunction *pFunction, CTCManualStackItem *pItem) CONST
{
	INT  nFunction;
	INT  nFunctions;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunctions  pFunctions;

	if (pFunction->GetName() == m_cItem.GetName())
	{
		pItem->Copy(&m_cItem);
		return TRUE;
	}
	for (pItem->SetName(pFunction->GetName()), pItem->SetType(TCMANUALSTACKITEM_TYPE_FUNCTION), pItem->SetFlags((((pFunction->GetAttributes() & (TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE : 0) | ((pFunction->GetAttributes() & TCFUNCTION_EXETYPE_TIMETAG) ? TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED : 0) | ((pFunction->GetAttributes() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? ((pFunction->GetAttributes() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? (pItem->GetFlags() | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) : (pItem->GetFlags() | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) : 0)); (pPacket = GetDatabase()->GetTCPackets()->GetAt(pFunction->GetTCPacketRef())); )
	{
		if (GetTCService()->GenerateTCPackets(pFunction, pPacket, EMPTYSTRING, (pFunction->GetAttributes() & TCFUNCTION_EXETYPE_TIMETAG) ? TRUE : FALSE, FALSE, FALSE, TRUE, pFunctions, pPackets))
		{
			for (nFunction = 0, nFunctions = (INT)pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
			{
				if (pFunctions.GetAt(nFunction)->GetName() == pFunction->GetName())
				{
					if (pItem->CDatabaseTCFunction::Copy(pFunctions.GetAt(nFunction)))
					{
						pItem->SetTCPacket(pPackets.GetAt(nFunction));
						return TRUE;
					}
					break;
				}
			}
		}
		break;
	}
	return FALSE;
}
BOOL CTCManualStackLoadCommandDialog::InitializeDefaults(CONST CDatabaseTCSequence *pSequence, CONST CDatabaseTCSequenceEntry *pSequenceEntry, ULONGLONG nAttributes, DWORD dwReleaseOffset, DWORD dwExecutionOffset, BOOL bEarlierExecution, CTCManualStackComposedItem *pComposedItem, CTCManualStackItem *pItem) CONST
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nCount;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter[2];
	INT  nParameters[2];
	INT  nSubEntry;
	INT  nSubEntries;
	BOOL  bInterlock;
	BOOL  bEarlier[2];
	BOOL  bAfterDispatch;
	UINT  nExecutionOBRT;
	DWORD  dwTimeOffset[2];
	DWORD  dwReleaseDelta[2];
	DWORD  dwExecutionDelta[2];
	CString  szMemoryPatch[2];
	CString  szInterlock;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringArray  szParameterSets;
	CTCInterlock  *pInterlock;
	CTCInterlocks  pInterlocks;
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCPackets  pPackets;
	CTCManualStackItem  *pSubItem;
	CTCManualStackItem  *pBlockItem;
	CDatabaseTCFunction  *pFunction[2];
	CDatabaseTCSequence  *pSubSequence[2];
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCProcedure  *pProcedure;
	CDatabaseTCParameter  *pParameter[2];
	CDatabaseTCParameters  pParameters[2];
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCSequenceEntry  *pSubSequenceEntry;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CDatabaseTCSequenceEntryParameter  *pSequenceEntryParameter;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	if (nAttributes & TCSEQUENCEENTRY_TYPE_FUNCTION)
	{
		for (pItem->SetType(TCMANUALSTACKITEM_TYPE_FUNCTION), pItem->SetName(((nAttributes & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) != TCSEQUENCEENTRY_EXETYPE_SECONDSTEP || pSequenceEntry->GetAssociated1Step().IsEmpty()) ? pSequenceEntry->GetName() : pSequenceEntry->GetAssociated1Step()), pItem->SetFlags(((nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS)) ? ((nAttributes & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) ? TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS : TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN) : 0) | ((nAttributes & (TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)) ? ((nAttributes & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) ? TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS : TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERBEGIN) : 0) | (((nAttributes & (TCSEQUENCEENTRY_EXETYPE_TIMETAG | TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP)) == 0) ? TCMANUALSTACKITEM_EXECUTIONFLAG_IMMEDIATE : 0) | ((nAttributes & TCSEQUENCEENTRY_EXETYPE_TIMETAG) ? TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED : 0) | ((nAttributes & (TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP)) ? ((nAttributes & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) ? (pItem->GetFlags() | TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) : (pItem->GetFlags() | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) : 0) | ((nAttributes & (TCSEQUENCEENTRY_FLAG_FIRSTGROUPMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER)) ? TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED : 0) | ((nAttributes & (TCSEQUENCEENTRY_FLAG_BLOCKMACRO | TCSEQUENCEENTRY_FLAG_FIRSTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER)) ? TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED : 0) | ((nAttributes & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) ? TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP : 0) | ((nAttributes & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) ? TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP : 0) | ((nAttributes & TCSEQUENCEENTRY_PTVCHECKS_DISABLED) ? TCITEM_CHECKFLAG_DISABLEPTV : 0) | ((nAttributes & TCSEQUENCEENTRY_PEVCHECKS_DISABLED) ? TCITEM_CHECKFLAG_DISABLEPEV : 0) | ((nAttributes & TCSEQUENCEENTRY_CEVCHECKS_DISABLED) ? TCITEM_CHECKFLAG_DISABLECEV : 0)), pItem->SetDescription((!pSequenceEntry->GetDescription().IsEmpty()) ? pSequenceEntry->GetDescription() : pItem->GetDescription()), pSequence->GetParameters(pParameters[0]), pItem->SetMembershipParameters(pParameters[0]), pItem->SetReleaseTimeWindow((pItem->GetReleaseTime() == 0) ? dwReleaseOffset : 0, 0, ((nAttributes & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? TRUE : FALSE), pItem->SetReleaseBlock(((pBlockItem = ((nAttributes & (TCSEQUENCEENTRY_FLAG_BLOCKMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER)) && pSequenceEntry->GetBlockMembership() >= 0 && pSequenceEntry->GetBlockMembership() < pComposedItem->GetSize()) ? pComposedItem->GetAt((INT)(pComposedItem->GetSize() - pSequenceEntry->GetBlockMembership())) : (CTCManualStackItem *)NULL)) ? pBlockItem->GetName() : EMPTYSTRING), pItem->SetReleaseBlockID(((nAttributes & (TCSEQUENCEENTRY_FLAG_BLOCKMACRO | TCSEQUENCEENTRY_FLAG_FIRSTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER)) && pSequenceEntry->GetBlockMembership() >= 0) ? pSequenceEntry->GetBlockMembership() : -1), pItem->SetExecutionTime(pSequenceEntry->GetExecutionTime()); (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pSequenceEntry->GetExecutionTime() == 0; )
		{
			pItem->SetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution);
			break;
		}
		if ((pFunction[0] = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pItem->GetName()))))
		{
			for (nParameter[0] = 0, nParameters[0] = (pItem->CDatabaseTCFunction::Copy(pFunction[0])) ? (INT)pSequenceEntry->GetSize() : -1, pItem->SetAttributes(((nAttributes & (TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP)) ? ((pItem->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) | ((nAttributes & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) ? TCFUNCTION_EXETYPE_FIRSTSTEP : 0) | ((nAttributes & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) ? TCFUNCTION_EXETYPE_SECONDSTEP : 0)) : pItem->GetAttributes()) | ((nAttributes & TCSEQUENCEENTRY_RELTYPE_MANUAL) ? TCFUNCTION_DISPFLAG_AUTHORIZATION : 0)), bInterlock = TRUE; nParameter[0] < nParameters[0]; nParameter[0]++)
			{
				if ((pFunctionElement[0] = ((pSequenceEntryParameter = pSequenceEntry->GetAt(nParameter[0]))) ? pItem->GetAt(pItem->Find(pSequenceEntryParameter->GetTag(), (pSequenceEntryParameter->GetBitOffset() > 0) ? (pSequenceEntryParameter->GetBitOffset() / 8) : pSequenceEntryParameter->GetBytePos(), (pSequenceEntryParameter->GetBitOffset() > 0) ? (pSequenceEntryParameter->GetBitOffset() % 8) : pSequenceEntryParameter->GetBitPos())) : (CDatabaseTCFunctionElement *)NULL))
				{
					if (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE))
					{
						pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE | TCFUNCTIONELEMENT_VTYPE_TMPARAMETER | TCFUNCTIONELEMENT_VTYPE_TCPARAMETER));
						pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE)));
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
					{
						for (nSet = 0, nSets = pFunction[0]->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
						{
							if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
							{
								if ((pFunctionElement[1] = (pParameterSet->GetValueSet() == pSequenceEntryParameter->GetValueSet()) ? pParameterSet->GetAt(pParameterSet->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos())) : (CDatabaseTCFunctionElement *)NULL))
								{
									for (pFunctionElement[0]->SetAttributes(pFunctionElement[1]->GetAttributes() | (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_PARAMETERSET | TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))), pFunctionElement[0]->SetConstValue(pFunctionElement[1]->GetConstValue()), pFunctionElement[0]->SetConstValueAsText(pFunctionElement[1]->GetConstValueAsText()); (pParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName()))); )
									{
										for (pFunctionElement[0]->SetAttributes((pFunctionElement[1]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
										{
											pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
											break;
										}
										break;
									}
									break;
								}
							}
						}
						if (nSet < nSets) continue;
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FUNCTION)
					{
						if ((pParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pSequenceEntryParameter->GetTag()))))
						{
							for (pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
							{
								pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
								break;
							}
						}
						if (!pFunctionElement[0]->GetConstValueAsText().IsEmpty()) continue;
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
					{
						for (nParameter[1] = 0, nParameters[1] = (INT)pParameters[0].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
						{
							if ((pParameter[0] = pParameters[0].GetAt(nParameter[1])) && pSequenceEntryParameter->GetConstValueAsText() == pParameter[0]->GetTag())
							{
								for (pFunctionElement[0]->SetAttributes((pParameter[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
								{
									pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
									break;
								}
								if (pParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
								pFunctionElement[0]->SetConstValue(pParameter[0]->GetConstValue());
								pFunctionElement[0]->SetConstValueAsText(pParameter[0]->GetConstValueAsText());
								pFunctionElement[0]->SetConstValueSource(pSequenceEntryParameter->GetConstValueAsText());
								break;
							}
						}
						if (nParameter[1] < nParameters[1]) continue;
						break;
					}
					for (pFunctionElement[0]->SetConstValue(pSequenceEntryParameter->GetConstValue()), pFunctionElement[0]->SetConstValueAsText(pSequenceEntryParameter->GetConstValueAsText()); (pParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pSequenceEntryParameter->GetTag()))); )
					{
						for (pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? ((pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE))); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
						{
							pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
							break;
						}
						if (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
						break;
					}
					if (pSequenceEntryParameter->GetMemoryArea(szMemoryPatch[0], szMemoryPatch[1]))
					{
						if ((pMemoryImage = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(szMemoryPatch[0]))) && pMemoryImage->Find(szMemoryPatch[1]) >= 0)
						{
							pItem->SetMemoryPatch(szMemoryPatch[0] + TAB + szMemoryPatch[1]);
							continue;
						}
						break;
					}
					continue;
				}
				break;
			}
			if (pItem->GetAttributes() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP))
			{
				pItem->SetExecutionTimeOffset();
				pItem->SetExecutionTime(0);
				pItem->SetExecutionOBRT();
			}
			if ((pSequenceEntry->GetAttributes() & (TCSEQUENCEENTRY_ILSCOPE_GLOBAL | TCSEQUENCEENTRY_ILSCOPE_LOCAL | TCSEQUENCEENTRY_ILSCOPE_LOCALNOWAIT | TCSEQUENCEENTRY_ILSCOPE_GLOBALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEMNOWAIT)) || (pItem->GetAttributes() & (TCFUNCTION_ILSCOPE_GLOBAL | TCFUNCTION_ILSCOPE_LOCAL | TCFUNCTION_ILSCOPE_GLOBALSUBSYSTEM | TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM)))
			{
				if ((pInterlock = (GetTCService()->GetTCInterlocks(pInterlocks)) ? pInterlocks.GetAt(pInterlocks.Find(pItem->GetComputerName(), pItem->GetSourceType(), (szInterlock = pItem->GetInterlock()))) : (CTCInterlock *)NULL))
				{
					if ((pSequenceEntry->GetAttributes() & (TCSEQUENCEENTRY_ILSCOPE_GLOBAL | TCSEQUENCEENTRY_ILSCOPE_LOCAL | TCSEQUENCEENTRY_ILSCOPE_LOCALNOWAIT | TCSEQUENCEENTRY_ILSCOPE_GLOBALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEMNOWAIT)) && (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_RECEPTION) && pInterlock->GetStage() != TCINTERLOCK_STAGE_RECEPTION) || ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_UPLINK) && pInterlock->GetStage() != TCINTERLOCK_STAGE_TRANSMISSION) || ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_ONBOARD) && pInterlock->GetStage() != TCINTERLOCK_STAGE_ACCEPTANCE) || ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_ACCEPTANCE) && pInterlock->GetStage() != TCINTERLOCK_STAGE_START) || ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_COMPLETION) && pInterlock->GetStage() != TCINTERLOCK_STAGE_COMPLETION))) bInterlock = FALSE;
					if ((pSequenceEntry->GetAttributes() & (TCSEQUENCEENTRY_ILSCOPE_GLOBAL | TCSEQUENCEENTRY_ILSCOPE_LOCAL | TCSEQUENCEENTRY_ILSCOPE_LOCALNOWAIT | TCSEQUENCEENTRY_ILSCOPE_GLOBALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEM | TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEMNOWAIT)) == 0 && (((pItem->GetAttributes() & TCFUNCTION_ILSTAGE_RECEPTION) && pInterlock->GetStage() != TCINTERLOCK_STAGE_RECEPTION) || ((pItem->GetAttributes() & TCFUNCTION_ILSTAGE_UPLINK) && pInterlock->GetStage() != TCINTERLOCK_STAGE_TRANSMISSION) || ((pItem->GetAttributes() & TCFUNCTION_ILSTAGE_ONBOARD) && pInterlock->GetStage() != TCINTERLOCK_STAGE_ACCEPTANCE) || ((pItem->GetAttributes() & TCFUNCTION_ILSTAGE_ACCEPTANCE) && pInterlock->GetStage() != TCINTERLOCK_STAGE_START) || ((pItem->GetAttributes() & TCFUNCTION_ILSTAGE_COMPLETION) && pInterlock->GetStage() != TCINTERLOCK_STAGE_COMPLETION))) bInterlock = FALSE;
				}
				if (!bInterlock || !pInterlock)
				{
					if ((pInterlock = new CTCInterlock))
					{
						for (pInterlock->SetSourceType(TCITEM_SOURCETYPE_MANUALSTACK), pInterlock->SetScope(((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_GLOBAL) || (pItem->GetAttributes() & TCFUNCTION_ILSCOPE_GLOBAL)) ? TCINTERLOCK_SCOPE_GLOBAL : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_LOCAL) || (pItem->GetAttributes() & TCFUNCTION_ILSCOPE_LOCAL)) ? TCINTERLOCK_SCOPE_LOCAL : ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_LOCALNOWAIT) ? TCINTERLOCK_SCOPE_LOCALNOWAIT : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_GLOBALSUBSYSTEM) || (pItem->GetAttributes() & TCFUNCTION_ILSCOPE_GLOBALSUBSYSTEM)) ? TCINTERLOCK_SCOPE_GLOBALSUBSYSTEM : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEM) || (pItem->GetAttributes() & TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM)) ? TCINTERLOCK_SCOPE_LOCALSUBSYSTEM : ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSCOPE_LOCALSUBSYSTEMNOWAIT) ? TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT : TCINTERLOCK_SCOPE_NONE)))))), pInterlock->SetStage(((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_RECEPTION) || (pItem->GetAttributes() & TCFUNCTION_ILSTAGE_RECEPTION)) ? TCINTERLOCK_STAGE_RECEPTION : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_UPLINK) || (pItem->GetAttributes() & TCFUNCTION_ILSTAGE_UPLINK)) ? TCINTERLOCK_STAGE_TRANSMISSION : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_ONBOARD) || (pItem->GetAttributes() & TCFUNCTION_ILSTAGE_ONBOARD)) ? TCINTERLOCK_STAGE_ACCEPTANCE : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_ACCEPTANCE) || (pItem->GetAttributes() & TCFUNCTION_ILSTAGE_ACCEPTANCE)) ? TCINTERLOCK_STAGE_START : (((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_ILSTAGE_COMPLETION) || (pItem->GetAttributes() & TCFUNCTION_ILSTAGE_COMPLETION)) ? TCINTERLOCK_STAGE_COMPLETION : TCINTERLOCK_STAGE_NONE))))), pInterlock->SetState(TCINTERLOCK_STATE_IDLE), pItem->SetInterlock(pInterlock->GetName()); (nIndex = pInterlocks.Find(pInterlock)) < 0; )
						{
							pItem->SetInterlock(((nIndex = pInterlocks.Add(pInterlock)) >= 0 && GetTCService()->SetTCInterlocks(pInterlocks)) ? pInterlock->GetName() : EMPTYSTRING);
							break;
						}
						if (nIndex < 0) delete pInterlock;
					}
				}
				bInterlock = (pInterlocks.Find(pItem->GetComputerName(), pItem->GetSourceType(), pItem->GetInterlock()) >= 0) ? TRUE : FALSE;
			}
			if ((pPacket[0] = GetDatabase()->GetTCPackets()->GetAt(pFunction[0]->GetTCPacketRef())))
			{
				if (GetTCService()->GenerateTCPackets(pItem, pPacket[0], pItem->GetMemoryPatch(), pItem->GetExecutionTime(tExecutionTime) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) || pItem->GetExecutionOBRT(nExecutionOBRT), FALSE, FALSE, TRUE, pFunctions, pPackets))
				{
					for (nFunction = 0, nFunctions = (INT)pFunctions.GetSize(); nFunction < nFunctions; nFunction++)
					{
						if ((pFunction[1] = pFunctions.GetAt(nFunction)) && pFunction[1]->GetName() == pFunction[0]->GetName())
						{
							if ((pPacket[1] = (pItem->CDatabaseTCFunction::Copy(pFunction[1])) ? pPackets.GetAt(nFunction) : (CDatabaseTCPacket *)NULL))
							{
								pItem->SetTCPacket(pPacket[1]);
								break;
							}
						}
					}
					return((pComposedItem->Add(pItem) >= 0) ? (nFunction < nFunctions  &&  nParameter[0] == nParameters[0] && bInterlock) : FALSE);
				}
			}
		}
		return FALSE;
	}
	if (nAttributes & TCSEQUENCEENTRY_TYPE_SEQUENCE)
	{
		if ((pSubSequence[0] = ((pSubSequence[1] = GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(pSequenceEntry->GetName())))) ? new CDatabaseTCSequence : (CDatabaseTCSequence *)NULL))
		{
			for (nParameter[0] = 0, nParameters[0] = (pSubSequence[0]->Copy(pSubSequence[1])) ? (INT)pSequenceEntry->GetSize() : -1, pSequence->GetParameters(pParameters[0]), pSubSequence[0]->GetParameters(pParameters[1]); nParameter[0] < nParameters[0]; nParameter[0]++)
			{
				if ((pParameter[0] = ((pSequenceEntryParameter = pSequenceEntry->GetAt(nParameter[0]))) ? pParameters[1].GetAt(pSequenceEntryParameter->GetBytePos()) : (CDatabaseTCParameter *)NULL) && pParameter[0]->GetTag() == pSequenceEntryParameter->GetName())
				{
					if (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED))
					{
						pParameter[0]->SetAttributes((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | ((pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_CALIBRATED) ? ((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)));
						pParameter[0]->SetConstValue(pSequenceEntryParameter->GetConstValue());
						pParameter[0]->SetConstValueAsText(pSequenceEntryParameter->GetConstValueAsText());
						continue;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
					{
						for (nSet = 0, nSets = pSubSequence[0]->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
						{
							if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
							{
								for (nParameter[1] = 0, nParameters[1] = (pParameterSet->GetValueSet() == pSequenceEntryParameter->GetValueSet()) ? (INT)pParameterSet->GetSize() : -1; nParameter[1] < nParameters[1]; nParameter[1]++)
								{
									if ((pParameter[0] = ((pFunctionElement[0] = pParameterSet->GetAt(nParameter[1]))) ? pParameters[1].GetAt(pFunctionElement[0]->GetBytePos()) : (CDatabaseTCParameter *)NULL) && pSequenceEntryParameter->GetTag() == pFunctionElement[0]->GetName())
									{
										pParameter[0]->SetAttributes((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | ((pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)));
										pParameter[0]->SetConstValueAsText(pFunctionElement[0]->GetConstValueAsText());
										break;
									}
								}
								if (nParameters[1] >= 0) break;
							}
						}
						if (nSet < nSets) continue;
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
					{
						if ((pParameter[1] = pParameters[0].GetAt(pSequenceEntryParameter->GetBytePos())) && pParameter[0]->GetTag() == pParameter[1]->GetTag() && pParameter[0]->Copy(pParameter[1])) continue;
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_SEQUENCE)
					{
						if ((pParameter[1] = pParameters[1].GetAt(pSequenceEntryParameter->GetBytePos())) && pParameter[0]->GetTag() == pParameter[1]->GetTag() && pParameter[0]->Copy(pParameter[1])) continue;
						break;
					}
				}
			}
			for (nIndex = 0, nCount = (nParameter[0] == nParameters[0]) ? (INT)pComposedItem->GetSize() : -1, dwTimeOffset[0] = 0; nIndex < nCount; nIndex++)
			{
				if ((pSubItem = pComposedItem->GetAt(nIndex)) && pSubItem->GetReleaseTimeWindow(dwTimeOffset[1], tReleaseInterval, bAfterDispatch))
				{
					dwTimeOffset[0] = (pSubItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) ? (dwTimeOffset[0] + dwTimeOffset[1]) : dwTimeOffset[1];
					continue;
				}
			}
			for (nSubEntry = 0, nSubEntries = (nParameter[0] == nParameters[0] && pSubSequence[0]->SetParameters(pParameters[1])) ? (INT)pSubSequence[0]->GetSize() : -1, dwReleaseDelta[0] = 0, tExecutionTime = 0, dwExecutionDelta[0] = 0, bEarlier[0] = FALSE; nSubEntry < nSubEntries; nSubEntry++)
			{
				if ((pSubSequenceEntry = pSubSequence[0]->GetAt(nSubEntry)))
				{
					if ((pSubItem = (nSubEntry > 0) ? new CTCManualStackItem : pItem))
					{
						if ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) == 0 || pSubSequenceEntry->GetExecutionTime() > 0)
						{
							if (InitializeDefaults(pSubSequence[0], pSubSequenceEntry, (!nSubEntry) ? ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS)) | (nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS))) : ((pSubSequenceEntry->GetAttributes() & ~TCSEQUENCEENTRY_RELTIME_AFTERBEGIN) | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS), (!nSubEntry) ? (pSequenceEntry->GetReleaseDeltaTime() + (dwReleaseDelta[1] = pSubSequenceEntry->GetReleaseDeltaTime())) : ((dwReleaseDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? (pSubSequenceEntry->GetReleaseDeltaTime() - dwReleaseDelta[0]) : pSubSequenceEntry->GetReleaseDeltaTime())), 0, FALSE, pComposedItem, pSubItem))
							{
								dwReleaseDelta[0] += dwReleaseDelta[1];
								continue;
							}
							if (nSubEntry > 0) delete pSubItem;
							break;
						}
						if ((pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) && pSequenceEntry->GetExecutionTime() > 0)
						{
							if (InitializeDefaults(pSubSequence[0], pSubSequenceEntry, (!nSubEntry) ? ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)) | (nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS))) : ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)) | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS), (!nSubEntry) ? (pSequenceEntry->GetReleaseDeltaTime() + (dwReleaseDelta[1] = pSubSequenceEntry->GetReleaseDeltaTime())) : ((dwReleaseDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? (pSubSequenceEntry->GetReleaseDeltaTime() - dwReleaseDelta[0]) : pSubSequenceEntry->GetReleaseDeltaTime())), 0, FALSE, pComposedItem, pSubItem))
							{
								pSubItem->SetExecutionTime((tExecutionTime = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0 || tExecutionTime == 0) ? ((!pSubSequenceEntry->IsEarlierExecutionDeltaTime()) ? (pSequenceEntry->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pSubSequenceEntry->GetExecutionDeltaTime()) : (pSequenceEntry->GetExecutionTime().GetTime() - 1000 * (TIMETAG)pSubSequenceEntry->GetExecutionDeltaTime())) : ((!pSubSequenceEntry->IsEarlierExecutionDeltaTime()) ? (tExecutionTime.GetTime() + 1000 * (TIMETAG)pSubSequenceEntry->GetExecutionDeltaTime()) : (tExecutionTime.GetTime() - 1000 * (TIMETAG)pSubSequenceEntry->GetExecutionDeltaTime()))));
								dwReleaseDelta[0] += dwReleaseDelta[1];
								continue;
							}
							if (nSubEntry > 0) delete pSubItem;
							break;
						}
						if (pSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
						{
							if (InitializeDefaults(pSubSequence[0], pSubSequenceEntry, (!nSubEntry) ? ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)) | (nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS))) : ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN)) | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS), (!nSubEntry) ? (pSequenceEntry->GetReleaseDeltaTime() + (dwReleaseDelta[1] = pSubSequenceEntry->GetReleaseDeltaTime())) : ((dwReleaseDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? (pSubSequenceEntry->GetReleaseDeltaTime() - dwReleaseDelta[0]) : pSubSequenceEntry->GetReleaseDeltaTime())), (!nSubEntry) ? (((!pSequenceEntry->IsEarlierExecutionDeltaTime() && !pSubSequenceEntry->IsEarlierExecutionDeltaTime()) || (pSequenceEntry->IsEarlierExecutionDeltaTime() && pSubSequenceEntry->IsEarlierExecutionDeltaTime())) ? (pSequenceEntry->GetExecutionDeltaTime() + (dwExecutionDelta[1] = pSubSequenceEntry->GetExecutionDeltaTime())) : ((pSequenceEntry->GetExecutionDeltaTime() >= pSubSequenceEntry->GetExecutionDeltaTime()) ? (pSequenceEntry->GetExecutionDeltaTime() - (dwExecutionDelta[1] = pSubSequenceEntry->GetExecutionDeltaTime())) : ((dwExecutionDelta[1] = pSubSequenceEntry->GetExecutionDeltaTime()) - pSequenceEntry->GetExecutionDeltaTime()))) : ((dwExecutionDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0) ? ((pSubSequenceEntry->GetExecutionDeltaTime() >= dwExecutionDelta[0]) ? (pSubSequenceEntry->GetExecutionDeltaTime() - dwExecutionDelta[0]) : (dwExecutionDelta[0] - pSubSequenceEntry->GetExecutionDeltaTime())) : pSubSequenceEntry->GetExecutionDeltaTime())), (!nSubEntry) ? (((!pSequenceEntry->IsEarlierExecutionDeltaTime() && !pSubSequenceEntry->IsEarlierExecutionDeltaTime()) || (pSequenceEntry->IsEarlierExecutionDeltaTime() && pSubSequenceEntry->IsEarlierExecutionDeltaTime())) ? (bEarlier[1] = pSequenceEntry->IsEarlierExecutionDeltaTime()) : ((pSequenceEntry->GetExecutionDeltaTime() >= pSubSequenceEntry->GetExecutionDeltaTime()) ? !(bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()) : (bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()))) : ((bEarlier[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0) ? ((pSubSequenceEntry->GetExecutionDeltaTime() >= dwExecutionDelta[0]) ? (bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()) : (bEarlier[1] = bEarlier[0])) : (bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()))), pComposedItem, pSubItem))
							{
								for (dwReleaseDelta[0] += dwReleaseDelta[1]; (!bEarlier[0] && !bEarlier[1]) || (bEarlier[0] && bEarlier[1]); )
								{
									dwExecutionDelta[0] += dwExecutionDelta[1];
									break;
								}
								for (; bEarlier[0] != bEarlier[1]; )
								{
									if (dwExecutionDelta[0] >= dwExecutionDelta[1])
									{
										dwExecutionDelta[0] -= dwExecutionDelta[1];
										break;
									}
									dwExecutionDelta[0] = dwExecutionDelta[1] - dwExecutionDelta[0];
									bEarlier[0] = bEarlier[1];
									break;
								}
								continue;
							}
							if (nSubEntry > 0) delete pSubItem;
							break;
						}
						if (InitializeDefaults(pSubSequence[0], pSubSequenceEntry, (!nSubEntry) ? ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)) | (nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS)) | ((!nSubEntry) ? TCSEQUENCEENTRY_EXETIME_AFTERBEGIN : 0) | ((nSubEntry > 0) ? TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS : 0)) : ((pSubSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN)) | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS), (!nSubEntry) ? (pSequenceEntry->GetReleaseDeltaTime() + (dwReleaseDelta[1] = pSubSequenceEntry->GetReleaseDeltaTime())) : ((dwReleaseDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? (pSubSequenceEntry->GetReleaseDeltaTime() - dwReleaseDelta[0]) : pSubSequenceEntry->GetReleaseDeltaTime())), (!nSubEntry) ? ((!pSubSequenceEntry->IsEarlierExecutionDeltaTime()) ? (dwTimeOffset[0] + pSequenceEntry->GetReleaseDeltaTime() + (dwExecutionDelta[1] = pSubSequenceEntry->GetExecutionDeltaTime())) : (dwTimeOffset[0] + pSequenceEntry->GetReleaseDeltaTime() - (dwExecutionDelta[1] = pSubSequenceEntry->GetExecutionDeltaTime()))) : ((dwExecutionDelta[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0) ? ((pSubSequenceEntry->GetExecutionDeltaTime() >= dwExecutionDelta[0]) ? (pSubSequenceEntry->GetExecutionDeltaTime() - dwExecutionDelta[0]) : (dwExecutionDelta[0] - pSubSequenceEntry->GetExecutionDeltaTime())) : pSubSequenceEntry->GetExecutionDeltaTime())), (!nSubEntry) ? (bEarlier[1] = (pSequenceEntry->GetReleaseDeltaTime() < pSubSequenceEntry->GetExecutionDeltaTime() && pSubSequenceEntry->IsEarlierExecutionDeltaTime())) : ((bEarlier[1] = ((pSubSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0) ? ((pSubSequenceEntry->GetExecutionDeltaTime() >= dwExecutionDelta[0]) ? (bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()) : (bEarlier[1] = bEarlier[0])) : (bEarlier[1] = pSubSequenceEntry->IsEarlierExecutionDeltaTime()))), pComposedItem, pSubItem))
						{
							for (dwReleaseDelta[0] += dwReleaseDelta[1]; (!bEarlier[0] && !bEarlier[1]) || (bEarlier[0] && bEarlier[1]); )
							{
								dwExecutionDelta[0] += dwExecutionDelta[1];
								break;
							}
							for (; bEarlier[0] != bEarlier[1]; )
							{
								if (dwExecutionDelta[0] >= dwExecutionDelta[1])
								{
									dwExecutionDelta[0] -= dwExecutionDelta[1];
									break;
								}
								dwExecutionDelta[0] = dwExecutionDelta[1] - dwExecutionDelta[0];
								bEarlier[0] = bEarlier[1];
								break;
							}
							continue;
						}
						if (nSubEntry > 0) delete pSubItem;
					}
				}
				break;
			}
			delete pSubSequence[0];
			return((nSubEntry == nSubEntries) ? TRUE : FALSE);
		}
		return FALSE;
	}
	if (nAttributes & TCSEQUENCEENTRY_TYPE_PROCEDURE)
	{
		for (pItem->SetType(TCMANUALSTACKITEM_TYPE_PROCEDURE), pItem->SetName(pSequenceEntry->GetName()), pItem->SetDescription(pSequenceEntry->GetDescription()), pItem->SetFlags((nAttributes & (TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS)) ? ((nAttributes & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) ? TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS : TCMANUALSTACKITEM_RELEASEFLAG_AFTERBEGIN) : 0); (pProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pSequenceEntry->GetName()))); )
		{
			pItem->SetDescription((pItem->GetDescription().IsEmpty()) ? pProcedure->GetDescription() : pItem->GetDescription());
			pItem->SetDestinationSubSystem(pProcedure->GetSubSystem());
			break;
		}
		for (pItem->SetReleaseTimeWindow((pItem->GetReleaseTime() == 0) ? dwReleaseOffset : 0, 0, ((nAttributes & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0) ? TRUE : FALSE); pSequence->GetParameters(pParameters[0]) >= 0; )
		{
			pItem->SetMembershipParameters(pParameters[0]);
			break;
		}
		for (nParameter[0] = 0, nParameters[0] = (INT)pSequenceEntry->GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
		{
			if ((pFunctionElement[0] = ((pSequenceEntryParameter = pSequenceEntry->GetAt(nParameter[0]))) ? new CDatabaseTCFunctionElement : (CDatabaseTCFunctionElement *)NULL))
			{
				if (pFunctionElement[0]->Copy(pSequenceEntryParameter))
				{
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
					{
						for (nSet = 0, nSets = (INT)GetDatabase()->GetTCParameterSets()->GetSize(); nSet < nSets; nSet++)
						{
							if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(nSet)) && pParameterSet->GetValueSet() == pSequenceEntryParameter->GetValueSet())
							{
								if ((pFunctionElement[1] = pParameterSet->GetAt(pParameterSet->Find(pFunctionElement[0]->GetName()))) != (CDatabaseTCFunctionElement *)NULL)
								{
									for (pFunctionElement[0]->SetAttributes((pFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT)) | (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_PARAMETERSET | TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))), pFunctionElement[0]->SetConstValue(pFunctionElement[1]->GetConstValue()), pFunctionElement[0]->SetConstValueAsText(pFunctionElement[1]->GetConstValueAsText()); (pParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName()))); )
									{
										for (pFunctionElement[0]->SetAttributes((pFunctionElement[1]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
										{
											pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
											break;
										}
										break;
									}
									break;
								}
							}
						}
						if (nSet < nSets  &&  pItem->Add(pFunctionElement[0]) >= 0) continue;
						delete pFunctionElement[0];
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE))
					{
						delete pFunctionElement[0];
						break;
					}
					if (pSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
					{
						for (nParameter[1] = 0, nParameters[1] = (INT)pParameters[0].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
						{
							if ((pParameter[0] = pParameters[0].GetAt(nParameter[1])) && pSequenceEntryParameter->GetConstValueAsText() == pParameter[0]->GetTag())
							{
								for (pFunctionElement[0]->SetAttributes((pParameter[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
								{
									pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
									break;
								}
								if (pParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
								pFunctionElement[0]->SetConstValue(pParameter[0]->GetConstValue());
								pFunctionElement[0]->SetConstValueAsText(pParameter[0]->GetConstValueAsText());
								pFunctionElement[0]->SetConstValueSource(pSequenceEntryParameter->GetConstValueAsText());
								break;
							}
						}
						if (nParameter[1] < nParameters[1] && pItem->Add(pFunctionElement[0]) >= 0) continue;
						delete pFunctionElement[0];
						break;
					}
					for (pFunctionElement[0]->SetConstValue(pSequenceEntryParameter->GetConstValue()), pFunctionElement[0]->SetConstValueAsText(pSequenceEntryParameter->GetConstValueAsText()); (pParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pSequenceEntryParameter->GetTag()))); )
					{
						for (pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? ((pParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE))); (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
						{
							pFunctionElement[0]->SetAttributes(pFunctionElement[0]->GetAttributes() | (pParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
							break;
						}
						if (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pFunctionElement[0]->SetAttributes((pFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
						break;
					}
					if (pItem->Add(pFunctionElement[0]) >= 0) continue;
				}
				delete pFunctionElement[0];
			}
			break;
		}
		return((nParameter[0] == nParameters[0] && pComposedItem->Add(pItem) >= 0) ? TRUE : FALSE);
	}
	if (nAttributes & TCSEQUENCEENTRY_TYPE_FORMALFUNCTION)
	{
		if ((pSubSequenceEntry = new CDatabaseTCSequenceEntry))
		{
			if (pSubSequenceEntry->Copy(pSequenceEntry))
			{
				for (nParameter[0] = 0, nParameters[0] = pSequence->GetParameters(pParameters[0]); nParameter[0] < nParameters[0]; nParameter[0]++)
				{
					if ((pParameter[0] = pParameters[0].GetAt(nParameter[0])) && pSequenceEntry->GetName() == pParameter[0]->GetTag())
					{
						for (pSubSequenceEntry->SetName(pParameter[0]->GetConstValueAsText()), pSubSequenceEntry->SetAttributes((pSubSequenceEntry->GetAttributes() & ~TCSEQUENCEENTRY_TYPE_FORMALFUNCTION) | TCSEQUENCEENTRY_TYPE_FUNCTION); InitializeDefaults(pSequence, pSubSequenceEntry, pSubSequenceEntry->GetAttributes(), pSequenceEntry->GetReleaseDeltaTime(), pSequenceEntry->GetExecutionDeltaTime(), pSequenceEntry->IsEarlierExecutionDeltaTime(), pComposedItem, pItem); )
						{
							delete pSubSequenceEntry;
							return TRUE;
						}
					}
				}
			}
			delete pSubSequenceEntry;
		}
	}
	if (nAttributes & TCSEQUENCEENTRY_TYPE_FORMALSEQUENCE)
	{
		if ((pSubSequenceEntry = new CDatabaseTCSequenceEntry))
		{
			if (pSubSequenceEntry->Copy(pSequenceEntry))
			{
				for (nParameter[0] = 0, nParameters[0] = pSequence->GetParameters(pParameters[0]); nParameter[0] < nParameters[0]; nParameter[0]++)
				{
					if ((pParameter[0] = pParameters[0].GetAt(nParameter[0])) && pSequenceEntry->GetName() == pParameter[0]->GetTag())
					{
						for (pSubSequenceEntry->SetName(pParameter[0]->GetConstValueAsText()), pSubSequenceEntry->SetAttributes((pSubSequenceEntry->GetAttributes() & ~TCSEQUENCEENTRY_TYPE_FORMALSEQUENCE) | TCSEQUENCEENTRY_TYPE_SEQUENCE); InitializeDefaults(pSequence, pSubSequenceEntry, pSubSequenceEntry->GetAttributes(), pSequenceEntry->GetReleaseDeltaTime(), pSequenceEntry->GetExecutionDeltaTime(), pSequenceEntry->IsEarlierExecutionDeltaTime(), pComposedItem, pItem); )
						{
							delete pSubSequenceEntry;
							return TRUE;
						}
					}
				}
			}
			delete pSubSequenceEntry;
		}
	}
	return((nAttributes & TCSEQUENCEENTRY_TYPE_TEXTCOMMENT) ? TRUE : FALSE);
}

BOOL CTCManualStackLoadCommandDialog::CheckFilter(CONST CDatabaseTCFunction *pFunction) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nTCID;
	INT  nIndex;
	INT  nCount;
	INT  nValue;
	INT  nValues;
	BOOL  bSearch;
	CString  szFilter;
	CString  szDigit[3];
	ULONGLONG  nAttributes;
	CUIntArray  nOperators;
	CStringArray  szKeys;
	CStringArray  szTypes;
	CStringArray  szFlags;
	CStringArray  szValues[2];
	CStringTools  cStringTools;
	CLongUIntArray  nTypes;
	CLongUIntArray  nFlags;
	CTCManualStackSearchFilter  *pFilter;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter);
	if ((pFilter = m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS - 1].GetAt(m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS - 1].Find(szFilter))))
	{
		for (nKey = 0, nKeys = ((pFunction->GetAttributes() & TCFUNCTION_EXETYPE_NOTALLOWED) != TCFUNCTION_EXETYPE_NOTALLOWED) ? pFilter->GetSearchKeys(szKeys, szValues[0]) : -1; nKey < nKeys; nKey++)
		{
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_DESCRIPTION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pFunction->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TYPE))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), GetDatabase()->EnumTCFunctionTypes(szTypes, nTypes), bSearch = TRUE; nValue < nValues; nValue++)
				{
					for (nIndex = 0, nCount = (INT)szTypes.GetSize(); nIndex < nCount; nIndex++)
					{
						if (szTypes.GetAt(nIndex) == szValues[1].GetAt(nValue))
						{
							nAttributes = nTypes.GetAt(nIndex);
							break;
						}
					}
					bSearch = (nIndex < nCount) ? ((!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && ((pFunction->GetAttributes() & nAttributes) == nAttributes)) : (bSearch || ((pFunction->GetAttributes() & nAttributes) == nAttributes))) : ((nValue >= 0 && nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_OR) ? bSearch : FALSE);
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCTYPE))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), GetDatabase()->EnumTCFunctionTCTypes(szTypes, nTypes), bSearch = TRUE; nValue < nValues; nValue++)
				{
					for (nIndex = 0, nCount = (INT)szTypes.GetSize(); nIndex < nCount; nIndex++)
					{
						if (szTypes.GetAt(nIndex) == szValues[1].GetAt(nValue))
						{
							nAttributes = nTypes.GetAt(nIndex);
							break;
						}
					}
					bSearch = (nIndex < nCount) ? ((!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && ((pFunction->GetAttributes() & nAttributes) == nAttributes)) : (bSearch || ((pFunction->GetAttributes() & nAttributes) == nAttributes))) : ((nValue >= 0 && nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_OR) ? bSearch : FALSE);
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCID))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16), bSearch = TRUE; nValue < nValues; nValue++)
				{
					for (nIndex = 0, nCount = szValues[1].GetAt(nValue).GetLength(), nTCID = 0; nIndex < nCount; nIndex++)
					{
						if (_istdigit((szDigit[2] = szValues[1].GetAt(nValue).GetAt(nIndex)).GetAt(0)))
						{
							nTCID = 16 * nTCID + __toascii(szDigit[2].GetAt(0)) - __toascii(szDigit[0].GetAt(0));
							continue;
						}
						if (_istxdigit(szDigit[2].GetAt(0)))
						{
							nTCID = 16 * nTCID + __toascii(szDigit[2].MakeUpper().GetAt(0)) - __toascii(szDigit[1].GetAt(0)) + 10;
							continue;
						}
						break;
					}
					bSearch = (nIndex == nCount) ? ((!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetTCID() == nTCID)) : (bSearch || (pFunction->GetTCID() == nTCID))) : ((nValue >= 0 && nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_OR) ? bSearch : FALSE);
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCPACKET))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetTCPacketRef() == GetDatabase()->GetTCPackets()->Find(szValues[1].GetAt(nValue)))) : (bSearch || (pFunction->GetTCPacketRef() == GetDatabase()->GetTCPackets()->Find(szValues[1].GetAt(nValue))));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_CATEGORY))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), GetDatabase()->EnumTCFunctionHazardousFlags(szFlags, nFlags), bSearch = TRUE; nValue < nValues; nValue++)
				{
					for (nIndex = 0, nCount = (INT)szFlags.GetSize(); nIndex < nCount; nIndex++)
					{
						if (szFlags.GetAt(nIndex) == szValues[1].GetAt(nValue))
						{
							nAttributes = nFlags.GetAt(nIndex);
							break;
						}
					}
					bSearch = (nIndex < nCount) ? ((!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && ((pFunction->GetAttributes() & nAttributes) == nAttributes)) : (bSearch || ((pFunction->GetAttributes() & nAttributes) == nAttributes))) : ((nValue >= 0 && nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_OR) ? bSearch : FALSE);
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSYSTEM))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetDestinationSubSystem() == szValues[1].GetAt(nValue))) : (bSearch || (pFunction->GetDestinationSubSystem() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSCHEDULE))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetDestinationSubSchedule() == szValues[1].GetAt(nValue))) : (bSearch || (pFunction->GetDestinationSubSchedule() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_MISSIONPLANNEREVENT))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pFunction->GetMissionPlannerEvent() == szValues[1].GetAt(nValue))) : (bSearch || (pFunction->GetMissionPlannerEvent() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
		}
		return((nKey == nKeys) ? TRUE : FALSE);
	}
	return TRUE;
}
BOOL CTCManualStackLoadCommandDialog::CheckFilter(CONST CDatabaseTCSequence *pSequence) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nValue;
	INT  nValues;
	BOOL  bSearch;
	CString  szFilter;
	CUIntArray  nOperators;
	CStringArray  szKeys;
	CStringArray  szValues[2];
	CTCManualStackSearchFilter  *pFilter;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter);
	if ((pFilter = m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES - 1].GetAt(m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES - 1].Find(szFilter))))
	{
		for (nKey = 0, nKeys = pFilter->GetSearchKeys(szKeys, szValues[0]); nKey < nKeys; nKey = nKey + 1)
		{
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_DESCRIPTION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pSequence->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pSequence->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_USER))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pSequence->GetUser() == szValues[1].GetAt(nValue))) : (bSearch || (pSequence->GetUser() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_FUNCTION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pSequence->Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pSequence->Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_SUBSCHEDULE))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pSequence->GetDestinationSubSchedule() == szValues[1].GetAt(nValue))) : (bSearch || (pSequence->GetDestinationSubSchedule() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCMANUALSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_MISSIONPLANNEREVENT))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCMANUALSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pSequence->GetMissionPlannerEvent() == szValues[1].GetAt(nValue))) : (bSearch || (pSequence->GetMissionPlannerEvent() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
		}
		return((nKey == nKeys) ? TRUE : FALSE);
	}
	return TRUE;
}

BOOL CTCManualStackLoadCommandDialog::CheckTelecommand(CONST CTCManualStackItem *pItem) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CTimeTag  tExecutionTime[2];
	CTimeSpan  tExecutionOffset[2];
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
	{
		if ((pFunctionElement = pItem->GetAt(nElement)) && ((!pFunctionElement->GetConstValueAsText().IsEmpty() && (((pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) || (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT))) || (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO))) continue;
		break;
	}
	for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) && ((!pPacketParameter->GetConstValueAsText().IsEmpty() && (((pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) || (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED))) || (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER)))) continue;
		break;
	}
	return(((!pItem->GetExecutionTime(tExecutionTime[0]) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && tExecutionTime[0] >= tExecutionTime[1].GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() && tExecutionTime[0] <= tExecutionTime[1].GetTime() + 1000000 * tExecutionOffset[1].GetTotalSeconds())) && nElement == nElements  &&  nParameter == nParameters) ? TRUE : FALSE);
}
BOOL CTCManualStackLoadCommandDialog::CheckTelecommand(CONST CTCManualStackComposedItem *pComposedItem) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nEntry[2];
	INT  nEntries[2];
	UINT  nOolStatus;
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	DWORD  dwReleaseOffset[2];
	DWORD  dwExecutionOffset[2];
	CTimeTag  tReleaseTime[2][2];
	CTimeTag  tExecutionTime[3];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tExecutionOffset[2];
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement[2];

	for (nEntry[0] = 0, nEntries[0] = (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1])) ? (INT)pComposedItem->GetSize() : -1; nEntry[0] < nEntries[0]; nEntry[0]++)
	{
		if ((pItem = pComposedItem->GetAt(nEntry[0])))
		{
			if (pItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION)
			{
				for (nElement = 0, nElements = (INT)pItem->GetSize(), pItem->GetMembershipParameters(pParameters); nElement < nElements; nElement++)
				{
					if ((pFunctionElement[0] = pItem->GetAt(nElement)))
					{
						if (!pFunctionElement[0]->GetConstValueAsText().IsEmpty())
						{
							if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
							{
								if (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))
								{
									if ((pParameter = pParameters.GetAt(pParameters.Find(pFunctionElement[0]->GetConstValueSource()))))
									{
										if ((pFunctionElement[1] = new CDatabaseTCFunctionElement))
										{
											if (pFunctionElement[1]->Copy(pFunctionElement[0]))
											{
												pFunctionElement[1]->SetAttributes(pParameter->GetAttributes());
												pFunctionElement[1]->SetConstValueAsText(pParameter->GetConstValueAsText());
												if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[1], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
												{
													delete pFunctionElement[1];
													continue;
												}
											}
											delete pFunctionElement[1];
										}
									}
									break;
								}
								if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[0], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							}
							if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
					break;
				}
				for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1; nParameter < nParameters; nParameter++)
				{
					if ((pPacketParameter = cPacket.GetAt(nParameter)))
					{
						if (!pPacketParameter->GetConstValueAsText().IsEmpty())
						{
							if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
							{
								if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
								break;
							}
							if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
						}
						if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
					}
					break;
				}
				if (nElement == nElements  &&  nParameter == nParameters) continue;
				break;
			}
			if (pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE)
			{
				for (nParameter = 0, nParameters = (INT)pItem->GetSize(), pItem->GetMembershipParameters(pParameters); nParameter < nParameters; nParameter++)
				{
					if ((pFunctionElement[0] = pItem->GetAt(nParameter)))
					{
						if (!pFunctionElement[0]->GetConstValueAsText().IsEmpty())
						{
							if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
							{
								if (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))
								{
									if ((pParameter = pParameters.GetAt(pParameters.Find(pFunctionElement[0]->GetConstValueSource()))))
									{
										if ((pFunctionElement[1] = new CDatabaseTCFunctionElement))
										{
											if (pFunctionElement[1]->Copy(pFunctionElement[0]))
											{
												pFunctionElement[1]->SetAttributes(pParameter->GetAttributes());
												pFunctionElement[1]->SetConstValueAsText(pParameter->GetConstValueAsText());
												if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[1], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
												{
													delete pFunctionElement[1];
													continue;
												}
											}
											delete pFunctionElement[1];
										}
									}
									break;
								}
								if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[0], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							}
							if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
					break;
				}
				if (nParameter == nParameters) continue;
				break;
			}
		}
		break;
	}
	for (nEntry[1] = 0, nEntries[1] = (INT)pComposedItem->GetSize(), tReleaseTime[0][0] = tReleaseTime[0][1] = 0, tExecutionTime[0] = 0, dwReleaseOffset[0] = 0, dwExecutionOffset[0] = 0; nEntry[1] < nEntries[1]; nEntry[1]++)
	{
		if ((pItem = pComposedItem->GetAt(nEntry[1])) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseInterval) || pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseTime[1][1]))
			{
				if (tReleaseTime[1][0] < tReleaseTime[0][1] || tReleaseTime[1][0] <= tExecutionTime[2] || (tReleaseTime[0][0] == 0 && nEntry[1] > 0)) break;
				tReleaseTime[0][0] = (!nEntry[1]) ? tReleaseTime[1][0] : tReleaseTime[0][0];
				tReleaseTime[0][1] = tReleaseTime[1][0];
				dwReleaseOffset[0] = 0;
			}
			for (; pItem->GetReleaseTimeWindow(dwReleaseOffset[1], tReleaseInterval, bAfterDispatch); )
			{
				dwReleaseOffset[0] = (pItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) ? (dwReleaseOffset[0] + dwReleaseOffset[1]) : dwReleaseOffset[1];
				break;
			}
			if (pItem->GetExecutionTime(tExecutionTime[1]))
			{
				if ((tExecutionTime[1] >= tReleaseTime[0][1] + 1000 * (TIMETAG)dwReleaseOffset[0] && tReleaseTime[0][1] > 0) || tExecutionTime[1].GetTimeInSeconds() - tExecutionTime[2].GetTimeInSeconds() < tExecutionOffset[0].GetTotalSeconds() || tExecutionTime[1].GetTimeInSeconds() - tExecutionTime[2].GetTimeInSeconds() > tExecutionOffset[1].GetTotalSeconds()) break;
				tExecutionTime[0] = tExecutionTime[1];
				dwExecutionOffset[0] = 0;
			}
			if (pItem->GetExecutionTimeOffset(dwExecutionOffset[1], bEarlierExecution))
			{
				dwExecutionOffset[0] = (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? (dwExecutionOffset[0] + dwExecutionOffset[1]) : dwExecutionOffset[1];
				if ((tExecutionTime[0] + 1000 * (TIMETAG)dwExecutionOffset[0] >= tReleaseTime[0][1] + 1000 * (TIMETAG)dwReleaseOffset[0] && tExecutionTime[0] > 0 && tReleaseTime[0][1] > 0) || (dwExecutionOffset[0] <= dwReleaseOffset[0] && tExecutionTime[0] == 0 && tReleaseTime[0][1] == 0)) break;
			}
		}
	}
	return((nEntry[0] == nEntries[0] && nEntry[1] == nEntries[1]) ? TRUE : FALSE);
}

INT CTCManualStackLoadCommandDialog::ExtractFilterValues(LPCTSTR pszValues, CStringArray &szSearchValues, CUIntArray &nSearchOperators) CONST
{
	INT  nPos[3];
	CString  szValue;
	CString  szValues;

	for (nPos[0] = 0, nPos[1] = (szValues = pszValues).Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_OR)), szSearchValues.RemoveAll(), nSearchOperators.RemoveAll(); nPos[1] >= 0 || nPos[2] >= 0; nPos[1] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_OR)))
	{
		if (nPos[1] >= 0 && (nPos[2] < 0 || nPos[1] < nPos[2]))
		{
			nSearchOperators.Add(TCMANUALSTACKSEARCHFILTER_OPERATOR_AND);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[1])));
			nPos[0] += nPos[1] + lstrlen(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_AND));
			continue;
		}
		if (nPos[2] >= 0 && (nPos[1] < 0 || nPos[2] < nPos[1]))
		{
			nSearchOperators.Add(TCMANUALSTACKSEARCHFILTER_OPERATOR_OR);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[2])));
			nPos[0] += nPos[2] + lstrlen(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_OPERATOR_OR));
			continue;
		}
		break;
	}
	if (nPos[0] < szValues.GetLength())
	{
		for (szValue = ExtractFilterValue(szValues.Mid(nPos[0])); !szValue.IsEmpty(); )
		{
			szSearchValues.Add(szValue);
			break;
		}
	}
	return((INT)szSearchValues.GetSize());
}
CString CTCManualStackLoadCommandDialog::ExtractFilterValue(LPCTSTR pszValue) CONST
{
	CString  szValue;

	for (szValue = pszValue; szValue.GetLength() > 0 && _istspace(szValue.GetAt(0)); )
	{
		szValue = szValue.Mid(1);
		continue;
	}
	while (szValue.GetLength() > 0 && _istspace(szValue.GetAt(szValue.GetLength() - 1)))
	{
		szValue = szValue.Mid(0, szValue.GetLength() - 1);
		continue;
	}
	if (szValue.GetLength() > 1 && szValue.GetAt(0) == STRINGCHAR(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_TEXT_DELIMITER) && szValue.GetAt(szValue.GetLength() - 1) == STRINGCHAR(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_TEXT_DELIMITER))
	{
		szValue = szValue.Left(szValue.GetLength() - lstrlen(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_TEXT_DELIMITER)));
		szValue = szValue.Mid(lstrlen(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_TEXT_DELIMITER)));
	}
	return szValue;
}

INT CTCManualStackLoadCommandDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackLoadCommandDialog::Check(BOOL bModified) CONST
{
	CString  szTelecommand;

	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->GetWindowText(szTelecommand);
	return((((IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS) && (m_cItem.GetName() == szTelecommand || (m_cComposedItem.GetName() == szTelecommand  &&  m_cComposedItem.GetSize() > 1))) || (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES) && m_cComposedItem.GetName() == szTelecommand  &&  m_cComposedItem.GetSize() > 0)) && !szTelecommand.IsEmpty()) ? TRUE : FALSE);
}

void CTCManualStackLoadCommandDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackLoadCommandDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackLoadCommandDialog::PostNcDestroy()
{
	m_cItem.SetName(EMPTYSTRING);
	m_cComposedItem.SetName(EMPTYSTRING);
	m_cComposedItem.RemoveAll();
	m_szColumns.RemoveAll();
	m_pFunctions.RemoveAll();
	m_pSequences.RemoveAll();
	m_pGroups[TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS - 1].RemoveAll();
	m_pGroups[TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES - 1].RemoveAll();
	m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS - 1].RemoveAll();
	m_pFilters[TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES - 1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackLoadCommandDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackLoadCommandDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_GROUPS, OnGroups)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS, OnTCFunctions)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES, OnTCSequences)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_ADD, OnAddFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_MODIFY, OnModifyFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVE, OnRemoveFilter)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL, OnRemoveAllFilters)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES, OnTelecommandProperties)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_LOADCOMMAND_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCMANUALSTACK_LOADCOMMAND_NAME, OnEditchangeTelecommand)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, OnSelchangeSource)
	ON_CBN_SELCHANGE(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, OnSelchangeFilter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackLoadCommandDialog message handlers

BOOL CTCManualStackLoadCommandDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : ((3 * rColumns.Width()) / 4));
		continue;
	}
	CheckDlgButton(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS, TRUE);
	CheckDlgButton(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES, FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_GROUPS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->EnableWindow();
	EnumSources();
	EnumFilters();
	ShowSourceContents();
	return FALSE;
}

BOOL CTCManualStackLoadCommandDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nEntry[2];
	INT  nEntries[2];
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CDatabaseTCSequenceEntry  *pSequenceEntry;
	CTCManualStackComposedItem  cComposedItem;
	CTCManualStackItemPropertiesDialog  cTCFunctionPropertiesDialog;
	CTCManualStackComposedItemPropertiesDialog  cTCSequencePropertiesDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME))));
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow();
		}
		for (; pNotifyListView->hdr.code == NM_DBLCLK; )
		{
			if ((pFunction = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME))))) : (CDatabaseTCFunction *)NULL))
			{
				if ((pItem = new CTCManualStackItem))
				{
					if (InitializeDefaults(pFunction, pItem))
					{
						if (cTCFunctionPropertiesDialog.Create(this, pItem) == IDOK) m_cItem.Copy(pItem);
						delete pItem;
						break;
					}
					delete pItem;
				}
				GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->SetFocus();
				CAudioDevice::AlertBySound();
			}
			for (; (pSequence = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_TITLEITEM_NAME))))) : (CDatabaseTCSequence *)NULL); )
			{
				for (nEntry[0] = 0, nEntries[0] = (pSequence->GetName() != m_cComposedItem.GetName() || !cComposedItem.Copy(&m_cComposedItem)) ? (INT)pSequence->GetSize() : 0, cComposedItem.SetName(pSequence->GetName()), cComposedItem.SetDescription(pSequence->GetDescription()); nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pSequenceEntry = pSequence->GetAt(nEntry[0])))
					{
						if ((pItem = new CTCManualStackItem))
						{
							if (InitializeDefaults(pSequence, pSequenceEntry, pSequenceEntry->GetAttributes(), pSequenceEntry->GetReleaseDeltaTime(), pSequenceEntry->GetExecutionDeltaTime(), pSequenceEntry->IsEarlierExecutionDeltaTime(), &cComposedItem, pItem)) continue;
							if (nEntry[0] >= cComposedItem.GetSize()) delete pItem;
						}
					}
					break;
				}
				if (nEntry[0] == nEntries[0])
				{
					for (nEntry[1] = 0, nEntries[1] = (INT)cComposedItem.GetSize(); nEntry[1] < nEntries[1]; nEntry[1]++)
					{
						if ((pItem = cComposedItem.GetAt(nEntry[1])))
						{
							pItem->SetMembership(cComposedItem.GetName());
							pItem->SetMembershipDescription(cComposedItem.GetDescription());
							pItem->SetMembershipSize(nEntries[1]);
							pItem->SetMembershipID(nEntry[1]);
						}
					}
					if (cTCSequencePropertiesDialog.Create(this, &cComposedItem) == IDOK) m_cComposedItem.Copy(&cComposedItem);
					break;
				}
				GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->SetFocus();
				CAudioDevice::AlertBySound();
				break;
			}
			GetDlgItem(IDOK)->EnableWindow(Check());
			break;
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackLoadCommandDialog::OnGroups()
{
	INT  nGroup;
	INT  nGroups;
	UINT  nGroupType;
	CString  szGroup;
	CString  szSource;
	CString  szFilter;
	CTCManualStackSearchGroup  *pGroup;
	CTCManualStackSearchGroupsDialog  cSearchGroupsDialog;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE)->GetWindowText(szGroup), GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter), szSource.Format(STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_SOURCE_FORMAT), (LPCTSTR)GetAccountDatabase()), nGroupType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES : TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS; (szFilter == STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE) && cSearchGroupsDialog.Create(this, nGroupType, szGroup) == IDOK) || (szFilter != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE) && ((nGroupType == TCMANUALSTACKSEARCHGROUP_TYPE_FUNCTIONS && cSearchGroupsDialog.Create(this, m_pFunctions) == IDOK) || (nGroupType == TCMANUALSTACKSEARCHGROUP_TYPE_SEQUENCES && cSearchGroupsDialog.Create(this, m_pSequences) == IDOK))); )
	{
		for (nGroup = 0, nGroups = (GetParent()->GetSearchGroups(nGroupType, m_pGroups[nGroupType - 1])) ? (INT)m_pGroups[nGroupType - 1].GetSize() : 0; nGroup < nGroups; nGroup++)
		{
			if ((pGroup = (CTCManualStackSearchGroup *)m_pGroups[nGroupType - 1].GetAt(nGroup)) != (CTCManualStackSearchGroup *)NULL)
			{
				if (SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pGroup->GetName()) < 0)
				{
					SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pGroup->GetName());
					continue;
				}
			}
		}
		for (nGroup = 0, nGroups = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_GETCOUNT); nGroup < nGroups; nGroup++)
		{
			if (szSource != Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE), nGroup) && m_pGroups[nGroupType - 1].Find(Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE), nGroup)) < 0)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_SOURCE, CB_DELETESTRING, nGroup);
				nGroups--;
				nGroup--;
			}
		}
		break;
	}
}

void CTCManualStackLoadCommandDialog::OnTCFunctions()
{
	CHourglassCursor  cCursor;

	EnumSources();
	EnumFilters();
	ShowSourceContents();
}

void CTCManualStackLoadCommandDialog::OnTCSequences()
{
	CHourglassCursor  cCursor;

	EnumSources();
	EnumFilters();
	ShowSourceContents();
}

void CTCManualStackLoadCommandDialog::OnAddFilter()
{
	UINT  nFilterType;
	CTCManualStackSearchFilter  *pFilter[2];
	CTCManualStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCManualStackSearchFilter))
	{
		for (pFilter[0]->SetType((nFilterType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES : TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS)); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
		{
			if ((pFilter[1] = m_pFilters[nFilterType - 1].GetAt(m_pFilters[nFilterType - 1].Find(pFilter[0]->GetName()))))
			{
				pFilter[1]->Copy(pFilter[0]);
				delete pFilter[0];
				return;
			}
			if (m_pFilters[nFilterType - 1].Add(pFilter[0]) >= 0)
			{
				SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFilter[0]->GetName());
				GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL)->EnableWindow();
				GetParent()->SetSearchFilters(nFilterType, m_pFilters[nFilterType - 1]);
				return;
			}
			break;
		}
		delete pFilter[0];
	}
}

void CTCManualStackLoadCommandDialog::OnModifyFilter()
{
	UINT  nFilterType;
	CString  szFilter;
	CTCManualStackSearchFilter  *pFilter[2];
	CTCManualStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCManualStackSearchFilter))
	{
		for (GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter), nFilterType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES : TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS; (pFilter[1] = m_pFilters[nFilterType - 1].GetAt(m_pFilters[nFilterType - 1].Find(szFilter))); )
		{
			for (pFilter[0]->Copy(pFilter[1]); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
			{
				pFilter[1]->Copy(pFilter[0]);
				ShowSourceContents();
				break;
			}
			GetParent()->SetSearchFilters(nFilterType, m_pFilters[nFilterType - 1]);
			break;
		}
		delete pFilter[0];
	}
}

void CTCManualStackLoadCommandDialog::OnRemoveFilter()
{
	INT  nIndex;
	UINT  nFilterType;
	CString  szFilter;
	CTCManualStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter), nFilterType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES : TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS; (pFilter = m_pFilters[nFilterType - 1].GetAt((nIndex = m_pFilters[nFilterType - 1].Find(szFilter)))); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilter));
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->SetFocus();
		m_pFilters[nFilterType - 1].RemoveAt(nIndex);
		delete pFilter;
		break;
	}
	for (GetParent()->SetSearchFilters(nFilterType, m_pFilters[nFilterType - 1]); szFilter != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE)));
		ShowSourceContents();
		break;
	}
}

void CTCManualStackLoadCommandDialog::OnRemoveAllFilters()
{
	INT  nIndex;
	INT  nFilter;
	INT  nFilters;
	UINT  nFilterType;
	CString  szFilter[2];
	CTCManualStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (nFilter = 0, nFilters = (INT)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_GETCOUNT), GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter[0]), nFilterType = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? TCMANUALSTACKSEARCHFILTER_TYPE_SEQUENCES : TCMANUALSTACKSEARCHFILTER_TYPE_FUNCTIONS; nFilter < nFilters; nFilter++)
	{
		if ((pFilter = ((szFilter[1] = Combobox_GetText(GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER), nFilter)) != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE)) ? m_pFilters[nFilterType - 1].GetAt((nIndex = m_pFilters[nFilterType - 1].Find(szFilter[1]))) : (CTCManualStackSearchFilter *)NULL))
		{
			SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_DELETESTRING, nFilter);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_MODIFY)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->SetFocus();
			m_pFilters[nFilterType - 1].RemoveAt(nIndex);
			delete pFilter;
			nFilters--;
			nFilter--;
		}
	}
	for (GetParent()->SetSearchFilters(nFilterType, m_pFilters[nFilterType - 1]); szFilter[0] != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE)));
		ShowSourceContents();
		break;
	}
}

void CTCManualStackLoadCommandDialog::OnTelecommandProperties()
{
	INT  nEntry[2];
	INT  nEntries[2];
	CString  szTelecommand;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CDatabaseTCSequenceEntry  *pSequenceEntry;
	CTCManualStackComposedItem  cComposedItem;
	CTCManualStackItemPropertiesDialog  cTCFunctionPropertiesDialog;
	CTCManualStackComposedItemPropertiesDialog  cTCSequencePropertiesDialog;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->GetWindowText(szTelecommand); (pFunction = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(szTelecommand)) : (CDatabaseTCFunction *)NULL); )
	{
		if ((pItem = new CTCManualStackItem))
		{
			if (InitializeDefaults(pFunction, pItem))
			{
				if (GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()) < 0)
				{
					if (cTCFunctionPropertiesDialog.Create(this, pItem) == IDOK) m_cItem.Copy(pItem);
					delete pItem;
					break;
				}
				for (cComposedItem.SetName(pItem->GetName()), cComposedItem.SetDescription(pItem->GetDescription()), cComposedItem.Add(pItem), pItem->SetMembership(cComposedItem.GetName()), pItem->SetMembershipDescription(cComposedItem.GetDescription()), pItem->SetMembershipSize(1), pItem->SetMembershipID(0); cTCSequencePropertiesDialog.Create(this, &cComposedItem) == IDOK; )
				{
					m_cComposedItem.Copy(&cComposedItem);
					break;
				}
				delete pItem;
				break;
			}
			delete pItem;
		}
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->SetFocus();
		CAudioDevice::AlertBySound();
		break;
	}
	for (; IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES); )
	{
		if (((pSequence = GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(szTelecommand)))))
		{
			for (nEntry[0] = 0, nEntries[0] = (pSequence->GetName() != m_cComposedItem.GetName() || !cComposedItem.Copy(&m_cComposedItem)) ? (INT)pSequence->GetSize() : 0, cComposedItem.SetName(pSequence->GetName()), cComposedItem.SetDescription(pSequence->GetDescription()); nEntry[0] < nEntries[0]; nEntry[0]++)
			{
				if ((pSequenceEntry = pSequence->GetAt(nEntry[0])))
				{
					if ((pItem = new CTCManualStackItem))
					{
						if (InitializeDefaults(pSequence, pSequenceEntry, pSequenceEntry->GetAttributes(), pSequenceEntry->GetReleaseDeltaTime(), pSequenceEntry->GetExecutionDeltaTime(), pSequenceEntry->IsEarlierExecutionDeltaTime(), &cComposedItem, pItem)) continue;
						if (nEntry[0] >= cComposedItem.GetSize()) delete pItem;
					}
				}
				break;
			}
			if (nEntry[0] == nEntries[0])
			{
				for (nEntry[1] = 0, nEntries[1] = (INT)cComposedItem.GetSize(); nEntry[1] < nEntries[1]; nEntry[1]++)
				{
					if ((pItem = cComposedItem.GetAt(nEntry[1])))
					{
						pItem->SetMembership(cComposedItem.GetName());
						pItem->SetMembershipDescription(cComposedItem.GetDescription());
						pItem->SetMembershipSize(nEntries[1]);
						pItem->SetMembershipID(nEntry[1]);
					}
				}
				if (cTCSequencePropertiesDialog.Create(this, &cComposedItem) == IDOK) m_cComposedItem.Copy(&cComposedItem);
				break;
			}
		}
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_LIST)->SetFocus();
		CAudioDevice::AlertBySound();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadCommandDialog::OnEditchangeTelecommand()
{
	INT  nIndex;
	INT  nEntry[2];
	INT  nEntries[2];
	CString  szTelecommand;
	CTCManualStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CDatabaseTCSequenceEntry  *pSequenceEntry;
	CTCManualStackComposedItem  cComposedItem;

	for (GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME)->GetWindowText(szTelecommand); (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS) && (nIndex = GetDatabase()->GetTCFunctions()->Find(szTelecommand)) >= 0) || (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES) && (nIndex = GetDatabase()->GetTCSequences()->Find(szTelecommand)) >= 0); )
	{
		if ((pFunction = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_FUNCTIONS)) ? GetDatabase()->GetTCFunctions()->GetAt(nIndex) : (CDatabaseTCFunction *)NULL))
		{
			for (; (pItem = new CTCManualStackItem); )
			{
				if (InitializeDefaults(pFunction, pItem))
				{
					if (!CheckTelecommand(pItem))
					{
						delete pItem;
						break;
					}
					m_cItem.Copy(pItem);
				}
				delete pItem;
				break;
			}
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow();
			break;
		}
		if ((pSequence = (IsDlgButtonChecked(IDC_TCMANUALSTACK_LOADCOMMAND_TYPE_SEQUENCES)) ? GetDatabase()->GetTCSequences()->GetAt(nIndex) : (CDatabaseTCSequence *)NULL))
		{
			for (nEntry[0] = 0, nEntries[0] = ((pSequence->GetName() != m_cComposedItem.GetName() || !cComposedItem.Copy(&m_cComposedItem))) ? (INT)pSequence->GetSize() : 0, cComposedItem.SetName(pSequence->GetName()), cComposedItem.SetDescription(pSequence->GetDescription()); nEntry[0] < nEntries[0]; nEntry[0]++)
			{
				if ((pSequenceEntry = pSequence->GetAt(nEntry[0])))
				{
					if ((pItem = new CTCManualStackItem))
					{
						if (InitializeDefaults(pSequence, pSequenceEntry, pSequenceEntry->GetAttributes(), pSequenceEntry->GetReleaseDeltaTime(), pSequenceEntry->GetExecutionDeltaTime(), pSequenceEntry->IsEarlierExecutionDeltaTime(), &cComposedItem, pItem)) continue;
						if (nEntry[0] >= cComposedItem.GetSize()) delete pItem;
					}
				}
				break;
			}
			for (nEntry[1] = 0, nEntries[1] = (INT)cComposedItem.GetSize(); nEntry[1] < nEntries[1]; nEntry[1]++)
			{
				if ((pItem = cComposedItem.GetAt(nEntry[1])))
				{
					pItem->SetMembership(cComposedItem.GetName());
					pItem->SetMembershipDescription(cComposedItem.GetDescription());
					pItem->SetMembershipSize(nEntries[1]);
					pItem->SetMembershipID(nEntry[1]);
				}
			}
			if (nEntry[0] == nEntries[0] && nEntries[0] > 0 && CheckTelecommand(&cComposedItem)) m_cComposedItem.Copy(&cComposedItem);
			GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_NAME_PROPERTIES)->EnableWindow();
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackLoadCommandDialog::OnSelchangeSource()
{
	ShowSourceContents();
}

void CTCManualStackLoadCommandDialog::OnSelchangeFilter()
{
	CString  szFilter;

	ShowSourceContents();
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER)->GetWindowText(szFilter);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_MODIFY)->EnableWindow((szFilter != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVE)->EnableWindow((szFilter != STRING(IDS_TCMANUALSTACKLOADTELECOMMANDDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_LOADCOMMAND_FILTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTCManualStackLoadCommandDialog::OnOK()
{
	INT  nStage;
	INT  nStages;
	INT  nItem[3];
	INT  nItems[3];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	UINT  nStageID;
	CString  szClosure;
	CUIntArray  nStageIDs;
	CTimeSpan  tStageTimeWindow[3];
	CTCManualStackItem  *pItem[3];
	CTCManualStackItems  pItems;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;
	CHourglassCursor  cCursor;

	if (!m_cComposedItem.GetSize())
	{
		for (; (pItem[0] = new CTCManualStackItem); )
		{
			if (pItem[0]->Copy(&m_cItem) && pItems.Add(pItem[0]) >= 0)
			{
				if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[0]->GetExeVerGroupRef())))
				{
					for (nParameter = 0, nParameters = (INT)pGroup->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
							{
								if (nStageIDs.GetAt(nStage) == nStageID) break;
								if (nStageIDs.GetAt(nStage) > nStageID)
								{
									nStageIDs.InsertAt(nStage, nStageID);
									break;
								}
							}
							if (nStage == nStages)
							{
								nStageIDs.InsertAt(nStage, nStageID);
								continue;
							}
						}
					}
					for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
					{
						for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
							{
								tStageTimeWindow[0] = (bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
								tStageTimeWindow[1] = (bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
								tStageTimeWindow[2] = (bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
								szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
								bParameter = TRUE;
							}
						}
						if (nParameters > 0)
						{
							pItem[0]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
							pItem[0]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
						}
					}
				}
				for (; pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP; )
				{
					if ((pItem[1] = new CTCManualStackItem))
					{
						if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0)
						{
							pItem[1]->SetFlags((pItem[1]->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP);
							pItem[0]->SetAttributes((pItem[0]->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_SECONDSTEP)) | TCFUNCTION_EXETYPE_FIRSTSTEP);
							pItem[1]->SetAttributes((pItem[1]->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP)) | TCFUNCTION_EXETYPE_SECONDSTEP);
							pItem[1]->SetReleaseInterlock(EMPTYSTRING);
							pItem[1]->SetInterlock(EMPTYSTRING);
							break;
						}
						delete pItem[1];
					}
					pItems.RemoveAll();
					break;
				}
				break;
			}
			delete pItem[0];
			break;
		}
		if (pItems.GetSize() > 0) GetParent()->LoadTelecommands(pItems);
	}
	if (m_cComposedItem.GetSize() > 0)
	{
		for (nItem[0] = 0, nItems[0] = (pItems.Copy(&m_cComposedItem)) ? (INT)pItems.GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pItem[0] = (CTCManualStackItem *)pItems.GetAt(nItem[0])) != (CTCManualStackItem *)NULL)
			{
				if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem[0]->GetExeVerGroupRef())))
				{
					for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), nStageIDs.RemoveAll(); nParameter < nParameters; nParameter++)
					{
						if ((pGroupParameter = pGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), nStageID = MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()); nStage < nStages; nStage++)
							{
								if (nStageIDs.GetAt(nStage) == nStageID) break;
								if (nStageIDs.GetAt(nStage) > nStageID)
								{
									nStageIDs.InsertAt(nStage, nStageID);
									break;
								}
							}
							if (nStage == nStages)
							{
								nStageIDs.InsertAt(nStage, nStageID);
								continue;
							}
						}
					}
					for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
					{
						for (nParameter = 0, szClosure.Empty(), bParameter = FALSE; nParameter < nParameters; nParameter++)
						{
							if ((pGroupParameter = pGroup->GetAt(nParameter)) && nStageIDs.GetAt(nStage) == MAKETCEXEVERSTAGEID(pGroupParameter->GetStage(), pGroupParameter->GetStep()))
							{
								tStageTimeWindow[0] = (bParameter) ? min(pGroupParameter->GetTimeWindowOffset(), tStageTimeWindow[0]) : pGroupParameter->GetTimeWindowOffset();
								tStageTimeWindow[1] = (bParameter) ? max(pGroupParameter->GetTimeWindowInterval(), tStageTimeWindow[1]) : pGroupParameter->GetTimeWindowInterval();
								tStageTimeWindow[2] = (bParameter) ? max(pGroupParameter->GetTimeWindowUncertainty(), tStageTimeWindow[2]) : pGroupParameter->GetTimeWindowUncertainty();
								szClosure = (!pGroupParameter->GetTimeWindowClosurePacket().IsEmpty()) ? pGroupParameter->GetTimeWindowClosurePacket() : szClosure;
								bParameter = TRUE;
							}
						}
						if (nParameters > 0)
						{
							pItem[0]->SetVerificationTimeWindow(nStageIDs.GetAt(nStage), tStageTimeWindow[0], tStageTimeWindow[1], tStageTimeWindow[2]);
							pItem[0]->SetVerificationStageClosure(nStageIDs.GetAt(nStage), szClosure);
						}
					}
				}
				for (; pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP; )
				{
					for (nItem[1] = nItem[0] + 1, nItems[1] = nItems[0]; nItem[1] < nItems[1]; nItem[1]++)
					{
						if ((pItem[1] = pItems.GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
						{
							if (pItem[1]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)
							{
								for (nElement = 0, nElements = (pItem[0]->GetName() == pItem[1]->GetName() && pItem[0]->GetSize() == pItem[1]->GetSize()) ? (INT)pItem[0]->GetSize() : -1; nElement < nElements; nElement++)
								{
									if (!pItem[0]->GetAt(nElement)->Compare(pItem[1]->GetAt(nElement))) break;
									continue;
								}
								if (nElement == nElements) break;
							}
						}
					}
					if (nItem[1] == nItems[1])
					{
						if ((pItem[1] = new CTCManualStackItem) && pItem[1]->Copy(pItem[0]))
						{
							for (nItem[2] = 0, nItems[2] = nItems[0], pItems.InsertAt(nItem[0] + 1, pItem[1], 1); nItem[2] <= nItems[2]; nItem[2]++)
							{
								if ((pItem[2] = pItems.GetAt(nItem[2])) != (CTCManualStackItem *)NULL)
								{
									pItem[2]->SetMembershipSize(pItem[2]->GetMembershipSize() + 1);
									pItem[2]->SetMembershipID((nItem[0] < nItem[2]) ? (pItem[2]->GetMembershipID() + 1) : pItem[2]->GetMembershipID());
								}
							}
							pItem[1]->SetFlags((pItem[1]->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP);
							pItem[0]->SetAttributes((pItem[0]->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_SECONDSTEP)) | TCFUNCTION_EXETYPE_FIRSTSTEP);
							pItem[1]->SetAttributes((pItem[1]->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP)) | TCFUNCTION_EXETYPE_SECONDSTEP);
							pItem[1]->SetReleaseInterlock(EMPTYSTRING);
							pItem[1]->SetInterlock(EMPTYSTRING);
							nItems[0]++;
							nItem[0]++;
							break;
						}
						pItems.RemoveAll();
						delete pItem[1];
					}
					break;
				}
				if (pItems.GetSize() > 0) continue;
			}
			pItems.RemoveAll();
			break;
		}
		if (pItems.GetSize() > 0 && nItem[0] == nItems[0]) GetParent()->LoadTelecommands(pItems);
	}
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackLoadCommandDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOADCOMMANDDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackLoadCommandDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKLOADCOMMANDDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackInterlocksDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackInterlocksDialog, CDisplayDialog)

CTCManualStackInterlocksDialog::CTCManualStackInterlocksDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackInterlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCManualStackInterlocksDialog::Create(CWnd *pParentWnd, CTCInterlocks &pInterlocks)
{
	INT  nResult;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock[2];

	for (pInterlocks.RemoveAll(); (nResult = CDisplayDialog::Create(pParentWnd, CTCManualStackInterlocksDialog::IDD)) == IDOK; )
	{
		for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock = nInterlock + 1)
		{
			if ((pInterlock[1] = ((pInterlock[0] = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock[0]->GetState() == TCINTERLOCK_STATE_IDLE) ? m_pInterlocks[1].GetAt(m_pInterlocks[1].Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pInterlock[0]->GetName())) : (CTCInterlock *)NULL) && pInterlock[0]->GetState() != pInterlock[1]->GetState())
			{
				pInterlocks.InsertAt(pInterlocks.GetSize(), pInterlock[0], 1);
				m_pInterlocks[0].CPtrArray::RemoveAt(nInterlock);
				nInterlocks--;
				nInterlock--;
			}
		}
		break;
	}
	return nResult;
}

BOOL CTCManualStackInterlocksDialog::EnumInterlocks()
{
	INT  nColumn;
	INT  nColumns;
	INT  nInterlock;
	INT  nInterlocks;
	CString  szItem;
	CString  szScope[2];
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (GetTCService()->GetTCInterlocks(TCINTERLOCK_SOURCETYPE_MANUALSTACK, m_pInterlocks[0])) ? (INT)m_pInterlocks[0].GetSize() : 0, m_pInterlocks[1].Copy(&m_pInterlocks[0]); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_NAME); )
				{
					szItem = pInterlock->GetName();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE))
				{
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_MANUALSTACKTYPE) : EMPTYSTRING;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_AUTOMATICSTACKTYPE) : szItem;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_PROCEDURESMONITORTYPE) : szItem;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_ALLSOURCES) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_ALLSOURCESTYPE) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE))
				{
					szScope[0].Format(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_SUBSYSTEMSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szScope[1].Format(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_SUBSYSTEMNOWAITSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_GLOBALSCOPE) : EMPTYSTRING;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_LOCALSCOPE) : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_LOCALNOWAITSCOPE) : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? szScope[0] : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? szScope[1] : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_COMMANDSSCOPE) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE))
				{
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_RECEPTIONSTAGE) : EMPTYSTRING;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_TRANSMISSIONSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_ACCEPTANCESTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_STARTSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_PROGRESSSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_COMPLETIONSTAGE) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STATE))
				{
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_IDLESTATE) : EMPTYSTRING;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_PENDINGSTATE) : szItem;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_SUCCESSSTATE) : szItem;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_FAILURESTATE) : szItem;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), nInterlock, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), nInterlock, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), 0);
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESET)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESETALL)->EnableWindow((SendDlgItemMessage(IDC_TCMANUALSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCMANUALSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCManualStackInterlocksDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCManualStackInterlocksDialog::IsModified() CONST
{
	return !m_pInterlocks[0].Compare(&m_pInterlocks[1]);
}

void CTCManualStackInterlocksDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackInterlocksDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCManualStackInterlocksDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	return CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCManualStackInterlocksDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCManualStackInterlocksDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCMANUALSTACK_INTERLOCKS_RESET, OnReset)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_INTERLOCKS_RESETALL, OnResetAll)
	ON_BN_CLICKED(IDC_TCMANUALSTACK_INTERLOCKS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackInterlocksDialog message handlers

BOOL CTCManualStackInterlocksDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE));
	m_szColumns.Add(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STATE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCMANUALSTACK_INTERLOCKS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 3) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE)) ? (rColumns.Width() / 4) : (rColumns.Width() / 5))));
		continue;
	}
	EnumInterlocks();
	return TRUE;
}

BOOL CTCManualStackInterlocksDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCMANUALSTACK_INTERLOCKS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESET)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STATE))) != STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_IDLESTATE)) ? TRUE : FALSE);
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackInterlocksDialog::OnReset()
{
	INT  nIndex;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = m_pInterlocks[0].GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST))))))
	{
		for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(), pInterlock->SetState(TCINTERLOCK_STATE_IDLE), Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STATE)), STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_IDLESTATE)); nInterlock < nInterlocks; nInterlock++)
		{
			if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE) break;
			continue;
		}
		GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESET)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESETALL)->EnableWindow((nInterlock < nInterlocks) ? TRUE : FALSE);
		GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackInterlocksDialog::OnResetAll()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE)
		{
			Listview_SetText(GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST), nInterlock, FindColumnIndex(STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_TITLEITEM_STATE)), STRING(IDS_TCMANUALSTACKINTERLOCKSDIALOG_LIST_IDLESTATE));
			pInterlock->SetState(TCINTERLOCK_STATE_IDLE);
		}
	}
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_RESETALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCMANUALSTACK_INTERLOCKS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCManualStackInterlocksDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetTCService()->SetTCInterlocks(TCINTERLOCK_SOURCETYPE_MANUALSTACK, m_pInterlocks[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCManualStackInterlocksDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCManualStackInterlocksDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCMANUALSTACKINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchNumberDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchNumberDialog, CTCStackSearchNumberDialog)

CTCManualStackSearchNumberDialog::CTCManualStackSearchNumberDialog() : CTCStackSearchNumberDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchNumberDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchNumberDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchNumberDialog::GetParent());
}

void CTCManualStackSearchNumberDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchNumberDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchNumberDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchNumberDialog, CTCStackSearchNumberDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchNumberDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNUMBER_GOTO, OnGotoNumber)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchNumberDialog message handlers

void CTCManualStackSearchNumberDialog::OnGotoNumber()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByNumber((INT)Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_NUMBER))))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_NUMBER_NOTHING);
		return;
	}
}

void CTCManualStackSearchNumberDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchNumberDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchNameDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchNameDialog, CTCStackSearchNameDialog)

CTCManualStackSearchNameDialog::CTCManualStackSearchNameDialog() : CTCStackSearchNameDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchNameDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchNameDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchNameDialog::GetParent());
}

void CTCManualStackSearchNameDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchNameDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchNameDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchNameDialog, CTCStackSearchNameDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchNameDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNAME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchNameDialog message handlers

void CTCManualStackSearchNameDialog::OnFindTelecommand()
{
	CString  szName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHNAME_NAME)->GetWindowText(szName);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName);
		m_szNames.Add(szName);
	}
	if (!GetParent()->SearchTelecommandByName(szName, IsDlgButtonChecked(IDC_TCSTACK_SEARCHNAME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHNAME_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_NAME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHNAME_ALL, FALSE);
}

void CTCManualStackSearchNameDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchNameDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchDescriptionDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchDescriptionDialog, CTCStackSearchDescriptionDialog)

CTCManualStackSearchDescriptionDialog::CTCManualStackSearchDescriptionDialog() : CTCStackSearchDescriptionDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchDescriptionDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchDescriptionDialog::GetParent());
}

void CTCManualStackSearchDescriptionDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchDescriptionDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchDescriptionDialog, CTCStackSearchDescriptionDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchDescriptionDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDESCRIPTION_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchDescriptionDialog message handlers

void CTCManualStackSearchDescriptionDialog::OnFindTelecommand()
{
	CString  szDescription;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT)->GetWindowText(szDescription);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDescription) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDescription);
		m_szDescriptions.Add(szDescription);
	}
	if (!GetParent()->SearchTelecommandByDescription(szDescription, IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_CASE), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_WORD)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_DESCRIPTION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDESCRIPTION_ALL, FALSE);
}

void CTCManualStackSearchDescriptionDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchDescriptionDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCategoryDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchCategoryDialog, CTCStackSearchCategoryDialog)

CTCManualStackSearchCategoryDialog::CTCManualStackSearchCategoryDialog() : CTCStackSearchCategoryDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchCategoryDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchCategoryDialog::GetParent());
}

void CTCManualStackSearchCategoryDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCategoryDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchCategoryDialog, CTCStackSearchCategoryDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchCategoryDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCATEGORY_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCategoryDialog message handlers

void CTCManualStackSearchCategoryDialog::OnFindTelecommand()
{
	CString  szCategory;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY)->GetWindowText(szCategory);
	if (!GetParent()->SearchTelecommandByCategory(szCategory, IsDlgButtonChecked(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCATEGORY_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CATEGORY_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCATEGORY_ALL, FALSE);
}

void CTCManualStackSearchCategoryDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCategoryDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchSubSystemDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchSubSystemDialog, CTCStackSearchSubSystemDialog)

CTCManualStackSearchSubSystemDialog::CTCManualStackSearchSubSystemDialog() : CTCStackSearchSubSystemDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchSubSystemDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchSubSystemDialog::GetParent());
}

void CTCManualStackSearchSubSystemDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchSubSystemDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchSubSystemDialog, CTCStackSearchSubSystemDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchSubSystemDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSUBSYSTEM_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchSubSystemDialog message handlers

void CTCManualStackSearchSubSystemDialog::OnFindTelecommand()
{
	CString  szSubSystem;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME)->GetWindowText(szSubSystem);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSubSystem);
		m_szSubSystems.Add(szSubSystem);
	}
	if (!GetParent()->SearchTelecommandBySubSystem(szSubSystem, IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_CASE)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_SUBSYSTEM_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL, FALSE);
}

void CTCManualStackSearchSubSystemDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchSubSystemDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchArgumentsDialog, CTCStackSearchArgumentsDialog)

CTCManualStackSearchArgumentsDialog::CTCManualStackSearchArgumentsDialog() : CTCStackSearchArgumentsDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchArgumentsDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchArgumentsDialog::GetParent());
}

void CTCManualStackSearchArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchArgumentsDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchArgumentsDialog, CTCStackSearchArgumentsDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchArgumentsDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHARGUMENTS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchArgumentsDialog message handlers

void CTCManualStackSearchArgumentsDialog::OnFindTelecommand()
{
	CString  szArgument;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT)->GetWindowText(szArgument);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szArgument) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szArgument);
		m_szArguments.Add(szArgument);
	}
	if (!GetParent()->SearchTelecommandByArgument(szArgument, IsDlgButtonChecked(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHARGUMENTS_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_ARGUMENT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHARGUMENTS_ALL, FALSE);
}

void CTCManualStackSearchArgumentsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchArgumentsDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFlagsDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchFlagsDialog, CTCStackSearchFlagsDialog)

CTCManualStackSearchFlagsDialog::CTCManualStackSearchFlagsDialog() : CTCStackSearchFlagsDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchFlagsDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchFlagsDialog::GetParent());
}

void CTCManualStackSearchFlagsDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchFlagsDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchFlagsDialog, CTCStackSearchFlagsDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchFlagsDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchFlagsDialog message handlers

void CTCManualStackSearchFlagsDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByFlags(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_FLAGS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHFLAGS_ALL, FALSE);
}

void CTCManualStackSearchFlagsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchFlagsDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchTCPacketDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchTCPacketDialog, CTCStackSearchTCPacketDialog)

CTCManualStackSearchTCPacketDialog::CTCManualStackSearchTCPacketDialog() : CTCStackSearchTCPacketDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchTCPacketDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchTCPacketDialog::GetParent());
}

void CTCManualStackSearchTCPacketDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchTCPacketDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchTCPacketDialog, CTCStackSearchTCPacketDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchTCPacketDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTCPACKET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchTCPacketDialog message handlers

void CTCManualStackSearchTCPacketDialog::OnFindTelecommand()
{
	INT  nPos;
	CString  szPacket;
	CString  szFormat;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_TAG)->GetWindowText(szPacket), szFormat.Format(STRING(IDS_TCSTACKSEARCHDIALOG_TCPACKET_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szPacket.Find(szFormat)) >= 0; )
	{
		szPacket = szPacket.Left(nPos);
		break;
	}
	if (!GetParent()->SearchTelecommandByTCPacket(szPacket, IsDlgButtonChecked(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHTCPACKET_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_TCPACKET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHTCPACKET_ALL, FALSE);
}

void CTCManualStackSearchTCPacketDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchTCPacketDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchDispatchTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchDispatchTimeDialog, CTCStackSearchDispatchTimeDialog)

CTCManualStackSearchDispatchTimeDialog::CTCManualStackSearchDispatchTimeDialog() : CTCStackSearchDispatchTimeDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchDispatchTimeDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchDispatchTimeDialog::GetParent());
}

void CTCManualStackSearchDispatchTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchDispatchTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchDispatchTimeDialog, CTCStackSearchDispatchTimeDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchDispatchTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchDispatchTimeDialog message handlers

void CTCManualStackSearchDispatchTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByDispatchTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_DISPATCHTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL, FALSE);
}

void CTCManualStackSearchDispatchTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchDispatchTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchReleaseTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchReleaseTimeDialog, CTCStackSearchReleaseTimeDialog)

CTCManualStackSearchReleaseTimeDialog::CTCManualStackSearchReleaseTimeDialog() : CTCStackSearchReleaseTimeDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchReleaseTimeDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchReleaseTimeDialog::GetParent());
}

void CTCManualStackSearchReleaseTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchReleaseTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchReleaseTimeDialog, CTCStackSearchReleaseTimeDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchReleaseTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchReleaseTimeDialog message handlers

void CTCManualStackSearchReleaseTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_RELEASETIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_ALL, FALSE);
}

void CTCManualStackSearchReleaseTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchReleaseTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchReleaseTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchReleaseTimeOffsetDialog, CTCStackSearchReleaseTimeOffsetDialog)

CTCManualStackSearchReleaseTimeOffsetDialog::CTCManualStackSearchReleaseTimeOffsetDialog() : CTCStackSearchReleaseTimeOffsetDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchReleaseTimeOffsetDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchReleaseTimeOffsetDialog::GetParent());
}

void CTCManualStackSearchReleaseTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchReleaseTimeOffsetDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchReleaseTimeOffsetDialog, CTCStackSearchReleaseTimeOffsetDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchReleaseTimeOffsetDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchReleaseTimeOffsetDialog message handlers

void CTCManualStackSearchReleaseTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTimeOffset((DWORD)(1000 * (Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_OFFSET)).GetTime() % SECONDSPERDAY)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_RELEASETIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL, FALSE);
}

void CTCManualStackSearchReleaseTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchReleaseTimeOffsetDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchExecutionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchExecutionTimeDialog, CTCStackSearchExecutionTimeDialog)

CTCManualStackSearchExecutionTimeDialog::CTCManualStackSearchExecutionTimeDialog() : CTCStackSearchExecutionTimeDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchExecutionTimeDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchExecutionTimeDialog::GetParent());
}

void CTCManualStackSearchExecutionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchExecutionTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchExecutionTimeDialog, CTCStackSearchExecutionTimeDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchExecutionTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchExecutionTimeDialog message handlers

void CTCManualStackSearchExecutionTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_EXECUTIONTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL, FALSE);
}

void CTCManualStackSearchExecutionTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchExecutionTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchExecutionTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchExecutionTimeOffsetDialog, CTCStackSearchExecutionTimeOffsetDialog)

CTCManualStackSearchExecutionTimeOffsetDialog::CTCManualStackSearchExecutionTimeOffsetDialog() : CTCStackSearchExecutionTimeOffsetDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchExecutionTimeOffsetDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchExecutionTimeOffsetDialog::GetParent());
}

void CTCManualStackSearchExecutionTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchExecutionTimeOffsetDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchExecutionTimeOffsetDialog, CTCStackSearchExecutionTimeOffsetDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchExecutionTimeOffsetDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchExecutionTimeOffsetDialog message handlers

void CTCManualStackSearchExecutionTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTimeOffset(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET)).GetTime(), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_EXECUTIONTIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL, FALSE);
}

void CTCManualStackSearchExecutionTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchExecutionTimeOffsetDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchAuthorizationDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchAuthorizationDialog, CTCStackSearchAuthorizationDialog)

CTCManualStackSearchAuthorizationDialog::CTCManualStackSearchAuthorizationDialog() : CTCStackSearchAuthorizationDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchAuthorizationDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchAuthorizationDialog::GetParent());
}

void CTCManualStackSearchAuthorizationDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchAuthorizationDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchAuthorizationDialog, CTCStackSearchAuthorizationDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchAuthorizationDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHAUTHORIZATION_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchAuthorizationDialog message handlers

void CTCManualStackSearchAuthorizationDialog::OnFindTelecommand()
{
	CString  szAuthorization;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE)->GetWindowText(szAuthorization);
	if (!GetParent()->SearchTelecommandByAuthorization((szAuthorization == STRING(IDS_TCSTACKSEARCHDIALOG_AUTHORIZATION_AUTOMATIC)) ? TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_AUTHORIZATION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL, FALSE);
}

void CTCManualStackSearchAuthorizationDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchAuthorizationDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchPTVTimeWindowDialog, CTCStackSearchPTVTimeWindowDialog)

CTCManualStackSearchPTVTimeWindowDialog::CTCManualStackSearchPTVTimeWindowDialog() : CTCStackSearchPTVTimeWindowDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchPTVTimeWindowDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchPTVTimeWindowDialog::GetParent());
}

void CTCManualStackSearchPTVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVTimeWindowDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchPTVTimeWindowDialog, CTCStackSearchPTVTimeWindowDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchPTVTimeWindowDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVTimeWindowDialog message handlers

void CTCManualStackSearchPTVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByPTVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL, FALSE);
}

void CTCManualStackSearchPTVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVTimeWindowDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchPTVCheckDialog, CTCStackSearchPTVCheckDialog)

CTCManualStackSearchPTVCheckDialog::CTCManualStackSearchPTVCheckDialog() : CTCStackSearchPTVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchPTVCheckDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchPTVCheckDialog::GetParent());
}

void CTCManualStackSearchPTVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchPTVCheckDialog, CTCStackSearchPTVCheckDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchPTVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVCheckDialog message handlers

void CTCManualStackSearchPTVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPTVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_OFF)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_DISABLED)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV : 0), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVCHECK_ALL, FALSE);
}

void CTCManualStackSearchPTVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchPTVResultDialog, CTCStackSearchPTVResultDialog)

CTCManualStackSearchPTVResultDialog::CTCManualStackSearchPTVResultDialog() : CTCStackSearchPTVResultDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchPTVResultDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchPTVResultDialog::GetParent());
}

void CTCManualStackSearchPTVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVResultDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchPTVResultDialog, CTCStackSearchPTVResultDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchPTVResultDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVRESULT_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPTVResultDialog message handlers

void CTCManualStackSearchPTVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPTVResult((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_GO)) ? TCMANUALSTACKITEM_RESULT_PTV_GO : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_WAIT)) ? TCMANUALSTACKITEM_RESULT_PTV_WAIT : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_FAIL)) ? TCMANUALSTACKITEM_RESULT_PTV_FAIL : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVRESULT_ALL, FALSE);
}

void CTCManualStackSearchPTVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVResultDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchPEVCheckDialog, CTCStackSearchPEVCheckDialog)

CTCManualStackSearchPEVCheckDialog::CTCManualStackSearchPEVCheckDialog() : CTCStackSearchPEVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchPEVCheckDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchPEVCheckDialog::GetParent());
}

void CTCManualStackSearchPEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPEVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchPEVCheckDialog, CTCStackSearchPEVCheckDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchPEVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPEVCheckDialog message handlers

void CTCManualStackSearchPEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPEVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_NONE)) ? ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_OFF)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_DISABLED)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVCHECK_ALL, FALSE);
}

void CTCManualStackSearchPEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPEVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchPEVResultDialog, CTCStackSearchPEVResultDialog)

CTCManualStackSearchPEVResultDialog::CTCManualStackSearchPEVResultDialog() : CTCStackSearchPEVResultDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchPEVResultDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchPEVResultDialog::GetParent());
}

void CTCManualStackSearchPEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPEVResultDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchPEVResultDialog, CTCStackSearchPEVResultDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchPEVResultDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVRESULT_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchPEVResultDialog message handlers

void CTCManualStackSearchPEVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPEVResult((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_GO)) ? TCMANUALSTACKITEM_RESULT_PEV_GO : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_NOGO)) ? TCMANUALSTACKITEM_RESULT_PEV_NOGO : 0), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PEVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVRESULT_ALL, FALSE);
}

void CTCManualStackSearchPEVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPEVResultDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCEVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchCEVTimeWindowDialog, CTCStackSearchCEVTimeWindowDialog)

CTCManualStackSearchCEVTimeWindowDialog::CTCManualStackSearchCEVTimeWindowDialog() : CTCStackSearchCEVTimeWindowDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchCEVTimeWindowDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchCEVTimeWindowDialog::GetParent());
}

void CTCManualStackSearchCEVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCEVTimeWindowDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchCEVTimeWindowDialog, CTCStackSearchCEVTimeWindowDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchCEVTimeWindowDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCEVTimeWindowDialog message handlers

void CTCManualStackSearchCEVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByCEVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CEVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL, FALSE);
}

void CTCManualStackSearchCEVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCEVTimeWindowDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchCEVCheckDialog, CTCStackSearchCEVCheckDialog)

CTCManualStackSearchCEVCheckDialog::CTCManualStackSearchCEVCheckDialog() : CTCStackSearchCEVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchCEVCheckDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchCEVCheckDialog::GetParent());
}

void CTCManualStackSearchCEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCEVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchCEVCheckDialog, CTCStackSearchCEVCheckDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchCEVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchCEVCheckDialog message handlers

void CTCManualStackSearchCEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByCEVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_NONE)) ? ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_OFF)) ? TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_DISABLED)) ? TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVCHECK_ALL, FALSE);
}

void CTCManualStackSearchCEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCEVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchStatusDialog dialog

IMPLEMENT_DYNCREATE(CTCManualStackSearchStatusDialog, CTCStackSearchStatusDialog)

CTCManualStackSearchStatusDialog::CTCManualStackSearchStatusDialog() : CTCStackSearchStatusDialog()
{
	//{{AFX_DATA_INIT(CTCManualStackSearchStatusDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCManualStackView *CTCManualStackSearchStatusDialog::GetParent() CONST
{
	return((CTCManualStackView *)CTCStackSearchStatusDialog::GetParent());
}

void CTCManualStackSearchStatusDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchStatusDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCManualStackSearchStatusDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCManualStackSearchStatusDialog, CTCStackSearchStatusDialog)
	//{{AFX_MSG_MAP(CTCManualStackSearchStatusDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSTATUS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackSearchStatusDialog message handlers

void CTCManualStackSearchStatusDialog::OnFindTelecommand()
{
	CString  szStatus;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_STATUS)->GetWindowText(szStatus); !GetParent()->SearchTelecommandByStatus(szStatus, IsDlgButtonChecked(IDC_TCSTACK_SEARCHSTATUS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSTATUS_ALL)); )
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_STATUS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSTATUS_ALL, FALSE);
}

void CTCManualStackSearchStatusDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchStatusDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackToolBar

IMPLEMENT_DYNCREATE(CTCManualStackToolBar, CDisplayToolBar)

CTCManualStackToolBar::CTCManualStackToolBar() : CDisplayToolBar()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCManualStackToolBar, CDisplayToolBar)
	//{{AFX_MSG_MAP(CTCManualStackToolBar)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackToolBar message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackStatusBar

IMPLEMENT_DYNCREATE(CTCManualStackStatusBar, CDisplayStatusBar)

CTCManualStackStatusBar::CTCManualStackStatusBar() : CDisplayStatusBar()
{
	m_bPanesColor = TRUE;
}

BOOL CTCManualStackStatusBar::SetIndicators(CONST UINT *pPanesID, INT nCount)
{
	INT  nIndex;
	CRect  rPane;
	CString  szPane;
	CToolInfo  cToolInfo;
	CDisplayLock  cLock(this);

	if (CDisplayStatusBar::SetIndicators(pPanesID, nCount))
	{
		if (CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE) >= 0)
		{
			szPane.Format(STRING(IDS_TCMANUALSTACK_STATUSBAR_UPDATEMESSAGE), (UINT)-1);
			SetPaneInfo(CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE), ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE, SBPS_NOBORDERS | SBPS_STRETCH, CalcPaneWidth(szPane));
		}
		if (!IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			m_wndToolTip.Create(this, TTS_ALWAYSTIP | TTS_NOPREFIX | TTS_BALLOON);
			SetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE, GetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE) | CS_DROPSHADOW);
		}
		if (IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_PTVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_PTVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_PTVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_PEVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_PEVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_PEVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_CEVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_CEVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_CEVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_STATEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_STATEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_STATEPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_MODEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_MODEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCMANUALSTACK_STATUSBAR_MODEPANE);
					break;
				}
			}
			m_wndToolTip.SetMaxTipWidth(GetSystemMetrics(SM_CXSCREEN));
			m_wndToolTip.Activate(TRUE);
		}
		return TRUE;
	}
	return FALSE;
}

CTCManualStackWnd *CTCManualStackStatusBar::GetParent() CONST
{
	return((CTCManualStackWnd *)CDisplayStatusBar::GetParent());
}

BEGIN_MESSAGE_MAP(CTCManualStackStatusBar, CDisplayStatusBar)
	//{{AFX_MSG_MAP(CTCManualStackStatusBar)
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipNotify)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackStatusBar message handlers

void CTCManualStackStatusBar::OnPaint()
{
	INT  nIndex;
	RECT  rPane;
	CToolInfo  cToolInfo;

	for (CDisplayStatusBar::OnPaint(); IsWindow(m_wndToolTip.GetSafeHwnd()); )
	{
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_PTVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_PTVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_PEVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_PEVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_CEVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_CEVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_STATEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_STATEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCMANUALSTACK_STATUSBAR_MODEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCMANUALSTACK_STATUSBAR_MODEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		break;
	}
}

void CTCManualStackStatusBar::OnMouseMove(UINT nFlags, CPoint point)
{
	MSG  sMsg;

	if (IsWindow(m_wndToolTip.GetSafeHwnd()))
	{
		CopyMemory(&sMsg, GetCurrentMessage(), sizeof(MSG));
		m_wndToolTip.RelayEvent(&sMsg);
	}
	CDisplayStatusBar::OnMouseMove(nFlags, point);
}

BOOL CTCManualStackStatusBar::OnToolTipNotify(UINT nID, NMHDR *pNotifyInfo, LRESULT *pResult)
{
	TOOLTIPTEXT  *pToolTipInfo = (TOOLTIPTEXT *)pNotifyInfo;

	switch (pNotifyInfo->idFrom)
	{
	case ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_UPLINKPANE);
	return TRUE;
	}
	case ID_TCMANUALSTACK_STATUSBAR_PTVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_PTVPANE);
	return TRUE;
	}
	case ID_TCMANUALSTACK_STATUSBAR_PEVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_PEVPANE);
	return TRUE;
	}
	case ID_TCMANUALSTACK_STATUSBAR_CEVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_CEVPANE);
	return TRUE;
	}
	case ID_TCMANUALSTACK_STATUSBAR_STATEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_STATEPANE);
	return TRUE;
	}
	case ID_TCMANUALSTACK_STATUSBAR_MODEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCMANUALSTACK_STATUSBAR_MODEPANE);
	return TRUE;
	}
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackToolTip

IMPLEMENT_DYNCREATE(CTCManualStackToolTip, CDisplayToolTip)

CTCManualStackToolTip::CTCManualStackToolTip() : CDisplayToolTip()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCManualStackToolTip, CDisplayToolTip)
	//{{AFX_MSG_MAP(CTCManualStackToolTip)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackToolTip message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackView

IMPLEMENT_DYNCREATE(CTCManualStackView, CTextView)

CTCManualStackView::CTCManualStackView() : CTextView()
{
	m_nChecks = 0;
	m_nArguments = -1;
	m_nSearchIndex = -1;
	m_nClipboardFormat = 0;
	m_bProperties = FALSE;
	m_bAllArguments = FALSE;
	m_bFullViewMode = FALSE;
	m_nMiscellaneousOptions = 0;
	m_nTelecommandingMode = 0;
	m_nTelecommandingFlags = 0;
	m_nTelecommandingState = 0;
	m_nTelecommandingUplinkState = 0;
	m_bTelecommandingInterlockMode = TRUE;
	m_bTelecommandingReleaseWaitMode = FALSE;
	m_bTelecommandingAutoRejectionMode = FALSE;
	m_tDispatchTimeWindow = 0;
	m_tDefaultReleaseTimeWindow = 0;
	m_sizeFlagSymbols.cx = 0;
	m_sizeFlagSymbols.cy = 0;
	m_sizeAlertSymbols.cx = 0;
	m_sizeAlertSymbols.cy = 0;
	m_sizeResultSymbols.cx = 0;
	m_sizeResultSymbols.cy = 0;
	m_sizeCheckFlagSymbols.cx = 0;
	m_sizeCheckFlagSymbols.cy = 0;
	m_nBackgroundColor[0] = VGA_COLOR_GRAY;
	m_nBackgroundColor[1] = GetSysColor(COLOR_WINDOW);
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_NONE, GetSysColor(COLOR_WINDOW));
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_ONSTACK, GetSysColor(COLOR_WINDOW));
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_ARMED, VGA_COLOR_YELLOW);
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_DISPATCHED, VGA_COLOR_LTRED);
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_RELEASED, VGA_COLOR_GREEN);
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_NOTRELEASED, VGA_COLOR_RED);
	m_nStatusColors.SetAtGrow(TCMANUALSTACKITEM_STATUS_FAILEDRELEASE, VGA_COLOR_RED);
	m_pTCProcessEngine = (CTCProcessEngine *)NULL;
	m_pTCEnvironment = (CTCEnvironment *)NULL;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
}

BOOL CTCManualStackView::Create(CWnd *pParentWnd, DWORD dwStyle)
{
	if (CTextView::Create(pParentWnd, CRect(0, 0, 0, 0), dwStyle))
	{
		SetTextSpacings(1, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::SetLayout(CONST CUIntArray &nColumns)
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nWidths;
	CUIntArray  nTitleItems;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nTitleItems.Copy(nColumns); !nTitleItems.GetSize(); )
	{
		if (TCMANUALSTACK_TITLEITEM_NUMBER & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_NUMBER);
		if (TCMANUALSTACK_TITLEITEM_NAME & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_NAME);
		if (TCMANUALSTACK_TITLEITEM_DESCRIPTION & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_DESCRIPTION);
		if (TCMANUALSTACK_TITLEITEM_CATEGORY & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_CATEGORY);
		if (TCMANUALSTACK_TITLEITEM_SUBSYSTEM & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_SUBSYSTEM);
		if (TCMANUALSTACK_TITLEITEM_ARGUMENTS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_ARGUMENTS);
		if (TCMANUALSTACK_TITLEITEM_FLAGS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_FLAGS);
		if (TCMANUALSTACK_TITLEITEM_TCPACKET & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_TCPACKET);
		if (TCMANUALSTACK_TITLEITEM_DISPATCHTIME & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_DISPATCHTIME);
		if (TCMANUALSTACK_TITLEITEM_RELEASETIME & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_RELEASETIME);
		if (TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET);
		if (TCMANUALSTACK_TITLEITEM_EXECUTIONTIME & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_EXECUTIONTIME);
		if (TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
		if (TCMANUALSTACK_TITLEITEM_AUTHORIZATION & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_AUTHORIZATION);
		if (TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW);
		if (TCMANUALSTACK_TITLEITEM_PTVCHECKS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_PTVCHECKS);
		if (TCMANUALSTACK_TITLEITEM_PTVRESULT & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_PTVRESULT);
		if (TCMANUALSTACK_TITLEITEM_PEVCHECKS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_PEVCHECKS);
		if (TCMANUALSTACK_TITLEITEM_PEVRESULT & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_PEVRESULT);
		if (TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW);
		if (TCMANUALSTACK_TITLEITEM_CEVCHECKS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_CEVCHECKS);
		if (TCMANUALSTACK_TITLEITEM_STATUS & TCMANUALSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCMANUALSTACK_TITLEITEM_STATUS);
		break;
	}
	for (nIndex = 0, nCount = (LookupColumnsName(nTitleItems, szColumns) && CalcColumnsWidth(nTitleItems, nWidths) && SetColumns(szColumns, nWidths)) ? (INT)nTitleItems.GetSize() : -1, EnableFullViewMode(m_bFullViewMode); nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nTitleItems.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCManualStackView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (LookupColumnsName(nColumns, szColumns) && SetColumns(szColumns, nWidths)) ? (INT)nColumns.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nColumns.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCManualStackView::GetLayout(CUIntArray &nColumns) CONST
{
	CUIntArray  nWidths;

	return GetLayout(nColumns, nWidths);
}
BOOL CTCManualStackView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (GetColumns(szColumns, nWidths)) ? (INT)szColumns.GetSize() : -1, nColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nColumns.Add(LookupColumnName(szColumns.GetAt(nIndex)));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCManualStackView::SetListTitleFont(CFont *pFont)
{
	return CTextView::SetTitleFont(pFont);
}
BOOL CTCManualStackView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return CTextView::SetTitleFont(plfFont);
}

BOOL CTCManualStackView::GetListTitleFont(CFont *pFont) CONST
{
	return CTextView::GetTitleFont(pFont);
}
BOOL CTCManualStackView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTitleFont(plfFont);
}

BOOL CTCManualStackView::SetListItemsFont(CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListItemsFont(&lfFont) : FALSE);
}
BOOL CTCManualStackView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	CTextViewLock  cLock(this);

	if (CTextView::SetTextFont(plfFont))
	{
		SetTextSpacings(max(LOWORD(GetTextSpacings()), 1), max(HIWORD(GetTextSpacings()), 1));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::GetListItemsFont(CFont *pFont) CONST
{
	return CTextView::GetTextFont(pFont);
}
BOOL CTCManualStackView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTextFont(plfFont);
}

BOOL CTCManualStackView::SetGridBackgroundColor(COLORREF nColor)
{
	m_nBackgroundColor[0] = nColor;
	return TRUE;
}

BOOL CTCManualStackView::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	nColor = m_nBackgroundColor[0];
	return TRUE;
}

BOOL CTCManualStackView::SetAlertColors(CONST CUIntArray &nColors)
{
	CTextViewLock  cLock(this);

	m_nAlertColors.Copy(nColors);
	return TRUE;
}

BOOL CTCManualStackView::GetAlertColors(CUIntArray &nColors) CONST
{
	CTextViewLock  cLock(this);

	nColors.Copy(m_nAlertColors);
	return TRUE;
}

BOOL CTCManualStackView::SetListOptions(INT nArguments, BOOL bAll)
{
	CTextViewLock  cLock(this);

	m_nArguments = nArguments;
	m_bAllArguments = bAll;
	return TRUE;
}

BOOL CTCManualStackView::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	CTextViewLock  cLock(this);

	nArguments = m_nArguments;
	bAll = m_bAllArguments;
	return TRUE;
}

BOOL CTCManualStackView::SetListUpdateChecks(INT nCount)
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = m_nChecks = nCount, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			pItem->SetResult(TCMANUALSTACKITEM_RESULT_NONE);
			continue;
		}
	}
	return TRUE;
}

BOOL CTCManualStackView::GetListUpdateChecks(INT &nCount) CONST
{
	nCount = m_nChecks;
	return TRUE;
}

BOOL CTCManualStackView::SetMiscellaneousOptions(UINT nOptions)
{
	m_nMiscellaneousOptions = nOptions;
	return TRUE;
}

BOOL CTCManualStackView::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	nOptions = m_nMiscellaneousOptions;
	return TRUE;
}

BOOL CTCManualStackView::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CTextViewLock  cLock(this);

	m_tDefaultReleaseTimeWindow = tTimeWindow;
	return TRUE;
}

BOOL CTCManualStackView::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	CTextViewLock  cLock(this);

	tTimeWindow = m_tDefaultReleaseTimeWindow;
	return TRUE;
}

BOOL CTCManualStackView::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CTextViewLock  cLock(this);

	m_tDispatchTimeWindow = tTimeWindow;
	return TRUE;
}

BOOL CTCManualStackView::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	CTextViewLock  cLock(this);

	tTimeWindow = m_tDispatchTimeWindow;
	return TRUE;
}

BOOL CTCManualStackView::EnableFullViewMode(BOOL bEnable)
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;
	CTextViewLock  cLock(this);

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), m_bFullViewMode = bEnable; nColumn < nColumns; nColumn++)
	{
		m_wndContentCtrl.m_nColumnsFormat.SetAtGrow(nColumn, (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCMANUALSTACK_TITLEITEM_NUMBER || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_FLAGS || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PTVCHECKS || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PTVRESULT || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PEVCHECKS || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PEVRESULT || LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_CEVCHECKS || !bEnable) ? (GetColumnFormat(nColumn) | DT_SINGLELINE | DT_END_ELLIPSIS) : (GetColumnFormat(nColumn) & ~(DT_SINGLELINE | DT_END_ELLIPSIS)));
		m_wndContentCtrl.m_bColumnsFormat.SetAtGrow(nColumn, TRUE);
	}
	RecalcContent();
	return TRUE;
}

BOOL CTCManualStackView::IsFullViewModeEnabled() CONST
{
	return m_bFullViewMode;
}

BOOL CTCManualStackView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCManualStackView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCManualStackView::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	CTextViewLock  cLock(this);

	m_pTCProcessEngine = pTCProcessEngine;
	m_pTCEnvironment = pTCEnvironment;
	return TRUE;
}

BOOL CTCManualStackView::StopTelecommanding()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (m_nMiscellaneousOptions & TCMANUALSTACK_OPTION_UNDISPATCHONEXIT) ? (INT)m_pItems[0].GetSize() : 0, m_pTCProcessEngine = (CTCProcessEngine *)NULL, m_pTCEnvironment = (CTCEnvironment *)NULL; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)))
		{
			if ((pItem[1] = new CTCManualStackItem))
			{
				if (pItem[1]->Copy(pItem[0]))
				{
					ResetTelecommand(pItem[1]);
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
			}
		}
	}
	if (pItems.GetSize() > 0) ReloadTelecommands(pItems);
	return TRUE;
}

BOOL CTCManualStackView::SetTelecommandingMode(UINT nMode)
{
	m_nTelecommandingMode = nMode;
	return TRUE;
}

UINT CTCManualStackView::GetTelecommandingMode() CONST
{
	return m_nTelecommandingMode;
}

BOOL CTCManualStackView::SetTelecommandingChecks(UINT nFlags)
{
	m_nTelecommandingFlags = nFlags;
	return TRUE;
}

UINT CTCManualStackView::GetTelecommandingChecks() CONST
{
	return m_nTelecommandingFlags;
}

BOOL CTCManualStackView::SetTelecommandingState(UINT nState)
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	CTextViewLock  cLock(this);

	for (m_nTelecommandingState = nState & ~TCMANUALSTACK_STATE_EMPTY; m_pItems[0].GetSize() > 0; )
	{
		if ((nState & TCMANUALSTACK_STATE_DEFAULT) == TCMANUALSTACK_STATE_DEFAULT)
		{
			if ((nState & TCMANUALSTACK_STATE_DISABLED) != TCMANUALSTACK_STATE_DISABLED)
			{
				for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
				{
					if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
					{
						if (pItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ONSTACK  &&  pItem[0]->IsSelected())
						{
							pItem[0]->Select(FALSE);
							continue;
						}
					}
				}
				UpdateTelecommands();
				break;
			}
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED && ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && ((tReleaseTime[0] > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && pItem[0]->GetReleaseTime() > 0 && pItem[0]->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()))) || (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2])))
					{
						pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
						continue;
					}
				}
			}
			UpdateContent();
			break;
		}
		if (nState & TCMANUALSTACK_STATE_SUSPENDED)
		{
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED && ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && ((tReleaseTime[0] > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && pItem[0]->GetReleaseTime() > 0 && pItem[0]->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()))) || (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2])))
					{
						pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
						continue;
					}
				}
			}
			UpdateContent();
			break;
		}
		if (nState & TCMANUALSTACK_STATE_STOPPED)
		{
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED)
					{
						if ((pItem[1] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
						{
							if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0)
							{
								ResetTelecommand(pItem[0]);
								continue;
							}
							delete pItem[1];
						}
						continue;
					}
					if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) break;
				}
			}
			if (pItems.GetSize() > 0) GetTCService()->DispatchTelecommands(pItems, TRUE);
			UpdateContent();
		}
		break;
	}
	return TRUE;
}

UINT CTCManualStackView::GetTelecommandingState() CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nState;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nState = m_nTelecommandingState; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
			{
				nItem = nItems;
				break;
			}
			if (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) break;
		}
	}
	return((nItem == nItems) ? (nState | TCMANUALSTACK_STATE_EMPTY) : nState);
}

BOOL CTCManualStackView::SetTelecommandingUplinkState(UINT nState)
{
	m_nTelecommandingUplinkState = nState;
	return TRUE;
}

UINT CTCManualStackView::GetTelecommandingUplinkState() CONST
{
	return m_nTelecommandingUplinkState;
}

BOOL CTCManualStackView::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	m_bTelecommandingInterlockMode = bEnable;
	return TRUE;
}

BOOL CTCManualStackView::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_bTelecommandingInterlockMode;
}

BOOL CTCManualStackView::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	m_bTelecommandingReleaseWaitMode = bEnable;
	return TRUE;
}

BOOL CTCManualStackView::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_bTelecommandingReleaseWaitMode;
}

BOOL CTCManualStackView::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	m_bTelecommandingAutoRejectionMode = bEnable;
	return TRUE;
}

BOOL CTCManualStackView::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_bTelecommandingAutoRejectionMode;
}

BOOL CTCManualStackView::SetTelecommands(CONST CTCSavedStack &pStack)
{
	INT  nOffset;
	INT  nItem[2];
	INT  nItems[2];
	INT  nIndex[2];
	INT  nCount[2];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nState;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCItem  *pStackItem;
	CTimeTag  tLoadTime;
	CUIntArray  nStackItemIDs;
	CTCManualStackItem  *pItem;
	CTCManualStackItems  pItems;
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCFunction  *pFunction[2];
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCProcedure  *pProcedure;
	CDatabaseTCPacketParameter  *pPacketParameter[2];
	CDatabaseTCFunctionElement  *pFunctionElement[4];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (INT)pStack.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem = pStack.GetAt(nItem[0])) && pStackItem->GetLoadTime() == 0)
		{
			for (nItem[1] = 0, nItems[1] = pStack.Collect(nItem[0], nStackItemIDs); nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pStackItem = pStack.GetAt(nStackItemIDs.GetAt(nItem[1]))))
				{
					pStackItem->SetLoadTime(tLoadTime.GetTime());
					continue;
				}
			}
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem = pStack.GetAt(nItem[0])))
		{
			for (pStackItem->SetInterlock((GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pStackItem->GetInterlock(), nState)) ? pStackItem->GetInterlock() : EMPTYSTRING), pStackItem->GetReleaseInterlock(szInterlock, bInterlock); !GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock, nState); )
			{
				pStackItem->SetReleaseInterlock(EMPTYSTRING);
				break;
			}
			if ((pFunction[0] = (pStackItem->GetType() == TCMANUALSTACKITEM_TYPE_FUNCTION) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pStackItem->GetName())) : (CDatabaseTCFunction *)NULL) && pFunction[0]->GetTCID() == pStackItem->GetTCID())
			{
				if ((pPacket[1] = ((pPacket[0] = new CDatabaseTCPacket) && pStackItem->GetTCPacket(pPacket[0])) ? GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pPacket[0]->GetTag())) : (CDatabaseTCPacket *)NULL) && pPacket[0]->GetAPID() == pPacket[1]->GetAPID())
				{
					for (nParameter = 0, nParameters = (INT)pPacket[0]->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pPacketParameter[0] = pPacket[0]->GetAt(nParameter)))
						{
							if ((pPacketParameter[1] = pPacket[1]->GetAt(nParameter)))
							{
								if (pPacketParameter[0]->GetTag() != pPacketParameter[1]->GetTag() || ((pPacketParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_AUTO | TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER)) != (pPacketParameter[1]->GetAttributes() & ~(TCPARAMETER_VTYPE_AUTO | TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER)) && ((pPacketParameter[0]->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 || (pPacketParameter[1]->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 || (pPacketParameter[0]->GetAttributes() & ~TCPARAMETER_VTYPE_RAW) != (pPacketParameter[1]->GetAttributes() & ~TCPARAMETER_VTYPE_RAW))) || pPacketParameter[0]->GetWidth() != pPacketParameter[1]->GetWidth()) break;
								continue;
							}
							break;
						}
					}
					for (nElement = 0, nElements = (INT)pFunction[0]->GetSize(), nOffset = 0; nElement < nElements; nElement++)
					{
						if ((pFunctionElement[1] = ((pFunctionElement[0] = pFunction[0]->GetAt(nElement))) ? pStackItem->GetAt(nElement + nOffset) : (CDatabaseTCFunctionElement *)NULL))
						{
							if ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement[0]->GetRef())) && (pParameter->GetAttributes() & TCPARAMETER_VTYPE_COMMANDID))
							{
								if ((pFunction[1] = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pFunctionElement[0]->GetConstValueAsText()))))
								{
									for (nIndex[0] = 0, nCount[0] = (INT)pFunction[1]->GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
									{
										if ((pFunctionElement[1] = pFunction[1]->GetAt(nIndex[0])))
										{
											if ((pFunctionElement[2] = pStackItem->GetAt(nElement + nOffset + nIndex[0])))
											{
												if (pFunctionElement[1]->GetName() != pFunctionElement[2]->GetName() || (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pFunctionElement[2]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) || pFunctionElement[1]->GetWidth() != pFunctionElement[2]->GetWidth())
												{
													for (nIndex[1] = 0; nIndex[0] - nIndex[1] - 1 >= 0; nIndex[1]++)
													{
														if ((pFunctionElement[2] = pFunction[1]->GetAt(nIndex[0] - nIndex[1] - 1)))
														{
															if (pFunctionElement[2]->GetGroupSize() > 0 && pFunctionElement[2]->GetGroupSize() == nIndex[1])
															{
																if ((pFunctionElement[3] = pStackItem->GetAt(nElement + nOffset + nIndex[0] + pFunctionElement[2]->GetGroupSize()*(nCount[1] = ((pFunctionElement[2]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT) ? (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[2]->GetAttributes(), pFunctionElement[2]->GetWidth(), pFunctionElement[2]->GetConstValue()) : (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[2]->GetAttributes(), pFunctionElement[2]->GetConstValue())))))
																{
																	if (pFunctionElement[1]->GetName() == pFunctionElement[3]->GetName() && (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == (pFunctionElement[3]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) && pFunctionElement[1]->GetWidth() == pFunctionElement[3]->GetWidth())
																	{
																		nOffset += pFunctionElement[2]->GetGroupSize()*nCount[1];
																		break;
																	}
																}
																nIndex[1] = nIndex[0];
																break;
															}
														}
													}
													if (nIndex[1] > nIndex[0] - 1) break;
												}
												continue;
											}
										}
										break;
									}
									if (nIndex[0] == nCount[0])
									{
										nOffset += nCount[0] - 1;
										continue;
									}
								}
								break;
							}
							if (pFunctionElement[0]->GetName() != pFunctionElement[1]->GetName() || (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) || pFunctionElement[0]->GetWidth() != pFunctionElement[1]->GetWidth())
							{
								for (nIndex[1] = 0; nElement - nIndex[1] - 1 >= 0; nIndex[1]++)
								{
									if ((pFunctionElement[1] = pFunction[0]->GetAt(nElement - nIndex[1] - 1)))
									{
										if (pFunctionElement[1]->GetGroupSize() > 0 && pFunctionElement[1]->GetGroupSize() == nIndex[1])
										{
											if ((pFunctionElement[2] = pStackItem->GetAt(nElement + nOffset + pFunctionElement[1]->GetGroupSize()*(nCount[1] = ((pFunctionElement[1]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT) ? (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[1]->GetAttributes(), pFunctionElement[1]->GetWidth(), pFunctionElement[1]->GetConstValue()) : (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[1]->GetAttributes(), pFunctionElement[1]->GetConstValue())))))
											{
												if (pFunctionElement[0]->GetName() == pFunctionElement[2]->GetName() && (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == (pFunctionElement[2]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) && pFunctionElement[0]->GetWidth() == pFunctionElement[2]->GetWidth())
												{
													nOffset += pFunctionElement[1]->GetGroupSize()*nCount[1];
													break;
												}
											}
											nIndex[1] = nElement;
											break;
										}
									}
								}
								if (nIndex[1] > nElement - 1) break;
							}
							continue;
						}
						break;
					}
					if (nParameter == nParameters  &&  nElement == nElements)
					{
						if ((pItem = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
						{
							if (pItem->CTCItem::Copy(pStackItem) && pItems.Add(pItem) >= 0)
							{
								delete pPacket[0];
								continue;
							}
							delete pItem;
						}
					}
				}
				delete pPacket[0];
			}
			if ((pProcedure = (pStackItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE) ? GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pStackItem->GetName())) : (CDatabaseTCProcedure *)NULL))
			{
				if ((pItem = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
				{
					if (pItem->CTCItem::Copy(pStackItem) && pItems.Add(pItem) >= 0) continue;
					delete pItem;
				}
			}
		}
		pItems.RemoveAll();
		break;
	}
	return LoadTelecommands(pItems);
}

BOOL CTCManualStackView::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pStackItem;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), pStack.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED || bAll))
		{
			if ((pItem[1] = new CTCManualStackItem))
			{
				if ((pStackItem = new CTCItem))
				{
					if (pItem[1]->Copy(pItem[0]))
					{
						ResetTelecommand(pItem[1]);
						if (pStackItem->Copy(pItem[1]) && pStack.Add(pStackItem) >= 0)
						{
							delete pItem[1];
							continue;
						}
					}
					delete pStackItem;
				}
				delete pItem[1];
			}
			break;
		}
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackView::LoadTelecommands(CONST CTCItems &pItems, BOOL bRedraw)
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CTCManualStackItem  *pStackItem;
	CTCManualStackItems  pStackItems;

	for (nItem = 0, nItems = (INT)pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = pItems.GetAt(nItem)) && pItem->GetSourceType() == TCITEM_SOURCETYPE_MANUALSTACK  &&  pItem->IsHost())
		{
			if ((pStackItem = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
			{
				if (pStackItem->CTCItem::Copy(pItem) && pStackItems.Add(pStackItem) >= 0) continue;
				delete pStackItem;
			}
			break;
		}
	}
	return((nItem == nItems) ? LoadTelecommands(pStackItems, -1, FALSE, FALSE, FALSE, bRedraw) : FALSE);
}
BOOL CTCManualStackView::LoadTelecommands(CONST CTCManualStackItems &pItems, BOOL bReload, BOOL bBefore, BOOL bAfter, BOOL bRedraw)
{
	return LoadTelecommands(pItems, -1, bReload, bBefore, bAfter, bRedraw);
}
BOOL CTCManualStackView::LoadTelecommands(CONST CTCManualStackItems &pItems, INT nIndex, BOOL bReload, BOOL bBefore, BOOL bAfter, BOOL bRedraw)
{
	INT  nItem[4];
	INT  nItems[4];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	UINT  nExecutionOBRT;
	BOOL  bArguments;
	BOOL  bAfterDispatch;
	BOOL  bLoadTelecommands;
	BOOL  bEarlierExecution;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CTimeTag  tArmTime;
	CTimeTag  tDispatchTime;
	CTimeTag  tStackLoadTime;
	CTimeTag  tReleaseTime[3];
	CTimeTag  tExecutionTime[2];
	CTimeSpan  tReleaseInterval;
	CUIntArray  nGroupItemsIDs;
	CDatabaseTCPacket  cPacket;
	CTCManualStackItem  *pItem[4];
	CTCManualStackItems  pStackItems[4];
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (pStackItems[0].Copy(&pItems)) ? (INT)pStackItems[0].GetSize() : -1, bLoadTelecommands = TRUE; nItem[0] < nItems[0] && nIndex < 0 && bReload; nItem[0]++)
	{
		if ((pItem[1] = ((pItem[0] = pStackItems[0].GetAt(nItem[0]))) ? m_pItems[0].GetAt((nItem[1] = (nIndex < 0) ? m_pItems[0].Find(pItem[0]->GetComputerName(), pItem[0]->GetSourceType(), pItem[0]->GetName(), pItem[0]->GetMembership(), pItem[0]->GetMembershipID(), -1, pItem[0]->GetLoadTime()) : nIndex)) : (CTCManualStackItem *)NULL) && pItem[0]->GetStatus() == pItem[1]->GetStatus())
		{
			nIndex = (nIndex >= 0) ? min(nItem[1], nIndex) : nItem[1];
			continue;
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0] && bReload; nItem[0]++)
	{
		for (nItem[1] = 0, nItems[1] = ((pItem[0] = pStackItems[0].GetAt(nItem[0]))) ? m_pItems[0].Collect(m_pItems[0].Find(pItem[0]->GetComputerName(), pItem[0]->GetSourceType(), pItem[0]->GetName(), pItem[0]->GetMembership(), pItem[0]->GetMembershipID(), -1, pItem[0]->GetLoadTime()), nGroupItemsIDs) : 0; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[1]) - nItem[1])))
			{
				DeleteTelecommand(nGroupItemsIDs.GetAt(nItem[1]) - nItem[1]);
				delete pItem[1];
			}
			nIndex = (nIndex > (INT)nGroupItemsIDs.GetAt(nItem[1]) - nItem[1]) ? (nIndex - 1) : nIndex;
		}
	}
	for (nItem[1] = 0, nItems[1] = (nIndex >= 0 && (bBefore || bAfter)) ? (INT)m_pItems[0].GetSize() : 0, nIndex = (nIndex < 0) ? (INT)m_pItems[0].GetSize() : nIndex; nItem[1] < nItems[1]; nItem[1]++)
	{
		if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) != (CTCManualStackItem *)NULL  &&  pItem[1]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
		{
			nIndex = (m_pItems[0].Collect(nIndex, nGroupItemsIDs) > 0) ? ((bBefore) ? max((INT)nGroupItemsIDs.GetAt(0), nItem[1]) : max((INT)nGroupItemsIDs.GetAt(nGroupItemsIDs.GetUpperBound()) + 1, nItem[1])) : nIndex;
			break;
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])))
		{
			if (((pItem[0]->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) && (pItem[0]->GetReleaseTime() == 0 || bReload))
			{
				for (pItem[0]->SetReleaseTime((!pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval)) ? ((pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? (((pItem[1] = (pItem[0]->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) ? pStackItems[0].GetAt(nItem[0] - 1) : (CTCManualStackItem *)NULL) && pItem[1]->GetReleaseTime() > 0) ? (pItem[1]->GetReleaseTime() + 1000 * (TIMETAG)dwReleaseOffset) : ((pItem[0]->GetDispatchTime() > 0) ? (pItem[0]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset) : (tStackLoadTime.GetTime() + 1000 * (TIMETAG)dwReleaseOffset))) : tReleaseTime[2]) : tReleaseTime[0]); pItem[0]->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED; )
				{
					if (pItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_DISPATCHED)
					{
						pItem[0]->SetArmTime(tArmTime);
						pItem[0]->SetDispatchTime(tDispatchTime);
						pItem[0]->SetStatus(TCMANUALSTACKITEM_STATUS_DISPATCHED);
					}
					break;
				}
			}
			if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED)
			{
				if (pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED)
				{
					if (!pItem[0]->GetExecutionTime(tExecutionTime[0]))
					{
						if (pItem[0]->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution))
						{
							pItem[0]->SetExecutionTime(((pItem[1] = (pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? pStackItems[0].GetAt(nItem[0] - 1) : (CTCManualStackItem *)NULL) && pItem[1]->GetExecutionTime(tExecutionTime[1])) ? ((!bEarlierExecution) ? (tExecutionTime[1].GetTime() + 1000 * (TIMETAG)dwExecutionOffset) : (tExecutionTime[1].GetTime() - 1000 * (TIMETAG)dwExecutionOffset)) : ((!bEarlierExecution) ? (pItem[0]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwExecutionOffset) : (pItem[0]->GetDispatchTime().GetTime() - 1000 * (TIMETAG)dwExecutionOffset)));
							continue;
						}
						if (pItem[0]->GetExecutionOBRT(nExecutionOBRT))
						{
							pItem[0]->SetExecutionTime((GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime[0])) ? tExecutionTime[0] : 0);
							continue;
						}
					}
				}
			}
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])) && pItem[0]->GetReleaseTime() > 0)
		{
			for (nElement = 0, nElements = (INT)pItem[0]->GetSize(), pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_NONE), pItem[0]->GetMembershipParameters(pParameters), bArguments = FALSE; nElement < nElements; nElement++)
			{
				if ((pFunctionElement[0] = pItem[0]->GetAt(nElement)))
				{
					if (!pFunctionElement[0]->GetConstValueAsText().IsEmpty())
					{
						if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
						{
							if (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))
							{
								if ((pParameter = pParameters.GetAt(pParameters.Find(pFunctionElement[0]->GetConstValueSource()))))
								{
									if ((pFunctionElement[1] = new CDatabaseTCFunctionElement))
									{
										if (pFunctionElement[1]->Copy(pFunctionElement[0]))
										{
											pFunctionElement[1]->SetAttributes(pParameter->GetAttributes());
											pFunctionElement[1]->SetConstValueAsText(pParameter->GetConstValueAsText());
											if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[1], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
											{
												delete pFunctionElement[1];
												continue;
											}
										}
										delete pFunctionElement[1];
									}
								}
								break;
							}
							if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[0], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
					}
					if (pFunctionElement[0]->GetConstValueAsText().IsEmpty())
					{
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							bArguments = TRUE;
							continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
				}
				break;
			}
			for (nParameter = 0, nParameters = (pItem[0]->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)))
				{
					if (!pPacketParameter->GetConstValueAsText().IsEmpty())
					{
						if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							break;
						}
						if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
					}
					if (pPacketParameter->GetConstValueAsText().IsEmpty())
					{
						if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							bArguments = TRUE;
							continue;
						}
						if (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
				}
				break;
			}
			if (nElement != nElements || nParameter != nParameters)
			{
				pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_ARGUMENTS, STRING(IDS_TCMANUALSTACK_MESSAGE_ARGUMENTS_FAILURE));
				pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED);
				pItem[0]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
			}
			if (!CheckTelecommandReleaseWindow(tStackLoadTime, pItem[0]))
			{
				if (!pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
					pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					pItem[0]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
				}
			}
			if (!CheckTelecommandExecutionTime(tStackLoadTime, pItem[0]))
			{
				pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_EXECUTIONTIME, (pItem[0]->GetExecutionTime(tExecutionTime[0]) && tExecutionTime[0] <= tExecutionTime[1]) ? STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTIONTIME_EXPIRED) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTIONTIME_ILLEGAL));
				pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED);
				pItem[0]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
			}
			if (pItem[0]->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED)
			{
				if ((pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem[0]->GetReleaseTime() == 0) || (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK  &&  GetTelecommandingState() != TCMANUALSTACK_STATE_DEFAULT))
				{
					pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_AUTHORIZATION, STRING(IDS_TCMANUALSTACK_MESSAGE_DISPATCH_FAILURE));
					pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					pItem[0]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
				}
			}
			if (pItem[0]->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_INFORMATION, 0, (pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) ? STRING(IDS_TCMANUALSTACK_MESSAGE_FIRSTSTEP_INFORMATION) : STRING(IDS_TCMANUALSTACK_MESSAGE_SECONDSTEP_INFORMATION));
			if (bArguments) pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_INFORMATION, 0, STRING(IDS_TCMANUALSTACK_MESSAGE_ARGUMENTS_INFORMATION));
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])))
		{
			for (nItem[2] = 0, nItems[2] = pStackItems[0].Collect(nItem[0], nGroupItemsIDs); nItem[2] < nItems[2]; nItem[2]++)
			{
				if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))) && pItem[2]->GetReleaseTime() > 0 && pItem[2]->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE) break;
				continue;
			}
			if (((pItem[0]->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) && nItem[2] == nItems[2])
			{
				for (nItem[1] = 0, nItems[1] = (INT)m_pItems[0].GetSize(); nItem[1] < nItems[1]; nItem[1]++)
				{
					if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
					{
						if ((pItem[1]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED  &&  pItem[0]->GetReleaseTime() < pItem[1]->GetReleaseTime()) || pItem[1]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) break;
						continue;
					}
				}
				if (((pItem[1] = m_pItems[0].GetAt(nItem[1])) && ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) != TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID()))) || nItem[1] == nItems[1])
				{
					for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
					{
						if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
						{
							if ((pItem[3] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
							{
								if (pItem[3]->Copy(pItem[2]) && InsertTelecommand(nItem[1] + nItem[2], pItem[3]))
								{
									for (pItem[3]->Select(FALSE); pItem[3]->GetStatus() != TCMANUALSTACKITEM_STATUS_DISPATCHED; )
									{
										pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
										pItem[3]->SetDispatchTime((pItem[3]->GetReleaseTime() > 0) ? max(pItem[3]->GetLoadTime(), tStackLoadTime) : 0);
										pItem[3]->SetStatus((pItem[3]->GetReleaseTime() > 0) ? TCMANUALSTACKITEM_STATUS_DISPATCHED : TCMANUALSTACKITEM_STATUS_ONSTACK);
										break;
									}
									if (pItem[3]->GetReleaseTime() > 0)
									{
										pStackItems[1].Add(pItem[3]);
										continue;
									}
									pStackItems[2].Add(pItem[3]);
									continue;
								}
								delete pItem[3];
							}
						}
						break;
					}
					while (nItem[2] < nItems[2] && --nItem[2] >= 0)
					{
						if ((pItem[3] = m_pItems[0].GetAt(nItem[1] + nItem[2])))
						{
							DeleteTelecommand(nItem[1] + nItem[2]);
							delete pItem[3];
						}
					}
					nItems[1] = (nItem[2] == nItems[2]) ? nItems[1] : -1;
				}
				if (nItems[1] < 0)
				{
					for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
					{
						if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
						{
							if ((pItem[3] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
							{
								if (pItem[3]->Copy(pItem[2]) && InsertTelecommand((INT)m_pItems[0].GetSize(), pItem[3]))
								{
									pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
									pItem[3]->SetArmTime((pItem[3]->GetArmTime().GetTime() == 0) ? pItem[3]->GetArmTime().GetTime() : 0);
									pItem[3]->SetDispatchTime((pItem[3]->GetDispatchTime() == 0) ? pItem[3]->GetDispatchTime() : 0);
									pItem[3]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
									pItem[3]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR);
									pItem[3]->Select(bReload);
									pStackItems[2].Add(pItem[3]);
									continue;
								}
								delete pItem[3];
							}
						}
						break;
					}
					bLoadTelecommands = FALSE;
				}
				for (nItem[3] = 0, nItems[3] = (INT)nGroupItemsIDs.GetSize(); nItem[3] < nItems[3]; nItem[3]++)
				{
					if ((pItem[3] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3])))
					{
						pStackItems[0].RemoveAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3]);
						delete pItem[3];
					}
				}
				nItems[0] -= nItems[3];
				nItem[0] = -1;
				continue;
			}
			for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
			{
				if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
				{
					if ((pItem[3] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
					{
						if (pItem[3]->Copy(pItem[2]) && InsertTelecommand(nIndex, pItem[3]))
						{
							pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
							pItem[3]->SetArmTime((pItem[3]->GetArmTime().GetTime() == 0) ? pItem[3]->GetArmTime().GetTime() : 0);
							pItem[3]->SetDispatchTime((pItem[3]->GetDispatchTime() == 0) ? pItem[3]->GetDispatchTime() : 0);
							pItem[3]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
							pItem[3]->Select(bReload);
							pStackItems[2].Add(pItem[3]);
							nIndex++;
							continue;
						}
						delete pItem[3];
					}
				}
				bLoadTelecommands = FALSE;
				break;
			}
			for (nItem[3] = 0, nItems[3] = (INT)nGroupItemsIDs.GetSize(); nItem[3] < nItems[3]; nItem[3]++)
			{
				if ((pItem[3] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3])))
				{
					pStackItems[0].RemoveAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3]);
					delete pItem[3];
				}
			}
			nItems[0] -= nItems[3];
			nItem[0] = -1;
			continue;
		}
		break;
	}
	for (nItem[1] = 0, nItems[1] = (INT)m_pItems[0].GetSize(); nItem[1] < nItems[1]; nItem[1]++)
	{
		if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) && pItem[1]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED  &&  pItem[1]->GetReleaseTime() == 0 && pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
		{
			if ((pItem[2] = (!pItem[1]->GetMembership().IsEmpty() && pItem[1]->GetMembershipID() > 0 && (pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) != TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID())) ? m_pItems[0].GetAt(m_pItems[0].Find(pItem[1]->GetMembership(), pItem[1]->GetLoadTime())) : m_pItems[0].GetAt(nItem[1] - 1)) && (pItem[2]->GetReleaseTime() > 0 || (pItem[2]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED  &&  pItem[2]->GetDispatchTime() > 0)))
			{
				dwReleaseOffset = ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) != TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID())) ? dwReleaseOffset : 0;
				pItem[1]->SetReleaseTime((pItem[2]->GetReleaseTime() > 0) ? (pItem[2]->GetReleaseTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset) : (pItem[2]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset));
				pItem[1]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_RELEASETIME);
				continue;
			}
			if (!nItem[1])
			{
				pItem[1]->SetReleaseTime(tStackLoadTime.GetTime() + 1000 * (TIMETAG)dwReleaseOffset);
				pItem[1]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_RELEASETIME);
			}
		}
	}
	if (pStackItems[1].GetSize() > 0)
	{
		for (nItem[1] = 0, nItems[1] = (pStackItems[3].Copy(&pStackItems[1]) && !GetParent()->DispatchTelecommands(pStackItems[1])) ? (INT)pStackItems[3].GetSize() : 0; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = pStackItems[3].GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
			{
				for (nItem[2] = 0, nItems[2] = (INT)m_pItems[0].GetSize(); nItem[2] < nItems[2]; nItem[2]++)
				{
					if ((pItem[2] = m_pItems[0].GetAt(nItem[2])) && pItem[1]->IsIdentical(pItem[2]))
					{
						if (pItem[2]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED)
						{
							if (DeleteTelecommand(nItem[2])) delete pItem[2];
							break;
						}
					}
				}
				if ((pItem[2] = m_pItems[0].GetAt(m_pItems[0].Find(pItem[1]))))
				{
					pItem[2]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_STATUS, STRING(IDS_TCMANUALSTACK_MESSAGE_DISPATCH_FAILURE));
					pItem[2]->SetArmTime((pItem[2]->GetArmTime().GetTime() == 0) ? pItem[2]->GetArmTime().GetTime() : 0);
					pItem[2]->SetDispatchTime((pItem[2]->GetDispatchTime() == 0) ? pItem[2]->GetDispatchTime() : 0);
					pItem[2]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
				}
			}
		}
		pStackItems[1].CPtrArray::RemoveAll();
	}
	if (pStackItems[2].GetSize() > 0)
	{
		GetParent()->DispatchTelecommands(pStackItems[2], TRUE);
		pStackItems[2].CPtrArray::RemoveAll();
	}
	for (UpdateContent(bRedraw); nItem[0] != nItems[0]; )
	{
		bLoadTelecommands = FALSE;
		break;
	}
	return bLoadTelecommands;
}

BOOL CTCManualStackView::ReloadTelecommands(CONST CTCManualStackItems &pItems)
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	if ((pItem[0] = (pItems.GetSize() > 0) ? new CTCManualStackItem : (CTCManualStackItem *)NULL))
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nIndex = -1; nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem)) && pItem[1]->IsSelected())
			{
				nIndex = nItem;
				break;
			}
		}
		if ((pItem[1] = m_pItems[0].GetAt((nIndex = (nIndex < 0) ? GetCurTelecommand() : nIndex))))
		{
			if (pItem[0]->Copy(pItem[1]) && LoadTelecommands(pItems, nIndex, TRUE, FALSE, FALSE, FALSE))
			{
				ActivateTelecommand(m_pItems[0].Find(pItem[0]));
				delete pItem[0];
				return TRUE;
			}
			delete pItem[0];
			return FALSE;
		}
		if (LoadTelecommands(pItems, -1, TRUE, FALSE, FALSE, TRUE))
		{
			delete pItem[0];
			return TRUE;
		}
		delete pItem[0];
	}
	return FALSE;
}

BOOL CTCManualStackView::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	INT  nIndex;
	INT  nItem[2];
	INT  nItems[2];
	CTCItem  *pItem;
	CPtrArray  pAlertItems;
	CTCManualStackItem  *pStackItem[2];
	CTCManualStackItems  pStackItems;
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (INT)pItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem = pItems.GetAt(nItem[0])) && pItem->GetSourceType() == TCITEM_SOURCETYPE_MANUALSTACK  &&  pItem->IsHost())
		{
			if ((pStackItem[0] = (pItem->GetStatus() <= TCMANUALSTACKITEM_STATUS_FAILEDRELEASE) ? new CTCManualStackItem : (CTCManualStackItem *)NULL))
			{
				if (pStackItem[0]->CTCItem::Copy(pItem) && pStackItems.Add(pStackItem[0]) >= 0) continue;
				delete pStackItem[0];
			}
		}
	}
	if (pStackItems.GetSize() > 0 || bAll)
	{
		for (nItem[0] = 0, nItems[0] = (!bAll) ? (INT)pStackItems.GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && (pStackItem[0]->GetStatus() < TCMANUALSTACKITEM_STATUS_RELEASED || (pStackItem[0]->GetResult() & (TCITEM_RESULT_CEV_IDLE | TCITEM_RESULT_CEV_PENDING | TCITEM_RESULT_CEV_PASSED | TCITEM_RESULT_CEV_FAILED | TCITEM_RESULT_CEV_UNKNOWN | TCITEM_RESULT_CEV_UNVERIFIED)) != 0 || (pStackItem[0]->GetFlags() & TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ALL))) break;
			continue;
		}
		for (nItem[1] = 0, nItems[1] = (nItem[0] == nItems[0] && m_pItems[1].Copy(&pStackItems)) ? (INT)m_pItems[1].GetSize() : 0; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pStackItem[1] = m_pItems[1].GetAt(nItem[1])))
			{
				if (pStackItem[1]->GetMembershipSize() > (UINT)pStackItems.GetSize())
				{
					if (nItem[1] < nItems[1] - 1)
					{
						m_pItems[1].RemoveAt(nItem[1]);
						delete pStackItem[1];
						nItems[1]--;
						nItem[1]--;
						continue;
					}
					pStackItem[1]->SetMembership(EMPTYSTRING);
					pStackItem[1]->SetMembershipDescription(EMPTYSTRING);
					pStackItem[1]->SetMembershipSize(0);
					pStackItem[1]->SetMembershipID(-1);
				}
				ResetTelecommand(pStackItem[1]);
			}
		}
		for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem[1] = ((pStackItem[0] = pStackItems.GetAt(nItem[0]))) ? m_pItems[0].GetAt(m_pItems[0].Find(pStackItem[0])) : (CTCManualStackItem *)NULL))
			{
				for (AdjustTelecommandAlerts(pStackItem[0], pStackItem[1]); (pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE) && pStackItem[1]->GetStatus() <= TCMANUALSTACKITEM_STATUS_DISPATCHED; )
				{
					pAlertItems.Add(pStackItem[0]);
					break;
				}
				if (pStackItem[0]->GetStatus() >= pStackItem[1]->GetStatus()) pStackItem[1]->CTCItem::Copy(pStackItem[0]);
				pStackItem[0]->Copy(pStackItem[1]);
				continue;
			}
			if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && (pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE))
			{
				pAlertItems.Add(pStackItem[0]);
				continue;
			}
		}
		for (nItem[0] = 0, nItems[0] = (bAll) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem[0] = m_pItems[0].GetAt(nItem[0])) && pStackItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ONSTACK  &&  pStackItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ARMED && (pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED || pStackItems.Find(pStackItem[0]) >= 0))
			{
				DeleteTelecommand(nItem[0]);
				delete pStackItem[0];
				nItems[0]--;
				nItem[0]--;
			}
		}
		for (nItem[0] = 0, nItems[0] = (bAll) ? (INT)pStackItems.GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && pStackItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ONSTACK  &&  pStackItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ARMED)
			{
				if ((pStackItem[1] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
				{
					for (pStackItem[1]->Copy(pStackItem[0]); !InsertTelecommand(nItem[0], pStackItem[1]); )
					{
						delete pStackItem[1];
						break;
					}
				}
			}
		}
		for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem[1] = ((pStackItem[0] = pStackItems.GetAt(nItem[0]))) ? m_pItems[0].GetAt((nIndex = m_pItems[0].Find(pStackItem[0]))) : (CTCManualStackItem *)NULL) && pStackItem[1]->Copy(pStackItem[0]))
			{
				if (pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_RELEASED || ((pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE) && m_bTelecommandingAutoRejectionMode))
				{
					for (nItem[1] = 0, nItems[1] = (pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE) ? (INT)pAlertItems.GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
					{
						if (pStackItem[0] == (CTCManualStackItem *)pAlertItems.GetAt(nItem[1]))
						{
							GetParent()->Alert(pStackItem[0]);
							pAlertItems.RemoveAt(nItem[1]);
							break;
						}
					}
					if (nItem[1] < nItems[1] || nItems[1] < 0)
					{
						DeleteTelecommand(nIndex);
						delete pStackItem[1];
					}
					continue;
				}
				for (nItem[1] = 0, nItems[1] = (INT)pAlertItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
				{
					if (pStackItem[0] == (CTCManualStackItem *)pAlertItems.GetAt(nItem[1]))
					{
						if (pStackItem[1]->GetResult() & TCMANUALSTACKITEM_RESULT_PTV_FAIL) pStackItem[1]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_PTVRESULT, (pStackItem[1]->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTION_FAILURE));
						if (pStackItem[1]->GetResult() & TCMANUALSTACKITEM_RESULT_PEV_NOGO) pStackItem[1]->Alert(TCMANUALSTACKITEM_ALERTTYPE_ERROR, TCMANUALSTACK_TITLEITEM_PEVRESULT, (pStackItem[1]->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCMANUALSTACK_MESSAGE_EXECUTION_FAILURE));
						GetParent()->Alert(pStackItem[1]);
						break;
					}
				}
				continue;
			}
			for (nItem[1] = 0, nItems[1] = (INT)pAlertItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
			{
				if (pStackItem[0] == (CTCManualStackItem *)pAlertItems.GetAt(nItem[1]))
				{
					pAlertItems.RemoveAt(nItem[1]);
					break;
				}
			}
		}
		if (pAlertItems.GetSize() > 0) GetParent()->SetTelecommandingState((m_nTelecommandingState & TCMANUALSTACK_STATE_DISABLED) | TCMANUALSTACK_STATE_STOPPED, FALSE);
		UpdateContent();
	}
	return TRUE;
}
BOOL CTCManualStackView::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	BOOL  bUpdate;
	CPoint  ptToolTip;
	CString  szColumn;
	CString  szToolTip[3];
	CStringArray  szParameters;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate = GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
	{
		bUpdate |= UpdateTelecommand(nItem);
		continue;
	}
	for (nItems = (INT)m_pItems[0].GetSize(), szParameters.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetResult() != TCMANUALSTACKITEM_RESULT_NONE)
			{
				pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
				pItem->SetResult(TCMANUALSTACKITEM_RESULT_NONE);
				bUpdate = TRUE;
			}
		}
	}
	if (bUpdate)
	{
		if (m_wndToolTip.IsVisibleAtPoint(ptToolTip))
		{
			if ((pItem = (FindTextFromPoint(ptToolTip, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCManualStackItem *)NULL))
			{
				for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
				{
					m_wndToolTip.Update(szToolTip[0], szToolTip[1]);
					break;
				}
			}
		}
		UpdateContent();
	}
	return((nItem == nItems) ? TRUE : FALSE);
}
BOOL CTCManualStackView::UpdateTelecommands()
{
	CTCManualStackItems  pItems;

	return LoadTelecommands(pItems);
}

BOOL CTCManualStackView::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	INT  nItem;
	INT  nItems;
	INT  nInterlock;
	INT  nInterlocks;
	BOOL  bUpdate;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCInterlock  *pInterlock[2];
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bUpdate = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pInterlocks.Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pItem->GetInterlock()) < 0)
			{
				pItem->SetInterlock(EMPTYSTRING);
				bUpdate = TRUE;
			}
			for (pItem->GetReleaseInterlock(szInterlock, bInterlock); pInterlocks.Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock) < 0; )
			{
				pItem->SetReleaseInterlock(EMPTYSTRING);
				bUpdate = TRUE;
				break;
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pItems[1].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[1].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			for (pItem->SetInterlock((pInterlocks.Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pItem->GetInterlock()) >= 0) ? pItem->GetInterlock() : EMPTYSTRING), pItem->GetReleaseInterlock(szInterlock, bInterlock); pInterlocks.Find(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock) < 0; )
			{
				pItem->SetReleaseInterlock(EMPTYSTRING);
				break;
			}
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[0] = pInterlocks.GetAt(nInterlock)) && pInterlock[0]->IsHost() && pInterlock[0]->GetSourceType() == TCINTERLOCK_SOURCETYPE_MANUALSTACK)
		{
			if ((pInterlock[1] = m_pInterlocks.GetAt(m_pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()))))
			{
				for (; pInterlock[0]->GetState() == TCINTERLOCK_STATE_FAILURE && pInterlock[1]->GetState() != TCINTERLOCK_STATE_FAILURE; )
				{
					GetParent()->Alert(pInterlock[1]);
					break;
				}
				pInterlock[1]->Copy(pInterlock[0]);
				continue;
			}
			if ((pInterlock[1] = new CTCInterlock))
			{
				pInterlock[1]->Copy(pInterlock[0]);
				if (m_pInterlocks.Add(pInterlock[1]) >= 0) continue;
				delete pInterlock[1];
			}
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[0] = m_pInterlocks.GetAt(nInterlock)) && pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) < 0)
		{
			m_pInterlocks.RemoveAt(nInterlock);
			delete pInterlock[0];
			nInterlocks--;
			nInterlock--;
		}
	}
	for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate |= GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
	{
		bUpdate |= UpdateTelecommand(nItem);
		continue;
	}
	if (bUpdate) UpdateContent();
	return TRUE;
}

BOOL CTCManualStackView::SetCurTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	return ActivateTelecommand(nIndex);
}

INT CTCManualStackView::GetCurTelecommand() CONST
{
	return GetCurText();
}

BOOL CTCManualStackView::SelectTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	if (m_nSearchIndex != nIndex)
	{
		ScrollTo((m_nSearchIndex = nIndex));
		UpdateContent();
		RecalcLayout();
	}
	return TRUE;
}

VOID CTCManualStackView::DoSelectAllTelecommands()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK  &&  !pItem->IsSelected())
		{
			pItem->Select();
			continue;
		}
	}
	DrawContent();
}

BOOL CTCManualStackView::CanSelectAllTelecommands() CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK  &&  !pItem->IsSelected()) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

INT CTCManualStackView::EnumSelectedTelecommands(CTCManualStackItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), pItems.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected())
		{
			if ((pItem[1] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
			{
				if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0) continue;
				delete pItem[1];
			}
			pItems.RemoveAll();
			break;
		}
	}
	return((INT)pItems.GetSize());
}

BOOL CTCManualStackView::HasSelectedTelecommands() CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

UINT CTCManualStackView::GetTelecommandCount() CONST
{
	CTextViewLock  cLock(this);

	return((UINT)m_pItems[0].GetSize());
}

BOOL CTCManualStackView::DoInsertBeforeTelecommand()
{
	CTextViewLock  cLock(this);

	return PasteFromClipboard(GetCurTelecommand(), FALSE);
}

BOOL CTCManualStackView::CanInsertBeforeTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(GetCurTelecommand() >= 0 && CanPasteTelecommand());
}

BOOL CTCManualStackView::DoInsertAfterTelecommand()
{
	CTextViewLock  cLock(this);

	return PasteFromClipboard(GetCurTelecommand());
}

BOOL CTCManualStackView::CanInsertAfterTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(GetCurTelecommand() >= 0 && CanPasteTelecommand());
}

BOOL CTCManualStackView::DoMoveUpTelecommand()
{
	INT  nIndex;
	INT  nItem[2];
	INT  nItems[2];
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	CTextViewLock  cLock(this);

	if ((nIndex = GetCurTelecommand()) >= 0)
	{
		if (m_pItems[0].Collect(nIndex, nItemIDs) > 0 && m_pItems[0].Collect(nIndex, pItems) == nItemIDs.GetSize())
		{
			for (nItem[0] = 0, nItems[0] = (INT)m_pItems[0].GetSize(); nItem[0] < nItems[0]; nItem[0] = nItem[0] + 1)
			{
				for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && pItem[0]->IsSelected()) ? (INT)nItemIDs.GetSize() : 0; nItem[1] <= nItems[1] && nItems[1] > 0; nItem[1]++)
				{
					if (nItem[1] == nItems[1] || nItem[0] < (INT)nItemIDs.GetAt(nItem[1]))
					{
						if ((pItem[1] = new CTCManualStackItem))
						{
							pItem[1]->Copy(pItem[0]);
							pItems.InsertAt(nItem[1], pItem[1], 1);
							nItemIDs.InsertAt(nItem[1], nItem[0]);
						}
						break;
					}
					if (nItem[0] == nItemIDs.GetAt(nItem[1])) break;
				}
			}
			if (LoadTelecommands(pItems, nItemIDs.GetAt(0) - 1, TRUE, TRUE, FALSE, FALSE))
			{
				SetCurText(nItemIDs.GetAt(0) - 1);
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CTCManualStackView::CanMoveUpTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected()) break;
		continue;
	}
	return(((pItem = (m_pItems[0].Collect(GetCurTelecommand(), nItemIDs) > 0 && nItem > 0) ? m_pItems[0].GetAt((nIndex = nItemIDs.GetAt(0)) - 1) : (CTCManualStackItem *)NULL) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoMoveDownTelecommand()
{
	INT  nIndex;
	INT  nItem[2];
	INT  nItems[2];
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	CTextViewLock  cLock(this);

	if ((nIndex = GetCurTelecommand()) >= 0)
	{
		if (m_pItems[0].Collect(nIndex, nItemIDs) > 0 && m_pItems[0].Collect(nIndex, pItems) == nItemIDs.GetSize())
		{
			for (nItem[0] = 0, nItems[0] = (INT)m_pItems[0].GetSize(); nItem[0] < nItems[0]; nItem[0] = nItem[0] + 1)
			{
				for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && pItem[0]->IsSelected()) ? (INT)nItemIDs.GetSize() : 0; nItem[1] <= nItems[1] && nItems[1] > 0; nItem[1]++)
				{
					if (nItem[1] == nItems[1] || nItem[0] < (INT)nItemIDs.GetAt(nItem[1]))
					{
						if ((pItem[1] = new CTCManualStackItem))
						{
							pItem[1]->Copy(pItem[0]);
							pItems.InsertAt(nItem[1], pItem[1], 1);
							nItemIDs.InsertAt(nItem[1], nItem[0]);
						}
						break;
					}
					if (nItem[0] == nItemIDs.GetAt(nItem[1])) break;
				}
			}
			if (LoadTelecommands(pItems, nItemIDs.GetAt(nItemIDs.GetUpperBound()) + 1, TRUE, FALSE, TRUE, FALSE))
			{
				SetCurText(nItemIDs.GetAt(nItemIDs.GetUpperBound()) + 1);
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CTCManualStackView::CanMoveDownTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = (nItems = (INT)m_pItems[0].GetSize()) - 1; nItem >= 0; nItem--)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected()) break;
		continue;
	}
	return(((pItem = (m_pItems[0].Collect(GetCurTelecommand(), nItemIDs) > 0 && nItem < nItems - 1) ? m_pItems[0].GetAt((nIndex = nItemIDs.GetAt(nItemIDs.GetUpperBound())) + 1) : (CTCManualStackItem *)NULL) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoCutTelecommand()
{
	CTextViewLock  cLock(this);

	if (CopyToClipboard(TRUE))
	{
		UpdateTelecommands();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::CanCutTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(GetClipboardFormat() != 0 && HasSelectedTelecommands());
}

BOOL CTCManualStackView::DoCopyTelecommand()
{
	CTextViewLock  cLock(this);

	return CopyToClipboard();
}

BOOL CTCManualStackView::CanCopyTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(GetClipboardFormat() != 0 && HasSelectedTelecommands());
}

BOOL CTCManualStackView::DoPasteTelecommand()
{
	CTextViewLock  cLock(this);

	return PasteFromClipboard();
}

BOOL CTCManualStackView::CanPasteTelecommand() CONST
{
	COleDataObject  cOleDataObject;
	CTextViewLock  cLock(this);

	return(GetClipboardFormat() != 0 && cOleDataObject.AttachClipboard() && cOleDataObject.IsDataAvailable(GetClipboardFormat()));
}

BOOL CTCManualStackView::DoDeleteTelecommand()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected())
		{
			DeleteTelecommand(nItem);
			delete pItem;
			nItems--;
			nItem--;
		}
	}
	UpdateTelecommands();
	return TRUE;
}

BOOL CTCManualStackView::CanDeleteTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->IsSelected() && (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE)) break;
			continue;
		}
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoArmTelecommand()
{
	INT  nID;
	INT  nIDs;
	INT  nItem[2];
	INT  nItems[2];
	UINT  nTimerID;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tPreDispatchTime;
	CPtrArray  pSelectedItems;
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = ((m_nTelecommandingState & (TCMANUALSTACK_STATE_DEFAULT | TCMANUALSTACK_STATE_DISABLED)) == TCMANUALSTACK_STATE_DEFAULT) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && ((pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED) && pItem[0]->GetArmTime() != tPreDispatchTime && (CheckTelecommandReleaseWindow(pItem[0]) || pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[0]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE)
		{
			for (nItem[1] = 0, nItems[1] = m_pItems[0].Collect(nItem[0], pSelectedItems); nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pItem[1] = (CTCManualStackItem *)pSelectedItems.GetAt(nItem[1])))
				{
					if ((CheckTelecommandReleaseWindow(pItem[1]) || pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[1]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) continue;
					break;
				}
			}
			for (nItem[1] = (nItem[1] == nItems[1]) ? 0 : -1; nItem[1] < nItems[1] && nItem[1] >= 0; nItem[1]++)
			{
				if ((pItem[1] = (CTCManualStackItem *)pSelectedItems.GetAt(nItem[1])))
				{
					if (pItem[1]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
					{
						pItem[1]->SetArmTime(tPreDispatchTime.GetTime());
						pItem[1]->SetStatus(TCMANUALSTACKITEM_STATUS_ARMED);
						continue;
					}
					pItem[1]->SetArmTime(0);
					pItem[1]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
				}
			}
		}
	}
	if (nItems[0] > 0)
	{
		for (nTimerID = TCMANUALSTACKVIEW_COMMANDDISPATCH_TIMERID; TRUE; nTimerID++)
		{
			for (nID = 0, nIDs = (INT)m_nDispatchTimerIDs.GetSize(); nID < nIDs; nID++)
			{
				if (m_nDispatchTimerIDs.GetAt(nID) == nTimerID) break;
				continue;
			}
			if (nID == nIDs)
			{
				m_nDispatchTimerIDs.Add(nTimerID);
				break;
			}
		}
		SetTimer(nTimerID, (UINT)(1000 * m_tDispatchTimeWindow.GetTotalSeconds()), NULL);
		ActivateTelecommand(-1);
		UpdateContent();
	}
	return TRUE;
}

BOOL CTCManualStackView::CanArmTelecommand() CONST
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CPtrArray  pSelectedItems;
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = ((m_nTelecommandingState & (TCMANUALSTACK_STATE_DEFAULT | TCMANUALSTACK_STATE_DISABLED)) == TCMANUALSTACK_STATE_DEFAULT) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && ((pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED) && (CheckTelecommandReleaseWindow(pItem[0]) || pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[0]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) ? m_pItems[0].Collect(nItem[0], pSelectedItems) : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = (CTCManualStackItem *)pSelectedItems.GetAt(nItem[1])) && (CheckTelecommandReleaseWindow(pItem[1]) || pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[1]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) continue;
			break;
		}
		if (nItem[1] == nItems[1] && nItems[1] > 0) break;
	}
	return((nItem[0] < nItems[0]) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoDispatchTelecommand()
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bAfterDispatch;
	BOOL  bAuthorization;
	DWORD  dwReleaseOffset;
	CTimeTag  tDispatchTime;
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = ((m_nTelecommandingState & TCMANUALSTACK_STATE_STOPPED) != TCMANUALSTACK_STATE_STOPPED && (m_nTelecommandingState & TCMANUALSTACK_STATE_DISABLED) != TCMANUALSTACK_STATE_DISABLED) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED && (CheckTelecommandReleaseWindow(pItem[0]) || pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[0]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE)
		{
			for (nItem[1] = 0, nItems[1] = (pItems[1].Find(pItem[0]) < 0) ? m_pItems[0].Collect(nItem[0], pItems[0]) : -1; nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pItem[1] = pItems[0].GetAt(nItem[1])) && (CheckTelecommandReleaseWindow(pItem[1]) || pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[1]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) continue;
				break;
			}
			for (nItem[1] = (nItem[1] == nItems[1]) ? 0 : -1, bAuthorization = FALSE; nItem[1] < nItems[1] && nItem[1] >= 0; nItem[1]++)
			{
				if ((pItem[1] = pItems[0].GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
				{
					if ((pItem[1]->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0 && !bAuthorization)
					{
						pItem[1]->SetDispatchTime(tDispatchTime);
						pItem[1]->SetStatus(TCMANUALSTACKITEM_STATUS_DISPATCHED);
						continue;
					}
					for (pItem[1]->SetArmTime(0), pItem[1]->SetDispatchTime(0); pItem[1]->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION; )
					{
						pItem[1]->Alert(TCMANUALSTACKITEM_ALERTTYPE_WARNING, TCMANUALSTACK_TITLEITEM_AUTHORIZATION, STRING(IDS_TCMANUALSTACK_MESSAGE_AUTHORIZATION_REQUIRED));
						break;
					}
					pItem[1]->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
					bAuthorization = TRUE;
					continue;
				}
				pItems[0].RemoveAll();
				break;
			}
			if (nItem[1] == nItems[1] && nItems[1] > 0)
			{
				pItems[1].CPtrArray::Append(pItems[0]);
				pItems[0].CPtrArray::RemoveAll();
				continue;
			}
			break;
		}
	}
	return((pItems[1].GetSize() > 0) ? ((ReloadTelecommands(pItems[1])) ? (nItem[0] == nItems[0]) : FALSE) : (nItem[0] == nItems[0]));
}

BOOL CTCManualStackView::CanDispatchTelecommand() CONST
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tDispatchTime;
	CPtrArray  pSelectedItems;
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = ((m_nTelecommandingState & TCMANUALSTACK_STATE_STOPPED) != TCMANUALSTACK_STATE_STOPPED && (m_nTelecommandingState & TCMANUALSTACK_STATE_DISABLED) != TCMANUALSTACK_STATE_DISABLED) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED && (CheckTelecommandReleaseWindow(pItem[0]) || pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[0]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) ? m_pItems[0].Collect(nItem[0], pSelectedItems) : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = (CTCManualStackItem *)pSelectedItems.GetAt(nItem[1])) && (CheckTelecommandReleaseWindow(pItem[1]) || pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[1]->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_NONE) continue;
			break;
		}
		if (nItem[1] == nItems[1] && nItems[1] > 0) break;
	}
	return((nItem[0] < nItems[0]) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoUndispatchTelecommand()
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (m_nTelecommandingState & TCMANUALSTACK_STATE_SUSPENDED) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED)
		{
			if ((pItem[1] = new CTCManualStackItem))
			{
				if (pItem[1]->Copy(pItem[0]))
				{
					ResetTelecommand(pItem[1]);
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
			}
		}
	}
	return((nItems > 0) ? ReloadTelecommands(pItems) : FALSE);
}

BOOL CTCManualStackView::CanUndispatchTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (m_nTelecommandingState & TCMANUALSTACK_STATE_SUSPENDED) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoAcknowledgeTelecommand()
{
	INT  nItem;
	INT  nItems;
	CString  szAlert;
	CTCItem  *pItem;
	CTCItems  pItems;
	CPtrArray  pStackItems;
	CTCManualStackItem  *pStackItem;
	CTextViewLock  cLock(this);

	if ((pStackItem = m_pItems[0].GetAt(GetCurTelecommand())) && pStackItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE)
	{
		if (pStackItem->IsAlerted(TCMANUALSTACK_TITLEITEM_AUTHORIZATION, szAlert) == TCMANUALSTACKITEM_ALERTTYPE_WARNING  &&  szAlert == STRING(IDS_TCMANUALSTACK_MESSAGE_AUTHORIZATION_REQUIRED)) pStackItem->SetAttributes(pStackItem->GetAttributes() & ~TCFUNCTION_DISPFLAG_AUTHORIZATION);
		pStackItem->Alert(TCMANUALSTACKITEM_ALERTTYPE_ANY);
		UpdateContent();
		return TRUE;
	}
	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pStackItem = m_pItems[0].GetAt(nItem)) && pStackItem->IsSelected() && pStackItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE)
		{
			if ((pItem = new CTCItem) && pItem->Copy(pStackItem) && pItems.Add(pItem) >= 0)
			{
				pStackItems.Add(pStackItem);
				continue;
			}
			pStackItems.RemoveAll();
			pItems.RemoveAll();
			delete pItem;
			break;
		}
	}
	for (nItem = 0, nItems = (INT)pStackItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pStackItem = (CTCManualStackItem *)pStackItems.GetAt(nItem)) && pStackItem->IsAlerted(TCMANUALSTACK_TITLEITEM_AUTHORIZATION, szAlert) == TCMANUALSTACKITEM_ALERTTYPE_WARNING  &&  szAlert == STRING(IDS_TCMANUALSTACK_MESSAGE_AUTHORIZATION_REQUIRED))
		{
			pStackItem->SetAttributes(pStackItem->GetAttributes() & ~TCFUNCTION_DISPFLAG_AUTHORIZATION);
			continue;
		}
	}
	GetTCService()->AcknowledgeTelecommands(pItems);
	return TRUE;
}

BOOL CTCManualStackView::CanAcknowledgeTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (; (pItem = m_pItems[0].GetAt(GetCurTelecommand())); )
	{
		if (pItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE) return TRUE;
		break;
	}
	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && pItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCManualStackView::DoReloadTelecommand()
{
	INT  nItem[3];
	INT  nItems[3];
	INT  nElement;
	INT  nElements;
	CTimeTag  tLoadTime;
	CTCManualStackItem  *pItem[3];
	CDatabaseTCFunctions  pBlockedItems;
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (INT)m_pItems[1].GetSize(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = m_pItems[1].GetAt(nItem[0])) != (CTCManualStackItem *)NULL)
		{
			if (pItem[0]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP)
			{
				for (nItem[1] = nItem[0] + 1, nItems[1] = nItems[0]; nItem[1] < nItems[1]; nItem[1]++)
				{
					if ((pItem[1] = m_pItems[1].GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
					{
						if (pItem[1]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)
						{
							for (nElement = 0, nElements = (pItem[0]->GetName() == pItem[1]->GetName() && pItem[0]->GetSize() == pItem[1]->GetSize()) ? (INT)pItem[0]->GetSize() : -1; nElement < nElements; nElement++)
							{
								if (!pItem[0]->GetAt(nElement)->Compare(pItem[1]->GetAt(nElement))) break;
								continue;
							}
							if (nElement == nElements) break;
						}
					}
				}
				if (nItem[1] == nItems[1])
				{
					if ((pItem[1] = new CTCManualStackItem))
					{
						if (pItem[1]->Copy(pItem[0]))
						{
							for (nItem[2] = 0, nItems[2] = (!pItem[0]->GetMembership().IsEmpty()) ? (nItems[0] + 1) : 0, m_pItems[1].InsertAt(nItem[0] + 1, pItem[1], 1); nItem[2] < nItems[2]; nItem[2]++)
							{
								if ((pItem[2] = m_pItems[1].GetAt(nItem[2])) && pItem[0]->GetMembership() == pItem[2]->GetMembership() && pItem[0]->GetLoadTime() == pItem[2]->GetLoadTime())
								{
									pItem[2]->SetMembershipID((nItem[0] < nItem[2]) ? (pItem[2]->GetMembershipID() + 1) : pItem[2]->GetMembershipID());
									pItem[2]->SetMembershipSize(pItem[2]->GetMembershipSize() + 1);
								}
							}
							pItem[1]->SetFlags((pItem[1]->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP);
							pItem[1]->SetAttributes((pItem[1]->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP)) | TCFUNCTION_EXETYPE_SECONDSTEP);
							pItem[0]->SetReleaseBlockedItems(pBlockedItems);
							pItem[1]->SetReleaseBlockedItems(pBlockedItems);
							pItem[0]->SetLoadTime(tLoadTime.GetTime());
							pItem[1]->SetLoadTime(tLoadTime.GetTime());
							nItems[0]++;
							nItem[0]++;
							continue;
						}
						delete pItem[1];
					}
				}
			}
			pItem[0]->SetReleaseBlockedItems(pBlockedItems);
			pItem[0]->SetLoadTime(tLoadTime.GetTime());
			continue;
		}
	}
	return((nItems[0] > 0) ? LoadTelecommands(m_pItems[1]) : FALSE);
}

BOOL CTCManualStackView::CanReloadTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(m_pItems[1].GetSize() > 0);
}

BOOL CTCManualStackView::ShowTelecommandProperties()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CUIntArray  nItemIDs;
	CTCManualStackItem  *pItem[2];
	CTCManualStackComposedItem  cComposedItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nIndex = GetCurTelecommand(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
		{
			if ((pItem[1] = new CTCManualStackItem) && pItem[1]->Copy(pItem[0]) && cComposedItem.Add(pItem[1]) >= 0)
			{
				nIndex = (nIndex < 0) ? nItem : nIndex;
				continue;
			}
			delete pItem[1];
			break;
		}
	}
	for (; nIndex >= 0; )
	{
		m_pItems[0].Collect(nIndex, nItemIDs);
		break;
	}
	cLock.Release();
	return((nItemIDs.GetSize() != cComposedItem.GetSize() && cComposedItem.GetSize() > 1) ? ShowTelecommandProperties(nIndex, &cComposedItem) : ShowTelecommandProperties(nIndex));
}

BOOL CTCManualStackView::CanShowTelecommandProperties() CONST
{
	INT  nItem;
	INT  nItems;
	BOOL  bSelected;
	CString  szMembership;
	CTimeTag  tMembership;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bSelected = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
		{
			if ((pItem->GetMembership() == szMembership && (pItem->GetMembership().IsEmpty() || pItem->GetLoadTime() == tMembership)) || !bSelected)
			{
				szMembership = (!bSelected) ? pItem->GetMembership() : szMembership;
				tMembership = (!bSelected) ? pItem->GetLoadTime() : tMembership;
				bSelected = TRUE;
				continue;
			}
			break;
		}
	}
	return((nItem == nItems) ? bSelected : FALSE);
}

BOOL CTCManualStackView::IsShowingTelecommandProperties() CONST
{
	return m_bProperties;
}

BOOL CTCManualStackView::SearchTelecommandByNumber(INT nNumber)
{
	CTextViewLock  cLock(this);

	if (nNumber <= m_pItems[0].GetSize())
	{
		SelectTelecommand(nNumber - 1);
		return TRUE;
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByName(LPCTSTR pszName, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetName() == pszName)
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByDescription(LPCTSTR pszDescription, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	INT  nIndex;
	INT  nCount;
	CString  szInfo[2];
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szInfo[0] = pszDescription; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL)
		{
			for (szInfo[1] = pItem->GetDescription(); !bCase; )
			{
				szInfo[0].MakeUpper();
				szInfo[1].MakeUpper();
				break;
			}
			if ((!bWord  &&  szInfo[1].Find(szInfo[0]) >= 0) || (bWord && (!szInfo[1].Find(szInfo[0] + SPACE) || szInfo[1].Find(SPACE + szInfo[0] + SPACE) > 0)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByCategory(LPCTSTR pszCategory, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	ULONGLONG  nCategory;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, nCategory = GetDatabase()->TranslateTCFunctionHazardousFlag(pszCategory, FALSE); (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetAttributes() & nCategory))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandBySubSystem(LPCTSTR pszSubSystem, BOOL bDown, BOOL bAll, BOOL bCase)
{
	INT  nIndex;
	INT  nCount;
	CString  szSubSystem[2];
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szSubSystem[0] = pszSubSystem; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL)
		{
			for (szSubSystem[1] = pItem->GetDestinationSubSystem(); !bCase; )
			{
				szSubSystem[0].MakeUpper();
				szSubSystem[1].MakeUpper();
				break;
			}
			if (szSubSystem[0] == szSubSystem[1])
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByArgument(LPCTSTR pszArgument, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CTCManualStackItem  *pItem;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL)
		{
			for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) && pFunctionElement->GetName() == pszArgument) break;
				continue;
			}
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && pPacketParameter->GetTag() == pszArgument) break;
				continue;
			}
			if (nElement < nElements || nParameter < nParameters)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByFlags(BOOL bDown, BOOL bAll, BOOL bInterlocking, BOOL bInterlocked, BOOL bGrouped, BOOL bBlocked)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && ((bInterlocking  &&  !pItem->GetInterlock().IsEmpty()) || (!bInterlocking  &&  pItem->GetInterlock().IsEmpty())) && ((bInterlocked  &&  pItem->GetReleaseInterlock(szInterlock, bInterlock)) || (!bInterlocked  &&  !pItem->GetReleaseInterlock(szInterlock, bInterlock))) && ((bGrouped && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED)) || (!bGrouped && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) != TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED)) && ((bBlocked && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED)) || (!bBlocked && (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByTCPacket(LPCTSTR pszPacket, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CDatabaseTCPacket  *pPacket;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pPacket = ((pItem = m_pItems[0].GetAt(nIndex))) ? GetDatabase()->GetTCPackets()->GetAt(pItem->GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pPacket->GetTag() == pszPacket)
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByDispatchTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL  &&  pItem->GetDispatchTime() > 0)
		{
			if (bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetDispatchTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByReleaseTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL  &&  pItem->GetReleaseTime() > 0)
		{
			if (bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetReleaseTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByReleaseTimeOffset(DWORD dwOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && ((bMatch  &&  dwReleaseOffset == dwOffset) || (!bMatch  &&  max(1000 * (TIMETAG)dwReleaseOffset - 1000000 * tInterval.GetTotalSeconds(), 0) <= 1000 * (TIMETAG)dwOffset  &&  dwReleaseOffset + 1000 * (DWORD)tInterval.GetTotalSeconds() >= dwOffset)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByExecutionTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	UINT  nExecutionOBRT;
	CTimeTag  tExecutionTime;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetExecutionTime(tExecutionTime) || (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime))))
		{
			if (bMatch  &&  tExecutionTime.GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  tExecutionTime.GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && tExecutionTime.GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByExecutionTimeOffset(CONST CTimeSpan &tOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && ((bMatch  &&  dwExecutionOffset / 1000 == abs(tOffset.GetTotalSeconds()) && ((!bEarlierExecution  &&  tOffset >= 0) || (bEarlierExecution  &&  tOffset < 0))) || (!bMatch  &&  dwExecutionOffset / 1000 - tInterval.GetTotalSeconds() <= tOffset.GetTotalSeconds() && dwExecutionOffset / 1000 + tInterval.GetTotalSeconds() >= tOffset.GetTotalSeconds())))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByAuthorization(UINT nAuthorization, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) == (nAuthorization & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByPTVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
			{
				if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
			{
				if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
			if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
			{
				if ((tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByPTVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV))) && nFlags == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV))) || (!nFlags && ((pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV)) == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV))))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByPTVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetResult() & (TCMANUALSTACKITEM_RESULT_PTV_GO | TCMANUALSTACKITEM_RESULT_PTV_WAIT | TCMANUALSTACKITEM_RESULT_PTV_FAIL)) == (nResult & (TCMANUALSTACKITEM_RESULT_PTV_GO | TCMANUALSTACKITEM_RESULT_PTV_WAIT | TCMANUALSTACKITEM_RESULT_PTV_FAIL)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByPEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV))) && nFlags == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)) && pItem->GetPreExeGroupRef() >= 0) || (!nFlags && ((nCheck != ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() >= 0 && ((pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)) == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)))) || (nCheck == ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() < 0)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByPEVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & (TCMANUALSTACKITEM_RESULT_PEV_GO | TCMANUALSTACKITEM_RESULT_PEV_NOGO)) == (nResult & (TCMANUALSTACKITEM_RESULT_PEV_GO | TCMANUALSTACKITEM_RESULT_PEV_NOGO)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByCEVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	CTimeTag  tExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow[3];
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)))
		{
			if (pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE)
			{
				for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) || pItem->GetExecutionTime(tExecutionTime); )
				{
					if (tTime.GetTime() >= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds())
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
					break;
				}
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
				{
					if ((pItem->GetReleaseTime() > 0 && tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByCEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV))) && nFlags == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)) && pItem->GetExeVerGroupRef() >= 0) || ((!nFlags || pItem->GetExeVerGroupRef() < 0) && ((nCheck != ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() >= 0 && ((pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)) == (nCheck & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)))) || (nCheck == ~(TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() < 0)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::SearchTelecommandByStatus(LPCTSTR pszStatus, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && ((pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_ONSTACK))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_ARMED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_DISPATCHED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_RELEASED  &&  pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_RELEASED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED  &&  pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_NOTRELEASED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE  &&  pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_FAILEDRELEASE))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_EXECUTED  &&  pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_EXECUTED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTEXECUTED  &&  pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_NOTEXECUTED))) || (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDEXECUTION  &&  pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCMANUALSTACK_LIST_STATUS_FAILEDEXECUTION)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCManualStackView::GetPrintProperties(CONST CTCManualStackPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nMode;
	UINT  nRange[2];
	CString  szItem;
	CTimeKey  tRange[2];
	CTCManualStackItem  *pItem;
	CTextViewAttribute  *pAttribute;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (GetColumns(szColumns) && GetTitleFont(pTitleFont) && GetTextFont(pItemsFont)) ? (INT)m_pItems[0].GetSize() : -1, szContents.RemoveAll(), pAttributes.RemoveAll(), pSymbols.RemoveAll(), nSymbolIDs.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && ((((nMode = pJobInfo->GetPrintMode()) & TCMANUALSTACK_PRINT_ONSTACKITEMS) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) || ((nMode & TCMANUALSTACK_PRINT_DISPATCHEDITEMS) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) || ((nMode & TCMANUALSTACK_PRINT_NOTRELEASEDITEMS) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED) || ((nMode & TCMANUALSTACK_PRINT_FAILEDRELEASEITEMS) && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE)) && (!pJobInfo->GetPrintRange(nRange[0], nRange[1]) || (nItem + 1 >= (INT)nRange[0] && nItem + 1 <= (INT)nRange[1])) && (!pJobInfo->GetPrintRange(tRange[0], tRange[1]) || (pItem->GetReleaseTime().GetTimeInSeconds() >= tRange[0].GetTime() && pItem->GetReleaseTime().GetTimeInSeconds() <= tRange[1].GetTime())))
		{
			if ((pAttribute = new CTextViewAttribute))
			{
				if (GetText(nItem, szItem, pAttribute))
				{
					pAttributes.Add(pAttribute);
					szContents.Add(szItem);
					continue;
				}
				delete pAttribute;
			}
			break;
		}
	}
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCK]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_GROUPED]);
	pSymbols.Add(m_pFlagSymbols[TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_BLOCKED]);
	pSymbols.Add(m_pCheckFlagSymbols[TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_NONE]);
	pSymbols.Add(m_pCheckFlagSymbols[TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_ON]);
	pSymbols.Add(m_pCheckFlagSymbols[TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_OFF]);
	pSymbols.Add(m_pCheckFlagSymbols[TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED]);
	pSymbols.Add(m_pResultSymbols[TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_GO]);
	pSymbols.Add(m_pResultSymbols[TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_WAIT]);
	pSymbols.Add(m_pResultSymbols[TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_FAIL]);
	pSymbols.Add(m_pResultSymbols[TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PEV_GO]);
	pSymbols.Add(m_pResultSymbols[TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PEV_NOGO]);
	pSymbols.Add(m_pAlertSymbols[TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_INFORMATION]);
	pSymbols.Add(m_pAlertSymbols[TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_WARNING]);
	pSymbols.Add(m_pAlertSymbols[TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_ERROR]);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINTERLOCK);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINTERLOCKIDLE);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINTERLOCKPENDING);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINTERLOCKSUCCESS);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINTERLOCKFAILURE);
	nSymbolIDs.Add(IDP_TCMANUALSTACKGROUPED);
	nSymbolIDs.Add(IDP_TCMANUALSTACKBLOCKED);
	nSymbolIDs.Add(IDP_TCMANUALSTACKCHECKSNONE);
	nSymbolIDs.Add(IDP_TCMANUALSTACKCHECKSON);
	nSymbolIDs.Add(IDP_TCMANUALSTACKCHECKSOFF);
	nSymbolIDs.Add(IDP_TCMANUALSTACKCHECKSDISABLED);
	nSymbolIDs.Add(IDP_TCMANUALSTACKPTVGO);
	nSymbolIDs.Add(IDP_TCMANUALSTACKPTVWAIT);
	nSymbolIDs.Add(IDP_TCMANUALSTACKPTVFAIL);
	nSymbolIDs.Add(IDP_TCMANUALSTACKPEVGO);
	nSymbolIDs.Add(IDP_TCMANUALSTACKPEVNOGO);
	nSymbolIDs.Add(IDP_TCMANUALSTACKINFORMATION);
	nSymbolIDs.Add(IDP_TCMANUALSTACKWARNING);
	nSymbolIDs.Add(IDP_TCMANUALSTACKERROR);
	return((nItem == nItems) ? TRUE : FALSE);
}

VOID CTCManualStackView::UpdateContent(BOOL bRedraw)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nDigits;
	CPoint  ptToolTip;
	CString  szItem;
	CString  szNumber;
	CString  szColumn;
	CString  szToolTip[3];
	CStringTools  cStringTools;
	CTCManualStackItem  *pItem;
	CTextViewAttribute  cAttribute;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
	{
		UpdateTelecommand(nItem);
		continue;
	}
	for (nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCManualStackItem *)NULL)
		{
			if (pItem->GetResult() != TCMANUALSTACKITEM_RESULT_NONE)
			{
				pItem->SetResult(TCMANUALSTACKITEM_RESULT_NONE);
				continue;
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nColumn = FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)), nDigits = cStringTools.ConvertLongIntToString(m_pItems[0].GetSize()).GetLength(), nDigits = max(nDigits, 3), nCount = GetTextCount(); nItem < nItems; nItem++)
	{
		for (szNumber = cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits), szNumber += (m_nSearchIndex == nItem) ? STRING(IDS_TCMANUALSTACK_LIST_FIND_SYMBOL) : EMPTYSTRING; (pItem = m_pItems[0].GetAt(nItem)) && TranslateTelecommand(pItem, &cAttribute); )
		{
			for (szItem = szNumber + TranslateTelecommand(pItem, (nItem == 0)); (nItem >= nCount && InsertText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE)) || (nItem < nCount && SetText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE)); ) break;
			break;
		}
	}
	if (bRedraw)
	{
		if (m_wndToolTip.IsVisibleAtPoint(ptToolTip))
		{
			if ((pItem = (FindTextFromPoint(ptToolTip, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCManualStackItem *)NULL))
			{
				for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
				{
					m_wndToolTip.Update(szToolTip[0], szToolTip[1]);
					break;
				}
			}
		}
		DrawContent();
	}
}

VOID CTCManualStackView::RecalcLayout()
{
	CWnd  *pWnd;
	CRect  rWnd;
	CRect  rView;

	if (CThread::IsSameThread(this))
	{
		for (pWnd = GetParent()->GetWindow(GW_CHILD), GetParent()->GetClientRect(rView); pWnd != (CWnd *)NULL; pWnd = pWnd->GetNextWindow())
		{
			if (pWnd->GetSafeHwnd() != GetSafeHwnd())
			{
				pWnd->GetWindowRect(rWnd);
				GetParent()->ScreenToClient(rWnd);
				rWnd.left = rView.left;
				rWnd.right = rView.right;
				rView.SubtractRect(rView, rWnd);
			}
		}
		MoveWindow(rView);
	}
	CTextView::RecalcLayout();
}

VOID CTCManualStackView::RefreshContent()
{
	CTextViewLock  cLock(this);

	EnableFullViewMode(m_bFullViewMode);
	UpdateContent();
}

VOID CTCManualStackView::DrawContent()
{
	CTextView::DrawContent();
}
VOID CTCManualStackView::DrawContent(CDC *pDC)
{
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nHeight;
	CRect  rArea;
	CRect  rText[2];
	CRect  rContent;

	for (nItem = FindFirstVisibleText(), nItems = FindLastVisibleText() + 1, nItems = min(GetTextCount() - 1, nItems), m_wndContentCtrl.GetClientRect(rContent), rText[0] = m_wndContentCtrl.CalcTextRect(GetTextCount() - 1), nWidth = rContent.Width(), nHeight = m_wndContentCtrl.CalcTextLines(SPACE); nItem >= 0 && nItem <= nItems; nItem++)
	{
		DrawBackground(pDC, GetTextCount() + GetTextCount() % 2 + nItem % 2, -1, (rText[0].right < rContent.right) ? CRect(rText[0].right + m_wndContentCtrl.m_wTextIndent[1], max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rContent.top), rContent.right, (rText[1] = m_wndContentCtrl.CalcTextRect(nItem)).bottom + m_wndContentCtrl.m_wTextSpacing[1]) : CRect(0, 0, 0, 0));
		DrawText(pDC, nItem, m_wndContentCtrl.m_szContentText.GetAt(nItem));
	}
	for (rArea.SetRect(rContent.left, (GetTextCount() > 0) ? min(max(rText[0].bottom + m_wndContentCtrl.m_wTextSpacing[1], rContent.top), rContent.bottom) : rContent.top, rContent.right, rContent.bottom), nItem = GetTextCount(); rArea.top < rContent.bottom; rArea.DeflateRect(0, nHeight, 0, 0), nItem++)
	{
		DrawBackground(pDC, nItem, -1, CRect(rArea.left, rArea.top, rArea.right, rArea.top + nHeight));
		continue;
	}
}

VOID CTCManualStackView::DrawText(INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, pszText);
}
VOID CTCManualStackView::DrawText(CDC *pDC, INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(pDC, nItem, pszText);
}
VOID CTCManualStackView::DrawText(INT nItem, INT nColumn, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, nColumn, pszText);
}
VOID CTCManualStackView::DrawText(CDC *pDC, INT nItem, INT nColumn, LPCTSTR pszText)
{
	CDC  cDC;
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	BOOL  bText;
	BOOL  bState;
	UINT  nFormat;
	UINT  nSymbol[4];
	CRect  rText[3];
	CFont  cTextFont;
	CFont  *pOldFont;
	CSize  sizeSymbol;
	CSize  sizeBitmap;
	CPoint  ptBitmap;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	COLORREF  nColor[2];
	CTextViewAttribute  *pAttribute;

	for (m_wndContentCtrl.GetClientRect(rText[0]), rText[1] = m_wndContentCtrl.CalcTextRect(nItem, nColumn), sizeBitmap.cx = m_wndContentCtrl.m_wTextIndent[0] + rText[1].Width() + m_wndContentCtrl.m_wTextIndent[1], sizeBitmap.cy = m_wndContentCtrl.m_wTextSpacing[0] + rText[1].Height() + m_wndContentCtrl.m_wTextSpacing[1]; rText[2].IntersectRect(rText[0], CRect(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[1].right + m_wndContentCtrl.m_wTextIndent[1], rText[1].bottom + m_wndContentCtrl.m_wTextSpacing[1])); )
	{
		for (nFormat = GetColumnFormat(nItem, nColumn), nColor[0] = GetColumnColor(nItem, nColumn), bState = TRUE; (pAttribute = m_wndContentCtrl.m_pContentTextAttributes.GetAt(nItem)); )
		{
			bState = (pAttribute->GetColumnBlinkingState(nColumn, bState) || pAttribute->GetColumnBlinkingState(-1, bState)) ? bState : TRUE;
			break;
		}
		if (cDC.CreateCompatibleDC(pDC))
		{
			if (cBitmap.CreateCompatibleBitmap(pDC, sizeBitmap.cx, sizeBitmap.cy))
			{
				if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
				{
					for (cDC.SetBkMode(TRANSPARENT), cDC.SetTextColor(nColor[0]), DrawBackground(&cDC, nItem, nColumn, CRect(m_wndContentCtrl.m_wTextIndent[0] - rText[1].left, 0, sizeBitmap.cx, sizeBitmap.cy)), bText = FALSE; (pOldFont = (nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS)) && nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS))) ? ((GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)) : (CFont *)NULL); )
					{
						cDC.DrawText(((nPos = (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER))) ? (INT)_tcscspn(pszText, CString(GetSymbolDelimiter())) : -1) >= 0) ? CString(pszText).Left(nPos) : pszText, CRect(m_wndContentCtrl.m_wTextIndent[0], m_wndContentCtrl.m_wTextSpacing[0], sizeBitmap.cx - m_wndContentCtrl.m_wTextIndent[0], sizeBitmap.cy - m_wndContentCtrl.m_wTextSpacing[0]), nFormat);
						cDC.SelectObject(pOldFont);
						bText = TRUE;
						break;
					}
					if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)) || !bText)
					{
						for (sizeSymbol.cx = sizeSymbol.cy = 0, nColor[1] = cDC.GetNearestColor(VGA_COLOR_WHITE), cTextFont.DeleteObject(); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
						{
							sizeSymbol.cx = sizeSymbol.cy = cDC.GetTextExtent(SPACE).cy;
							m_sizeCheckFlagSymbols = sizeSymbol;
							m_sizeResultSymbols = sizeSymbol;
							m_sizeAlertSymbols = sizeSymbol;
							m_sizeFlagSymbols = sizeSymbol;
							cDC.SelectObject(pOldFont);
							cTextFont.DeleteObject();
							break;
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)))
						{
							for (nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION))) ? ((!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING))) ? ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR))) ? TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_ERROR : -1) : TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_WARNING) : TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_INFORMATION; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pAlertSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, pszText).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS)))
						{
							for (nIndex = 0, nCount = sizeof(nSymbol) / sizeof(UINT), nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCK : -1, nSymbol[1] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE : ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING : ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS : ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE : -1))), nSymbol[2] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_GROUPED : -1, nSymbol[3] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED))) ? TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_BLOCKED : -1; nIndex < nCount; nIndex++)
							{
								if (bState  &&  nSymbol[nIndex] != (UINT)-1) m_pFlagSymbols[nSymbol[nIndex]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, nCount, nIndex).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								continue;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON))) ? TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO))) ? TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT))) ? TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_WAIT : nSymbol[0], nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL))) ? TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_FAIL : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON))) ? TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO))) ? TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PEV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO))) ? TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PEV_NOGO : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON))) ? TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
					}
					ptBitmap.x = max(rText[2].left - rText[1].left + m_wndContentCtrl.m_wTextIndent[0], 0);
					ptBitmap.y = max(rText[2].top - rText[1].top + m_wndContentCtrl.m_wTextSpacing[0], 0);
					pDC->BitBlt(max(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[2].left), max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[2].top), min(sizeBitmap.cx - ptBitmap.x, rText[2].Width()), min(sizeBitmap.cy - ptBitmap.y, rText[2].Height()), &cDC, ptBitmap.x, ptBitmap.y, SRCCOPY);
					cDC.SelectObject(pOldBitmap);
				}
				cBitmap.DeleteObject();
			}
			cDC.DeleteDC();
		}
		break;
	}
}

BOOL CTCManualStackView::DrawBackground(CDC *pDC, INT nItem, INT nColumn, CONST RECT &rItem)
{
	CDC  cDC[2];
	INT  nWidth;
	INT  nHeight;
	BOOL  bBackground;
	CBitmap  cBitmap[2];
	CBitmap  *pOldBitmap[2];
	CTCManualStackItem  *pItem;
	BLENDFUNCTION  sBlend;

	if (cDC[0].CreateCompatibleDC(pDC))
	{
		if (cDC[1].CreateCompatibleDC(pDC))
		{
			if (cBitmap[0].CreateCompatibleBitmap(pDC, (nWidth = rItem.right - rItem.left), (nHeight = rItem.bottom - rItem.top)))
			{
				if (cBitmap[1].CreateCompatibleBitmap(pDC, nWidth, nHeight))
				{
					if ((pOldBitmap[0] = cDC[0].SelectObject(&cBitmap[0])))
					{
						if ((pOldBitmap[1] = cDC[1].SelectObject(&cBitmap[1])))
						{
							for (sBlend.BlendFlags = 0, sBlend.BlendOp = AC_SRC_OVER, sBlend.AlphaFormat = 0, sBlend.SourceConstantAlpha = TCMANUALSTACKVIEW_COLUMNTRANSPARENCY; nWidth > 0 && nHeight > 0; )
							{
								for (cDC[0].FillSolidRect(0, 0, nWidth, nHeight, m_nBackgroundColor[nItem % 2]), cDC[1].FillSolidRect(0, 0, nWidth, nHeight, VGA_COLOR_WHITE), cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend); (pItem = m_pItems[0].GetAt(nItem)) && (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_RELEASED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE); )
								{
									cDC[0].FillSolidRect(0, 0, nWidth, nHeight, LookupStatusColor(pItem->GetStatus()));
									cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
									break;
								}
								for (sBlend.SourceConstantAlpha = 0xFF - 2 * sBlend.SourceConstantAlpha; (pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected(); )
								{
									for (cDC[0].SetTextColor(pDC->GetTextColor()); (bBackground = CTextView::DrawBackground(&cDC[0], -(nItem + 1), nColumn, CRect(0, 0, nWidth, nHeight))); )
									{
										cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
										break;
									}
									for (pDC->SetTextColor(cDC[0].GetTextColor()); !bBackground; )
									{
										cDC[1].BitBlt(0, 0, nWidth, nHeight, &cDC[0], 0, 0, SRCCOPY);
										break;
									}
									break;
								}
								pDC->BitBlt(rItem.left, rItem.top, nWidth, nHeight, &cDC[1], 0, 0, SRCCOPY);
								break;
							}
							cDC[0].SelectObject(pOldBitmap[0]);
							cDC[1].SelectObject(pOldBitmap[1]);
							cBitmap[0].DeleteObject();
							cBitmap[1].DeleteObject();
							cDC[0].DeleteDC();
							cDC[1].DeleteDC();
							return TRUE;
						}
						cDC[0].SelectObject(pOldBitmap[0]);
					}
					cBitmap[1].DeleteObject();
				}
				cBitmap[0].DeleteObject();
			}
			cDC[1].DeleteDC();
		}
		cDC[0].DeleteDC();
	}
	return FALSE;
}

CTCManualStackWnd *CTCManualStackView::GetParent() CONST
{
	return((CTCManualStackWnd *)CTextView::GetParent());
}

BOOL CTCManualStackView::ShowTelecommandProperties(INT nIndex)
{
	INT  nItem;
	INT  nItems;
	BOOL  bResult;
	CTCManualStackItem  *pItem[3];
	CTCManualStackItems  pItems[2];
	CDatabaseTCParameters  pParameters;
	CTCManualStackComposedItem  cComposedItem;
	CTCManualStackItemPropertiesDialog  cTCFunctionPropertiesDialog;
	CTCManualStackComposedItemPropertiesDialog  cTCSequencePropertiesDialog;

	if (Lock())
	{
		if ((pItem[0] = m_pItems[0].GetAt(nIndex)))
		{
			if (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
			{
				if (m_pItems[0].Collect(nIndex, pItems[0]) > 0 && pItems[0].GetSize() == 1)
				{
					if (GetDatabase()->GetTCFunctionBlocks()->Find(pItem[0]->GetName()) < 0)
					{
						if ((pItem[1] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
						{
							for (ActivateTelecommand(nIndex), pItem[1]->Copy(pItem[0]), m_bProperties = TRUE, Unlock(); (bResult = (cTCFunctionPropertiesDialog.Create(GetParent(), pItem[1]) == IDOK)); )
							{
								if ((pItem[1]->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) != TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP)
								{
									if (pItems[1].Add(pItem[1]) >= 0)
									{
										ReloadTelecommands(pItems[1]);
										break;
									}
									delete pItem[1];
									break;
								}
								if ((pItem[2] = new CTCManualStackItem))
								{
									if (pItem[2]->Copy(pItem[1]))
									{
										pItem[2]->SetFlags((pItem[2]->GetFlags() & ~TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP);
										pItem[2]->SetAttributes((pItem[2]->GetAttributes() & ~TCFUNCTION_EXETYPE_FIRSTSTEP) | TCFUNCTION_EXETYPE_SECONDSTEP);
										pItem[2]->SetReleaseInterlock(EMPTYSTRING);
										pItem[2]->SetInterlock(EMPTYSTRING);
										if (pItems[1].Add(pItem[1]) >= 0)
										{
											if (pItems[1].Add(pItem[2]) >= 0)
											{
												ReloadTelecommands(pItems[1]);
												break;
											}
											delete pItem[2];
											break;
										}
									}
									delete pItem[2];
								}
								delete pItem[1];
								break;
							}
							for (ActivateTelecommand(nIndex), m_bProperties = FALSE; !bResult; )
							{
								delete pItem[1];
								break;
							}
							SetFocus();
							return TRUE;
						}
						Unlock();
						return FALSE;
					}
					if ((pItem[1] = pItems[0].GetAt((INT)pItems[0].GetUpperBound())))
					{
						pItem[1]->SetMembership(pItem[0]->GetName());
						pItem[1]->SetMembershipDescription(pItem[0]->GetDescription());
						pItem[1]->SetMembershipSize(1);
						pItem[1]->SetMembershipID(0);
					}
				}
				if ((pItem[1] = ((nItems = (INT)pItems[0].GetSize()) >= 1) ? pItems[0].GetAt(0) : (CTCManualStackItem *)NULL))
				{
					for (ActivateTelecommand(nIndex), cComposedItem.SetName(pItem[1]->GetMembership()), cComposedItem.SetDescription(pItem[1]->GetMembershipDescription()), pItem[1]->GetMembershipParameters(pParameters), cComposedItem.SetParameters(pParameters), cComposedItem.CTCManualStackItems::Copy(&pItems[0]), m_bProperties = TRUE, Unlock(); cTCSequencePropertiesDialog.Create(GetParent(), &cComposedItem) == IDOK; )
					{
						if ((pItem[1] = (pItems[1].Copy(&cComposedItem) && ReloadTelecommands(pItems[1]) && nItems == 1) ? pItems[0].GetAt(nItems - 1) : (CTCManualStackItem *)NULL) != (CTCManualStackItem *)NULL)
						{
							for (pItem[1]->SetMembership(EMPTYSTRING), pItem[1]->SetMembershipDescription(EMPTYSTRING), pItem[1]->SetMembershipSize(0), pItem[1]->SetMembershipID(-1); (pItem[2] = m_pItems[0].GetAt((nItem = m_pItems[0].Find(pItem[1])))); )
							{
								DeleteTelecommand(nItem);
								delete pItem[2];
								break;
							}
						}
						break;
					}
					ActivateTelecommand(nIndex);
					m_bProperties = FALSE;
					SetFocus();
					return TRUE;
				}
			}
		}
		Unlock();
	}
	return FALSE;
}
BOOL CTCManualStackView::ShowTelecommandProperties(INT nIndex, CTCManualStackComposedItem *pItem)
{
	CTCManualStackItems  pItems;
	CTCManualStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	for (m_bProperties = TRUE; cReleaseConstraintsDialog.Create(GetParent(), pItem, nIndex) == IDOK; )
	{
		if (pItems.Copy(pItem) && ReloadTelecommands(pItems))
		{
			m_bProperties = FALSE;
			return TRUE;
		}
		break;
	}
	return((m_bProperties = FALSE));
}

BOOL CTCManualStackView::InsertTelecommand(INT nIndex, CTCManualStackItem *pItem)
{
	CTextViewAttribute  cAttribute;

	for (TranslateTelecommand(pItem, &cAttribute); InsertText(nIndex, TranslateTelecommand(pItem, (nIndex == 0)), &cAttribute, FALSE); )
	{
		m_pItems[0].InsertAt(nIndex, pItem, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::UpdateTelecommand(INT nIndex)
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nResult;
	BOOL  bForced;
	BOOL  bCheck[10];
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tExecutionOffset[2];
	CStringArray  szParameters;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCManualStackItem  *pItem;

	if ((pItem = m_pItems[0].GetAt(nIndex)))
	{
		if (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED || pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED)
		{
			for (bForced = ((m_nTelecommandingFlags & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)) || (pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV))) ? TRUE : FALSE, bCheck[0] = /*((m_nTelecommandingUplinkState & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) == (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? TRUE:FALSE*/ TRUE, bCheck[1] = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED || pItem->GetReleaseTime() > 0) ? ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && pItem->GetReleaseTime() <= tReleaseTime[2] && tReleaseInterval > 0 && (pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() >= tReleaseTime[2].GetTime() || (tReleaseTime[0] == 0 && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)))) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && pItem->GetReleaseTime() <= tReleaseTime[2] && tReleaseTime[0] <= tReleaseTime[1] && tReleaseTime[1] >= tReleaseTime[2]) || (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() <= tReleaseTime[2] && (pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() >= tReleaseTime[2].GetTime() || tReleaseInterval == 0 || bAfterDispatch)) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseInterval == 0 && tReleaseTime[1] == 0 && tReleaseTime[0] <= tReleaseTime[2]) || (!pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))) : TRUE, bCheck[2] = (((!pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && (((pItem->GetExecutionTime(tExecutionTime) && tExecutionTime >= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() && tExecutionTime <= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[1].GetTotalSeconds())) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) && GetTMService()->CheckTMStreamCorrelation())) && (!pItem->GetExecutionOBRT(nExecutionOBRT) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime) && tExecutionTime >= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() && tExecutionTime <= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[1].GetTotalSeconds()))) ? TRUE : FALSE, bCheck[3] = (GetTCService()->CheckTCInterlock(pItem) || !m_bTelecommandingInterlockMode || bForced) ? TRUE : FALSE, bCheck[4] = (GetTCService()->IsCommandSourceSubSystemEnabled(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, pItem) || bForced) ? TRUE : FALSE, bCheck[5] = ((pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_ONBOARDBUFFER) != TCMANUALSTACKITEM_FAILURE_PTV_ONBOARDBUFFER || bForced) ? TRUE : FALSE, bCheck[6] = (m_bTelecommandingReleaseWaitMode || !bCheck[5]) ? TRUE : FALSE, bCheck[7] = (abs((INT)(tReleaseTime[2].GetTimeInSeconds() - pItem->GetReleaseTime().GetTimeInSeconds())) <= 1 || pItem->GetReleaseTime() == 0) ? TRUE : FALSE, bCheck[8] = (m_nTelecommandingState & TCMANUALSTACK_STATE_DEFAULT) ? TRUE : FALSE, nResult = pItem->GetResult(); (bCheck[9] = bCheck[0] && (bCheck[1] && (bCheck[6] || bCheck[7])) && bCheck[2] && bCheck[3] && bCheck[4] && bCheck[5] && bCheck[8]); )
			{
				pItem->SetResult((pItem->GetResult() & ~(TCMANUALSTACKITEM_RESULT_PTV_WAIT | TCMANUALSTACKITEM_RESULT_PTV_FAIL | TCMANUALSTACKITEM_FAILURE_PTV_UPLINK | TCMANUALSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW | TCMANUALSTACKITEM_FAILURE_PTV_EXECUTIONTIME | TCMANUALSTACKITEM_FAILURE_PTV_INTERLOCK | TCMANUALSTACKITEM_FAILURE_PTV_SUBSYSTEM | TCMANUALSTACKITEM_FAILURE_PTV_ONBOARDBUFFER)) | TCMANUALSTACKITEM_RESULT_PTV_GO);
				break;
			}
			if (!bCheck[9])
			{
				pItem->SetResult((((!bCheck[1] || (!bCheck[6] && !bCheck[7])) && (!pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) || pItem->GetReleaseTime().GetTime() > 0 || bAfterDispatch) && pItem->GetReleaseTime() < tReleaseTime[2]) || !bCheck[2]) ? ((pItem->GetResult() & ~(TCMANUALSTACKITEM_RESULT_PTV_GO | TCMANUALSTACKITEM_RESULT_PTV_WAIT)) | TCMANUALSTACKITEM_RESULT_PTV_FAIL) : ((pItem->GetResult() & ~(TCMANUALSTACKITEM_RESULT_PTV_GO | TCMANUALSTACKITEM_RESULT_PTV_FAIL)) | TCMANUALSTACKITEM_RESULT_PTV_WAIT));
				pItem->SetResult((!bCheck[0]) ? (pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PTV_UPLINK) : (pItem->GetResult() & ~TCMANUALSTACKITEM_FAILURE_PTV_UPLINK));
				pItem->SetResult((!bCheck[1]) ? (pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW) : (pItem->GetResult() & ~TCMANUALSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW));
				pItem->SetResult((!bCheck[2]) ? (pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PTV_EXECUTIONTIME) : (pItem->GetResult() & ~TCMANUALSTACKITEM_FAILURE_PTV_EXECUTIONTIME));
				pItem->SetResult((!bCheck[3]) ? (pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PTV_INTERLOCK) : (pItem->GetResult() & ~TCMANUALSTACKITEM_FAILURE_PTV_INTERLOCK));
				pItem->SetResult((!bCheck[4]) ? (pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PTV_SUBSYSTEM) : (pItem->GetResult() & ~TCMANUALSTACKITEM_FAILURE_PTV_SUBSYSTEM));
			}
			if ((pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV)) == 0 && (m_nTelecommandingFlags & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)) == 0)
			{
				for (pItem->SetResult(pItem->GetResult() & ~(TCMANUALSTACKITEM_FAILURE_PEV_TELEMETRY | TCMANUALSTACKITEM_FAILURE_PEV_CORRELATION | TCMANUALSTACKITEM_FAILURE_PEV_2NDSTEP | TCMANUALSTACKITEM_FAILURE_PEV_PARAMETERS)); (pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP) && !GetTCService()->CheckTCOnBoardBufferQueue(pItem); )
				{
					pItem->SetResult(pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PEV_2NDSTEP);
					break;
				}
				if (pItem->GetPreExeGroupRef() >= 0 && !pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionOBRT(nExecutionOBRT))
				{
					if (!GetTCService()->CheckTCFunctionPreexecutionParameterGroup(pItem->GetPreExeGroupRef(), szParameters))
					{
						pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
						pItem->SetResult(pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PEV_PARAMETERS);
					}
					if (GetTMService()->CheckTMStreamInterruption()) pItem->SetResult(pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PEV_TELEMETRY);
				}
				for (nElement = 0, nElements = ((!pItem->GetExecutionTime(tExecutionTime) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) && !pItem->GetExecutionOBRT(nExecutionOBRT)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
				{
					if ((pFunctionElement = pItem->GetAt(nElement)) && (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)) break;
					continue;
				}
				for (nParameter = 0, nParameters = (nElement == nElements) ? ((pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0) : -1; nParameter < nParameters; nParameter++)
				{
					if ((pPacketParameter = cPacket.GetAt(nParameter)) && (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)) break;
					continue;
				}
				for (; (nElement != nElements || nParameter != nParameters) && !GetTMService()->CheckTMStreamCorrelation(); )
				{
					pItem->SetResult(pItem->GetResult() | TCMANUALSTACKITEM_FAILURE_PEV_CORRELATION);
					break;
				}
				if (pItem->GetResult() & (TCMANUALSTACKITEM_FAILURE_PEV_TELEMETRY | TCMANUALSTACKITEM_FAILURE_PEV_CORRELATION | TCMANUALSTACKITEM_FAILURE_PEV_2NDSTEP | TCMANUALSTACKITEM_FAILURE_PEV_PARAMETERS))
				{
					pItem->SetResult((pItem->GetResult() & ~TCMANUALSTACKITEM_RESULT_PEV_GO) | TCMANUALSTACKITEM_RESULT_PEV_NOGO);
					return((pItem->GetResult() != nResult) ? TRUE : FALSE);
				}
			}
			pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
			pItem->SetResult((pItem->GetResult() & ~TCMANUALSTACKITEM_RESULT_PEV_NOGO) | TCMANUALSTACKITEM_RESULT_PEV_GO);
			return((pItem->GetResult() != nResult) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCManualStackView::DeleteTelecommand(INT nIndex)
{
	m_pItems[0].RemoveAt(nIndex);
	return DeleteText(nIndex, FALSE);
}

BOOL CTCManualStackView::ActivateTelecommand(INT nIndex, BOOL bActivate, BOOL bRedraw)
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bKeys;
	BOOL  bToggle;
	BOOL  bSelected;
	CPtrArray  pItems;
	CTCManualStackItem  *pItem[2];

	if ((((pItem[0] = m_pItems[0].GetAt(nIndex)) && (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK || (pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED && (m_nTelecommandingState & TCMANUALSTACK_STATE_SUSPENDED)) || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED || pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE)) || nIndex < 0) && SetCurText((bActivate  &&  nIndex >= 0 && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) ? nIndex : -1))
	{
		for (nItem[1] = 0, nItems[1] = ((bKeys = (!HIBYTE(GetKeyState(VK_SHIFT)) && !HIBYTE(GetKeyState(VK_CONTROL)))) || nIndex < 0 || pItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ONSTACK) ? (INT)m_pItems[0].GetSize() : 0, bSelected = (nIndex >= 0) ? pItem[0]->IsSelected() : FALSE, bToggle = (nIndex < 0 || pItem[0]->GetStatus() != TCMANUALSTACKITEM_STATUS_ONSTACK) ? TRUE : FALSE, m_nSearchIndex = -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem[1])))
			{
				if (nIndex < 0 || bKeys)
				{
					pItem[1]->Select(FALSE);
					continue;
				}
			}
		}
		for (nItem[1] = 0, nItems[1] = (HIBYTE(GetKeyState(VK_SHIFT))) ? (INT)m_pItems[0].GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) && pItem[1]->IsSelected()) break;
			continue;
		}
		for (nItem[0] = min(nIndex, (nItem[1] = (nItem[1] == nItems[1] || nItems[1] < 0) ? nIndex : nItem[1])), nItems[0] = max(nIndex, nItem[1]); nItem[0] <= nItems[0] && nItem[0] < m_pItems[0].GetSize() && nIndex >= 0; nItem[0]++)
		{
			for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0]))) ? m_pItems[0].Collect(nItem[0], pItems) : 0; nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pItem[1] = (CTCManualStackItem *)pItems.GetAt(nItem[1])) != (CTCManualStackItem *)NULL)
				{
					pItem[1]->Select((bActivate) ? ((bToggle) ? !bSelected : TRUE) : FALSE);
					continue;
				}
			}
		}
		if (bRedraw) DrawContent();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::IsActivatedTelecommand(INT nIndex) CONST
{
	return((nIndex == GetCurText()) ? TRUE : FALSE);
}

VOID CTCManualStackView::ResetTelecommand(CTCManualStackItem *pItem) CONST
{
	UINT  nOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CUIntArray  nReleaseIDs;

	pItem->SetFlags(pItem->GetFlags() & ~(TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED | TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ALL));
	pItem->SetArmTime(0);
	pItem->SetDispatchTime(0);
	pItem->SetTransmissionTime(0);
	pItem->SetReleaseTime(0);
	pItem->SetVerificationTime(0);
	pItem->SetVerificationStageState();
	pItem->SetReleaseIDs(nReleaseIDs);
	pItem->SetExecutionTime((pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && !pItem->GetExecutionOBRT(nOBRT)) ? tExecutionTime : 0);
	pItem->Alert((pItem->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? TCMANUALSTACKITEM_ALERTTYPE_INFORMATION : TCMANUALSTACKITEM_ALERTTYPE_NONE, (pItem->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? 0 : -1, (pItem->GetFlags() & (TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP | TCMANUALSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? ((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_1STSTEP) ? STRING(IDS_TCMANUALSTACK_MESSAGE_FIRSTSTEP_INFORMATION) : STRING(IDS_TCMANUALSTACK_MESSAGE_SECONDSTEP_INFORMATION)) : EMPTYSTRING);
	pItem->SetResult(TCMANUALSTACKITEM_RESULT_NONE);
	pItem->SetStatus(TCMANUALSTACKITEM_STATUS_ONSTACK);
}

CString CTCManualStackView::TranslateTelecommand(CONST CTCManualStackItem *pItem, BOOL bFirst) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nCategory;
	INT  nCategories;
	INT  nSubSystem;
	INT  nSubSystems;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	UINT  nInterlockState;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CString  szItem;
	CString  szName;
	CString  szFlags;
	CString  szAlert;
	CString  szStatus;
	CString  szColumn;
	CString  szCategory;
	CString  szArgument;
	CString  szTCPacket;
	CString  szSubSystem;
	CString  szChecks[3];
	CString  szResult[2];
	CString  szAuthorization;
	CString  szDispatchTime;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CString  szVerificationTime;
	CTimeTag  tExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow[3];
	CStringArray  szCategories;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;
	CLongUIntArray  nCategoryIDs;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCMANUALSTACK_TITLEITEM_NUMBER)
		{
			szAlert = (pItem->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_INFORMATION || pItem->IsAlerted(0) == TCMANUALSTACKITEM_ALERTTYPE_INFORMATION) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION)) : EMPTYSTRING;
			szAlert = (pItem->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_WARNING || pItem->IsAlerted(0) == TCMANUALSTACKITEM_ALERTTYPE_WARNING) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING)) : szAlert;
			szAlert = (pItem->IsAlerted() == TCMANUALSTACKITEM_ALERTTYPE_ERROR || pItem->IsAlerted(0) == TCMANUALSTACKITEM_ALERTTYPE_ERROR) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR)) : szAlert;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAlert) : szAlert;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_NAME)
		{
			szName.Format(STRING(IDS_TCMANUALSTACK_LIST_NAME_FORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership());
			szName = (pItem->GetMembership().IsEmpty()) ? pItem->GetName() : szName;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szName) : szName;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_DESCRIPTION)
		{
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDescription()) : pItem->GetDescription();
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_CATEGORY)
		{
			for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nCategoryIDs), szCategory.Empty(); nCategory < nCategories; nCategory++)
			{
				if (pItem->GetAttributes() & nCategoryIDs.GetAt(nCategory))
				{
					szCategory = szCategories.GetAt(nCategory);
					break;
				}
			}
			szItem += (nColumn > 0) ? (CString(GetColumnDelimiter()) + szCategory) : szCategory;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_SUBSYSTEM)
		{
			for (szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDestinationSubSystem()) : pItem->GetDestinationSubSystem(); pItem->GetTCPacket(&cPacket); )
			{
				for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
				{
					if (GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)) == cPacket.GetAPID()) break;
					continue;
				}
				for (szSubSystem.Format(STRING(IDS_TCMANUALSTACK_LIST_SUBSYSTEM_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(cPacket.GetAPID(), max(cStringTools.ConvertUIntToString((szSubSystems.GetSize() > 0) ? GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(szSubSystems.GetUpperBound())) : 0, 16).GetLength(), 3), 16)); nSubSystem < nSubSystems; )
				{
					szItem += szSubSystem;
					break;
				}
				break;
			}
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_ARGUMENTS)
		{
			for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) != TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1] && (nArgumentsCount < m_nArguments || m_nArguments < 0); nArgument[1]++)
			{
				if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0 || m_bAllArguments))
				{
					szArgument.Format(STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
					szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
					nArgumentsCount++;
				}
			}
			for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0] && (nArgumentsCount < m_nArguments || m_nArguments < 0); nArgument[0]++)
			{
				if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0 || m_bAllArguments))
				{
					szArgument.Format(STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText());
					szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
					nArgumentsCount++;
				}
			}
			szItem += (nColumn > 0) ? ((!nArgumentsCount) ? ((nArguments[0] + nArguments[1] == 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_NONE)) : CString(GetColumnDelimiter())) : EMPTYSTRING) : ((nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCMANUALSTACK_LIST_ARGUMENTS_NONE) : EMPTYSTRING);
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_FLAGS)
		{
			szFlags.Format(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_FORMAT), (!pItem->GetInterlock().IsEmpty()) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK) : EMPTYSTRING, ((nInterlockState = CheckTelecommandReleaseInterlockState(pItem)) != TCINTERLOCK_STATE_NONE) ? ((nInterlockState == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE) : ((nInterlockState == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING) : ((nInterlockState == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS) : ((nInterlockState == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE) : EMPTYSTRING)))) : EMPTYSTRING, (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_GROUPED) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED) : EMPTYSTRING, (pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) ? STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED) : EMPTYSTRING);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szFlags) : szFlags;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_TCPACKET)
		{
			szTCPacket = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetTag() : EMPTYSTRING;
			szItem += (nColumn > 0) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCMANUALSTACK_LIST_TCPACKET_BLOCKED)) : (GetColumnDelimiter() + szTCPacket)) : (((pItem->GetFlags() & TCMANUALSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? STRING(IDS_TCMANUALSTACK_LIST_TCPACKET_BLOCKED) : szTCPacket);
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_DISPATCHTIME)
		{
			szDispatchTime = (pItem->GetDispatchTime() > 0) ? pItem->GetDispatchTime().FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_DISPATCHTIME_FORMAT)) : EMPTYSTRING;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDispatchTime) : szDispatchTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_RELEASETIME)
		{
			for (szReleaseTime[0] = STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FAILEDFORMAT); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				szReleaseTime[0] = tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT));
				break;
			}
			if (!tReleaseTime[0].GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCMANUALSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_WITHPREVIOUS);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET)
		{
			for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
			{
				szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_OFFSETFORMAT));
				szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[2].Format(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[3].Format(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCMANUALSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((bFirst || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : ((bFirst || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME)
		{
			szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
			szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
			szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET)
		{
			for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
			{
				szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_OFFSETFORMAT));
				szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
				szExecutionTime[1].Format(STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[2].Format(STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[3].Format(STRING(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCMANUALSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((bFirst || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : ((bFirst || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_AUTHORIZATION)
		{
			szAuthorization = ((pItem->GetFlags() & TCMANUALSTACKITEM_CHECKFLAG_PREAUTHORIZED) || (pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? STRING(IDS_TCMANUALSTACK_LIST_AUTHORIZATION_AUTOMATIC) : STRING(IDS_TCMANUALSTACK_LIST_AUTHORIZATION_MANUAL);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAuthorization) : szAuthorization;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW)
		{
			for (szReleaseTime[0].Empty(); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					szReleaseTime[0].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
					szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)));
					szReleaseTime[0] = (tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[1];
				}
				break;
			}
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
			{
				szReleaseTime[0].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseTime[1].GetTimeInSeconds() - tReleaseTime[0].GetTimeInSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_IMMEDIATETIMEFORMAT), (LPCTSTR)tReleaseTime[1].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[2].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseTime[1] > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			else if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
			{
				szReleaseTime[0].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_IMMEDIATEOFFSETFORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[2].Format(STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCMANUALSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			for (; !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval); )
			{
				szReleaseTime[0] = STRING(IDS_TCMANUALSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDFORMAT);
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PTVCHECKS)
		{
			szChecks[0] = (((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV) != TCMANUALSTACKITEM_CHECKFLAG_DISABLEPTV  &&  m_bTelecommandingInterlockMode) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPTV) ? STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF) : STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON)) : STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[0]) : szChecks[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PTVRESULT)
		{
			szResult[0] = (pItem->GetResult() & TCMANUALSTACKITEM_RESULT_PTV_GO) ? STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO) : EMPTYSTRING;
			szResult[0] = (pItem->GetResult() & TCMANUALSTACKITEM_RESULT_PTV_WAIT) ? STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT) : szResult[0];
			szResult[0] = (pItem->GetResult() & TCMANUALSTACKITEM_RESULT_PTV_FAIL) ? STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL) : szResult[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[0]) : szResult[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PEVCHECKS)
		{
			szChecks[1] = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE || pItem->GetPreExeGroupRef() >= 0) ? ((((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) != TCMANUALSTACKITEM_CHECKFLAG_DISABLEPEV) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDEPEV) ? STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF) : STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON)) : STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED)) : STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[1]) : szChecks[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_PEVRESULT)
		{
			szResult[1] = (pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCMANUALSTACKITEM_RESULT_PEV_GO)) ? STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO) : EMPTYSTRING;
			szResult[1] = (pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCMANUALSTACKITEM_RESULT_PEV_NOGO)) ? STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO) : szResult[1];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[1]) : szResult[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW)
		{
			for (szVerificationTime.Empty(); (pItem->GetFlags() & (TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV | TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV)) == 0; )
			{
				for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) || pItem->GetExecutionTime(tExecutionTime); )
				{
					szVerificationTime.Format(STRING(IDS_TCMANUALSTACK_LIST_CEVTIMEWINDOW_TIMETAGGEDFORMAT), (LPCTSTR)CTimeTag(tExecutionTime.GetTime() + 1000000 * tTimeWindow[0].GetTotalSeconds()).FormatGmt(IDS_TCMANUALSTACK_LIST_EXECUTIONTIME_FORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[1].GetTotalSeconds()));
					break;
				}
				if (szVerificationTime.IsEmpty())
				{
					if (pItem->GetExecutionOBRT(nExecutionOBRT))
					{
						szVerificationTime.Format(STRING(IDS_TCMANUALSTACK_LIST_CEVTIMEWINDOW_OBRTFORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[1].GetTotalSeconds()));
						break;
					}
					szVerificationTime.Format(STRING(IDS_TCMANUALSTACK_LIST_CEVTIMEWINDOW_FORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[0].GetTotalSeconds()), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()));
				}
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szVerificationTime) : szVerificationTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_CEVCHECKS)
		{
			szChecks[2] = (pItem->GetType() == TCMANUALSTACKITEM_TYPE_PROCEDURE || pItem->GetExeVerGroupRef() >= 0) ? ((((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) != TCMANUALSTACKITEM_CHECKFLAG_DISABLECEV) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCMANUALSTACKITEM_CHECKFLAG_OVERRIDECEV) ? STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF) : STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON)) : STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED)) : STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[2]) : szChecks[2];
			continue;
		}
		if (LookupColumnName(szColumn) == TCMANUALSTACK_TITLEITEM_STATUS)
		{
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_ONSTACK) : EMPTYSTRING;
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_ARMED) : szStatus;
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_DISPATCHED) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_DISPATCHED) : szStatus;
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_RELEASED) ? ((pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_RELEASED) : STRING(IDS_TCMANUALSTACK_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_NOTRELEASED) ? ((pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_NOTRELEASED) : STRING(IDS_TCMANUALSTACK_LIST_STATUS_NOTEXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_FAILEDRELEASE) ? ((pItem->GetType() != TCMANUALSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCMANUALSTACK_LIST_STATUS_FAILEDRELEASE) : STRING(IDS_TCMANUALSTACK_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szStatus) : szStatus;
			continue;
		}
	}
	return szItem;
}
BOOL CTCManualStackView::TranslateTelecommand(CONST CTCManualStackItem *pItem, CTextViewAttribute *pAttribute) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nColumnID;
	UINT  nAlertType;
	BOOL  bAlertFlag;
	CTextViewAttribute  cAttribute;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), pAttribute->Copy(&cAttribute); nColumn < nColumns; nColumn++)
	{
		pAttribute->SetColumnColor(nColumn, LookupColumnColor(nColumn));
		continue;
	}
	for (nColumnID = (pItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE); nColumnID & TCMANUALSTACK_TITLEITEMS_ALL; nColumnID <<= 1)
	{
		if (pItem->IsAlerted(nColumnID) != TCMANUALSTACKITEM_ALERTTYPE_NONE  &&  FindColumnIndex(LookupColumnName(nColumnID)) < 0)
		{
			pAttribute->SetColumnBlinking(-1, TRUE);
			return TRUE;
		}
	}
	for (nColumn = 0, nColumns = (pItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE) ? (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize() : 0, bAlertFlag = FALSE; nColumn < nColumns; nColumn++)
	{
		if ((nAlertType = pItem->IsAlerted(LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))) != TCMANUALSTACKITEM_ALERTTYPE_NONE)
		{
			pAttribute->SetColumnColor(nColumn, LookupAlertColor(nColumn, nAlertType));
			pAttribute->SetColumnBlinking(nColumn, TRUE);
			bAlertFlag = TRUE;
			continue;
		}
		pAttribute->SetColumnColor(nColumn, LookupAlertColor(nColumn, nAlertType));
		pAttribute->SetColumnBlinking(nColumn, FALSE);
	}
	if (pItem->IsAlerted() != TCMANUALSTACKITEM_ALERTTYPE_NONE  &&  pItem->IsAlerted(0) == TCMANUALSTACKITEM_ALERTTYPE_NONE  &&  !bAlertFlag) pAttribute->SetColumnBlinking(-1, TRUE);
	return TRUE;
}

BOOL CTCManualStackView::AdjustTelecommandAlerts(CONST CTCItem *pAlertItem, CTCManualStackItem *pItem) CONST
{
	CTimeTag  tAcknowledgeTime;

	if (pAlertItem->GetFlags() & TCITEM_ACKNOWLEDGEFLAG_ALL)
	{
		for (tAcknowledgeTime = pItem->GetAcknowledgeTime(), pItem->SetFlags(pItem->GetFlags() & ~TCMANUALSTACKITEM_ACKNOWLEDGEFLAG_ALL); pItem->GetAcknowledgeTime() != tAcknowledgeTime || tAcknowledgeTime == 0; )
		{
			pItem->Alert(TCMANUALSTACKITEM_ALERTTYPE_ANY);
			break;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::CheckTelecommandReleaseWindow(CONST CTCManualStackItem *pItem) CONST
{
	CTimeTag  tTime;

	return CheckTelecommandReleaseWindow(tTime, pItem);
}
BOOL CTCManualStackView::CheckTelecommandReleaseWindow(CONST CTimeTag &tTime, CONST CTCManualStackItem *pItem) CONST
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;

	if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0)
	{
		if (tReleaseTime[0] > 0 && tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		if (tReleaseTime[0] == 0 && (!pItem->GetReleaseTime().GetTime() || pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime())) return TRUE;
		return FALSE;
	}
	if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0)
	{
		if (tReleaseTime[1].GetTime() > tReleaseTime[2].GetTime()) return TRUE;
		return FALSE;
	}
	if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && tReleaseInterval > 0)
	{
		if (pItem->GetReleaseTime() > 0 && pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		if (pItem->GetReleaseTime() == 0 && pItem->GetDispatchTime() > 0 && pItem->GetDispatchTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		return FALSE;
	}
	return((pItem->GetReleaseTime() > 0 || !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? TRUE : FALSE);
}

BOOL CTCManualStackView::CheckTelecommandExecutionTime(CONST CTCManualStackItem *pItem) CONST
{
	CTimeTag  tTime;

	return CheckTelecommandExecutionTime(tTime, pItem);
}
BOOL CTCManualStackView::CheckTelecommandExecutionTime(CONST CTimeTag &tTime, CONST CTCManualStackItem *pItem) CONST
{
	UINT  nExecutionOBRT;
	CTimeTag  tExecutionTime;
	CTimeSpan  tExecutionOffset[2];

	return(((!pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionOBRT(nExecutionOBRT)) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && (!pItem->GetExecutionOBRT(nExecutionOBRT) || GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) && tTime.GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() <= tExecutionTime.GetTime() && tTime.GetTime() + 1000000 * (TIMETAG)tExecutionOffset[1].GetTotalSeconds() >= tExecutionTime.GetTime())) ? TRUE : FALSE);
}

UINT CTCManualStackView::CheckTelecommandReleaseInterlockState(CONST CTCManualStackItem *pItem) CONST
{
	CString  szInterlock;
	UINT  nInterlockState;
	BOOL  bInterlock;

	return((pItem->GetReleaseInterlock(szInterlock, bInterlock) && GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlock, nInterlockState)) ? nInterlockState : TCINTERLOCK_STATE_NONE);
}

CString CTCManualStackView::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCMANUALSTACK_TITLEITEM_NUMBER) return STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER);
	if (nColumn == TCMANUALSTACK_TITLEITEM_NAME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_DESCRIPTION) return STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CATEGORY) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY);
	if (nColumn == TCMANUALSTACK_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCMANUALSTACK_TITLEITEM_ARGUMENTS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_FLAGS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_TCPACKET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCMANUALSTACK_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVRESULT) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVRESULT) return STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVCHECKS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS);
	if (nColumn == TCMANUALSTACK_TITLEITEM_STATUS) return STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCManualStackView::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER))) return TCMANUALSTACK_TITLEITEM_NUMBER;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME))) return TCMANUALSTACK_TITLEITEM_NAME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION))) return TCMANUALSTACK_TITLEITEM_DESCRIPTION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY))) return TCMANUALSTACK_TITLEITEM_CATEGORY;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM))) return TCMANUALSTACK_TITLEITEM_SUBSYSTEM;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS))) return TCMANUALSTACK_TITLEITEM_ARGUMENTS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS))) return TCMANUALSTACK_TITLEITEM_FLAGS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET))) return TCMANUALSTACK_TITLEITEM_TCPACKET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME))) return TCMANUALSTACK_TITLEITEM_DISPATCHTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME))) return TCMANUALSTACK_TITLEITEM_RELEASETIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET))) return TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME))) return TCMANUALSTACK_TITLEITEM_EXECUTIONTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET))) return TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION))) return TCMANUALSTACK_TITLEITEM_AUTHORIZATION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW))) return TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS))) return TCMANUALSTACK_TITLEITEM_PTVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT))) return TCMANUALSTACK_TITLEITEM_PTVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS))) return TCMANUALSTACK_TITLEITEM_PEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT))) return TCMANUALSTACK_TITLEITEM_PEVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW))) return TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS))) return TCMANUALSTACK_TITLEITEM_CEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS))) return TCMANUALSTACK_TITLEITEM_STATUS;
	return 0;
}

INT CTCManualStackView::LookupColumnsName(CONST CUIntArray &nColumns, CStringArray &szColumns) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), szColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		szColumns.Add(LookupColumnName(nColumns.GetAt(nIndex)));
		continue;
	}
	return((nCount == szColumns.GetSize()) ? (INT)szColumns.GetSize() : 0);
}

COLORREF CTCManualStackView::LookupColumnColor(UINT nColumn) CONST
{
	if (nColumn == TCMANUALSTACK_TITLEITEM_NUMBER) return GetDatabase()->GetTCManualStackNumberColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_NAME) return GetDatabase()->GetTCManualStackNameColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_DESCRIPTION) return GetDatabase()->GetTCManualStackDescriptionColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_CATEGORY) return GetDatabase()->GetTCManualStackCategoryColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_SUBSYSTEM) return GetDatabase()->GetTCManualStackSubSystemColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_ARGUMENTS) return GetDatabase()->GetTCManualStackArgumentsColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_FLAGS) return GetDatabase()->GetTCManualStackFlagsColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_TCPACKET) return GetDatabase()->GetTCManualStackTCPacketColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_DISPATCHTIME) return GetDatabase()->GetTCManualStackDispatchTimeColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIME) return GetDatabase()->GetTCManualStackReleaseTimeColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET) return GetDatabase()->GetTCManualStackReleaseTimeOffsetColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME) return GetDatabase()->GetTCManualStackExcutionTimeColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return GetDatabase()->GetTCManualStackExcutionTimeOffsetColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_AUTHORIZATION) return GetDatabase()->GetTCManualStackAuthorizationColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW) return GetDatabase()->GetTCManualStackPTVTimeWindowColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVCHECKS) return GetDatabase()->GetTCManualStackPTVChecksColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_PTVRESULT) return GetDatabase()->GetTCManualStackPTVResultColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVCHECKS) return GetDatabase()->GetTCManualStackPEVChecksColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_PEVRESULT) return GetDatabase()->GetTCManualStackPEVResultColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW) return GetDatabase()->GetTCManualStackCEVTimeWindowColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_CEVCHECKS) return GetDatabase()->GetTCManualStackCEVChecksColumnColor();
	if (nColumn == TCMANUALSTACK_TITLEITEM_STATUS) return GetDatabase()->GetTCManualStackStatusColumnColor();
	return GetSysColor(COLOR_WINDOWTEXT);
}

COLORREF CTCManualStackView::LookupStatusColor(UINT nStatus) CONST
{
	return((nStatus < (UINT)m_nStatusColors.GetSize()) ? m_nStatusColors.GetAt(nStatus) : m_nStatusColors.GetAt(TCMANUALSTACKITEM_STATUS_NONE));
}

COLORREF CTCManualStackView::LookupAlertColor(UINT nColumn, UINT nAlertType) CONST
{
	return((nAlertType < (UINT)m_nAlertColors.GetSize()) ? m_nAlertColors.GetAt(nAlertType) : LookupColumnColor(nColumn));
}

INT CTCManualStackView::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn).Compare(pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCManualStackView::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	INT  nDxChar;
	UINT  nColumn;
	CFont  cFont[2];
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((nColumn = LookupColumnName(pszColumn)) == 0)
		{
			for (GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[1])); )
			{
				nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
				pDC->SelectObject(pOldFont);
				break;
			}
			ReleaseDC(pDC);
			return nWidth;
		}
		for (GetTitleFont(&cFont[0]), GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[0])); )
		{
			nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
			pDC->SelectObject(pOldFont);
			break;
		}
		if ((pOldFont = pDC->SelectObject(&cFont[1])))
		{
			if ((nDxChar = (pDC->GetTextMetrics(&tmFont) > 0) ? (4 * tmFont.tmAveCharWidth / 3) : 0) > 0)
			{
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_NUMBER) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackNumberColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_NAME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackNameColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_DESCRIPTION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackDescriptionColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CATEGORY) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackCategoryColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_SUBSYSTEM) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackSubSystemColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_ARGUMENTS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackArgumentsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_FLAGS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackFlagsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_TCPACKET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackTCPacketColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_DISPATCHTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackDispatchTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackReleaseTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackReleaseTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackExecutionTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackExecutionTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_AUTHORIZATION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackAuthorizationColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackPTVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackPTVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PTVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackPTVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackPEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_PEVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackPEVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackCEVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_CEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackCEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCMANUALSTACK_TITLEITEM_STATUS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCManualStackStatusColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		return nWidth;
	}
	return 0;
}

INT CTCManualStackView::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nWidth;
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (nColumns.GetAt(nIndex[0]) == LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex[1])))
			{
				nWidth = (nIndex[1] > 0) ? (m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]) - m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1] - 1)) : m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]);
				nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + nWidth) : nWidth);
				break;
			}
		}
		if (nIndex[1] == nCount[1])
		{
			nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0])))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0]))));
			continue;
		}
	}
	return((nCount[0] == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

CRect CTCManualStackView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, LPCTSTR pszText) CONST
{
	INT  nPos;
	CRect  rText;
	CRect  rSymbol;
	CFont  *pOldFont;
	CString  szText;
	CClientDC  cDC(NULL);

	for (szText = ((nPos = (szText = pszText).Find(GetSymbolDelimiter())) >= 0) ? szText.Left(nPos) : szText, rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), rSymbol.SetRectEmpty(); (pOldFont = (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)) && !rText.IsRectEmpty()) ? cDC.SelectObject((CFont *)&m_wndContentCtrl.m_cFont) : (CFont *)NULL); )
	{
		rSymbol.SetRect(rText.left + cDC.GetTextExtent(szText + SPACE).cx, rText.top, rText.left + cDC.GetTextExtent(szText + SPACE).cx + m_sizeAlertSymbols.cx, rText.top + m_sizeAlertSymbols.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		cDC.SelectObject(pOldFont);
		break;
	}
	return rSymbol;
}
CRect CTCManualStackView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, INT nCount, INT nIndex) CONST
{
	CRect  rText;
	CRect  rSymbol;
	CSize  sizeSymbol;

	for (rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS))) ? m_sizeFlagSymbols : CSize(0, 0), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS))) ? m_sizeCheckFlagSymbols : sizeSymbol, sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT)) || nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT))) ? m_sizeResultSymbols : sizeSymbol, rSymbol.SetRectEmpty(); sizeSymbol.cx > 0 && sizeSymbol.cy > 0 && !rText.IsRectEmpty(); )
	{
		rSymbol.SetRect(rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx), rText.top, rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx) + sizeSymbol.cx, rText.top + sizeSymbol.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		break;
	}
	return rSymbol;
}

TCHAR CTCManualStackView::GetSymbolDelimiter()
{
	return SPACE[0];
}

CString CTCManualStackView::ConstructToolTipTitle(CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nRow;
	INT  nColumn;
	CString  szTitle;

	switch (nTip)
	{
	case TCMANUALSTACK_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_ALERTINFORMATION);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_ALERTWARNING);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_ALERTERROR);
		break;
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_GROUPEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_BLOCKEDTITLE);
			break;
		}
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVRESULTTITLE);
		break;
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO)))
	{
		szTitle = STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVRESULTTITLE);
		break;
	}
	break;
	}
	}
	return szTitle;
}

CString CTCManualStackView::ConstructToolTipText(CONST CTCManualStackItem *pItem, CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nPos;
	INT  nRow;
	INT  nCount;
	INT  nColumn;
	INT  nParameter;
	INT  nParameters;
	UINT  nScope;
	UINT  nStage;
	UINT  nState;
	BOOL  bSuccess;
	CString  szText;
	CString  szAlertText;
	CString  szCheckState[2];
	CString  szCheckResult[2];
	CString  szCheckReason[2];
	CString  szInterlockName;
	CString  szInterlockStage;
	CString  szInterlockState;
	CString  szInterlockScope[2];
	CStringArray  szParameters;
	CDatabaseTCPreExeGroup  *pTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pTCExeVerGroup;
	CDatabaseTCPreExeGroupParameter  *pTCPreExeGroupParameter;

	switch (nTip)
	{
	case TCMANUALSTACK_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR)))
	{
		for (szText = (pItem->IsAlerted(-1, szText) != TCMANUALSTACKITEM_ALERTTYPE_NONE || pItem->IsAlerted(0, szText) != TCMANUALSTACKITEM_ALERTTYPE_NONE) ? szText : EMPTYSTRING; (nCount = pItem->GetAlertCount(TCMANUALSTACKITEM_ALERTTYPE_ERROR)) > 1; )
		{
			szAlertText.Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_ALERTCOUNT), nCount);
			szText += CString(EOL) + szAlertText;
			break;
		}
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			if (GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_MANUALSTACK, pItem->GetInterlock(), nScope, nStage, nState))
			{
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKTEXT), (LPCTSTR)pItem->GetInterlock(), (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			if (pItem->GetReleaseInterlock(szInterlockName, bSuccess) && GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_MANUALSTACK, szInterlockName, nScope, nStage, nState))
			{
				szInterlockState = (nState == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTATEIDLE) : EMPTYSTRING;
				szInterlockState = (nState == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTATEPENDING) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTATESUCCESS) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTATEFAILURE) : szInterlockState;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKEDTEXT), (LPCTSTR)szInterlockName, (bSuccess) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKWAITSTATESUCCESS) : STRING(IDS_TCMANUALSTACK_TOOLTIP_INTERLOCKWAITSTATEFAILURE), (LPCTSTR)szInterlockState, (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCMANUALSTACK_TOOLTIP_GROUPEDTEXT);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCMANUALSTACK_TOOLTIP_BLOCKEDTEXT);
			break;
		}
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVCHECKSSTATEOFF) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVCHECKSSTATEDISABLED) : szCheckState[0];
		szCheckState[1].Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVCHECKSTEXT), (LPCTSTR)szCheckState[0]);
		szText = szCheckState[1];
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSSTATENONE) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCPreExeGroup = GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSSTATENONE) : STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCExeVerGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCExeVerGroup->GetName());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCMANUALSTACK_TOOLTIP_CEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL)))
	{
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVRESULTSTATEGO) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVRESULTSTATEFAIL);
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVRESULTSTATEWAIT) : szCheckResult[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_UPLINK) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONUPLINK) : EMPTYSTRING;
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW) ? ((!szCheckReason[0].IsEmpty()) ? ((pItem->GetReleaseTime().GetTimeInSeconds() > CTime::GetCurrentTime().GetTime()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONRELEASETIMEWINDOW)) : (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONEXPIREDRELEASETIMEWINDOW))) : ((pItem->GetReleaseTime().GetTimeInSeconds() > CTime::GetCurrentTime().GetTime()) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONRELEASETIMEWINDOW) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONEXPIREDRELEASETIMEWINDOW))) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_EXECUTIONTIME) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONEXECUTIONTIME)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONEXECUTIONTIME)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_INTERLOCK) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONINTERLOCK)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONINTERLOCK)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_SUBSYSTEM) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSUBSYSTEM)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSUBSYSTEM)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_ONBOARDBUFFER) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONONBOARDBUFFER)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONONBOARDBUFFER)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PTV_ENCODING) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONENCODING)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONENCODING)) : szCheckReason[0];
		szCheckResult[1].Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVRESULTTEXT), (LPCTSTR)szCheckResult[0]);
		szCheckReason[1].Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_PTVREASONTEXT), (LPCTSTR)szCheckReason[0]);
		szText = (!szCheckReason[0].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	case TCMANUALSTACK_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO)))
	{
		for (szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO))) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVRESULTSTATENOGO) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVRESULTSTATEGO), szCheckResult[1].Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVRESULTTEXT), (LPCTSTR)szCheckResult[0]), szCheckReason[0].Empty(); (pTCPreExeGroup = ((pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PEV_PARAMETERS) && pItem->GetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters) > 0) ? GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef()) : (CDatabaseTCPreExeGroup *)NULL); )
		{
			for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pTCPreExeGroupParameter = pTCPreExeGroup->GetAt(pTCPreExeGroup->Find(szParameters.GetAt(nParameter)))))
				{
					szCheckReason[1].Format(STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETERFORMAT), (LPCTSTR)pTCPreExeGroupParameter->GetTag());
					szCheckReason[0] += (!szCheckReason[0].IsEmpty()) ? (STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETERSEPARATOR) + szCheckReason[1]) : szCheckReason[1];
					if (szCheckReason[0].GetLength() > lstrlen(STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETERS)))
					{
						szCheckReason[0] += STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETERELLIPSIS);
						break;
					}
					continue;
				}
				szParameters.RemoveAt(nParameter);
				nParameters--;
				nParameter--;
			}
			szCheckReason[1].Format((szParameters.GetSize() > 0) ? ((szParameters.GetSize() > 1) ? STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETERS) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONPARAMETER)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONEXPRESSION), (LPCTSTR)szCheckReason[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		szCheckReason[1] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PEV_2NDSTEP) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONEXTRA2NDSTEP)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASON2NDSTEP)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PEV_TELEMETRY) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONEXTRATELEMETRY)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONTELEMETRY)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCMANUALSTACKITEM_FAILURE_PEV_CORRELATION) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONEXTRACORRELATION)) : STRING(IDS_TCMANUALSTACK_TOOLTIP_PEVREASONCORRELATION)) : szCheckReason[1];
		szText = (!szCheckReason[1].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	break;
	}
	return szText;
}

BOOL CTCManualStackView::SetClipboardFormat(UINT nFormat)
{
	return(((m_nClipboardFormat = nFormat) > 0) ? TRUE : FALSE);
}

UINT CTCManualStackView::GetClipboardFormat() CONST
{
	return m_nClipboardFormat;
}

BOOL CTCManualStackView::CopyToClipboard(BOOL bCut)
{
	INT  nItem;
	INT  nItems;
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItems  pStackItems;
	CByteArray  nItemsData;
	CTCManualStackItem  *pItem[2];

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCMANUALSTACKITEM_STATUS_ONSTACK)
		{
			if ((pItem[1] = new CTCManualStackItem) != (CTCManualStackItem *)NULL)
			{
				if (pItem[1]->Copy(pItem[0]) && pStackItems.Add(pItem[1]) >= 0)
				{
					if (!bCut) continue;
					DeleteTelecommand(nItem);
					delete pItem[0];
					nItems--;
					nItem--;
					continue;
				}
				delete pItem[1];
			}
			break;
		}
	}
	if (OpenClipboard())
	{
		if (EmptyClipboard())
		{
			if (pStackItems.GetSize() > 0 && pStackItems.Map(nItemsData))
			{
				if ((hData = GlobalAlloc(GHND, nItemsData.GetSize())) != (HGLOBAL)NULL)
				{
					if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
					{
						CopyMemory(pData, nItemsData.GetData(), nItemsData.GetSize());
						SetClipboardData(GetClipboardFormat(), hData);
						GlobalUnlock(hData);
						CloseClipboard();
						return TRUE;
					}
					GlobalFree(hData);
				}
			}
		}
		CloseClipboard();
	}
	return FALSE;
}

BOOL CTCManualStackView::PasteFromClipboard(INT nIndex, BOOL bAfter)
{
	INT  nItem[3];
	INT  nItems[3];
	BOOL  bDispatch;
	DWORD  dwOffset;
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItem  *pStackItem;
	CTCItems  pStackItems;
	CTimeTag  tLoadTime;
	CTimeSpan  tInterval;
	CByteArray  nItemsData;
	CTCInterlock  *pInterlock[2];
	CTCInterlocks  pInterlocks;
	CTCManualStackItem  *pItem[2];
	CTCManualStackItems  pItems;
	COleDataObject  cOleDataObject;
	CComputerToken  cComputerToken;

	if (cOleDataObject.AttachClipboard())
	{
		if ((hData = cOleDataObject.GetGlobalData(GetClipboardFormat())))
		{
			if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
			{
				for (nItemsData.SetSize(GlobalSize(hData)), CopyMemory(nItemsData.GetData(), pData, nItemsData.GetSize()); pStackItems.Unmap(nItemsData); )
				{
					for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
					{
						if ((pStackItem = pStackItems.GetAt(nItem[0])))
						{
							if ((pItem[0] = new CTCManualStackItem))
							{
								if (pItem[0]->CTCItem::Copy(pStackItem))
								{
									for (pItem[0]->SetComputerName(cComputerToken.GetComputerName()), pItem[0]->SetSourceType(TCITEM_SOURCETYPE_MANUALSTACK), pItem[0]->SetLoadTime(tLoadTime.GetTime()); pItem[0]->GetReleaseTimeWindow(dwOffset, tInterval, bDispatch); )
									{
										for (pItem[0]->SetReleaseTime(0); pItem[0]->IsAlerted(TCMANUALSTACK_TITLEITEM_RELEASETIME) != TCMANUALSTACKITEM_ALERTTYPE_NONE; )
										{
											pItem[0]->Alert(TCMANUALSTACKITEM_ALERTTYPE_NONE, TCMANUALSTACK_TITLEITEM_RELEASETIME);
											break;
										}
										break;
									}
									if (!pItem[0]->GetInterlock().IsEmpty())
									{
										for (GetTCService()->GetTCInterlocks(pInterlocks), pItem[0]->SetInterlock(EMPTYSTRING); (pInterlock[0] = pInterlocks.GetAt(pInterlocks.Find(pStackItem->GetComputerName(), pStackItem->GetSourceType(), pStackItem->GetInterlock()))); )
										{
											if ((pInterlock[1] = new CTCInterlock))
											{
												pInterlock[1]->Copy(pInterlock[0]);
												pInterlock[1]->SetSourceType(TCINTERLOCK_SOURCETYPE_MANUALSTACK);
												if (pInterlocks.Find(pInterlock[1]) < 0)
												{
													if (pInterlocks.Add(pInterlock[1]) < 0)
													{
														delete pInterlock[1];
														break;
													}
													pItem[0]->SetInterlock(pInterlock[1]->GetName());
													GetTCService()->SetTCInterlocks(pInterlocks);
													break;
												}
												pItem[0]->SetInterlock(pInterlock[1]->GetName());
												delete pInterlock[1];
											}
											break;
										}
									}
									if (pItem[0]->GetInterlock().IsEmpty() == pStackItem->GetInterlock().IsEmpty() && pItems.Add(pItem[0]) >= 0) continue;
								}
								delete pItem[0];
							}
						}
						break;
					}
					if (nItem[0] == nItems[0])
					{
						if (LoadTelecommands(pItems, nIndex, FALSE, !bAfter, bAfter, TRUE))
						{
							for (nItem[1] = 0, nItems[1] = (INT)pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
							{
								if ((pItem[0] = ((pItem[1] = pItems.GetAt(nItem[1]))) ? m_pItems[0].GetAt((nItem[2] = m_pItems[0].Find(pItem[1]))) : (CTCManualStackItem *)NULL))
								{
									if (!nItem[1]) ActivateTelecommand(nItem[2]);
									pItem[0]->Select();
								}
							}
							GlobalUnlock(hData);
							DrawContent();
							return TRUE;
						}
					}
					break;
				}
				GlobalUnlock(hData);
			}
		}
	}
	return FALSE;
}

BOOL CTCManualStackView::LoadTelecommandSymbols()
{
	INT  nSymbol[4];
	INT  nSymbols[4];
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (nSymbol[0] = 0, nSymbols[0] = TCMANUALSTACKVIEW_COMMANDFLAGSYMBOLS; nSymbol[0] < nSymbols[0]; nSymbol[0]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCK) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINTERLOCK) : ((nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINTERLOCKIDLE) : ((nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINTERLOCKPENDING) : ((nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINTERLOCKSUCCESS) : ((nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINTERLOCKFAILURE) : ((nSymbol[0] == TCMANUALSTACKVIEW_COMMANDFLAGSYMBOL_GROUPED) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKGROUPED) : MAKEINTRESOURCE(IDP_TCMANUALSTACKBLOCKED)))))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pFlagSymbols[nSymbol[0]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pFlagSymbols[nSymbol[0]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pFlagSymbols[nSymbol[0]];
									m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[0] > 0)
		{
			delete m_pFlagSymbols[--nSymbol[0]];
			m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[1] = 0, nSymbols[1] = TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol[1] < nSymbols[1]; nSymbol[1]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[1] == TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_NONE) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKCHECKSNONE) : ((nSymbol[1] == TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_ON) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKCHECKSON) : ((nSymbol[1] == TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOL_OFF) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKCHECKSOFF) : MAKEINTRESOURCE(IDP_TCMANUALSTACKCHECKSDISABLED))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pCheckFlagSymbols[nSymbol[1]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pCheckFlagSymbols[nSymbol[1]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pCheckFlagSymbols[nSymbol[1]];
									m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[1] > 0)
		{
			delete m_pCheckFlagSymbols[--nSymbol[1]];
			m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[2] = 0, nSymbols[2] = TCMANUALSTACKVIEW_COMMANDRESULTSYMBOLS; nSymbol[2] < nSymbols[2]; nSymbol[2]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[2] == TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_GO) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKPTVGO) : ((nSymbol[2] == TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_WAIT) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKPTVWAIT) : ((nSymbol[2] == TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PTV_FAIL) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKPTVFAIL) : ((nSymbol[2] == TCMANUALSTACKVIEW_COMMANDRESULTSYMBOL_PEV_GO) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKPEVGO) : MAKEINTRESOURCE(IDP_TCMANUALSTACKPEVNOGO)))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pResultSymbols[nSymbol[2]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pResultSymbols[nSymbol[2]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pResultSymbols[nSymbol[2]];
									m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[2] > 0)
		{
			delete m_pResultSymbols[--nSymbol[2]];
			m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[3] = 0, nSymbols[3] = TCMANUALSTACKVIEW_COMMANDALERTSYMBOLS; nSymbol[3] < nSymbols[3]; nSymbol[3]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[3] == TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_INFORMATION) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKINFORMATION) : ((nSymbol[3] == TCMANUALSTACKVIEW_COMMANDALERTSYMBOL_WARNING) ? MAKEINTRESOURCE(IDP_TCMANUALSTACKWARNING) : MAKEINTRESOURCE(IDP_TCMANUALSTACKERROR)), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pAlertSymbols[nSymbol[3]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pAlertSymbols[nSymbol[3]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pAlertSymbols[nSymbol[3]];
									m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[3] > 0)
		{
			delete m_pAlertSymbols[--nSymbol[3]];
			m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
		}
		break;
	}
	return((nSymbol[0] == nSymbols[0] && nSymbol[1] == nSymbols[1] && nSymbol[2] == nSymbols[2] && nSymbol[3] == nSymbols[3]) ? TRUE : FALSE);
}

VOID CTCManualStackView::FreeTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;

	for (nSymbol = 0, nSymbols = TCMANUALSTACKVIEW_COMMANDFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pFlagSymbols[nSymbol]->Destroy();
			delete m_pFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCMANUALSTACKVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pCheckFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pCheckFlagSymbols[nSymbol]->Destroy();
			delete m_pCheckFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCMANUALSTACKVIEW_COMMANDRESULTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pResultSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pResultSymbols[nSymbol]->Destroy();
			delete m_pResultSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCMANUALSTACKVIEW_COMMANDALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pAlertSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pAlertSymbols[nSymbol]->Destroy();
			delete m_pAlertSymbols[nSymbol];
		}
	}
}

BOOL CTCManualStackView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCManualStackView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCManualStackView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackView::SetLayoutInfo(CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	SetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCManualStackView::GetLayoutInfo(SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	GetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCManualStackView::Lock()
{
	CTCManualStackWnd  *pParentWnd;

	return(((pParentWnd = GetParent())) ? (pParentWnd->Lock() && CTextView::Lock()) : CTextView::Lock());
}

BOOL CTCManualStackView::Unlock()
{
	CTCManualStackWnd  *pParentWnd;

	return(((pParentWnd = GetParent())) ? (CTextView::Unlock() && pParentWnd->Unlock()) : CTextView::Unlock());
}

BEGIN_MESSAGE_MAP(CTCManualStackView, CTextView)
	//{{AFX_MSG_MAP(CTCManualStackView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_KILLFOCUS()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackView message handlers

int CTCManualStackView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CTextViewLock  cLock(this);

	if (CTextView::OnCreate(lpCreateStruct) != -1 && LoadTelecommandSymbols() && LoadToolTipCursor())
	{
		SetTimer(TCMANUALSTACKVIEW_COMMANDUPDATE_TIMERID, TCMANUALSTACKVIEW_COMMANDUPDATE_TIMEOUT, NULL);
		SetClipboardFormat(RegisterClipboardFormat(STRING(IDS_TELECOMMAND_CLIPBOARD_FORMAT)));
		return 0;
	}
	return -1;
}

BOOL CTCManualStackView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	INT  nRow;
	INT  nColumn;
	CPoint  ptCursor;
	CString  szText;
	CTextViewLock  cLock(this);

	for (GetCursorPos(&ptCursor), m_wndContentCtrl.ScreenToClient(&ptCursor); IsToolTipModeEnabled() && FindTextFromPoint(ptCursor, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szText); )
	{
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, szText).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
		}
		break;
	}
	return CTextView::OnSetCursor(pWnd, nHitTest, message);
}

BOOL CTCManualStackView::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nHeight;
	CRect  rContent;
	CFont  cFont[2];
	CPoint  ptMenu;
	CPoint  ptToolTip;
	LOGFONT  lfFont[2];
	CString  szColumn;
	CString  szToolTip[3];
	CLocaleMenu  cMenu;
	CMFCPopupMenu  *pFloatingMenu;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	if (message == WM_KEYDOWN)
	{
		if (wParam == VK_UP || wParam == VK_DOWN)
		{
			for (nIndex = GetCurTelecommand(); wParam == VK_UP && (nIndex > 0 || (nIndex < 0 && GetTelecommandCount() > 0)); )
			{
				ActivateTelecommand((nIndex = (nIndex < 0) ? (GetTelecommandCount() - 1) : (nIndex - 1)));
				ScrollTo(nIndex);
				return TRUE;
			}
			if (wParam == VK_DOWN && (nIndex < (INT)GetTelecommandCount() - 1 || (nIndex < 0 && GetTelecommandCount() > 0)))
			{
				ActivateTelecommand((nIndex = (nIndex >= 0) ? (nIndex + 1) : 0));
				ScrollTo(nIndex);
				return TRUE;
			}
		}
		if (wParam == VK_PRIOR || wParam == VK_NEXT)
		{
			for (nItem = nIndex = GetCurTelecommand(), nItems = GetTelecommandCount(), m_wndContentCtrl.GetClientRect(rContent), nHeight = (nItems > 0) ? ((nItem > 0) ? (m_wndContentCtrl.m_nContentTextPos.GetAt(nItem) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem - 1)) : m_wndContentCtrl.m_nContentTextPos.GetAt(0)) : 0; nItem >= 0 && nItem < nItems; nItem = (wParam == VK_NEXT) ? (nItem + 1) : (nItem - 1))
			{
				if (abs((INT)(m_wndContentCtrl.m_nContentTextPos.GetAt(nIndex) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem))) >= rContent.Height() - nHeight) break;
				continue;
			}
			if ((nItem = (nIndex >= 0) ? max(min(nItem, nItems - 1), 0) : ((wParam == VK_PRIOR) ? (nItems - 1) : 0)) != nIndex)
			{
				ActivateTelecommand(nItem);
				ScrollTo(nItem);
			}
			return TRUE;
		}
		if (wParam == VK_RETURN)
		{
			for (cLock.Release(); GetCurTelecommand() >= 0; )
			{
				ShowTelecommandProperties();
				break;
			}
			return FALSE;
		}
		if (wParam == VK_ESCAPE)
		{
			ActivateTelecommand(-1);
			return FALSE;
		}
		if (wParam == VK_TAB) GetParent()->SetFocus();
		return FALSE;
	}
	if (message == WM_LBUTTONDOWN)
	{
		if (ActivateTelecommand(FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))
		{
			m_wndContentCtrl.SetFocus();
			return TRUE;
		}
		return FALSE;
	}
	if (message == WM_LBUTTONDBLCLK)
	{
		for (cLock.Release(); IsActivatedTelecommand((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) || ActivateTelecommand(nIndex); )
		{
			ShowTelecommandProperties();
			break;
		}
		return FALSE;
	}
	if (message == WM_RBUTTONDOWN)
	{
		if (GetCursor() != GetToolTipCursor() && (((pItem = m_pItems[0].GetAt(FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))) && pItem->IsSelected()) || ((nIndex = FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) >= 0 && ActivateTelecommand(nIndex)) || (nIndex < 0 && ActivateTelecommand(nIndex))))
		{
			for (m_wndContentCtrl.ClientToScreen(&ptMenu), cLock.Release(); (pFloatingMenu = (cMenu.LoadMenu(IDR_TCMANUALSTACKFLOATINGMENU)) ? new CMFCPopupMenu : (CMFCPopupMenu *)NULL); )
			{
				pFloatingMenu->Create(GetParentFrame(), ptMenu.x, ptMenu.y, cMenu.Detach());
				return FALSE;
			}
		}
		if ((pItem = (GetCursor() == GetToolTipCursor() && FindTextFromPoint((ptToolTip = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))), nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCManualStackItem *)NULL))
		{
			for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
			{
				for (GetTextFont(&lfFont[0]), GetTextFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
				{
					m_wndToolTip.SetTitleFont(&cFont[0]);
					m_wndToolTip.SetTextFont(&cFont[1]);
					break;
				}
				m_wndToolTip.Create(&m_wndContentCtrl, ptToolTip, szToolTip[0], szToolTip[1]);
				break;
			}
		}
		return FALSE;
	}
	if (message == WM_SETFOCUS || message == WM_KILLFOCUS)
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), m_wndContentCtrl.m_bFocused = (message == WM_SETFOCUS) ? TRUE : FALSE; nItem < nItems; nItem++)
		{
			if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected())
			{
				DrawText(nItem, m_wndContentCtrl.m_szContentText.GetAt(nItem));
				continue;
			}
		}
	}
	if (message == WM_RBUTTONUP) m_wndToolTip.Destroy();
	return FALSE;
}

BOOL CTCManualStackView::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szColumn;
	CStringArray  szColumns;
	NMHEADER  *pNotifyInfo = (NMHEADER *)lParam;

	if (pNotifyInfo->hdr.code == HDN_ITEMCLICK)
	{
		for (szColumn = (GetColumns(szColumns) && pNotifyInfo->iItem < szColumns.GetSize()) ? szColumns.GetAt(pNotifyInfo->iItem) : EMPTYSTRING; !szColumn.IsEmpty(); )
		{
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER))
			{
				ReportEvent((!m_dlgSearchNumber.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_NAME))
			{
				ReportEvent((!m_dlgSearchName.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_DESCRIPTION))
			{
				ReportEvent((!m_dlgSearchDescription.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_CATEGORY))
			{
				ReportEvent((!m_dlgSearchCategory.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_SUBSYSTEM))
			{
				ReportEvent((!m_dlgSearchSubSystem.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS))
			{
				ReportEvent((!m_dlgSearchArguments.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS))
			{
				ReportEvent((!m_dlgSearchFlags.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_TCPACKET))
			{
				ReportEvent((!m_dlgSearchTCPacket.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_DISPATCHTIME))
			{
				ReportEvent((!m_dlgSearchDispatchTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIME))
			{
				ReportEvent((!m_dlgSearchReleaseTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_RELEASETIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchReleaseTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIME))
			{
				ReportEvent((!m_dlgSearchExecutionTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_EXECUTIONTIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchExecutionTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_AUTHORIZATION))
			{
				ReportEvent((!m_dlgSearchAuthorization.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchPTVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS))
			{
				ReportEvent((!m_dlgSearchPTVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT))
			{
				ReportEvent((!m_dlgSearchPTVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS))
			{
				ReportEvent((!m_dlgSearchPEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT))
			{
				ReportEvent((!m_dlgSearchPEVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchCEVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS))
			{
				ReportEvent((!m_dlgSearchCEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCMANUALSTACK_TITLEITEM_STATUS))
			{
				ReportEvent((!m_dlgSearchStatus.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			break;
		}
	}
	return CTextView::OnNotify(wParam, lParam, pResult);
}

void CTCManualStackView::OnTimer(UINT_PTR nEventID)
{
	INT  nID;
	INT  nIDs;
	INT  nItem;
	INT  nItems;
	BOOL  bUpdate;
	CTimeTag  tPreDispatchTime;
	CTCManualStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nID = 0, nIDs = (INT)m_nDispatchTimerIDs.GetSize(); nID < nIDs; nID++)
	{
		if (m_nDispatchTimerIDs.GetAt(nID) == (UINT)nEventID) break;
		continue;
	}
	if (nID < nIDs)
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), m_nDispatchTimerIDs.RemoveAt(nID), KillTimer(nEventID); nItem < nItems; nItem++)
		{
			if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->GetArmTime().GetTime() + 1000000 * m_tDispatchTimeWindow.GetTotalSeconds() <= tPreDispatchTime.GetTime() && pItem->GetStatus() == TCMANUALSTACKITEM_STATUS_ARMED) ResetTelecommand(pItem);
			continue;
		}
		UpdateContent();
	}
	if (nEventID == TCMANUALSTACKVIEW_COMMANDUPDATE_TIMERID)
	{
		for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate = GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
		{
			bUpdate |= UpdateTelecommand(nItem);
			continue;
		}
		if (bUpdate) UpdateContent();
		return;
	}
	CTextView::OnTimer(nEventID);
}

void CTCManualStackView::OnDestroy()
{
	INT  nID;
	INT  nIDs;
	CTextViewLock  cLock(this);

	for (nID = 0, nIDs = (INT)m_nDispatchTimerIDs.GetSize(), KillTimer(TCMANUALSTACKVIEW_COMMANDUPDATE_TIMERID), FreeTelecommandSymbols(), FreeToolTipCursor(); nID < nIDs; nID++)
	{
		KillTimer(m_nDispatchTimerIDs.GetAt(nID));
		continue;
	}
	CTextView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCManualStackWnd

IMPLEMENT_DYNAMIC(CTCManualStackWnd, CDisplayWnd)

CTCManualStackWnd::CTCManualStackWnd() : CDisplayWnd()
{
	SetType(DISPLAY_TYPE_TCMANUALSTACK);
	SetTelecommandingMode(TCMANUALSTACK_MODE_DEFAULT);
	SetTelecommandingState(TCMANUALSTACK_STATE_DEFAULT);
	SetTelecommandingChecks(TCMANUALSTACK_CHECKS_DEFAULT);
	EnableTelecommandingInterlockMode(TRUE);
	EnableTelecommandingReleaseWaitMode(FALSE);
	EnableTelecommandingAutoRejectionMode(FALSE);
	SetTelecommandingUplinkState(TCSERVICE_COMMANDHANDLERSTATE_NONE);
	SetListUpdateChecks(TCMANUALSTACK_UPDATELISTCHECKS_DEFAULTCOUNT);
	SetDefaultReleaseTimeWindow(TCMANUALSTACK_RELEASETIMEWINDOW_DEFAULTINTERVAL);
	SetDispatchTimeWindow(TCMANUALSTACK_DISPATCHTIMEWINDOW_DEFAULTINTERVAL);
	SetMiscellaneousOptions();
	SetLoggingOptions();
}

BOOL CTCManualStackWnd::Create(CMDIFrameWnd *pParentWnd, LPCTSTR pszTitle, PDISPLAYINFO pDefaultInfo, BOOL bDefault)
{
	if (CDisplayWnd::Create(pParentWnd, (!AfxIsValidString(pszTitle) || !_tcsstr(pszTitle, STRING(IDS_DISPLAY_TITLE_TCMANUALSTACK))) ? STRING(IDS_DISPLAY_TITLE_TCMANUALSTACK) : pszTitle, pDefaultInfo->rWnd, IDR_TCMANUALSTACKFRAME))
	{
		if (SetScope(pDefaultInfo->nScope) && SetMode(pDefaultInfo->nMode) && Customize(bDefault)) return TRUE;
		DestroyWindow();
	}
	return FALSE;
}

BOOL CTCManualStackWnd::SetLayout(CONST CUIntArray &nColumns)
{
	return m_wndView.SetLayout(nColumns);
}
BOOL CTCManualStackWnd::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_wndView.SetLayout(nColumns, nWidths);
}

BOOL CTCManualStackWnd::GetLayout(CUIntArray &nColumns) CONST
{
	return m_wndView.GetLayout(nColumns);
}
BOOL CTCManualStackWnd::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_wndView.GetLayout(nColumns, nWidths);
}

BOOL CTCManualStackWnd::SetListTitleFont(CFont *pFont)
{
	return m_wndView.SetListTitleFont(pFont);
}
BOOL CTCManualStackWnd::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return m_wndView.SetListTitleFont(plfFont);
}

BOOL CTCManualStackWnd::GetListTitleFont(CFont *pFont) CONST
{
	return m_wndView.GetListTitleFont(pFont);
}
BOOL CTCManualStackWnd::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return m_wndView.GetListTitleFont(plfFont);
}

BOOL CTCManualStackWnd::SetListItemsFont(CFont *pFont)
{
	return m_wndView.SetListItemsFont(pFont);
}
BOOL CTCManualStackWnd::SetListItemsFont(CONST LOGFONT *plfFont)
{
	return m_wndView.SetListItemsFont(plfFont);
}

BOOL CTCManualStackWnd::GetListItemsFont(CFont *pFont) CONST
{
	return m_wndView.GetListItemsFont(pFont);
}
BOOL CTCManualStackWnd::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return m_wndView.GetListItemsFont(plfFont);
}

BOOL CTCManualStackWnd::SetGridBackgroundColor(COLORREF nColor)
{
	return m_wndView.SetGridBackgroundColor(nColor);
}

BOOL CTCManualStackWnd::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	return m_wndView.GetGridBackgroundColor(nColor);
}

BOOL CTCManualStackWnd::SetAlertColors(CONST CUIntArray &nColors)
{
	return m_wndView.SetAlertColors(nColors);
}

BOOL CTCManualStackWnd::GetAlertColors(CUIntArray &nColors) CONST
{
	return m_wndView.GetAlertColors(nColors);
}

BOOL CTCManualStackWnd::SetSearchGroups(UINT nType, CONST CTCManualStackSearchGroups &pGroups)
{
	CTCServiceLock  cLock(this);

	return m_pSearchGroups[nType - 1].Copy(&pGroups);
}

BOOL CTCManualStackWnd::GetSearchGroups(UINT nType, CTCManualStackSearchGroups &pGroups) CONST
{
	CTCServiceLock  cLock(this);

	return pGroups.Copy(&m_pSearchGroups[nType - 1]);
}

BOOL CTCManualStackWnd::SetSearchFilters(UINT nType, CONST CTCManualStackSearchFilters &pFilters)
{
	CTCServiceLock  cLock(this);

	return m_pSearchFilters[nType - 1].Copy(&pFilters);
}

BOOL CTCManualStackWnd::GetSearchFilters(UINT nType, CTCManualStackSearchFilters &pFilters) CONST
{
	CTCServiceLock  cLock(this);

	return pFilters.Copy(&m_pSearchFilters[nType - 1]);
}

BOOL CTCManualStackWnd::SetItemTemplates(CONST CTCManualStackItemTemplates &pTemplates)
{
	CTCServiceLock  cLock(this);

	return m_pItemTemplates.Copy(&pTemplates);
}
BOOL CTCManualStackWnd::SetItemTemplates(CONST CTCManualStackComposedItemTemplates &pTemplates)
{
	CTCServiceLock  cLock(this);

	return m_pComposedItemTemplates.Copy(&pTemplates);
}

BOOL CTCManualStackWnd::GetItemTemplates(CTCManualStackItemTemplates &pTemplates) CONST
{
	CTCServiceLock  cLock(this);

	return pTemplates.Copy(&m_pItemTemplates);
}
BOOL CTCManualStackWnd::GetItemTemplates(CTCManualStackComposedItemTemplates &pTemplates) CONST
{
	CTCServiceLock  cLock(this);

	return pTemplates.Copy(&m_pComposedItemTemplates);
}

BOOL CTCManualStackWnd::SetListOptions(INT nArguments, BOOL bAll)
{
	INT  nArgumentCount;
	BOOL  bAllArguments;
	CTCServiceLock  cLock(this);

	for (GetListOptions(nArgumentCount, bAllArguments), m_wndView.SetListOptions(nArguments, bAll); nArguments != nArgumentCount || bAll != bAllArguments; )
	{
		LogListOptions(nArguments, bAll);
		break;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return m_wndView.GetListOptions(nArguments, bAll);
}

BOOL CTCManualStackWnd::SetListUpdateChecks(INT nCount)
{
	INT  nUpdateCount;
	CTCServiceLock  cLock(this);

	for (GetListUpdateChecks(nUpdateCount), m_wndView.SetListUpdateChecks(nCount); nCount != nUpdateCount; )
	{
		LogListUpdateChecks(nCount);
		break;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::GetListUpdateChecks(INT &nCount) CONST
{
	return m_wndView.GetListUpdateChecks(nCount);
}

BOOL CTCManualStackWnd::SetMiscellaneousOptions(UINT nOptions)
{
	UINT  nMiscellaneousOptions;
	CTCServiceLock  cLock(this);

	for (GetMiscellaneousOptions(nMiscellaneousOptions), m_wndView.SetMiscellaneousOptions(nOptions); nOptions != nMiscellaneousOptions; )
	{
		LogMiscellaneousOptions(nOptions);
		break;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return m_wndView.GetMiscellaneousOptions(nOptions);
}

BOOL CTCManualStackWnd::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CComputerToken  cComputerToken;

	return SetDefaultReleaseTimeWindow(cComputerToken.GetComputerName(), tTimeWindow);
}
BOOL CTCManualStackWnd::SetDefaultReleaseTimeWindow(LPCTSTR pszOriginator, CONST CTimeSpan &tTimeWindow)
{
	CTimeSpan  tInterval;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (GetDefaultReleaseTimeWindow(tInterval), m_wndView.SetDefaultReleaseTimeWindow(tTimeWindow); tTimeWindow != tInterval; )
	{
		for (LogDefaultReleaseTimeWindow(tTimeWindow.GetTotalSeconds()); cComputerToken.IsHost(); )
		{
			GetTCService()->SetDefaultReleaseTimeWindow(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, tTimeWindow);
			break;
		}
		break;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_wndView.GetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCManualStackWnd::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CComputerToken  cComputerToken;

	return SetDispatchTimeWindow(cComputerToken.GetComputerName(), tTimeWindow);
}
BOOL CTCManualStackWnd::SetDispatchTimeWindow(LPCTSTR pszOriginator, CONST CTimeSpan &tTimeWindow)
{
	CTimeSpan  tInterval;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (GetDispatchTimeWindow(tInterval), m_wndView.SetDispatchTimeWindow(tTimeWindow); tTimeWindow != tInterval; )
	{
		for (LogDispatchTimeWindow(tTimeWindow.GetTotalSeconds()); cComputerToken.IsHost(); )
		{
			GetTCService()->SetDispatchTimeWindow(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, tTimeWindow);
			break;
		}
		break;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_wndView.GetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCManualStackWnd::EnableFullViewMode(BOOL bEnable)
{
	return m_wndView.EnableFullViewMode(bEnable);
}

BOOL CTCManualStackWnd::IsFullViewModeEnabled() CONST
{
	return m_wndView.IsFullViewModeEnabled();
}

BOOL CTCManualStackWnd::EnableToolTipMode(BOOL bEnable)
{
	return m_wndView.EnableToolTipMode(bEnable);
}

BOOL CTCManualStackWnd::IsToolTipModeEnabled() CONST
{
	return m_wndView.IsToolTipModeEnabled();
}

BOOL CTCManualStackWnd::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	CTCServiceLock  cLock(this);

	if (m_wndView.StartTelecommanding(pTCProcessEngine, pTCEnvironment))
	{
		m_wndView.SetTelecommands(m_cSavedStack);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::UpdateTelecommanding(LPCTSTR pszOriginator, CONST CTCProcessCommandSourceInfo *pCommandSourceInfo)
{
	CTCServiceLock  cLock(this);

	SetTelecommandingMode(pszOriginator, pCommandSourceInfo->GetTelecommandingMode());
	SetTelecommandingState(pszOriginator, pCommandSourceInfo->GetTelecommandingState());
	SetTelecommandingChecks(pszOriginator, pCommandSourceInfo->GetTelecommandingChecks());
	EnableTelecommandingInterlockMode(pszOriginator, pCommandSourceInfo->IsTelecommandingInterlockModeEnabled());
	EnableTelecommandingReleaseWaitMode(pszOriginator, pCommandSourceInfo->IsTelecommandingReleaseWaitModeEnabled());
	EnableTelecommandingAutoRejectionMode(pszOriginator, pCommandSourceInfo->IsTelecommandingAutoRejectionModeEnabled());
	SetDefaultReleaseTimeWindow(pszOriginator, pCommandSourceInfo->GetDefaultReleaseTimeWindow());
	SetDispatchTimeWindow(pszOriginator, pCommandSourceInfo->GetDispatchTimeWindow());
	UpdateContents();
	return TRUE;
}
BOOL CTCManualStackWnd::UpdateTelecommanding(LPCTSTR pszEvent)
{
	return TRUE;
}

BOOL CTCManualStackWnd::StopTelecommanding()
{
	return m_wndView.StopTelecommanding();
}

BOOL CTCManualStackWnd::SetTelecommandingMode(UINT nMode, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingMode(cComputerToken.GetComputerName(), nMode, bUser);
}
BOOL CTCManualStackWnd::SetTelecommandingMode(LPCTSTR pszOriginator, UINT nMode, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	if (nMode != GetTelecommandingMode())
	{
		if (m_wndView.SetTelecommandingMode(nMode) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingMode(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, nMode) >= 0))
		{
			LogTelecommandingMode(pszOriginator, nMode, bUser);
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCManualStackWnd::GetTelecommandingMode() CONST
{
	return m_wndView.GetTelecommandingMode();
}

BOOL CTCManualStackWnd::SetTelecommandingChecks(UINT nFlags, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingChecks(cComputerToken.GetComputerName(), nFlags, bUser);
}
BOOL CTCManualStackWnd::SetTelecommandingChecks(LPCTSTR pszOriginator, UINT nFlags, BOOL bUser)
{
	UINT  nOldFlags;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; (nOldFlags = GetTelecommandingChecks()) != nFlags; )
	{
		if (m_wndView.SetTelecommandingChecks(nFlags) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingChecks(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, nFlags) >= 0))
		{
			if ((nFlags & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)) != (nOldFlags & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)) == 0) ? ~(TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE) : (nFlags & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)), bUser);
			if ((nFlags & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)) != (nOldFlags & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)) == 0) ? ~(TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE) : (nFlags & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)), bUser);
			if ((nFlags & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE)) != (nOldFlags & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE)) == 0) ? ~(TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE) : (nFlags & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE)), bUser);
			UpdateBars();
			break;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCManualStackWnd::GetTelecommandingChecks() CONST
{
	return m_wndView.GetTelecommandingChecks();
}

BOOL CTCManualStackWnd::SetTelecommandingState(UINT nState, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingState(cComputerToken.GetComputerName(), nState, bUser);
}
BOOL CTCManualStackWnd::SetTelecommandingState(LPCTSTR pszOriginator, UINT nState, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; nState != (GetTelecommandingState() & ~TCMANUALSTACK_STATE_EMPTY); )
	{
		if (m_wndView.SetTelecommandingState(nState) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingState(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, nState) >= 0))
		{
			LogTelecommandingState(pszOriginator, nState, bUser);
			UpdateBars();
			break;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCManualStackWnd::GetTelecommandingState() CONST
{
	return m_wndView.GetTelecommandingState();
}

BOOL CTCManualStackWnd::SetTelecommandingUplinkState(UINT nState)
{
	CTCServiceLock  cLock(this);

	if (nState != GetTelecommandingUplinkState())
	{
		m_wndView.SetTelecommandingUplinkState(nState);
		UpdateBars();
	}
	return TRUE;
}

UINT CTCManualStackWnd::GetTelecommandingUplinkState() CONST
{
	return m_wndView.GetTelecommandingUplinkState();
}

BOOL CTCManualStackWnd::EnableTelecommandingInterlockMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingInterlockMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCManualStackWnd::EnableTelecommandingInterlockMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingInterlockModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingInterlockMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingInterlockMode(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, bEnable) >= 0))
		{
			LogTelecommandingInterlockMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_wndView.IsTelecommandingInterlockModeEnabled();
}

BOOL CTCManualStackWnd::EnableTelecommandingReleaseWaitMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingReleaseWaitMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCManualStackWnd::EnableTelecommandingReleaseWaitMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingReleaseWaitModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingReleaseWaitMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingReleaseWaitMode(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, bEnable) >= 0))
		{
			LogTelecommandingReleaseWaitMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_wndView.IsTelecommandingReleaseWaitModeEnabled();
}

BOOL CTCManualStackWnd::EnableTelecommandingAutoRejectionMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingAutoRejectionMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCManualStackWnd::EnableTelecommandingAutoRejectionMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingAutoRejectionModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingAutoRejectionMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingAutoRejectionMode(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, bEnable) >= 0))
		{
			LogTelecommandingAutoRejectionMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCManualStackWnd::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_wndView.IsTelecommandingAutoRejectionModeEnabled();
}

BOOL CTCManualStackWnd::SetTelecommands(CONST CTCSavedStack &pStack)
{
	if (m_wndView.SetTelecommands(pStack))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	return m_wndView.GetTelecommands(pStack, bAll);
}

BOOL CTCManualStackWnd::LoadTelecommands(CONST CTCItems &pItems)
{
	if (m_wndView.LoadTelecommands(pItems))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackWnd::LoadTelecommands(CONST CTCManualStackItems &pItems)
{
	if (m_wndView.LoadTelecommands(pItems))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DispatchTelecommands(CTCManualStackItems &pItems, BOOL bUndo)
{
	if (GetTCService()->DispatchTelecommands(pItems, bUndo))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	if (m_wndView.UpdateTelecommands(pItems, bAll))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}
BOOL CTCManualStackWnd::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return m_wndView.UpdateTelecommands(pTMEnvironment);
}

BOOL CTCManualStackWnd::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return m_wndView.UpdateTelecommandInterlocks(pInterlocks);
}

BOOL CTCManualStackWnd::SetCurTelecommand(INT nIndex)
{
	return m_wndView.SetCurTelecommand(nIndex);
}

INT CTCManualStackWnd::GetCurTelecommand() CONST
{
	return m_wndView.GetCurTelecommand();
}

BOOL CTCManualStackWnd::SelectTelecommand(INT nIndex)
{
	return m_wndView.SelectTelecommand(nIndex);
}

VOID CTCManualStackWnd::DoSelectAllTelecommands()
{
	m_wndView.DoSelectAllTelecommands();
}

BOOL CTCManualStackWnd::CanSelectAllTelecommands() CONST
{
	return m_wndView.CanSelectAllTelecommands();
}

INT CTCManualStackWnd::EnumSelectedTelecommands(CTCManualStackItems &pItems) CONST
{
	return m_wndView.EnumSelectedTelecommands(pItems);
}

BOOL CTCManualStackWnd::HasSelectedTelecommands() CONST
{
	return m_wndView.HasSelectedTelecommands();
}

UINT CTCManualStackWnd::GetTelecommandCount() CONST
{
	return m_wndView.GetTelecommandCount();
}

BOOL CTCManualStackWnd::DoInsertBeforeTelecommand()
{
	if (m_wndView.DoInsertBeforeTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanInsertBeforeTelecommand() CONST
{
	return m_wndView.CanInsertBeforeTelecommand();
}

BOOL CTCManualStackWnd::DoInsertAfterTelecommand()
{
	if (m_wndView.DoInsertAfterTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanInsertAfterTelecommand() CONST
{
	return m_wndView.CanInsertAfterTelecommand();
}

BOOL CTCManualStackWnd::DoMoveUpTelecommand()
{
	if (m_wndView.DoMoveUpTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanMoveUpTelecommand() CONST
{
	return m_wndView.CanMoveUpTelecommand();
}

BOOL CTCManualStackWnd::DoMoveDownTelecommand()
{
	if (m_wndView.DoMoveDownTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanMoveDownTelecommand() CONST
{
	return m_wndView.CanMoveDownTelecommand();
}

BOOL CTCManualStackWnd::DoCutTelecommand()
{
	if (m_wndView.DoCutTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanCutTelecommand() CONST
{
	return m_wndView.CanCutTelecommand();
}

BOOL CTCManualStackWnd::DoCopyTelecommand()
{
	if (m_wndView.DoCopyTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanCopyTelecommand() CONST
{
	return m_wndView.CanCopyTelecommand();
}

BOOL CTCManualStackWnd::DoPasteTelecommand()
{
	if (m_wndView.DoPasteTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanPasteTelecommand() CONST
{
	return m_wndView.CanPasteTelecommand();
}

BOOL CTCManualStackWnd::DoDeleteTelecommand()
{
	if (m_wndView.DoDeleteTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanDeleteTelecommand() CONST
{
	return m_wndView.CanDeleteTelecommand();
}

BOOL CTCManualStackWnd::DoArmTelecommand()
{
	if (m_wndView.DoArmTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanArmTelecommand() CONST
{
	return((GetTelecommandingUplinkState() & TCSERVICE_COMMANDHANDLERSTATE_RUNNING) ? m_wndView.CanArmTelecommand() : FALSE);
}

BOOL CTCManualStackWnd::DoDispatchTelecommand()
{
	if (m_wndView.DoDispatchTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanDispatchTelecommand() CONST
{
	return((GetTelecommandingUplinkState() & TCSERVICE_COMMANDHANDLERSTATE_RUNNING) ? m_wndView.CanDispatchTelecommand() : FALSE);
}

BOOL CTCManualStackWnd::DoUndispatchTelecommand()
{
	if (m_wndView.DoUndispatchTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanUndispatchTelecommand() CONST
{
	return m_wndView.CanUndispatchTelecommand();
}

BOOL CTCManualStackWnd::DoAcknowledgeTelecommand()
{
	if (m_wndView.DoAcknowledgeTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanAcknowledgeTelecommand() CONST
{
	return m_wndView.CanAcknowledgeTelecommand();
}

BOOL CTCManualStackWnd::DoReloadTelecommand()
{
	if (m_wndView.DoReloadTelecommand())
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanReloadTelecommand() CONST
{
	return m_wndView.CanReloadTelecommand();
}

BOOL CTCManualStackWnd::ShowTelecommandProperties()
{
	return m_wndView.ShowTelecommandProperties();
}

BOOL CTCManualStackWnd::CanShowTelecommandProperties() CONST
{
	return m_wndView.CanShowTelecommandProperties();
}

BOOL CTCManualStackWnd::IsShowingTelecommandProperties() CONST
{
	return m_wndView.IsShowingTelecommandProperties();
}

BOOL CTCManualStackWnd::DoResetInterlocks()
{
	CTCInterlocks  pInterlocks;

	if (m_dlgInterlocks.Create(this, pInterlocks) == IDOK)
	{
		LogResetInterlocks(pInterlocks);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanResetInterlocks() CONST
{
	return GetTCService()->CheckTCInterlocks(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, TCINTERLOCK_STATE_SUCCESS) || GetTCService()->CheckTCInterlocks(TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK, TCINTERLOCK_STATE_FAILURE);
}

BOOL CTCManualStackWnd::DoCommandingState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCMANUALSTACK_STATE_DISABLED) | TCMANUALSTACK_STATE_DEFAULT);
}

BOOL CTCManualStackWnd::CanCommandingState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingUplinkState() & TCSERVICE_COMMANDHANDLERSTATE_RUNNING) && (GetTelecommandingState() & (TCMANUALSTACK_STATE_SUSPENDED | TCMANUALSTACK_STATE_STOPPED))) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::DoSuspendedState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCMANUALSTACK_STATE_DISABLED) | TCMANUALSTACK_STATE_SUSPENDED);
}

BOOL CTCManualStackWnd::CanSuspendedState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingState() & (TCMANUALSTACK_STATE_SUSPENDED | TCMANUALSTACK_STATE_STOPPED)) == 0) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::DoStoppedState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCMANUALSTACK_STATE_DISABLED) | TCMANUALSTACK_STATE_STOPPED);
}

BOOL CTCManualStackWnd::CanStoppedState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingState() & TCMANUALSTACK_STATE_STOPPED) == 0) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::Start()
{
	Initialize(TRUE);
	UpdateAllPanes();
	return TRUE;
}

BOOL CTCManualStackWnd::Prepare(BOOL bDialog)
{
	return TRUE;
}

BOOL CTCManualStackWnd::Check() CONST
{
	return((CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::Update()
{
	if (!Check())
	{
		if (IsWindowVisible())
		{
			ReportEvent(USER_INFORMATIONAL_DISPLAY_ACCESS_VIOLATION);
			ActivateFrame(SW_HIDE);
			return;
		}
	}
	UpdateAllPanes();
	CDisplayWnd::Update();
}

BOOL CTCManualStackWnd::Stop()
{
	Initialize(FALSE);
	return TRUE;
}

BOOL CTCManualStackWnd::SaveInfo(INT nPage, INT nDisplay, LPCTSTR pszTitle, CONST PDISPLAYINFO pDisplayInfo)
{
	INT  nArgs;
	INT  nChecks;
	BOOL  bArgs;
	BOOL  bEvent;
	UINT  nCount;
	UINT  nPolicy;
	UINT  nOptions;
	COLORREF  nColor;
	LOGFONT  sFontInfo[2];
	CString  szFileName[2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CTimeSpan  tTimeWindow[2];
	CUIntArray  nTypes;
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CByteArray  nGroups;
	CByteArray  nFilters;
	CByteArray  nTemplates[2];
	CByteArray  nContentsData;
	CByteArray  nPrintInfo;
	CByteArray  bAcks;
	CDWordArray  nColors;
	CStringArray  szAuditions;
	CStringArray  szNotifications;
	CProfile  cProfile;

	return((CDisplayWnd::SaveInfo(nPage, nDisplay, pszTitle, pDisplayInfo) && (nPage > 0 || (GetLayout(nColumns, nWidths) && GetListTitleFont(&sFontInfo[0]) && GetListItemsFont(&sFontInfo[1]) && GetGridBackgroundColor(nColor) && GetListOptions(nArgs, bArgs) && GetListUpdateChecks(nChecks) && GetMiscellaneousOptions(nOptions) && GetDefaultReleaseTimeWindow(tTimeWindow[0]) && GetDispatchTimeWindow(tTimeWindow[1]) && GetContents(nContentsData) && GetSearchGroups(nGroups) && GetSearchFilters(nFilters) && GetItemTemplates(nTemplates[0], nTemplates[1]) && GetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && GetAlertOptions(nTypes, szAuditions, szNotifications, nColors, bAcks) && GetPrintJobs(nPrintInfo) && cProfile.SetTCManualStackLayoutInfo(nPage, nDisplay, nColumns, nWidths, nColor, IsToolTipModeEnabled()) && cProfile.SetTCManualStackFontsInfo(nPage, nDisplay, &sFontInfo[0], &sFontInfo[1]) && cProfile.SetTCManualStackOperationsInfo(nPage, nDisplay, GetTelecommandingMode(), GetTelecommandingState(), GetTelecommandingChecks(), IsTelecommandingInterlockModeEnabled(), IsTelecommandingReleaseWaitModeEnabled(), IsTelecommandingAutoRejectionModeEnabled(), nChecks, nArgs, bArgs, nOptions, tTimeWindow[0], tTimeWindow[1]) && cProfile.SetTCManualStackContentsInfo(nPage, nDisplay, nContentsData) && cProfile.SetTCManualStackSearchInfo(nPage, nDisplay, nGroups, nFilters) && cProfile.SetTCManualStackTemplatesInfo(nPage, nDisplay, nTemplates[0], nTemplates[1]) && cProfile.SetTCManualStackLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.SetTCManualStackAlertInfo(nPage, nDisplay, nTypes, szAuditions, szNotifications, nColors, bAcks) && cProfile.SetTCManualStackPrintInfo(nPage, nDisplay, nPrintInfo)))) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::LoadInfo(INT nPage, INT nDisplay, CString &szTitle, PDISPLAYINFO pDisplayInfo)
{
	INT  nArgs;
	INT  nChecks;
	BOOL  bArgs;
	BOOL  bToolTips;
	BOOL  bMode[3];
	BOOL  bEvent;
	UINT  nCount;
	UINT  nPolicy;
	UINT  nFlags[3];
	UINT  nOptions;
	COLORREF  nColor;
	LOGFONT  sFontInfo[2];
	CString  szFileName[2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CTimeSpan  tTimeWindow[2];
	CUIntArray  nTypes;
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CByteArray  nGroups;
	CByteArray  nFilters;
	CByteArray  nTemplates[2];
	CByteArray  nContentsData;
	CByteArray  nPrintInfo;
	CByteArray  bAcks;
	CDWordArray  nColors;
	CStringArray  szAuditions;
	CStringArray  szNotifications;
	CProfile  cProfile;

	return((CDisplayWnd::LoadInfo(nPage, nDisplay, szTitle, pDisplayInfo) && (nPage > 0 || (cProfile.GetTCManualStackLayoutInfo(nPage, nDisplay, nColumns, nWidths, nColor, bToolTips) && cProfile.GetTCManualStackFontsInfo(nPage, nDisplay, &sFontInfo[0], &sFontInfo[1]) && cProfile.GetTCManualStackOperationsInfo(nPage, nDisplay, nFlags[0], nFlags[1], nFlags[2], bMode[0], bMode[1], bMode[2], nChecks, nArgs, bArgs, nOptions, tTimeWindow[0], tTimeWindow[1]) && cProfile.GetTCManualStackContentsInfo(nPage, nDisplay, nContentsData) && cProfile.GetTCManualStackSearchInfo(nPage, nDisplay, nGroups, nFilters) && cProfile.GetTCManualStackTemplatesInfo(nPage, nDisplay, nTemplates[0], nTemplates[1]) && cProfile.GetTCManualStackLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.GetTCManualStackAlertInfo(nPage, nDisplay, nTypes, szAuditions, szNotifications, nColors, bAcks) && cProfile.GetTCManualStackPrintInfo(nPage, nDisplay, nPrintInfo) && SetLayout(nColumns, nWidths) && SetListTitleFont(&sFontInfo[0]) && SetListItemsFont(&sFontInfo[1]) && SetGridBackgroundColor(nColor) && SetTelecommandingMode(nFlags[0]) && SetTelecommandingState(nFlags[1]) && SetTelecommandingChecks(nFlags[2]) && EnableTelecommandingInterlockMode(bMode[0]) && EnableTelecommandingReleaseWaitMode(bMode[1]) && EnableTelecommandingAutoRejectionMode(bMode[2]) && SetListOptions(nArgs, bArgs) && SetListUpdateChecks(nChecks) && SetMiscellaneousOptions(nOptions) && SetDefaultReleaseTimeWindow(tTimeWindow[0]) && SetDispatchTimeWindow(tTimeWindow[1]) && SetContents(nContentsData) && SetSearchGroups(nGroups) && SetSearchFilters(nFilters) && SetItemTemplates(nTemplates[0], nTemplates[1]) && SetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && SetAlertOptions(nTypes, szAuditions, szNotifications, nColors, bAcks) && SetPrintJobs(nPrintInfo) && EnableToolTipMode(bToolTips)))) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::SetLayoutInfo(LPCVOID pData)
{
	INT  cbData;
	DATA  sData;
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		for (CopyMemory(&sData, pData, ((cbData = (INT)GlobalSize((HGLOBAL)pData)) >= sizeof(DATA)) ? sizeof(DATA) : 0); cbData >= sizeof(DATA) && sData.cbSize == sizeof(DATA) + sData.cbColumns[0] + sData.cbColumns[1] && sData.cbColumns[0] >= 0 && sData.cbColumns[1] >= 0; )
		{
			for (nColumns.SetSize(sData.cbColumns[0] / sizeof(UINT)), nWidths.SetSize(sData.cbColumns[1] / sizeof(UINT)), CopyMemory(nColumns.GetData(), (LPBYTE)pData + (cbData = sizeof(DATA)), sData.cbColumns[0]), CopyMemory(nWidths.GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0]), sData.cbColumns[1]); SetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns, nWidths, &sData.sFont[0], &sData.sFont[1], &sData.sScrollInfo[0], &sData.sScrollInfo[1]); ) return TRUE;
			break;
		}
		return FALSE;
	}
	return TRUE;
}

INT CTCManualStackWnd::GetLayoutInfo(LPVOID *pData) CONST
{
	INT  cbData;
	DATA  sData;
	LPVOID  pBlock;
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		if (GetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns, nWidths, &sData.sFont[0], &sData.sFont[1], &sData.sScrollInfo[0], &sData.sScrollInfo[1]))
		{
			for (sData.cbColumns[0] = (INT)(nColumns.GetSize()*sizeof(UINT)), sData.cbColumns[1] = (INT)(nWidths.GetSize()*sizeof(UINT)), sData.cbSize = sizeof(DATA) + sData.cbColumns[0] + sData.cbColumns[1]; (pBlock = (AfxIsValidAddress(pData, sizeof(DATA))) ? (LPVOID)GlobalReAlloc(*pData, sData.cbSize, GMEM_MOVEABLE | GMEM_ZEROINIT) : (LPVOID)NULL); )
			{
				CopyMemory(pData, &pBlock, sizeof(LPVOID));
				CopyMemory(pBlock, &sData, sizeof(DATA));
				CopyMemory((LPBYTE)pBlock + (cbData = sizeof(DATA)), nColumns.GetData(), sData.cbColumns[0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0]), nWidths.GetData(), sData.cbColumns[1]);
				break;
			}
			return sData.cbSize;
		}
	}
	return 0;
}

BOOL CTCManualStackWnd::QueryDefaultInfo(PDISPLAYINFO pDefaultInfo) CONST
{
	pDefaultInfo->ptWnd.x = 0;
	pDefaultInfo->ptWnd.y = 0;
	pDefaultInfo->nNumber = -1;
	pDefaultInfo->rWnd = rectDefault;
	pDefaultInfo->nScope = DISPLAY_SCOPE_GLOBAL;
	pDefaultInfo->nMode = DISPLAY_MODE_REALTIME;
	pDefaultInfo->pData = (LPVOID)NULL;
	pDefaultInfo->nShow = SW_SHOWNORMAL;
	pDefaultInfo->bShow = TRUE;
	return TRUE;
}

BOOL CTCManualStackWnd::QueryDefaultMenu(CLocaleMenu &cMenu, CImageList &cImages, CUIntArray &nImageIDs) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  iImage;
	UINT  nButtonID;
	UINT  nButtonStyle;
	CBitmap  cBitmap[3];
	BITMAP  sBitmap;

	for (cImages.DeleteImageList(), nImageIDs.RemoveAll(); cBitmap[0].LoadBitmap(IDB_TCMANUALSTACKFRAMEPROPERTIESSMALLIMAGES) && cBitmap[1].LoadBitmap(IDB_TCMANUALSTACKFRAMEOPERATIONSSMALLIMAGES) && cBitmap[2].LoadBitmap(IDB_TCMANUALSTACKFRAMEEXTRAIMAGES) && cBitmap[0].GetBitmap(&sBitmap); )
	{
		for (nIndex = 0, nCount = (cImages.Create(sBitmap.bmHeight, sBitmap.bmHeight, ILC_COLOR32, sBitmap.bmWidth / sBitmap.bmHeight, 1) && cImages.Add(&cBitmap[0], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[0].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[0].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		for (nIndex = 0, nCount = (nCount > 0 && cImages.Add(&cBitmap[1], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[1].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[1].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		if (nCount > 0 && cImages.Add(&cBitmap[2], RGB(0, 0, 0)) >= 0)
		{
			nImageIDs.Add(IDM_TCMANUALSTACKCOPY);
			nImageIDs.Add(IDM_TCMANUALSTACKPASTE);
		}
		cBitmap[0].DeleteObject();
		cBitmap[1].DeleteObject();
		cBitmap[2].DeleteObject();
		break;
	}
	return cMenu.LoadMenu(IDR_TCMANUALSTACKFRAME);
}

VOID CTCManualStackWnd::UpdateBars()
{
	CTCServiceLock  cLock(this);

	UpdateMessagePane();
	UpdateUplinkPane();
	UpdatePretransmissionVerificationPane();
	UpdatePreexecutionVerificationPane();
	UpdateExecutionVerificationPane();
	UpdateStatePane();
	UpdateModePane();
}

BOOL CTCManualStackWnd::Print(PRINTDLG *pPrintInfo)
{
	INT  nJob;
	INT  nJobs;
	CTCManualStackPrintJobs  pJobs;
	CTCManualStackPrintJobInfo  *pJobInfo;
	CTCServiceLock  cLock(this);

	for (nJob = 0, nJobs = (GetPrintJobs(pJobs)) ? (INT)pJobs.GetSize() : 0; nJob < nJobs; nJob++)
	{
		if ((pJobInfo = pJobs.GetAt(nJob)) && pJobInfo->GetName() == STRING(IDS_PRINTJOB_DEFAULTNAME))
		{
			if (Print(pJobInfo, pPrintInfo)) break;
			continue;
		}
	}
	if (nJob < nJobs)
	{
		if (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_CLEARCOMMENTS)
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCMANUALSTACK_PRINT_CLEARCOMMENTS);
			pJobInfo->SetComments(EMPTYSTRING);
			SetPrintJobs(pJobs);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CanPrint() CONST
{
	return((GetTelecommandCount() > 0) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::SetLoggingOptions()
{
	CString  szFileName;
	CEventLog  cEventLog;
	CFileFindEx  cFileFind;
	CLogicalDrives  cDrives;
	CTCServiceLock  cLock(this);

	if (cEventLog.SetOwner(GetAccountComputerName(), GetAccountSpacecraftName(), GetAccountUserName()))
	{
		if (cEventLog.QuerySpacecraftLogFileName(szFileName) && cFileFind.FindFile(szFileName) && !cFileFind.FindNextFile())
		{
			m_szLoggingFileName[0] = m_szLoggingFileName[1] = (cFileFind.GetRoot().Right(1).GetAt(0) != cDrives.GetPathDelimiter()) ? (cFileFind.GetRoot() + cDrives.GetPathDelimiter() + STRING(IDS_TCMANUALSTACK_LOGFILE_DEFAULTFILENAME)) : (cFileFind.GetRoot() + STRING(IDS_TCMANUALSTACK_LOGFILE_DEFAULTFILENAME));
			m_nLoggingPolicy = LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
			m_tLoggingRetention = DAYSPERWEEK*SECONDSPERDAY;
			m_dwLoggingRetention = 0;
			m_nLoggingReloadCount = 0;
			m_bLoggingAsEvent = FALSE;
			cFileFind.Close();
			return TRUE;
		}
	}
	return FALSE;
}
BOOL CTCManualStackWnd::SetLoggingOptions(UINT nArchivalPolicy, LPCTSTR pszArchivalFileName, DWORDLONG dwArchivalRetention, CONST CTimeSpan &tArchivalRetention, LPCTSTR pszRetrievalFileName, UINT nRetrievalReloadCount, BOOL bShowAsEvent)
{
	CTCServiceLock  cLock(this);

	m_nLoggingPolicy = nArchivalPolicy;
	m_szLoggingFileName[0] = pszArchivalFileName;
	m_szLoggingFileName[1] = pszRetrievalFileName;
	m_dwLoggingRetention = dwArchivalRetention;
	m_tLoggingRetention = tArchivalRetention;
	m_nLoggingReloadCount = nRetrievalReloadCount;
	m_bLoggingAsEvent = bShowAsEvent;
	return TRUE;
}

BOOL CTCManualStackWnd::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	CTCServiceLock  cLock(this);

	nArchivalPolicy = m_nLoggingPolicy;
	szArchivalFileName = m_szLoggingFileName[0];
	szRetrievalFileName = m_szLoggingFileName[1];
	dwArchivalRetention = m_dwLoggingRetention;
	tArchivalRetention = m_tLoggingRetention;
	nRetrievalReloadCount = m_nLoggingReloadCount;
	bShowAsEvent = m_bLoggingAsEvent;
	return TRUE;
}

BOOL CTCManualStackWnd::SetAlertOptions(CONST CUIntArray &nTypes, CONST CStringArray &szAuditions, CONST CStringArray &szNotifications, CONST CDWordArray &nAcknowledgeColors, CONST CByteArray &bAcknowledgments)
{
	INT  nIndex[2];
	INT  nCount[2];
	CUIntArray  nLogTypes;
	CUIntArray  nLogActions;
	CTCServiceLock  cLock(this);

	for (nIndex[0] = 0, nCount[0] = (INT)nTypes.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_nAlertTypes.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (m_nAlertTypes.GetAt(nIndex[1]) == nTypes.GetAt(nIndex[0])) break;
			continue;
		}
		if (nIndex[1] < nCount[1])
		{
			if (m_szAlertAuditions.GetAt(nIndex[1]) != szAuditions.GetAt(nIndex[0]) || m_szAlertNotifications.GetAt(nIndex[1]) != szNotifications.GetAt(nIndex[0]) || m_nAlertAcknowledgeColors.GetAt(nIndex[1]) != nAcknowledgeColors.GetAt(nIndex[0]) || m_nAlertAcknowledgeColors.GetAt(nIndex[1]) != nAcknowledgeColors.GetAt(nIndex[0]) || m_bAlertAcknowledgments.GetAt(nIndex[1]) != bAcknowledgments.GetAt(nIndex[0]))
			{
				nLogTypes.Add(nTypes.GetAt(nIndex[0]));
				nLogActions.Add(FALSE);
			}
			continue;
		}
		nLogTypes.Add(nTypes.GetAt(nIndex[0]));
		nLogActions.Add(TRUE);
	}
	for (nIndex[0] = 0, nCount[0] = (INT)m_nAlertTypes.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)nTypes.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (m_nAlertTypes.GetAt(nIndex[0]) == nTypes.GetAt(nIndex[1])) break;
			continue;
		}
		if (nIndex[1] == nCount[1])
		{
			nLogTypes.Add(m_nAlertTypes.GetAt(nIndex[0]));
			nLogActions.Add(-TRUE);
		}
	}
	m_nAlertTypes.Copy(nTypes);
	m_szAlertAuditions.Copy(szAuditions);
	m_szAlertNotifications.Copy(szNotifications);
	m_nAlertAcknowledgeColors.Copy(nAcknowledgeColors);
	m_bAlertAcknowledgments.Copy(bAcknowledgments);
	LogAlerts(nLogTypes, nLogActions);
	return TRUE;
}

BOOL CTCManualStackWnd::GetAlertOptions(CUIntArray &nTypes, CStringArray &szAuditions, CStringArray &szNotifications, CDWordArray &nAcknowledgeColors, CByteArray &bAcknowledgments) CONST
{
	CTCServiceLock  cLock(this);

	nTypes.Copy(m_nAlertTypes);
	szAuditions.Copy(m_szAlertAuditions);
	szNotifications.Copy(m_szAlertNotifications);
	nAcknowledgeColors.Copy(m_nAlertAcknowledgeColors);
	bAcknowledgments.Copy(m_bAlertAcknowledgments);
	return TRUE;
}

BOOL CTCManualStackWnd::Alert(CONST CTCManualStackItem *pItem)
{
	INT  nPos;
	INT  nType;
	INT  nTypes;
	WORD  wVoiceGender;
	WORD  wVoiceAge;
	DWORD  dwVolume;
	DWORD  dwPitch;
	DWORD  dwPlayback;
	CString  szAdapter;
	CString  szSpeaker;
	CString  szMessage[2];
	CString  szNotifications;
	CEventObject  *pEvent;
	CStringTools  cStringTools;
	CAuditionProfiles  pAuditionProfiles;
	CAuditionProfileInfo  *pAuditionProfileInfo;
	CTCServiceLock  cLock(this);

	for (nType = 0, nTypes = (INT)m_nAlertTypes.GetSize(); nType < nTypes; nType++)
	{
		if (m_nAlertTypes.GetAt(nType) == TCMANUALSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE) break;
		continue;
	}
	if (nType < nTypes)
	{
		for (szMessage[0].Format(STRING(IDS_TCMANUALSTACK_ALERTMESSAGE_MEMBERSHIPFORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership(), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(pItem->GetMembershipID(), max(cStringTools.ConvertUIntToString(pItem->GetMembershipSize()).GetLength(), 3))), szMessage[1].Format(STRING(IDS_TCMANUALSTACK_ALERTMESSAGE_TELECOMMANDRELEASEFAILUREFORMAT), (pItem->GetMembership().IsEmpty()) ? (LPCTSTR)pItem->GetName() : (LPCTSTR)szMessage[0]); (pAuditionProfileInfo = (GetAuditionProfiles(pAuditionProfiles)) ? pAuditionProfiles.GetAt(pAuditionProfiles.Find(m_szAlertAuditions.GetAt(nType))) : (CAuditionProfileInfo *)NULL); )
		{
			for (pAuditionProfileInfo->GetAdapterInfo(szAdapter, dwVolume, dwPitch, dwPlayback), pAuditionProfileInfo->GetVoiceSound(szSpeaker, wVoiceGender, wVoiceAge); (pEvent = new CEventObject); )
			{
				pEvent->SetCategory(EVENT_CATEGORY_SYSTEM);
				pEvent->SetType(STRING(IDS_TCMANUALSTACK_ALERTTYPE_DEFAULT));
				pEvent->SetSubtype(STRING(IDS_TCMANUALSTACK_ALERTSUBTYPE_DEFAULT));
				pEvent->SetAudition(pAuditionProfileInfo->GetAudition());
				pEvent->SetAudioInfo(szAdapter, dwVolume, dwPitch, dwPlayback);
				pEvent->SetAuditBeep(pAuditionProfileInfo->GetBeepSound());
				pEvent->SetAuditWave(pAuditionProfileInfo->GetWaveSound());
				pEvent->SetAuditVoice(szSpeaker, wVoiceGender, wVoiceAge);
				pEvent->SetAuditTime(CTime::GetCurrentTime().GetTime());
				pEvent->SetAuditColor(m_nAlertAcknowledgeColors.GetAt(nType));
				pEvent->Acknowledge(!m_bAlertAcknowledgments.GetAt(nType));
				pEvent->SetUser(GetAccountUserName());
				pEvent->SetMessage(szMessage[1]);
				pEvent->Show(TRUE);
				ReportEvent(pEvent);
				break;
			}
			break;
		}
		for (szNotifications = m_szAlertNotifications.GetAt(nType); !szNotifications.IsEmpty(); szNotifications = (nPos >= 0) ? szNotifications.Mid(nPos + 1) : EMPTYSTRING)
		{
			DoNotification(((nPos = szNotifications.Find(TAB)) >= 0) ? szNotifications.Left(nPos) : szNotifications, szMessage[1]);
			continue;
		}
	}
	return TRUE;
}
BOOL CTCManualStackWnd::Alert(CONST CTCInterlock *pInterlock)
{
	INT  nPos;
	INT  nType;
	INT  nTypes;
	WORD  wVoiceGender;
	WORD  wVoiceAge;
	DWORD  dwVolume;
	DWORD  dwPitch;
	DWORD  dwPlayback;
	CString  szAdapter;
	CString  szSpeaker;
	CString  szMessage;
	CString  szNotifications;
	CEventObject  *pEvent;
	CAuditionProfiles  pAuditionProfiles;
	CAuditionProfileInfo  *pAuditionProfileInfo;
	CTCServiceLock  cLock(this);

	for (nType = 0, nTypes = (INT)m_nAlertTypes.GetSize(); nType < nTypes; nType++)
	{
		if (m_nAlertTypes.GetAt(nType) == TCMANUALSTACK_ALERTTYPE_INTERLOCKFAILURE) break;
		continue;
	}
	if (nType < nTypes)
	{
		for (szMessage.Format(STRING(IDS_TCMANUALSTACK_ALERTMESSAGE_INTERLOCKFAILUREFORMAT), (LPCTSTR)pInterlock->GetName()); (pAuditionProfileInfo = (GetAuditionProfiles(pAuditionProfiles)) ? pAuditionProfiles.GetAt(pAuditionProfiles.Find(m_szAlertAuditions.GetAt(nType))) : (CAuditionProfileInfo *)NULL); )
		{
			for (pAuditionProfileInfo->GetAdapterInfo(szAdapter, dwVolume, dwPitch, dwPlayback), pAuditionProfileInfo->GetVoiceSound(szSpeaker, wVoiceGender, wVoiceAge); (pEvent = new CEventObject); )
			{
				pEvent->SetCategory(EVENT_CATEGORY_SYSTEM);
				pEvent->SetType(STRING(IDS_TCMANUALSTACK_ALERTTYPE_DEFAULT));
				pEvent->SetSubtype(STRING(IDS_TCMANUALSTACK_ALERTSUBTYPE_DEFAULT));
				pEvent->SetAudition(pAuditionProfileInfo->GetAudition());
				pEvent->SetAudioInfo(szAdapter, dwVolume, dwPitch, dwPlayback);
				pEvent->SetAuditBeep(pAuditionProfileInfo->GetBeepSound());
				pEvent->SetAuditWave(pAuditionProfileInfo->GetWaveSound());
				pEvent->SetAuditVoice(szSpeaker, wVoiceGender, wVoiceAge);
				pEvent->SetAuditTime(CTime::GetCurrentTime().GetTime());
				pEvent->SetAuditColor(m_nAlertAcknowledgeColors.GetAt(nType));
				pEvent->Acknowledge(!m_bAlertAcknowledgments.GetAt(nType));
				pEvent->SetUser(GetAccountUserName());
				pEvent->SetMessage(szMessage);
				pEvent->Show(TRUE);
				ReportEvent(pEvent);
				break;
			}
			break;
		}
		for (szNotifications = m_szAlertNotifications.GetAt(nType); !szNotifications.IsEmpty(); szNotifications = (nPos >= 0) ? szNotifications.Mid(nPos + 1) : EMPTYSTRING)
		{
			DoNotification(((nPos = szNotifications.Find(TAB)) >= 0) ? szNotifications.Left(nPos) : szNotifications, szMessage);
			continue;
		}
	}
	return TRUE;
}

BOOL CTCManualStackWnd::SetPrintJobs(CONST CTCManualStackPrintJobs &pPrintJobs)
{
	CTCServiceLock  cLock(this);

	return m_pPrintJobs.Copy(&pPrintJobs);
}

BOOL CTCManualStackWnd::GetPrintJobs(CTCManualStackPrintJobs &pPrintJobs) CONST
{
	CTCServiceLock  cLock(this);

	return pPrintJobs.Copy(&m_pPrintJobs);
}

BOOL CTCManualStackWnd::Print(CONST CTCManualStackPrintJobInfo *pJobInfo, PRINTDLG *pPrintInfo)
{
	CDC  cDC;
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	LOGFONT  lfFont[2];
	DEVMODE  *pDevMode;
	DEVNAMES  *pDevNames;
	CPtrArray  pSymbols;
	CUIntArray  nSymbolIDs;
	CStringArray  szColumns;
	CStringArray  szContents;
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTextViewAttributes  pAttributes;

	if ((pPrintProfileInfo = (GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		if (GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs))
		{
			if (!AfxIsValidAddress(pPrintInfo, sizeof(PRINTDLG)))
			{
				if (CreatePrinterDC(pPrintProfileInfo, cDC))
				{
					if (PrintJob(cDC, pJobInfo, pPrintProfileInfo->GetPrinterName(), 0, 0, rtMargin[0], bMetric, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs))
					{
						cDC.DeleteDC();
						return TRUE;
					}
					cDC.DeleteDC();
				}
				return FALSE;
			}
			if ((pDevNames = (DEVNAMES *)GlobalLock(pPrintInfo->hDevNames)))
			{
				if ((pDevMode = (DEVMODE *)GlobalLock(pPrintInfo->hDevMode)))
				{
					if (CreatePrinterDC(pPrintInfo->hDevNames, pPrintInfo->hDevMode, cDC))
					{
						if (PrintJob(cDC, pJobInfo, (LPCTSTR)pDevMode->dmDeviceName, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nFromPage : 0, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nToPage : 0, rtMargin[0], bMetric, szColumns, szContents, pAttributes, &lfFont[0], &lfFont[1], pSymbols, nSymbolIDs))
						{
							GlobalUnlock(pPrintInfo->hDevNames);
							GlobalUnlock(pPrintInfo->hDevMode);
							cDC.DeleteDC();
							return TRUE;
						}
						cDC.DeleteDC();
					}
					GlobalUnlock(pPrintInfo->hDevMode);
				}
				GlobalUnlock(pPrintInfo->hDevNames);
			}
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogActivity(CONST CTCLogEntry *pEntry)
{
	CString  szLog[2];
	CString  szMessage;
	CLogFile  cLogFile;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CEventObject  *pEvent;
	CTCServiceLock  cLock(this);

	if (m_bLoggingAsEvent)
	{
		for (szLog[0].Format(STRING(IDS_TCMANUALSTACK_LOGEVENTMESSAGE_FORMAT), STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE), (LPCTSTR)pEntry->GetDescription(), (LPCTSTR)pEntry->GetActivity()), szLog[1].Format(STRING(IDS_TCMANUALSTACK_LOGSHORTEVENTMESSAGE_FORMAT), STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE), (pEntry->GetActivity().IsEmpty()) ? (LPCTSTR)pEntry->GetDescription() : (LPCTSTR)pEntry->GetActivity()), szMessage = (!pEntry->GetDescription().IsEmpty() && !pEntry->GetActivity().IsEmpty()) ? szLog[0] : szLog[1]; (pEvent = new CEventObject); )
		{
			pEvent->SetCategory(EVENT_CATEGORY_USER);
			pEvent->SetType(STRING(IDS_EVENTTYPE_INFORMATIONAL));
			pEvent->SetSubtype(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE));
			pEvent->SetMessage(szMessage);
			pEvent->SetComments(EMPTYSTRING);
			pEvent->SetUser(pEntry->GetUser());
			pEvent->SetAuditTime(pEntry->GetTime());
			pEvent->SetAuditColor(VGA_COLOR_BLACK);
			pEvent->Acknowledge();
			pEvent->Show(TRUE);
			ReportEvent(pEvent);
			break;
		}
	}
	if ((m_nLoggingPolicy & LOGFILE_POLICY_DISABLED) != LOGFILE_POLICY_DISABLED)
	{
		if (cLogFile.Open(m_szLoggingFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			if (pEntry->Map(nLogData) && cLogFile.Write(tLogTime, nLogData))
			{
				cLogFile.Close();
				return TRUE;
			}
			cLogFile.Close();
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CreateToolBars()
{
	if (m_wndToolBar[0].CreateEx(this, TBSTYLE_FLAT, CBRS_ALIGN_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCMANUALSTACK_TOOLBAR_PROPERTIES) && m_wndToolBar[0].LoadToolBar(IDB_TCMANUALSTACKFRAMEPROPERTIESLARGEIMAGES, 0, IDB_TCMANUALSTACKFRAMEPROPERTIESSMALLIMAGES, TRUE))
	{
		if (m_wndToolBar[1].CreateEx(this, TBSTYLE_FLAT, CBRS_ALIGN_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCMANUALSTACK_TOOLBAR_OPERATIONS) && m_wndToolBar[1].LoadToolBar(IDB_TCMANUALSTACKFRAMEOPERATIONSLARGEIMAGES, 0, IDB_TCMANUALSTACKFRAMEOPERATIONSSMALLIMAGES, TRUE))
		{
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKSETTINGS), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKOPEN), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKSAVE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKLOAD), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKFULLVIEWMODE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKPROPERTIES), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKINSERTBEFORE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKINSERTAFTER), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKMOVEUP), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKMOVEDOWN), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKDELETE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCMANUALSTACKPRINT), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKSTART), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKSUSPEND), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKSTOP), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKARM), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKGO), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKUNDISPATCH), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKACKNOWLEDGE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKRELOAD), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKRESETINTERLOCKS), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKINTERLOCKCHECKS), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKRELEASEWAITMODE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCMANUALSTACKAUTOREJECTIONMODE), TBBS_DISABLED);
			m_wndToolBar[0].EnableDocking(CBRS_ALIGN_TOP);
			m_wndToolBar[1].EnableDocking(CBRS_ALIGN_TOP);
			DockPane(&m_wndToolBar[0]);
			DockPane(&m_wndToolBar[1]);
			RecalcLayout();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CreateStatusBar()
{
	if (m_wndStatusBar.Create(this, CBRS_BOTTOM | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndStatusBar.SetIndicators(nTCManualStackStatusBarIndicators, 1))
	{
		m_wndStatusBar.EnableToolTips();
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::CreateView()
{
	if (m_wndView.Create(this, TVS_HEADER | TVS_TOP | TVS_BUTTONS | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::Customize(BOOL bDefault)
{
	LOGFONT  sFontInfo[2];
	CUIntArray  nColumns;
	CUIntArray  nWidths;
	CByteArray  nPrintInfo;

	return((((!bDefault  &&  GetLayout(nColumns, nWidths) && GetListTitleFont(&sFontInfo[0]) && GetListItemsFont(&sFontInfo[1]) && SetLayout(nColumns, nWidths) && SetListTitleFont(&sFontInfo[0]) && SetListItemsFont(&sFontInfo[1])) || (bDefault  &&  SetLayout(nColumns))) && ((!bDefault  &&  GetPrintJobs(nPrintInfo) && nPrintInfo.GetSize() > 0) || SetPrintJobs(nPrintInfo))) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::UpdateAllPanes()
{
	INT  nPane;
	INT  nPanes;

	for (nPane = 0, nPanes = sizeof(nTCManualStackStatusBarIndicators) / sizeof(UINT); nPane < nPanes; nPane++)
	{
		if (m_wndStatusBar.CommandToIndex(nTCManualStackStatusBarIndicators[nPane]) != nPane) break;
		continue;
	}
	if (nPane < nPanes)
	{
		if (m_wndStatusBar.SetIndicators(nTCManualStackStatusBarIndicators, sizeof(nTCManualStackStatusBarIndicators) / sizeof(UINT)))
		{
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	UpdateBars();
	return TRUE;
}

VOID CTCManualStackWnd::UpdateMessagePane()
{
	UINT  nCount;
	CString  szMessage;

	szMessage.Format(((nCount = GetTelecommandCount()) > 0) ? ((nCount > 1) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_UPDATEMESSAGE) : STRING(IDS_TCMANUALSTACK_STATUSBAR_DATAMESSAGE)) : STRING(IDS_TCMANUALSTACK_STATUSBAR_NODATAMESSAGE), nCount);
	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE, szMessage);
}

VOID CTCManualStackWnd::UpdateUplinkPane()
{
	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE, ((GetTelecommandingUplinkState() & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) == (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_UPLINK_OK) : STRING(IDS_TCMANUALSTACK_STATUSBAR_UPLINK_NOTOK), ((GetTelecommandingUplinkState() & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) != (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdatePretransmissionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_PTVPANE, (((nFlags = GetTelecommandingChecks()) & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_PTV_ON) : (((nFlags & TCMANUALSTACK_CHECKS_PTV_DISABLE) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_PTV_OVERRIDE) : STRING(IDS_TCMANUALSTACK_STATUSBAR_PTV_OFF)), (GetTelecommandingChecks() & (TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdatePreexecutionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_PEVPANE, (((nFlags = GetTelecommandingChecks()) & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_PEV_ON) : (((nFlags & TCMANUALSTACK_CHECKS_PEV_DISABLE) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_PEV_OVERRIDE) : STRING(IDS_TCMANUALSTACK_STATUSBAR_PEV_OFF)), (GetTelecommandingChecks() & (TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdateExecutionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_CEVPANE, (((nFlags = GetTelecommandingChecks()) & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE)) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_CEV_ON) : (((nFlags & TCMANUALSTACK_CHECKS_CEV_DISABLE) == 0) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_CEV_OVERRIDE) : STRING(IDS_TCMANUALSTACK_STATUSBAR_CEV_OFF)), (GetTelecommandingChecks() & (TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdateStatePane()
{
	UINT  nState;

	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_STATEPANE, (((nState = GetTelecommandingState()) & TCMANUALSTACK_STATE_DEFAULT) != TCMANUALSTACK_STATE_DEFAULT) ? ((nState & TCMANUALSTACK_STATE_DISABLED) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_DISABLED) : ((nState & TCMANUALSTACK_STATE_SUSPENDED) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_SUSPENDED) : ((nState & TCMANUALSTACK_STATE_STOPPED) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_STOPPED) : STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_ILLEGAL)))) : ((nState & TCMANUALSTACK_STATE_DISABLED) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_DISABLED) : STRING(IDS_TCMANUALSTACK_STATUSBAR_STATE_DEFAULT)), (((nState = GetTelecommandingState()) & TCMANUALSTACK_STATE_DEFAULT) != TCMANUALSTACK_STATE_DEFAULT || (nState & (TCMANUALSTACK_STATE_SUSPENDED | TCMANUALSTACK_STATE_STOPPED | TCMANUALSTACK_STATE_DISABLED))) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdateModePane()
{
	m_wndStatusBar.SetPaneText(ID_TCMANUALSTACK_STATUSBAR_MODEPANE, (GetTelecommandingMode() & TCMANUALSTACK_MODE_MASTERMANUAL) ? STRING(IDS_TCMANUALSTACK_STATUSBAR_MODE_MASTERMANUAL) : STRING(IDS_TCMANUALSTACK_STATUSBAR_MODE_DEFAULT), (GetTelecommandingMode() & TCMANUALSTACK_MODE_MASTERMANUAL) ? TRUE : FALSE);
}

VOID CTCManualStackWnd::UpdateContents()
{
	m_wndView.UpdateContent();
}

BOOL CTCManualStackWnd::SetSearchGroups(CONST CByteArray &nSearchGroups)
{
	INT  nType;
	INT  nTypes;
	INT  nGroup;
	INT  nGroups;
	CTCManualStackSearchGroup  *pGroup[2];
	CTCManualStackSearchGroups  pSearchGroups;

	for (nType = 0, nTypes = TCMANUALSTACKSEARCHGROUP_TYPES; nType < nTypes; nType++)
	{
		m_pSearchGroups[nType].RemoveAll();
		continue;
	}
	for (nGroup = 0, nGroups = (pSearchGroups.Unmap(nSearchGroups)) ? (INT)nSearchGroups.GetSize() : -1; nGroup < nGroups; nGroup++)
	{
		if ((pGroup[0] = new CTCManualStackSearchGroup))
		{
			if ((pGroup[1] = pSearchGroups.GetAt(nGroup)))
			{
				pGroup[0]->Copy(pGroup[1]);
				if (m_pSearchGroups[pGroup[0]->GetType() - 1].Add(pGroup[0]) >= 0) continue;
			}
			delete pGroup[0];
		}
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::GetSearchGroups(CByteArray &nSearchGroups) CONST
{
	INT  nType;
	INT  nTypes;
	INT  nGroup;
	INT  nGroups;
	CByteArray  nGroupData;
	CTCManualStackSearchGroup  *pGroup;

	for (nType = 0, nTypes = TCMANUALSTACKSEARCHGROUP_TYPES, nSearchGroups.RemoveAll(); nType < nTypes; nType++)
	{
		for (nGroup = 0, nGroups = (INT)m_pSearchGroups[nType].GetSize(); nGroup < nGroups; nGroup++)
		{
			if ((pGroup = m_pSearchGroups[nType].GetAt(nGroup)) && pGroup->Map(nGroupData))
			{
				nSearchGroups.Append(nGroupData);
				continue;
			}
			break;
		}
		if (nGroup < nGroups) break;
	}
	return((nType == nTypes) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::SetSearchFilters(CONST CByteArray &nSearchFilters)
{
	INT  nType;
	INT  nTypes;
	INT  nFilter;
	INT  nFilters;
	CTCManualStackSearchFilter  *pFilter[2];
	CTCManualStackSearchFilters  pSearchFilters;

	for (nType = 0, nTypes = TCMANUALSTACKSEARCHFILTER_TYPES; nType < nTypes; nType++)
	{
		m_pSearchFilters[nType].RemoveAll();
		continue;
	}
	for (nFilter = 0, nFilters = (pSearchFilters.Unmap(nSearchFilters)) ? (INT)nSearchFilters.GetSize() : -1; nFilter < nFilters; nFilter++)
	{
		if ((pFilter[0] = new CTCManualStackSearchFilter))
		{
			if ((pFilter[1] = pSearchFilters.GetAt(nFilter)))
			{
				pFilter[0]->Copy(pFilter[1]);
				if (m_pSearchFilters[pFilter[0]->GetType() - 1].Add(pFilter[0]) >= 0) continue;
			}
			delete pFilter[0];
		}
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::GetSearchFilters(CByteArray &nSearchFilters) CONST
{
	INT  nType;
	INT  nTypes;
	INT  nFilter;
	INT  nFilters;
	CByteArray  nFilterData;
	CTCManualStackSearchFilter  *pFilter;

	for (nType = 0, nTypes = TCMANUALSTACKSEARCHFILTER_TYPES, nSearchFilters.RemoveAll(); nType < nTypes; nType++)
	{
		for (nFilter = 0, nFilters = (INT)m_pSearchFilters[nType].GetSize(); nFilter < nFilters; nFilter++)
		{
			if ((pFilter = m_pSearchFilters[nType].GetAt(nFilter)) && pFilter->Map(nFilterData))
			{
				nSearchFilters.Append(nFilterData);
				continue;
			}
			break;
		}
		if (nFilter < nFilters) break;
	}
	return((nType == nTypes) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::SetItemTemplates(CONST CByteArray &nItemTemplates, CONST CByteArray &nComposedItemTemplates)
{
	return((m_pItemTemplates.Unmap(nItemTemplates) && m_pComposedItemTemplates.Unmap(nComposedItemTemplates)) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::GetItemTemplates(CByteArray &nItemTemplates, CByteArray &nComposedItemTemplates) CONST
{
	return((m_pItemTemplates.Map(nItemTemplates) && m_pComposedItemTemplates.Map(nComposedItemTemplates)) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::LogTelecommandingMode(LPCTSTR pszOriginator, UINT nMode, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nMode & TCMANUALSTACK_MODE_DEFAULT; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_MASTERMANALMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_MODECHANGE));
			break;
		}
		if (nMode & TCMANUALSTACK_MODE_MASTERMANUAL)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_MASTERMANALMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_MODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogTelecommandingState(LPCTSTR pszOriginator, UINT nState, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nState & TCMANUALSTACK_STATE_DEFAULT; )
		{
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_RESUMED));
			break;
		}
		if (nState & TCMANUALSTACK_STATE_SUSPENDED)
		{
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_SUSPENDED));
		}
		if (nState & TCMANUALSTACK_STATE_STOPPED)
		{
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_STOPPED));
		}
		if (nState & TCMANUALSTACK_STATE_DISABLED)
		{
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLED));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogTelecommandingChecks(LPCTSTR pszOriginator, UINT nFlags, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nFlags == ~(TCMANUALSTACK_CHECKS_PTV_OVERRIDE | TCMANUALSTACK_CHECKS_PTV_DISABLE); )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PTVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			break;
		}
		if (nFlags == ~(TCMANUALSTACK_CHECKS_PEV_OVERRIDE | TCMANUALSTACK_CHECKS_PEV_DISABLE))
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PEVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
		}
		if (nFlags == ~(TCMANUALSTACK_CHECKS_CEV_OVERRIDE | TCMANUALSTACK_CHECKS_CEV_DISABLE))
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_CEVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
		}
		if (cEntry.GetActivity().IsEmpty())
		{
			if (nFlags & TCMANUALSTACK_CHECKS_PTV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PTVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCMANUALSTACK_CHECKS_PEV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCMANUALSTACK_CHECKS_CEV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_CEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCMANUALSTACK_CHECKS_PTV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PTVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCMANUALSTACK_CHECKS_PEV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_PEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCMANUALSTACK_CHECKS_CEV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_CEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogTelecommandingInterlockMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_INTERLOCKMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_INTERLOCKMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogTelecommandingReleaseWaitMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_RELEASEWAITMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_RELEASEWAITMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_RELEASEWAITMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_RELEASEWAITMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogTelecommandingAutoRejectionMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCMANUALSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_AUTOREJECTIONMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOPERATION_AUTOREJECTIONMODE));
			cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogResetInterlocks(CONST CTCInterlocks &pInterlocks)
{
	INT  nInterlock;
	INT  nInterlocks;
	CString  szScope;
	CString  szStage;
	CString  szActivity;
	CString  szDescription;
	CTCInterlock  *pInterlock;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (nInterlock = 0, nInterlocks = (INT)pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
		{
			if ((pInterlock = (CTCInterlock *)pInterlocks.GetAt(nInterlock)) != (CTCInterlock *)NULL)
			{
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPELOCAL) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPELOCALNOWAIT) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPESUBSYSTEM) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSCOPECOMMANDS) : szScope;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGETRANSMISSION) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGEACCEPTANCE) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGESTART) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGEPROGRESS) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCKSTAGECOMPLETION) : szStage;
				szActivity = CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCMANUALSTACK_LOGOBJECT_INTERLOCK);
				szDescription.Format(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_INTERLOCK), (LPCTSTR)szScope, (LPCTSTR)szStage);
				cEntry.SetName(pInterlock->GetName());
				cEntry.SetDescription(szDescription);
				cEntry.SetActivity(szActivity);
				cEntry.SetUser(GetAccountUserName());
				cEntry.SetTime(CTime::GetCurrentTime().GetTime());
				LogActivity(&cEntry);
				continue;
			}
			break;
		}
		return((nInterlock == nInterlocks) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogListOptions(INT nArguments, BOOL bAll)
{
	CString  szActivity;
	CTCLogEntry  cEntry;
	CStringTools  cStringTools;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_ARGUMENTLISTOPTIONSCHANGE)), szActivity.Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_ARGUMENTS), (LPCTSTR)cStringTools.ConvertIntToString(nArguments), (bAll) ? STRING(IDS_TCMANUALSTACK_LOGOPERATION_FIXEDARGUMENTS) : STRING(IDS_TCMANUALSTACK_LOGOPERATION_VARIABLEARGUMENTS)); nArguments < 0; )
		{
			szActivity.Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_ARGUMENTS), STRING(IDS_TCMANUALSTACK_LOGOPERATION_ALLARGUMENTS), (bAll) ? STRING(IDS_TCMANUALSTACK_LOGOPERATION_FIXEDARGUMENTS) : STRING(IDS_TCMANUALSTACK_LOGOPERATION_VARIABLEARGUMENTS));
			break;
		}
		cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_LISTING)) + SPACE + szActivity);
		cEntry.SetTime(CTime::GetCurrentTime().GetTime());
		cEntry.SetUser(GetAccountUserName());
		return LogActivity(&cEntry);
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogListUpdateChecks(INT nCount)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_UPDATECHECKSCOUNTCHANGE)); nCount >= 0; )
		{
			szActivity.Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_UPDATECHECKS), nCount);
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_UPDATING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogMiscellaneousOptions(UINT nOptions)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_MISCELLANEOUSOPTIONSCHANGE)); nOptions & (TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT | TCMANUALSTACK_OPTION_UNDISPATCHONEXIT); )
		{
			szActivity = ((nOptions & (TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT | TCMANUALSTACK_OPTION_UNDISPATCHONEXIT)) == (TCMANUALSTACK_OPTION_ALWAYSALLOWEXIT | TCMANUALSTACK_OPTION_UNDISPATCHONEXIT)) ? (CString(STRING(IDS_TCMANUALSTACK_LOGOPERATION_ALWAYSALLOWEXITOPTION)) + STRING(IDS_TCMANUALSTACK_LOGOPERATION_UNDISPATCHONEXITOPTION)) : STRING(IDS_TCMANUALSTACK_LOGOPERATION_ALWAYSALLOWEXITOPTION);
			break;
		}
		for (; !nOptions; )
		{
			szActivity = STRING(IDS_TCMANUALSTACK_LOGOPERATION_NOMISCELLANEOUSOPTIONS);
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity((nOptions) ? (CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING)) + SPACE + szActivity) : (CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING)) + SPACE + szActivity));
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_DEFAULTRELEASETIMEWINDOWCHANGE)); tTimeWindow > 0; )
		{
			szActivity.Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_DEFAULTRELEASETIMEWINDOW), tTimeWindow.GetTotalSeconds());
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_CHANGING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_DISPATCHTIMEWINDOWCHANGE)); tTimeWindow > 0; )
		{
			szActivity.Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_DISPATCHTIMEWINDOW), tTimeWindow.GetTotalSeconds());
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCMANUALSTACK_LOGACTIVITY_CHANGING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCManualStackWnd::LogAlerts(CONST CUIntArray &nTypes, CONST CUIntArray &nActions)
{
	INT  nEntry;
	INT  nEntries;
	CString  szActivity[2];
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (nEntry = 0, nEntries = (INT)nTypes.GetSize(), cEntry.SetName(STRING(IDS_TCMANUALSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCMANUALSTACK_LOGDESCRIPTION_ALERTOPTIONSCHANGE)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); nEntry < nEntries; nEntry++)
		{
			szActivity[0] = (nActions.GetAt(nEntry) > 0 && nActions.GetAt(nEntry) != (UINT)-1) ? STRING(IDS_TCMANUALSTACK_LOGACTIVITY_ENABLING) : ((!nActions.GetAt(nEntry)) ? STRING(IDS_TCMANUALSTACK_LOGACTIVITY_CHANGING) : STRING(IDS_TCMANUALSTACK_LOGACTIVITY_DISABLING));
			szActivity[1].Format(STRING(IDS_TCMANUALSTACK_LOGOPERATION_ALERTTYPE), (nTypes.GetAt(nEntry) == TCMANUALSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE) ? STRING(IDS_TCMANUALSTACK_LOGALERTTYPE_TELECOMMANDRELEASEFAILURE) : STRING(IDS_TCMANUALSTACK_LOGALERTTYPE_INTERLOCKFAILURE));
			cEntry.SetActivity(szActivity[0] + SPACE + szActivity[1]);
			LogActivity(&cEntry);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::SetContents(CONST CByteArray &nContentsInfo)
{
	return((nContentsInfo.GetSize() > 0) ? m_cSavedStack.Unmap(nContentsInfo) : TRUE);
}

BOOL CTCManualStackWnd::GetContents(CByteArray &nContentsInfo) CONST
{
	CTCSavedStack  cSavedStack;

	return((GetTelecommands(cSavedStack)) ? cSavedStack.Map(nContentsInfo) : FALSE);
}

BOOL CTCManualStackWnd::SetPrintJobs(CONST CByteArray &nPrintInfo)
{
	CTCManualStackPrintJobs  pPrintJobs;

	return((pPrintJobs.Unmap(nPrintInfo)) ? SetPrintJobs(pPrintJobs) : FALSE);
}

BOOL CTCManualStackWnd::GetPrintJobs(CByteArray &nPrintInfo) CONST
{
	CTCManualStackPrintJobs  pPrintJobs;

	return((GetPrintJobs(pPrintJobs)) ? pPrintJobs.Map(nPrintInfo) : FALSE);
}

BOOL CTCManualStackWnd::GetPrintProperties(CONST CTCManualStackPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_wndView.GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}

BOOL CTCManualStackWnd::StartPrintJob(CDC &cDC)
{
	DOCINFO  sJobInfo;
	CString  szJobTitle;

	for (sJobInfo.fwType = 0, sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.lpszDocName = (LPTSTR)EMPTYSTRING, sJobInfo.lpszOutput = (LPCTSTR)NULL, sJobInfo.lpszDatatype = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCMANUALSTACK)); szJobTitle.GetLength() >= 0; )
	{
		sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle;
		break;
	}
	return((cDC.StartDoc(&sJobInfo) >= 0) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::PrintJob(CDC &cDC, CONST CTCManualStackPrintJobInfo *pJobInfo, LPCTSTR pszPrinterName, INT nFromPage, INT nToPage, CONST RECT &rtMargin, BOOL bMetric, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST CTextViewAttributes &pAttributes, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nPos;
	INT  nPage;
	INT  nPages;
	INT  nLine;
	INT  nLines;
	INT  nColumn;
	INT  nColumns;
	INT  nFont;
	INT  nFonts;
	INT  nSpacing;
	INT  nHeight[2];
	BOOL  bOverlap;
	BOOL  bOutput;
	UINT  nFormat;
	CRgn  rgnArea;
	CRect  rArea;
	CRect  rCalc;
	CRect  rClip;
	CRect  rItem;
	CFont  *pOldFont;
	CFont  cFont[TCMANUALSTACK_PRINTFONTS];
	CSize  sizeSymbol;
	CString  szColumn;
	COLORREF  nColor;
	COLORREF  nOldColor;
	CTimeKey  tPrint;
	CPtrArray  pFonts;
	CUIntArray  nTabs;
	TEXTMETRIC  tmFont;
	CStringArray  szColumnsText;
	CTextViewAttribute  *pAttribute;

	for (nPage = nPages = 0; (!nPages || nPage <= nPages) && (nPages > 0 || (nPages = (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rArea) != ERROR && rgnArea.CreateRectRgnIndirect(rArea) && CalcPrintDocTitleFont(cDC, rArea, cFont[TCMANUALSTACK_PRINTFONT_TITLE]) && CalcPrintDocDetailsFont(cDC, rArea, cFont[TCMANUALSTACK_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rArea, cFont[TCMANUALSTACK_PRINTFONT_COMMENTS]) && CalcPrintDocListItemsFonts(cDC, rArea, szColumns, szContents, pTitleFont, pItemsFont, cFont[TCMANUALSTACK_PRINTFONT_LISTITEMSTITLE], cFont[TCMANUALSTACK_PRINTFONT_LISTITEMS]) && CalcPrintDocNoticeFonts(cDC, rArea, cFont[TCMANUALSTACK_PRINTFONT_NOTICE], cFont[TCMANUALSTACK_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rArea, cFont[TCMANUALSTACK_PRINTFONT_FOOTER]) && CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[TCMANUALSTACK_PRINTFONT_LISTITEMSTITLE], &cFont[TCMANUALSTACK_PRINTFONT_LISTITEMS], nTabs) == szColumns.GetSize()) ? nPages : -1) == 0); )
	{
		for (nFont = 0, nFonts = (!nPages) ? (INT)(sizeof(cFont) / sizeof(cFont[0])) : 0; nFont < nFonts; nFont++)
		{
			pFonts.SetAtGrow(nFont, &cFont[nFont]);
			continue;
		}
		for (nLine = 0, nLines = (INT)szContents.GetSize(), nSpacing = 0, rCalc.SetRectEmpty(), rClip.SetRectEmpty(), bOverlap = FALSE, bOutput = TRUE; nPages >= 0 && nLine < nLines; nLine++, bOutput = TRUE)
		{
			for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), ExtractPrintDocText(szContents.GetAt(nLine), szColumnsText), nHeight[0] = nHeight[1] = 0; nPages >= 0 && nColumn < nColumns; nColumn++, nHeight[1] = 0)
			{
				if (rClip.Height() > 0)
				{
					if ((pOldFont = cDC.SelectObject((CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_LISTITEMS))))
					{
						if ((nSpacing = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmHeight / 10, 1) : -1) >= 0)
						{
							for (rCalc.SetRect(rCalc.left, (!nColumn) ? (rCalc.top + nSpacing) : rCalc.top, rCalc.right, (!nColumn) ? (rCalc.top + nSpacing + tmFont.tmHeight*((rClip.bottom - (rCalc.top + nSpacing)) / tmFont.tmHeight)) : (rCalc.top + tmFont.tmHeight*((rClip.bottom - rCalc.top) / tmFont.tmHeight))), nFormat = DT_LEFT | DT_NOPREFIX | DT_WORDBREAK, nColor = cDC.GetTextColor(); (pAttribute = pAttributes.GetAt(nLine)); )
							{
								pAttribute->GetColumnFormat(nColumn, nFormat);
								pAttribute->GetColumnColor(nColumn, nColor);
								break;
							}
							for (szColumn = (!szColumnsText.GetAt(nColumn).IsEmpty()) ? (((nPos = (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)) ? szColumnsText.GetAt(nColumn).Find(CTCManualStackView::GetSymbolDelimiter()) : -1) >= 0) ? (szColumnsText.GetAt(nColumn).Left(nPos)) : (szColumnsText.GetAt(nColumn) + SPACE)) : EMPTYSTRING, nFormat = (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage && nPage <= nToPage))) ? nFormat : (nFormat | DT_CALCRECT), sizeSymbol.cx = sizeSymbol.cy = tmFont.tmHeight, nOldColor = cDC.SetTextColor((cDC.GetDeviceCaps(NUMCOLORS) > 2) ? nColor : cDC.GetTextColor()), nHeight[1] = (szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS) && szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS) && szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT) && szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS) && szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT) && szColumns.GetAt(nColumn) != STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS)) ? cDC.DrawText(szColumn, (rItem = CRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.bottom)), nFormat) : sizeSymbol.cy; szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER); )
							{
								DrawPrintDocSymbol(cDC, ((nFormat & DT_CALCRECT) != DT_CALCRECT  &&  rItem.top + sizeSymbol.cy <= rCalc.bottom) ? (rItem = CRect(rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2, rItem.top, rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2 + sizeSymbol.cx, rItem.top + sizeSymbol.cy)) : CRect(0, 0, 0, 0), (szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCMANUALSTACK_LIST_ALERT_INFORMATION)) >= 0) ? IDP_TCMANUALSTACKINFORMATION : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCMANUALSTACK_LIST_ALERT_WARNING)) >= 0) ? IDP_TCMANUALSTACKWARNING : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCMANUALSTACK_LIST_ALERT_ERROR)) >= 0) ? IDP_TCMANUALSTACKERROR : -1)), pSymbols, nSymbolIDs);
								break;
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS))
							{
								for (rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, (nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1) + sizeSymbol.cx) : (rCalc.left + sizeSymbol.cx), rCalc.top + sizeSymbol.cy); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCK)) >= 0) ? IDP_TCMANUALSTACKINTERLOCK : -1, pSymbols, nSymbolIDs);
									DrawPrintDocSymbol(cDC, rItem + CPoint(3 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKIDLE)) >= 0) ? IDP_TCMANUALSTACKINTERLOCKIDLE : ((szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKPENDING)) >= 0) ? IDP_TCMANUALSTACKINTERLOCKPENDING : ((szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) >= 0) ? IDP_TCMANUALSTACKINTERLOCKSUCCESS : ((szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_INTERLOCKFAILURE)) >= 0) ? IDP_TCMANUALSTACKINTERLOCKFAILURE : -1))), pSymbols, nSymbolIDs);
									DrawPrintDocSymbol(cDC, rItem + CPoint(6 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_GROUPED)) >= 0) ? IDP_TCMANUALSTACKGROUPED : -1, pSymbols, nSymbolIDs);
									DrawPrintDocSymbol(cDC, rItem + CPoint(9 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_FLAGS_BLOCKED)) >= 0) ? IDP_TCMANUALSTACKBLOCKED : -1, pSymbols, nSymbolIDs);
									break;
								}
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS))
							{
								for (nID = (szColumn.IsEmpty()) ? IDP_TCMANUALSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_ON)) >= 0) ? IDP_TCMANUALSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_OFF)) >= 0) ? IDP_TCMANUALSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVCHECKS_DISABLED)) >= 0) ? IDP_TCMANUALSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
									break;
								}
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT))
							{
								for (nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_GO)) >= 0) ? IDP_TCMANUALSTACKPTVGO : -1, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_WAIT)) >= 0) ? IDP_TCMANUALSTACKPTVWAIT : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PTVRESULT_FAIL)) >= 0) ? IDP_TCMANUALSTACKPTVFAIL : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
									break;
								}
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS))
							{
								for (nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_NONE)) >= 0) ? IDP_TCMANUALSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_ON)) >= 0) ? IDP_TCMANUALSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_OFF)) >= 0) ? IDP_TCMANUALSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVCHECKS_DISABLED)) >= 0) ? IDP_TCMANUALSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
									break;
								}
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT))
							{
								for (nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_GO)) >= 0) ? IDP_TCMANUALSTACKPEVGO : -1, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_PEVRESULT_NOGO)) >= 0) ? IDP_TCMANUALSTACKPEVNOGO : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
									break;
								}
							}
							if (szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS))
							{
								for (nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_NONE))) ? IDP_TCMANUALSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_ON)) >= 0) ? IDP_TCMANUALSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_OFF)) >= 0) ? IDP_TCMANUALSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCMANUALSTACK_LIST_CEVCHECKS_DISABLED)) >= 0) ? IDP_TCMANUALSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
								{
									DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
									break;
								}
							}
							nHeight[0] = max(max(nHeight[0], sizeSymbol.cy), nHeight[1]);
							cDC.SetTextColor(nOldColor);
							cDC.SelectObject(pOldFont);
						}
						else
						{
							cDC.SelectObject(pOldFont);
							break;
						}
					}
					else break;
				}
				if (((rCalc.top + nHeight[1] > rCalc.bottom || bOverlap) && nColumn == nColumns - 1) || !rClip.Height())
				{
					if (nPages > 0 && (nPage == nPages || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage == nToPage)))
					{
						nPages = nPage;
						nLines = nLine;
						nColumns = nColumn;
						break;
					}
					if (bOutput && (!nPages || ((!nPage || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage || nPage > nToPage)) || cDC.EndPage() >= 0) && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage - 1 || nPage >= nToPage)) || (((((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage) && nPage > 0) || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage != nFromPage - 1)) || StartPrintJob(cDC)) && cDC.StartPage() >= 0)))))
					{
						if (cDC.SelectClipRgn(&rgnArea) != ERROR  &&  DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, szColumns, pFonts, nTabs, nPages, (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage - 1 && nPage < nToPage))) ? (nPage + 1) : 0, rClip) && cDC.IntersectClipRect(rClip) != ERROR)
						{
							rCalc.SetRect(rClip.left, rClip.top - rCalc.Height() - nSpacing, rClip.right, rClip.bottom);
							bOverlap = FALSE;
							bOutput = FALSE;
							nColumn = -1;
							nPage++;
							continue;
						}
					}
					break;
				}
				bOverlap = (rCalc.top + nHeight[1] > rCalc.bottom) ? TRUE : bOverlap;
			}
			if (nLine < nLines  &&  nColumn == nColumns)
			{
				rCalc.DeflateRect(0, nHeight[0], 0, 0);
				continue;
			}
			break;
		}
		if (nPages >= 0)
		{
			if (nLine == nLines  &&  !nPages)
			{
				nPages = nPage;
				nPage -= nPage;
				if ((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || nPages >= nFromPage) && nPages > 0) continue;
				nPages = nPage = 0;
			}
			if (nLine < nLines)
			{
				if (nPages > 0) cDC.AbortDoc();
				nPages = -1;
				break;
			}
		}
		break;
	}
	return(((!nPages || (nPages > 0 && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage < nFromPage) || (cDC.EndPage() >= 0 && EndPrintJob(cDC))))) && nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::EndPrintJob(CDC &cDC)
{
	return((cDC.EndDoc() >= 0) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::DrawPrintDocPage(CDC &cDC, CONST CTCManualStackPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, CONST RECT &rtMargin, BOOL bMetric, CONST CStringArray &szColumns, CONST CPtrArray &pFonts, CONST CUIntArray &nTabs, INT nPages, INT nPage, LPRECT prClip)
{
	return((CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(prClip) != ERROR  &&  DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocListItemsTitle(cDC, prClip, szColumns, (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_LISTITEMSTITLE), nTabs, (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCMANUALSTACK_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocListItemsTitle(CDC &cDC, LPRECT prClip, CONST CStringArray &szColumns, CFont *pFont, CONST CUIntArray &nTabs, BOOL bCalc)
{
	CSize  rCalc;
	CFont  *pOldFont;
	CString  szItems;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		szItems = GetPrintDocListItemsTitle(szColumns);
		rCalc = (!bCalc) ? cDC.TabbedTextOut(prClip->left, prClip->top + cDC.GetTextExtent(szItems, szItems.GetLength()).cy, szItems, (INT)nTabs.GetSize(), (LPINT)nTabs.GetData(), prClip->left) : CSize(nTabs.GetAt(nTabs.GetSize() - 1), cDC.GetTextExtent(szItems, szItems.GetLength()).cy);
		prClip->top += 2 * rCalc.cy;
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocSymbol(CDC &cDC, LPRECT prClip, UINT nSymbolID, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nIDs;
	CImage  *pSymbol;

	for (nID = 0, nIDs = (nSymbolID != (UINT)-1) ? (INT)nSymbolIDs.GetSize() : -1; nID < nIDs; nID++)
	{
		if (nSymbolIDs.GetAt(nID) == nSymbolID) break;
		continue;
	}
	if ((pSymbol = (nID < nIDs) ? (CImage *)pSymbols.GetAt(nID) : (CImage *)NULL) && prClip->right - prClip->left > 0 && prClip->bottom - prClip->top > 0)
	{
		pSymbol->Draw(cDC.GetSafeHdc(), prClip->left, prClip->top, prClip->right - prClip->left, prClip->bottom - prClip->top);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCManualStackWnd::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCManualStackWnd::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCManualStackWnd::GetPrintDocDetails(CONST CTCManualStackPrintJobInfo *pJobInfo) CONST
{
	INT  nDigits;
	UINT  nRange[2];
	CString  szStatus;
	CString  szDetails;
	CString  szRange[2];
	CTimeKey  tRange[2];
	CStringTools  cStringTools;

	pJobInfo->GetPrintRange(nRange[0], nRange[1]);
	pJobInfo->GetPrintRange(tRange[0], tRange[1]);
	nDigits = max(cStringTools.ConvertUIntToString(nRange[1]).GetLength(), 3);
	szStatus = (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_ONSTACKITEMS) ? STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_ONSTACKSTATUS) : EMPTYSTRING;
	szStatus += (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_DISPATCHEDITEMS) ? ((!szStatus.IsEmpty()) ? (CString(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_DISPATCHEDSTATUS)) : STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_DISPATCHEDSTATUS)) : EMPTYSTRING;
	szStatus += (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_NOTRELEASEDITEMS) ? ((!szStatus.IsEmpty()) ? (CString(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_NOTRELEASEDSTATUS)) : STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_NOTRELEASEDSTATUS)) : EMPTYSTRING;
	szRange[0].Format(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_ITEMRANGESUBTITLE), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[0], nDigits), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[1], nDigits));
	szRange[1].Format(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_TIMERANGESUBTITLE), (LPCTSTR)tRange[0].FormatGmt(), (LPCTSTR)tRange[1].FormatGmt());
	szDetails.Format(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_STATUSSUBTITLE), (LPCTSTR)szStatus);
	szDetails = STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_SUBTITLE) + CString(CR) + CString(EOL) + szDetails;
	szDetails += (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_ITEMRANGE) ? (CString(CR) + CString(EOL) + szRange[0]) : EMPTYSTRING;
	szDetails += (pJobInfo->GetPrintMode() & TCMANUALSTACK_PRINT_TIMERANGE) ? (CString(CR) + CString(EOL) + szRange[1]) : EMPTYSTRING;
	return szDetails;
}

CString CTCManualStackWnd::GetPrintDocComments(CONST CTCManualStackPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCManualStackWnd::GetPrintDocListItemsTitle(CONST CStringArray &szColumns) CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szItems;

	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		szItems += (nColumn > 0) ? CString(TAB) : EMPTYSTRING;
		szItems += szColumns.GetAt(nColumn);
	}
	return szItems;
}

CString CTCManualStackWnd::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCManualStackWnd::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCMANUALSTACK_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

INT CTCManualStackWnd::ExtractPrintDocText(LPCTSTR pszText, CStringArray &szColumnsText) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szText;

	for (nPos[0] = 0, nLength = lstrlen(pszText), szColumnsText.RemoveAll(); nPos[0] <= nLength; nPos[0] += ++nPos[1])
	{
		if ((nPos[1] = (INT)_tcscspn((szText = pszText + nPos[0]), CString(CTextView::GetColumnDelimiter()))) < nLength - nPos[0])
		{
			szColumnsText.Add((nPos[1] > 0) ? szText.Left(nPos[1]) : EMPTYSTRING);
			continue;
		}
		szColumnsText.Add(szText);
		break;
	}
	return((INT)szColumnsText.GetSize());
}

BOOL CTCManualStackWnd::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCManualStackWnd::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCManualStackWnd::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCManualStackWnd::CalcPrintDocListItemsFonts(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CFont &cTitleFont, CFont &cItemsFont) CONST
{
	INT  nWidth;
	INT  nHeight;
	CFont  cFont[2];
	CUIntArray  nTabs;

	for (nHeight = max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))); nHeight < 0; nHeight++)
	{
		if (cFont[0].CreateFont(nHeight, 0, pTitleFont->lfEscapement, pTitleFont->lfOrientation, FW_BOLD, pTitleFont->lfItalic, pTitleFont->lfUnderline, pTitleFont->lfStrikeOut, pTitleFont->lfCharSet, pTitleFont->lfOutPrecision, pTitleFont->lfClipPrecision, pTitleFont->lfQuality, pTitleFont->lfPitchAndFamily, pTitleFont->lfFaceName))
		{
			if (cFont[1].CreateFont((4 * nHeight) / 5, 0, pItemsFont->lfEscapement, pItemsFont->lfOrientation, pItemsFont->lfWeight, pItemsFont->lfItalic, pItemsFont->lfUnderline, pItemsFont->lfStrikeOut, pItemsFont->lfCharSet, pItemsFont->lfOutPrecision, pItemsFont->lfClipPrecision, pItemsFont->lfQuality, pItemsFont->lfPitchAndFamily, pItemsFont->lfFaceName))
			{
				if (CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[0], &cFont[1], nTabs) > 0)
				{
					if ((nWidth = nTabs.GetAt(nTabs.GetSize() - 1)) > rArea.right - rArea.left)
					{
						nHeight = (nHeight*(rArea.right - rArea.left)) / nWidth - 1;
						cFont[0].DeleteObject();
						cFont[1].DeleteObject();
						continue;
					}
					cTitleFont.Attach(cFont[0].Detach());
					cItemsFont.Attach(cFont[1].Detach());
					break;
				}
				cFont[1].DeleteObject();
			}
			cFont[0].DeleteObject();
		}
	}
	return((cTitleFont.GetSafeHandle() && cItemsFont.GetSafeHandle()) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCManualStackWnd::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

INT CTCManualStackWnd::CalcPrintDocTitleWidth(CDC &cDC, LPCTSTR pszColumn, CFont *pTitleFont) CONST
{
	INT  nWidth;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pTitleFont)))
	{
		nWidth = cDC.GetTextExtent(pszColumn, lstrlen(pszColumn)).cx;
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}
INT CTCManualStackWnd::CalcPrintDocTitleWidth(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CFont *pTitleFont, CFont *pItemsFont, CUIntArray &nTabs) CONST
{
	INT  nIndent;
	INT  nColumn;
	INT  nColumns;
	INT  nWidth[2];
	CSize  sizeSymbol;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;
	CStringArray  szLines;

	for (nIndent = 0, sizeSymbol.cx = sizeSymbol.cy = 0, nTabs.RemoveAll(); (pOldFont = cDC.SelectObject(pTitleFont)); )
	{
		nIndent = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmAveCharWidth, nIndent) : nIndent;
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		if (cDC.GetTextMetrics(&tmFont))
		{
			sizeSymbol.cx = tmFont.tmHeight;
			sizeSymbol.cy = tmFont.tmHeight;
			nIndent = max(tmFont.tmAveCharWidth, nIndent);
		}
		cDC.SelectObject(pOldFont);
	}
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), szLines.Copy(szContents); nColumn < nColumns; nColumn++)
	{
		for (nWidth[0] = CalcPrintDocTitleWidth(cDC, szColumns.GetAt(nColumn), pTitleFont), nWidth[1] = CalcPrintDocColumnWidth(cDC, rArea, szColumns.GetAt(nColumn), szLines, pItemsFont); szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER); )
		{
			nWidth[1] += 3 * sizeSymbol.cx / 2;
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_ARGUMENTS); )
		{
			nWidth[1] = min(3 * nWidth[0], nWidth[1]);
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_FLAGS); )
		{
			nWidth[1] = (sizeSymbol.cx > 0) ? (11 * sizeSymbol.cx / 2) : nWidth[1];
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PTVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_PEVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCMANUALSTACK_TITLEITEM_CEVCHECKS); )
		{
			nWidth[1] = sizeSymbol.cx;
			break;
		}
		nTabs.Add((nTabs.GetSize() > 0) ? (2 * nIndent + nTabs.GetAt(nTabs.GetSize() - 1) + max(nWidth[0], nWidth[1])) : (2 * nIndent + max(nWidth[0], nWidth[1])));
	}
	if (nTabs.GetSize() > 0)
	{
		nTabs.SetAt(nTabs.GetSize() - 1, nTabs.GetAt(nTabs.GetSize() - 1) - nIndent);
		return((INT)nTabs.GetSize());
	}
	return 0;
}

INT CTCManualStackWnd::CalcPrintDocColumnWidth(CDC &cDC, CONST RECT &rArea, LPCTSTR pszColumn, CStringArray &szContents, CFont *pItemsFont) CONST
{
	INT  nPos;
	INT  nLine;
	INT  nLines;
	INT  nWidth;
	CRect  rColumn;
	CFont  *pOldFont;
	CString  szLine;

	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		for (nLine = 0, nLines = (INT)szContents.GetSize(), nWidth = 0; nLine < nLines; nLine++)
		{
			if ((nPos = szContents.GetAt(nLine).Find(CTextView::GetColumnDelimiter())) >= 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = (!lstrcmp(pszColumn, STRING(IDS_TCMANUALSTACK_TITLEITEM_NUMBER)) && szContents.GetAt(nLine).Left(nPos).Find(CTCManualStackView::GetSymbolDelimiter()) >= 0) ? szContents.GetAt(nLine).Left(nPos).Left(szContents.GetAt(nLine).Left(nPos).Find(CTCManualStackView::GetSymbolDelimiter())) : szContents.GetAt(nLine).Left(nPos))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, szContents.GetAt(nLine).Mid(nPos + 1));
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
			if (szContents.GetAt(nLine).GetLength() > 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = szContents.GetAt(nLine))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, EMPTYSTRING);
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
		}
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}

BOOL CTCManualStackWnd::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::SetLayoutInfo(CONST RECT &rPropertiesToolBar, CONST RECT &rOperationsToolBar, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	CPane  *pPane;
	CRect  rToolBar[2];
	CDockSite  *pDockSite;
	CDockingPanesRow  *pPanesRow[2];

	if ((pDockSite = GetDockingManager()->FindDockSite(CBRS_ALIGN_TOP, TRUE)))
	{
		for (rToolBar[0] = rPropertiesToolBar, rToolBar[1] = rOperationsToolBar, ScreenToClient(&rToolBar[0]), ScreenToClient(&rToolBar[1]); rPropertiesToolBar.top != rOperationsToolBar.top && pDockSite->GetDockSiteRowsList().GetCount() == 1; )
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? pDockSite->AddRow(pDockSite->GetDockSiteRowsList().GetTailPosition(), (rPropertiesToolBar.top > rOperationsToolBar.top) ? (rPropertiesToolBar.bottom - rPropertiesToolBar.top) : (rOperationsToolBar.bottom - rOperationsToolBar.top)) : (CDockingPanesRow *)NULL))
			{
				pPanesRow[0]->RemovePane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
				pPanesRow[1]->AddPane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top], DM_RECT, &rToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
			}
			break;
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top  &&  pDockSite->GetDockSiteRowsList().GetCount() > 1)
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetTailPosition()) : (CDockingPanesRow *)NULL))
			{
				if ((pPane = (CPane *)pPanesRow[1]->GetPaneList().GetAt(pPanesRow[1]->GetPaneList().GetHeadPosition())))
				{
					pPanesRow[1]->RemovePane(pPane);
					pPanesRow[0]->AddPane(pPane, DM_RECT, &rToolBar[pPane->GetSafeHwnd() == m_wndToolBar[1].GetSafeHwnd()]);
				}
			}
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top) DockPaneLeftOf(&m_wndToolBar[rPropertiesToolBar.left > rOperationsToolBar.left], &m_wndToolBar[rPropertiesToolBar.left < rOperationsToolBar.left]);
		m_wndToolBar[0].CWnd::MoveWindow(rToolBar[0]);
		m_wndToolBar[1].CWnd::MoveWindow(rToolBar[1]);
	}
	return m_wndView.SetLayout(nColumns, nWidths) && m_wndView.SetListTitleFont(pTitleFont) && m_wndView.SetListItemsFont(pItemsFont) && m_wndView.SetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCManualStackWnd::GetLayoutInfo(RECT &rPropertiesToolBar, RECT &rOperationsToolBar, CUIntArray &nColumns, CUIntArray &nWidths, LOGFONT *pTitleFont, LOGFONT *pItemsFont, SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	CRect  rToolBar[2];

	m_wndToolBar[0].GetVirtualRect(rToolBar[0]);
	m_wndToolBar[1].GetVirtualRect(rToolBar[1]);
	m_wndToolBar[0].GetWindowRect(&rPropertiesToolBar);
	m_wndToolBar[1].GetWindowRect(&rOperationsToolBar);
	SetRect(&rPropertiesToolBar, rPropertiesToolBar.left, rPropertiesToolBar.top, rPropertiesToolBar.left + rToolBar[0].Width(), rPropertiesToolBar.top + rToolBar[0].Height());
	SetRect(&rOperationsToolBar, rOperationsToolBar.left, rOperationsToolBar.top, rOperationsToolBar.left + rToolBar[1].Width(), rOperationsToolBar.top + rToolBar[1].Height());
	return m_wndView.GetLayout(nColumns, nWidths) && m_wndView.GetListTitleFont(pTitleFont) && m_wndView.GetListItemsFont(pItemsFont) && m_wndView.GetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

void CTCManualStackWnd::RecalcLayout(CDisplayToolBar *pToolBar)
{
	if (IsWindow(m_wndView.GetSafeHwnd()))
	{
		m_wndView.RecalcLayout();
		return;
	}
}
void CTCManualStackWnd::RecalcLayout(BOOL bNotify)
{
	CDisplayWnd::RecalcLayout(bNotify);
}

BOOL CTCManualStackWnd::Lock()
{
	return((GetTCService()->Lock() && CDisplayWnd::Lock()) ? TRUE : FALSE);
}

BOOL CTCManualStackWnd::Unlock()
{
	return((CDisplayWnd::Unlock() && GetTCService()->Unlock()) ? TRUE : FALSE);
}

BEGIN_MESSAGE_MAP(CTCManualStackWnd, CDisplayWnd)
	//{{AFX_MSG_MAP(CTCManualStackWnd)
	ON_WM_CREATE()
	ON_WM_GETMINMAXINFO()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	ON_COMMAND(IDM_TCMANUALSTACKSETTINGS, OnSettings)
	ON_COMMAND(IDM_TCMANUALSTACKSAVE, OnSave)
	ON_COMMAND(IDM_TCMANUALSTACKOPEN, OnOpen)
	ON_COMMAND(IDM_TCMANUALSTACKLOAD, OnLoad)
	ON_COMMAND(IDM_TCMANUALSTACKPROPERTIES, OnProperties)
	ON_COMMAND(IDM_TCMANUALSTACKINSERTBEFORE, OnInsertBefore)
	ON_COMMAND(IDM_TCMANUALSTACKINSERTAFTER, OnInsertAfter)
	ON_COMMAND(IDM_TCMANUALSTACKMOVEUP, OnMoveUp)
	ON_COMMAND(IDM_TCMANUALSTACKMOVEDOWN, OnMoveDown)
	ON_COMMAND(IDM_TCMANUALSTACKSELECTALL, OnSelectAll)
	ON_COMMAND(IDM_TCMANUALSTACKCUT, OnCut)
	ON_COMMAND(IDM_TCMANUALSTACKCOPY, OnCopy)
	ON_COMMAND(IDM_TCMANUALSTACKPASTE, OnPaste)
	ON_COMMAND(IDM_TCMANUALSTACKDELETE, OnDelete)
	ON_COMMAND(IDM_TCMANUALSTACKFULLVIEWMODE, OnFullViewMode)
	ON_COMMAND(IDM_TCMANUALSTACKSTART, OnStart)
	ON_COMMAND(IDM_TCMANUALSTACKSUSPEND, OnSuspend)
	ON_COMMAND(IDM_TCMANUALSTACKSTOP, OnStop)
	ON_COMMAND(IDM_TCMANUALSTACKARM, OnArm)
	ON_COMMAND(IDM_TCMANUALSTACKGO, OnDispatch)
	ON_COMMAND(IDM_TCMANUALSTACKUNDISPATCH, OnUndispatch)
	ON_COMMAND(IDM_TCMANUALSTACKACKNOWLEDGE, OnAcknowledge)
	ON_COMMAND(IDM_TCMANUALSTACKRELOAD, OnReload)
	ON_COMMAND(IDM_TCMANUALSTACKRESETINTERLOCKS, OnResetInterlocks)
	ON_COMMAND(IDM_TCMANUALSTACKINTERLOCKCHECKS, OnInterlockChecks)
	ON_COMMAND(IDM_TCMANUALSTACKRELEASEWAITMODE, OnReleaseWaitMode)
	ON_COMMAND(IDM_TCMANUALSTACKAUTOREJECTIONMODE, OnAutoRejectionMode)
	ON_COMMAND(IDM_TCMANUALSTACKPRINT, OnPrint)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSETTINGS, OnUpdateSettings)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSAVE, OnUpdateSave)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKOPEN, OnUpdateOpen)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKLOAD, OnUpdateLoad)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKPROPERTIES, OnUpdateProperties)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKINSERTBEFORE, OnUpdateInsertBefore)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKINSERTAFTER, OnUpdateInsertAfter)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKMOVEUP, OnUpdateMoveUp)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKMOVEDOWN, OnUpdateMoveDown)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSELECTALL, OnUpdateSelectAll)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKCUT, OnUpdateCut)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKCOPY, OnUpdateCopy)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKPASTE, OnUpdatePaste)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKDELETE, OnUpdateDelete)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKFULLVIEWMODE, OnUpdateFullViewMode)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSTART, OnUpdateStart)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSUSPEND, OnUpdateSuspend)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKSTOP, OnUpdateStop)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKARM, OnUpdateArm)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKGO, OnUpdateDispatch)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKUNDISPATCH, OnUpdateUndispatch)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKACKNOWLEDGE, OnUpdateAcknowledge)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKRELOAD, OnUpdateReload)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKRESETINTERLOCKS, OnUpdateResetInterlocks)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKINTERLOCKCHECKS, OnUpdateInterlockChecks)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKRELEASEWAITMODE, OnUpdateReleaseWaitMode)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKAUTOREJECTIONMODE, OnUpdateAutoRejectionMode)
	ON_UPDATE_COMMAND_UI(IDM_TCMANUALSTACKPRINT, OnUpdatePrint)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_MESSAGEPANE, OnUpdateStatusBarMessagePane)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_UPLINKPANE, OnUpdateStatusBarUplinkPane)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_PEVPANE, OnUpdateStatusBarPEVPane)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_CEVPANE, OnUpdateStatusBarCEVPane)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_STATEPANE, OnUpdateStatusBarStatePane)
	ON_UPDATE_COMMAND_UI(ID_TCMANUALSTACK_STATUSBAR_MODEPANE, OnUpdateStatusBarModePane)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCManualStackWnd message handlers

int CTCManualStackWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CDisplayWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (EnableDocking(CBRS_ALIGN_TOP), m_bEnableFloatingBars = TRUE; CreateToolBars() && CreateStatusBar() && CreateView() && LoadAccelTable(MAKEINTRESOURCE(IDR_TCMANUALSTACKFRAME)); )
		{
			UpdateBars();
			return 0;
		}
	}
	return -1;
}

void CTCManualStackWnd::OnGetMinMaxInfo(MINMAXINFO *lpMMI)
{
	CRect  rView;
	CRect  rStatusBar;

	for (rView.SetRectEmpty(); IsWindow(m_wndView.GetSafeHwnd()); )
	{
		m_wndView.GetWindowRect(rView);
		ScreenToClient(rView);
		rView.SetRect(rView.left, rView.top, rView.left + m_wndView.GetTrackSize().cx, rView.top + m_wndView.GetTrackSize().cy);
		break;
	}
	for (rStatusBar.SetRectEmpty(); IsWindow(m_wndStatusBar.GetSafeHwnd()); )
	{
		m_wndStatusBar.GetWindowRect(rStatusBar);
		break;
	}
	lpMMI->ptMinTrackSize.x = max(lpMMI->ptMinTrackSize.x, 2 * GetSystemMetrics(SM_CXFRAME) + rView.Width());
	lpMMI->ptMinTrackSize.y = max(lpMMI->ptMinTrackSize.y, 2 * (GetSystemMetrics(SM_CYFRAME) + GetSystemMetrics(SM_CYEDGE)) + GetSystemMetrics(SM_CYCAPTION) + rView.top + rView.Height() + rStatusBar.Height());
	CDisplayWnd::OnGetMinMaxInfo(lpMMI);
}

void CTCManualStackWnd::OnSize(UINT nType, int cx, int cy)
{
	CDisplayWnd::OnSize(nType, cx, cy);
	m_wndView.RecalcLayout();
}

BOOL CTCManualStackWnd::OnEraseBkgnd(CDC *pDC)
{
	if (!IsInitialized())
	{
		m_wndView.UpdateWindow();
		m_wndToolBar[0].UpdateWindow();
		m_wndToolBar[1].UpdateWindow();
		m_wndStatusBar.UpdateWindow();
	}
	return TRUE;
}

void CTCManualStackWnd::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()) && m_wndView.IsChild(pOldWnd))
	{
		GetParent()->SetFocus();
		return;
	}
	if (GetTelecommandCount() > 0)
	{
		m_wndView.SetCurTelecommand(max(GetCurTelecommand(), 0));
		m_wndView.SetFocus();
		return;
	}
	CDisplayWnd::OnSetFocus(pOldWnd);
}

BOOL CTCManualStackWnd::OnCloseSettingsDialog(UINT nCode)
{
	INT  nArguments;
	INT  nCheckCount;
	UINT  nCheckFlags;
	UINT  nOptions;
	UINT  nLogPolicy;
	UINT  nLogCount;
	BOOL  bLogEvent;
	BOOL  bToolTips;
	BOOL  bStateFlag;
	BOOL  bModeFlags[4];
	BOOL  bAllArguments;
	CString  szLogFileName[2];
	LOGFONT  fntTitle;
	LOGFONT  fntItems;
	COLORREF  nColor;
	CUIntArray  nColumns;
	DWORDLONG  dwLogRetention;
	CTimeSpan  tLogRetention;
	CTimeSpan  tTimeWindow[2];
	CTCManualStackPrintJobs  pJobs;

	if (nCode == IDOK)
	{
		if (m_dlgSettings.IsLayoutModified())
		{
			m_dlgSettings.GetColumns(nColumns);
			m_dlgSettings.GetTitleFont(&fntTitle);
			m_dlgSettings.GetItemsFont(&fntItems);
			m_dlgSettings.GetToolTipMode(bToolTips);
			m_dlgSettings.GetGridBackgroundColor(nColor);
			if (!SetLayout(nColumns) || !SetListTitleFont(&fntTitle) || !SetListItemsFont(&fntItems) || !SetGridBackgroundColor(nColor) || !EnableToolTipMode(bToolTips)) return FALSE;
		}
		if (m_dlgSettings.IsOperationsModified())
		{
			m_dlgSettings.GetListOptions(nArguments, bAllArguments);
			m_dlgSettings.GetListCheckOptions(nCheckFlags, nCheckCount);
			m_dlgSettings.GetMiscellaneousOptions(nOptions);
			m_dlgSettings.GetDefaultReleaseTimeWindow(tTimeWindow[0]);
			m_dlgSettings.GetDispatchTimeWindow(tTimeWindow[1]);
			m_dlgSettings.GetMasterManualModeFlag(bModeFlags[0]);
			m_dlgSettings.GetInterlockModeFlag(bModeFlags[1]);
			m_dlgSettings.GetReleaseWaitModeFlag(bModeFlags[2]);
			m_dlgSettings.GetAutoRejectionModeFlag(bModeFlags[3]);
			m_dlgSettings.GetDisabledStateFlag(bStateFlag);
			if (!SetTelecommandingMode((bModeFlags[0]) ? TCMANUALSTACK_MODE_MASTERMANUAL : TCMANUALSTACK_MODE_DEFAULT) || !SetTelecommandingState((bStateFlag) ? (GetTelecommandingState() | TCMANUALSTACK_STATE_DISABLED) : (GetTelecommandingState() & ~TCMANUALSTACK_STATE_DISABLED)) || !SetTelecommandingChecks(nCheckFlags) || !EnableTelecommandingInterlockMode(bModeFlags[1]) || !EnableTelecommandingReleaseWaitMode(bModeFlags[2]) || !EnableTelecommandingAutoRejectionMode(bModeFlags[3]) || !SetListOptions(nArguments, bAllArguments) || !SetListUpdateChecks(nCheckCount) || !SetMiscellaneousOptions(nOptions) || !SetDefaultReleaseTimeWindow(tTimeWindow[0]) || !SetDispatchTimeWindow(tTimeWindow[1])) return FALSE;
		}
		if (m_dlgSettings.IsLoggingModified())
		{
			m_dlgSettings.GetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent);
			if (!SetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent)) return FALSE;
		}
		if (m_dlgSettings.IsPrintingModified())
		{
			m_dlgSettings.GetPrintJobs(pJobs);
			if (!SetPrintJobs(pJobs)) return FALSE;
		}
		UpdateContents();
		UpdateAllPanes();
	}
	return TRUE;
}

void CTCManualStackWnd::OnSettings()
{
	ReportEvent((m_dlgSettings.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCManualStackWnd::OnSave()
{
	CTCManualStackItems  pItems;
	CHourglassCursor  cCursor;

	EnumSelectedTelecommands(pItems);
	ReportEvent((m_dlgSaveStacks.Create(this, pItems) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCManualStackWnd::OnOpen()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgLoadStacks.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCManualStackWnd::OnLoad()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgLoadCommand.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCManualStackWnd::OnProperties()
{
	CHourglassCursor  cCursor;

	ShowTelecommandProperties();
}

void CTCManualStackWnd::OnInsertBefore()
{
	CHourglassCursor  cCursor;

	DoInsertBeforeTelecommand();
}

void CTCManualStackWnd::OnInsertAfter()
{
	CHourglassCursor  cCursor;

	DoInsertAfterTelecommand();
}

void CTCManualStackWnd::OnMoveUp()
{
	CHourglassCursor  cCursor;

	DoMoveUpTelecommand();
}

void CTCManualStackWnd::OnMoveDown()
{
	CHourglassCursor  cCursor;

	DoMoveDownTelecommand();
}

void CTCManualStackWnd::OnSelectAll()
{
	CHourglassCursor  cCursor;

	DoSelectAllTelecommands();
}

void CTCManualStackWnd::OnCut()
{
	CHourglassCursor  cCursor;

	DoCutTelecommand();
}

void CTCManualStackWnd::OnCopy()
{
	CHourglassCursor  cCursor;

	DoCopyTelecommand();
}

void CTCManualStackWnd::OnPaste()
{
	CHourglassCursor  cCursor;

	DoPasteTelecommand();
}

void CTCManualStackWnd::OnDelete()
{
	CHourglassCursor  cCursor;

	DoDeleteTelecommand();
}

void CTCManualStackWnd::OnFullViewMode()
{
	CHourglassCursor  cCursor;

	EnableFullViewMode(!IsFullViewModeEnabled());
}

void CTCManualStackWnd::OnStart()
{
	CHourglassCursor  cCursor;

	DoCommandingState();
}

void CTCManualStackWnd::OnSuspend()
{
	CHourglassCursor  cCursor;

	DoSuspendedState();
}

void CTCManualStackWnd::OnStop()
{
	CHourglassCursor  cCursor;

	DoStoppedState();
}

void CTCManualStackWnd::OnArm()
{
	CHourglassCursor  cCursor;

	DoArmTelecommand();
}

void CTCManualStackWnd::OnDispatch()
{
	CHourglassCursor  cCursor;

	DoDispatchTelecommand();
}

void CTCManualStackWnd::OnUndispatch()
{
	CHourglassCursor  cCursor;

	DoUndispatchTelecommand();
}

void CTCManualStackWnd::OnAcknowledge()
{
	CHourglassCursor  cCursor;

	DoAcknowledgeTelecommand();
}

void CTCManualStackWnd::OnReload()
{
	CHourglassCursor  cCursor;

	DoReloadTelecommand();
}

void CTCManualStackWnd::OnResetInterlocks()
{
	CHourglassCursor  cCursor;

	DoResetInterlocks();
}

void CTCManualStackWnd::OnInterlockChecks()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingInterlockMode(!IsTelecommandingInterlockModeEnabled());
}

void CTCManualStackWnd::OnReleaseWaitMode()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingReleaseWaitMode(!IsTelecommandingReleaseWaitModeEnabled());
}

void CTCManualStackWnd::OnAutoRejectionMode()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingAutoRejectionMode(!IsTelecommandingAutoRejectionModeEnabled());
}

void CTCManualStackWnd::OnPrint()
{
	CHourglassCursor  cCursor;

	ReportEvent((!Print()) ? SYSTEM_WARNING_DISPLAY_PRINT_FAILURE : SYSTEM_NOERROR);
}

void CTCManualStackWnd::OnUpdateSettings(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsWindow(m_dlgSettings.GetSafeHwnd()));
}

void CTCManualStackWnd::OnUpdateSave(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && HasSelectedTelecommands() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgSaveStacks.GetSafeHwnd()));
}

void CTCManualStackWnd::OnUpdateOpen(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgLoadStacks.GetSafeHwnd()));
}

void CTCManualStackWnd::OnUpdateLoad(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgLoadCommand.GetSafeHwnd()));
}

void CTCManualStackWnd::OnUpdateProperties(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanShowTelecommandProperties());
	pCmdUI->SetCheck(IsShowingTelecommandProperties());
}

void CTCManualStackWnd::OnUpdateInsertBefore(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanInsertBeforeTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateInsertAfter(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanInsertAfterTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateMoveUp(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanMoveUpTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateMoveDown(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanMoveDownTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateSelectAll(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanSelectAllTelecommands() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateCut(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCutTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateCopy(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCopyTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdatePaste(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanPasteTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateDelete(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanDeleteTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateFullViewMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsFullViewModeEnabled());
}

void CTCManualStackWnd::OnUpdateStart(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCommandingState() && CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
}

void CTCManualStackWnd::OnUpdateSuspend(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanSuspendedState() && CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
}

void CTCManualStackWnd::OnUpdateStop(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanStoppedState() && CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE));
}

void CTCManualStackWnd::OnUpdateArm(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanArmTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateDispatch(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanDispatchTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateUndispatch(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanUndispatchTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateAcknowledge(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanAcknowledgeTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateReload(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanReloadTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
}

void CTCManualStackWnd::OnUpdateResetInterlocks(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanResetInterlocks() && (CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCMANUALSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgInterlocks.GetSafeHwnd()));
}

void CTCManualStackWnd::OnUpdateInterlockChecks(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingInterlockModeEnabled());
}

void CTCManualStackWnd::OnUpdateReleaseWaitMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingReleaseWaitModeEnabled());
}

void CTCManualStackWnd::OnUpdateAutoRejectionMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingAutoRejectionModeEnabled());
}

void CTCManualStackWnd::OnUpdatePrint(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((IsInitialized() && IsDefaultPrinterAvailable() && CanPrint()) ? TRUE : FALSE);
}

void CTCManualStackWnd::OnUpdateStatusBarMessagePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCManualStackWnd::OnUpdateStatusBarUplinkPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCManualStackWnd::OnUpdateStatusBarPEVPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCManualStackWnd::OnUpdateStatusBarCEVPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCManualStackWnd::OnUpdateStatusBarStatePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCManualStackWnd::OnUpdateStatusBarModePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItem

CTCAutomaticStackItem::CTCAutomaticStackItem() : CTCItem()
{
	m_nSourceType = TCITEM_SOURCETYPE_AUTOMATICSTACK;
	m_bSelected = FALSE;
}

BOOL CTCAutomaticStackItem::Alert(UINT nType, UINT nMessage, LPCTSTR pszMessage, BOOL bOverwrite)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = (!bOverwrite) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if (nMessage == m_nAlertMessages.GetAt(nIndex)) break;
		continue;
	}
	if (nType >= TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION  &&  nType <= TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, pszMessage);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackItem::Alert(UINT nType, UINT nMessage, BOOL bEnable)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = ((nType != TCAUTOMATICSTACKITEM_ALERTTYPE_ANY && !bEnable) || nMessage == (UINT)-1) ? (INT)m_nAlertMessages.GetSize() : 0, nCount = (INT)m_nAlertMessages.GetSize(); nIndex < nCount; nIndex++)
	{
		if ((bEnable  &&  nMessage == m_nAlertMessages.GetAt(nIndex)) || (!bEnable  &&  nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))) break;
		continue;
	}
	if (nType >= TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION  &&  nType <= TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR  &&  nMessage != (UINT)-1 && bEnable)
	{
		m_nAlertTypes.SetAtGrow(nIndex, nType);
		m_nAlertMessages.SetAtGrow(nIndex, nMessage);
		m_szAlertMessages.SetAtGrow(nIndex, EMPTYSTRING);
		return TRUE;
	}
	if (!bEnable)
	{
		if (nMessage != (UINT)-1)
		{
			if (nType == TCAUTOMATICSTACKITEM_ALERTTYPE_ANY  &&  nIndex < nCount)
			{
				m_nAlertTypes.RemoveAt(nCount - nIndex - 1);
				m_nAlertMessages.RemoveAt(nCount - nIndex - 1);
				m_szAlertMessages.RemoveAt(nCount - nIndex - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = ((nType >= TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION && nType <= TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR) || nType == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if ((nType == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE || m_nAlertTypes.GetAt(nIndex) == nType) && m_nAlertMessages.GetAt(nIndex) == nMessage)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
		if (nMessage == (UINT)-1)
		{
			if (nType == TCAUTOMATICSTACKITEM_ALERTTYPE_ANY  &&  nCount > 0)
			{
				m_nAlertTypes.RemoveAt(nCount - 1);
				m_nAlertMessages.RemoveAt(nCount - 1);
				m_szAlertMessages.RemoveAt(nCount - 1);
				return TRUE;
			}
			for (nIndex = 0, nCount = (nType >= TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION && nType <= TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR) ? (INT)m_nAlertTypes.GetSize() : -1; nIndex < nCount; nIndex++)
			{
				if (m_nAlertTypes.GetAt(nIndex) == nType)
				{
					m_nAlertTypes.RemoveAt(nIndex);
					m_nAlertMessages.RemoveAt(nIndex);
					m_szAlertMessages.RemoveAt(nIndex);
					nCount--;
					nIndex--;
				}
			}
			if (nType == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE)
			{
				m_nAlertTypes.RemoveAll();
				m_nAlertMessages.RemoveAll();
				m_szAlertMessages.RemoveAll();
				return TRUE;
			}
			return((nCount >= 0) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

UINT CTCAutomaticStackItem::IsAlerted(UINT nMessage, CString &szMessage) CONST
{
	INT  nIndex;
	INT  nCount;
	UINT  nType;

	for (nIndex = 0, nCount = (INT)m_nAlertMessages.GetSize(), nType = TCAUTOMATICSTACKITEM_ALERTTYPE_NONE, szMessage.Empty(); nIndex < nCount; nIndex++)
	{
		if (nMessage != (UINT)-1 && nMessage == m_nAlertMessages.GetAt(nCount - nIndex - 1))
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			break;
		}
		if (nMessage == (UINT)-1 && nType < m_nAlertTypes.GetAt(nCount - nIndex - 1) && m_nAlertMessages.GetAt(nCount - nIndex - 1) > 0)
		{
			szMessage = m_szAlertMessages.GetAt(nCount - nIndex - 1);
			nType = m_nAlertTypes.GetAt(nCount - nIndex - 1);
		}
	}
	return((nIndex < nCount) ? m_nAlertTypes.GetAt(nCount - nIndex - 1) : nType);
}
UINT CTCAutomaticStackItem::IsAlerted(UINT nMessage) CONST
{
	CString  szMessage;

	return IsAlerted(nMessage, szMessage);
}

INT CTCAutomaticStackItem::GetAlertCount(UINT nType) CONST
{
	INT  nIndex;
	INT  nCount[2];

	for (nIndex = 0, nCount[0] = (INT)m_nAlertTypes.GetSize(), nCount[1] = 0; nIndex < nCount[0]; nIndex++)
	{
		if (m_nAlertTypes.GetAt(nIndex) == nType || nType == TCAUTOMATICSTACKITEM_ALERTTYPE_ANY)
		{
			nCount[1]++;
			continue;
		}
	}
	return nCount[1];
}

VOID CTCAutomaticStackItem::Select(BOOL bSelect)
{
	m_bSelected = bSelect;
}

BOOL CTCAutomaticStackItem::IsSelected() CONST
{
	return m_bSelected;
}

BOOL CTCAutomaticStackItem::Copy(CONST CTCAutomaticStackItem *pItem)
{
	m_bSelected = pItem->m_bSelected;
	m_nAlertTypes.Copy(pItem->m_nAlertTypes);
	m_nAlertMessages.Copy(pItem->m_nAlertMessages);
	m_szAlertMessages.Copy(pItem->m_szAlertMessages);
	return CTCItem::Copy(pItem);
}

BOOL CTCAutomaticStackItem::Compare(CONST CTCAutomaticStackItem *pItem) CONST
{
	INT  nMessage;
	INT  nMessages;

	for (nMessage = 0, nMessages = (pItem->m_nAlertTypes.GetSize() == m_nAlertTypes.GetSize() && pItem->m_nAlertMessages.GetSize() == m_nAlertMessages.GetSize() && !memcmp(pItem->m_nAlertTypes.GetData(), m_nAlertTypes.GetData(), m_nAlertTypes.GetSize()*sizeof(UINT)) && !memcmp(pItem->m_nAlertMessages.GetData(), m_nAlertMessages.GetData(), m_nAlertMessages.GetSize()*sizeof(UINT)) && pItem->m_szAlertMessages.GetSize() == m_szAlertMessages.GetSize() && pItem->m_bSelected == m_bSelected) ? (INT)m_szAlertMessages.GetSize() : -1; nMessage < nMessages; nMessage++)
	{
		if (pItem->m_szAlertMessages.GetAt(nMessage) != m_szAlertMessages.GetAt(nMessage)) break;
		continue;
	}
	return((nMessage == nMessages) ? CTCItem::Compare(pItem) : FALSE);
}

BOOL CTCAutomaticStackItem::Map(CByteArray &nInfo) CONST
{
	return CTCItem::Map(nInfo);
}

BOOL CTCAutomaticStackItem::Unmap(CONST CByteArray &nInfo)
{
	return CTCItem::Unmap(nInfo);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItems

CTCAutomaticStackItems::CTCAutomaticStackItems() : CTCItems()
{
	return;
}

CTCAutomaticStackItems::~CTCAutomaticStackItems()
{
	RemoveAll();
}

INT CTCAutomaticStackItems::Add(CTCAutomaticStackItem *pItem)
{
	return CTCItems::Add(pItem);
}

INT CTCAutomaticStackItems::Collect(INT nIndex, CTCAutomaticStackItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CUIntArray  nItemIDs;
	CTCAutomaticStackItem  *pItem[2];

	for (nItem = 0, nItems = Collect(nIndex, nItemIDs), pItems.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = GetAt(nItemIDs.GetAt(nItem)))) ? new CTCAutomaticStackItem : (CTCAutomaticStackItem *)NULL))
		{
			if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0) continue;
			delete pItem[1];
		}
		pItems.RemoveAll();
		break;
	}
	return((INT)pItems.GetSize());
}
INT CTCAutomaticStackItems::Collect(INT nIndex, CUIntArray &nItemIDs) CONST
{
	return CTCItems::Collect(nIndex, nItemIDs);
}
INT CTCAutomaticStackItems::Collect(INT nIndex, CPtrArray &pItems) CONST
{
	return CTCItems::Collect(nIndex, pItems);
}

CTCAutomaticStackItem *CTCAutomaticStackItems::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackItem *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackItem *)NULL);
}

CTCAutomaticStackItem *CTCAutomaticStackItems::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackItem *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackItem *)NULL);
}

VOID CTCAutomaticStackItems::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCAutomaticStackItems::Copy(CONST CTCAutomaticStackItems *pItems)
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems->GetSize(), RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->Copy(pItems->GetAt(nItem));
			InsertAt(nItem, pItem, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItems::Compare(CONST CTCAutomaticStackItems *pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = (pItems->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = pItems->GetAt(nItem)) && pItem->Compare(GetAt(nItem))) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItems::Map(CByteArray &nInfo) CONST
{
	INT  nItem;
	INT  nItems;
	CByteArray  nItemData;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(), nInfo.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->Map(nItemData) && nInfo.Append(nItemData) >= 0) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItems::Unmap(CONST CByteArray &nInfo)
{
	INT  cbItem;
	INT  cbItems;
	CByteArray  nItemData;
	CTCAutomaticStackItem  *pItem;

	for (cbItems = 0, RemoveAll(); cbItems < nInfo.GetSize(); cbItems += cbItem)
	{
		for (CopyMemory(&cbItem, nInfo.GetData() + cbItems, sizeof(cbItem)), nItemData.SetSize(max(min(cbItem, nInfo.GetSize() - cbItems), 0)); nItemData.GetSize() >= 0; )
		{
			CopyMemory(nItemData.GetData(), nInfo.GetData() + cbItems, nItemData.GetSize());
			break;
		}
		if ((pItem = new CTCAutomaticStackItem))
		{
			if (pItem->Unmap(nItemData) && Add(pItem) >= 0) continue;
			delete pItem;
		}
		break;
	}
	return((cbItems == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackComposedItem

CTCAutomaticStackComposedItem::CTCAutomaticStackComposedItem() : CTCAutomaticStackItems()
{
	return;
}

VOID CTCAutomaticStackComposedItem::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCAutomaticStackComposedItem::GetName() CONST
{
	return m_szName;
}

VOID CTCAutomaticStackComposedItem::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CTCAutomaticStackComposedItem::GetDescription() CONST
{
	return m_szDescription;
}

VOID CTCAutomaticStackComposedItem::SetParameters(CONST CDatabaseTCParameters &pParameters)
{
	m_pParameters.Copy(&pParameters);
}

INT CTCAutomaticStackComposedItem::GetParameters(CDatabaseTCParameters &pParameters) CONST
{
	pParameters.Copy(&m_pParameters);
	return((INT)pParameters.GetSize());
}

BOOL CTCAutomaticStackComposedItem::Copy(CONST CTCAutomaticStackComposedItem *pItem)
{
	m_szName = pItem->m_szName;
	m_szDescription = pItem->m_szDescription;
	return((m_pParameters.Copy(&pItem->m_pParameters)) ? CTCAutomaticStackItems::Copy(pItem) : FALSE);
}

BOOL CTCAutomaticStackComposedItem::Compare(CONST CTCAutomaticStackComposedItem *pItem) CONST
{
	return((pItem->m_szName == m_szName  &&  pItem->m_szDescription == m_szDescription  &&  pItem->m_pParameters.Compare(&m_pParameters)) ? CTCAutomaticStackItems::Compare(pItem) : FALSE);
}

BOOL CTCAutomaticStackComposedItem::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;
	CByteArray  nEntriesData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameters = (m_pParameters.Map(nParametersData)) ? (INT)nParametersData.GetSize() : -1;
	sData.cbEntries = (CTCAutomaticStackItems::Map(nEntriesData)) ? (INT)nEntriesData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + max(sData.cbParameters, 0) + max(sData.cbEntries, 0))); nInfo.GetSize() == sData.cbSize && sData.cbParameters >= 0 && sData.cbEntries >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nParametersData.GetData(), sData.cbParameters);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameters), nEntriesData.GetData(), sData.cbEntries);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackComposedItem::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;
	CByteArray  nEntriesData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbParameters + sData.cbEntries && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbParameters >= 0 && sData.cbEntries >= 0; )
	{
		for (nParametersData.SetSize(sData.cbParameters), nEntriesData.SetSize(sData.cbEntries), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbParameters), CopyMemory(nEntriesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameters), sData.cbEntries), m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(); m_pParameters.Unmap(nParametersData); ) return CTCAutomaticStackItems::Unmap(nEntriesData);
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemTemplate

VOID CTCAutomaticStackItemTemplate::SetTemplateName(LPCTSTR pszName)
{
	m_szTemplate[0] = pszName;
}

CString CTCAutomaticStackItemTemplate::GetTemplateName() CONST
{
	return m_szTemplate[0];
}

VOID CTCAutomaticStackItemTemplate::SetTemplateDescription(LPCTSTR pszDescription)
{
	m_szTemplate[1] = pszDescription;
}

CString CTCAutomaticStackItemTemplate::GetTemplateDescription() CONST
{
	return m_szTemplate[1];
}

BOOL CTCAutomaticStackItemTemplate::Copy(CONST CTCAutomaticStackItemTemplate *pTemplate)
{
	m_szTemplate[0] = pTemplate->m_szTemplate[0];
	m_szTemplate[1] = pTemplate->m_szTemplate[1];
	return CTCAutomaticStackItem::Copy(pTemplate);
}

BOOL CTCAutomaticStackItemTemplate::Compare(CONST CTCAutomaticStackItemTemplate *pTemplate) CONST
{
	return((pTemplate->m_szTemplate[0] == m_szTemplate[0] && pTemplate->m_szTemplate[1] == m_szTemplate[1]) ? CTCAutomaticStackItem::Compare(pTemplate) : FALSE);
}

BOOL CTCAutomaticStackItemTemplate::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	sData.cbTemplate[0] = (m_szTemplate[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbTemplate[1] = (m_szTemplate[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbItem = (CTCAutomaticStackItem::Map(nItemData)) ? (INT)nItemData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + max(sData.cbItem, 0))); nInfo.GetSize() == sData.cbSize && sData.cbItem >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTemplate[0], sData.cbTemplate[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), (LPCTSTR)m_szTemplate[1], sData.cbTemplate[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), nItemData.GetData(), sData.cbItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackItemTemplate::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + sData.cbItem && sData.cbTemplate[0] > 0 && sData.cbTemplate[1] > 0 && sData.cbItem >= 0; )
	{
		for (nItemData.SetSize(sData.cbItem), CopyMemory(m_szTemplate[0].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTemplate[0])), CopyMemory(m_szTemplate[1].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[1])), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), STRINGBYTES(sData.cbTemplate[1])), CopyMemory(nItemData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), sData.cbItem), m_szTemplate[0].ReleaseBuffer(), m_szTemplate[1].ReleaseBuffer(); CTCAutomaticStackItem::Unmap(nItemData); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemTemplates

CTCAutomaticStackItemTemplates::CTCAutomaticStackItemTemplates() : CPtrArray()
{
	return;
}

CTCAutomaticStackItemTemplates::~CTCAutomaticStackItemTemplates()
{
	RemoveAll();
}

INT CTCAutomaticStackItemTemplates::Add(CTCAutomaticStackItemTemplate *pTemplate)
{
	INT  nIndex;

	for (nIndex = FindIndex(pTemplate->GetName(), TRUE); nIndex >= 0 && nIndex <= GetSize(); nIndex++)
	{
		if (nIndex == GetSize() || GetAt(nIndex)->GetName() != pTemplate->GetName() || GetAt(nIndex)->GetTemplateName() > pTemplate->GetTemplateName())
		{
			InsertAt(nIndex, pTemplate, 1);
			return nIndex;
		}
		if (GetAt(nIndex)->GetTemplateName() == pTemplate->GetTemplateName()) break;
	}
	return -1;
}

INT CTCAutomaticStackItemTemplates::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

INT CTCAutomaticStackItemTemplates::Enum(LPCTSTR pszName, CStringArray &szTemplates) CONST
{
	INT  nIndex;
	CTCAutomaticStackItemTemplate  *pTemplate;

	for (nIndex = FindIndex(pszName), szTemplates.RemoveAll(); nIndex >= 0 && nIndex < GetSize(); nIndex++)
	{
		if ((pTemplate = GetAt(nIndex)) != (CTCAutomaticStackItemTemplate *)NULL  &&  pTemplate->GetName() == pszName)
		{
			szTemplates.Add(pTemplate->GetTemplateName() + TAB + pTemplate->GetTemplateDescription());
			continue;
		}
		break;
	}
	return((INT)szTemplates.GetSize());
}

CTCAutomaticStackItemTemplate *CTCAutomaticStackItemTemplates::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackItemTemplate *)NULL);
}

CTCAutomaticStackItemTemplate *CTCAutomaticStackItemTemplates::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackItemTemplate *)NULL);
}

VOID CTCAutomaticStackItemTemplates::RemoveAll()
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (INT)GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		delete GetAt(nTemplate);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCAutomaticStackItemTemplates::Copy(CONST CTCAutomaticStackItemTemplates *pTemplates)
{
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)pTemplates->GetSize(), RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = new CTCAutomaticStackItemTemplate))
		{
			pTemplate->Copy(pTemplates->GetAt(nTemplate));
			InsertAt(nTemplate, pTemplate, 1);
			continue;
		}
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemTemplates::Compare(CONST CTCAutomaticStackItemTemplates *pTemplates) CONST
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (pTemplates->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (!pTemplates->GetAt(nTemplate)->Compare(GetAt(nTemplate))) break;
		continue;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemTemplates::Map(CByteArray &nInfo) CONST
{
	INT  nTemplate;
	INT  nTemplates;
	CByteArray  nTemplateData;
	CTCAutomaticStackItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)GetSize(), nInfo.RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = GetAt(nTemplate)) && pTemplate->Map(nTemplateData) && nInfo.Append(nTemplateData) >= 0) continue;
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemTemplates::Unmap(CONST CByteArray &nInfo)
{
	INT  cbTemplate;
	INT  cbTemplates;
	CByteArray  nTemplateData;
	CTCAutomaticStackItemTemplate  *pTemplate;

	for (cbTemplates = 0, RemoveAll(); cbTemplates < nInfo.GetSize(); cbTemplates += cbTemplate)
	{
		for (CopyMemory(&cbTemplate, nInfo.GetData() + cbTemplates, sizeof(cbTemplate)), nTemplateData.SetSize(max(min(cbTemplate, nInfo.GetSize() - cbTemplates), 0)); nTemplateData.GetSize() >= 0; )
		{
			CopyMemory(nTemplateData.GetData(), nInfo.GetData() + cbTemplates, nTemplateData.GetSize());
			break;
		}
		if ((pTemplate = new CTCAutomaticStackItemTemplate))
		{
			if (pTemplate->Unmap(nTemplateData) && Add(pTemplate) >= 0) continue;
			delete pTemplate;
		}
		break;
	}
	return((cbTemplates == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCAutomaticStackItemTemplates::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCAutomaticStackItemTemplate  *pTemplate;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTemplate = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTemplate->GetName() < pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTemplate = GetAt((nIndex[0] = max(nIndex[0], 0)))) && pTemplate->GetName() == pszName) || bInsert) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackComposedItemTemplate

VOID CTCAutomaticStackComposedItemTemplate::SetTemplateName(LPCTSTR pszName)
{
	m_szTemplate[0] = pszName;
}

CString CTCAutomaticStackComposedItemTemplate::GetTemplateName() CONST
{
	return m_szTemplate[0];
}

VOID CTCAutomaticStackComposedItemTemplate::SetTemplateDescription(LPCTSTR pszDescription)
{
	m_szTemplate[1] = pszDescription;
}

CString CTCAutomaticStackComposedItemTemplate::GetTemplateDescription() CONST
{
	return m_szTemplate[1];
}

BOOL CTCAutomaticStackComposedItemTemplate::Copy(CONST CTCAutomaticStackComposedItemTemplate *pTemplate)
{
	m_szTemplate[0] = pTemplate->m_szTemplate[0];
	m_szTemplate[1] = pTemplate->m_szTemplate[1];
	return CTCAutomaticStackComposedItem::Copy(pTemplate);
}

BOOL CTCAutomaticStackComposedItemTemplate::Compare(CONST CTCAutomaticStackComposedItemTemplate *pTemplate) CONST
{
	return((pTemplate->m_szTemplate[0] == m_szTemplate[0] && pTemplate->m_szTemplate[1] == m_szTemplate[1]) ? CTCAutomaticStackComposedItem::Compare(pTemplate) : FALSE);
}

BOOL CTCAutomaticStackComposedItemTemplate::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	sData.cbTemplate[0] = (m_szTemplate[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbTemplate[1] = (m_szTemplate[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbItem = (CTCAutomaticStackComposedItem::Map(nItemData)) ? (INT)nItemData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + max(sData.cbItem, 0))); nInfo.GetSize() == sData.cbSize && sData.cbItem >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTemplate[0], sData.cbTemplate[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), (LPCTSTR)m_szTemplate[1], sData.cbTemplate[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), nItemData.GetData(), sData.cbItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackComposedItemTemplate::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTemplate[0] + sData.cbTemplate[1] + sData.cbItem && sData.cbTemplate[0] > 0 && sData.cbTemplate[1] > 0 && sData.cbItem >= 0; )
	{
		for (nItemData.SetSize(sData.cbItem), CopyMemory(m_szTemplate[0].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTemplate[0])), CopyMemory(m_szTemplate[1].GetBufferSetLength(STRINGCHARS(sData.cbTemplate[1])), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[0]), STRINGBYTES(sData.cbTemplate[1])), CopyMemory(nItemData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTemplate[1]), sData.cbItem), m_szTemplate[0].ReleaseBuffer(), m_szTemplate[1].ReleaseBuffer(); CTCAutomaticStackComposedItem::Unmap(nItemData); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackComposedItemTemplates

CTCAutomaticStackComposedItemTemplates::CTCAutomaticStackComposedItemTemplates() : CPtrArray()
{
	return;
}

CTCAutomaticStackComposedItemTemplates::~CTCAutomaticStackComposedItemTemplates()
{
	RemoveAll();
}

INT CTCAutomaticStackComposedItemTemplates::Add(CTCAutomaticStackComposedItemTemplate *pTemplate)
{
	INT  nIndex;

	for (nIndex = FindIndex(pTemplate->GetName(), TRUE); nIndex >= 0 && nIndex <= GetSize(); nIndex++)
	{
		if (nIndex == GetSize() || GetAt(nIndex)->GetName() != pTemplate->GetName() || GetAt(nIndex)->GetTemplateName() > pTemplate->GetTemplateName())
		{
			InsertAt(nIndex, pTemplate, 1);
			return nIndex;
		}
		if (GetAt(nIndex)->GetTemplateName() == pTemplate->GetTemplateName()) break;
	}
	return -1;
}

INT CTCAutomaticStackComposedItemTemplates::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

INT CTCAutomaticStackComposedItemTemplates::Enum(LPCTSTR pszName, CStringArray &szTemplates) CONST
{
	INT  nIndex;
	CTCAutomaticStackComposedItemTemplate  *pTemplate;

	for (nIndex = FindIndex(pszName), szTemplates.RemoveAll(); nIndex >= 0 && nIndex < GetSize(); nIndex++)
	{
		if ((pTemplate = GetAt(nIndex)) != (CTCAutomaticStackComposedItemTemplate *)NULL  &&  pTemplate->GetName() == pszName)
		{
			szTemplates.Add(pTemplate->GetTemplateName() + TAB + pTemplate->GetTemplateDescription());
			continue;
		}
		break;
	}
	return((INT)szTemplates.GetSize());
}

CTCAutomaticStackComposedItemTemplate *CTCAutomaticStackComposedItemTemplates::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackComposedItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackComposedItemTemplate *)NULL);
}

CTCAutomaticStackComposedItemTemplate *CTCAutomaticStackComposedItemTemplates::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackComposedItemTemplate *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackComposedItemTemplate *)NULL);
}

VOID CTCAutomaticStackComposedItemTemplates::RemoveAll()
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (INT)GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		delete GetAt(nTemplate);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCAutomaticStackComposedItemTemplates::Copy(CONST CTCAutomaticStackComposedItemTemplates *pTemplates)
{
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackComposedItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)pTemplates->GetSize(), RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = new CTCAutomaticStackComposedItemTemplate))
		{
			pTemplate->Copy(pTemplates->GetAt(nTemplate));
			InsertAt(nTemplate, pTemplate, 1);
			continue;
		}
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackComposedItemTemplates::Compare(CONST CTCAutomaticStackComposedItemTemplates *pTemplates) CONST
{
	INT  nTemplate;
	INT  nTemplates;

	for (nTemplate = 0, nTemplates = (pTemplates->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (!pTemplates->GetAt(nTemplate)->Compare(GetAt(nTemplate))) break;
		continue;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackComposedItemTemplates::Map(CByteArray &nInfo) CONST
{
	INT  nTemplate;
	INT  nTemplates;
	CByteArray  nTemplateData;
	CTCAutomaticStackComposedItemTemplate  *pTemplate;

	for (nTemplate = 0, nTemplates = (INT)GetSize(), nInfo.RemoveAll(); nTemplate < nTemplates; nTemplate++)
	{
		if ((pTemplate = GetAt(nTemplate)) && pTemplate->Map(nTemplateData) && nInfo.Append(nTemplateData) >= 0) continue;
		break;
	}
	return((nTemplate == nTemplates) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackComposedItemTemplates::Unmap(CONST CByteArray &nInfo)
{
	INT  cbTemplate;
	INT  cbTemplates;
	CByteArray  nTemplateData;
	CTCAutomaticStackComposedItemTemplate  *pTemplate;

	for (cbTemplates = 0, RemoveAll(); cbTemplates < nInfo.GetSize(); cbTemplates += cbTemplate)
	{
		for (CopyMemory(&cbTemplate, nInfo.GetData() + cbTemplates, sizeof(cbTemplate)), nTemplateData.SetSize(max(min(cbTemplate, nInfo.GetSize() - cbTemplates), 0)); nTemplateData.GetSize() >= 0; )
		{
			CopyMemory(nTemplateData.GetData(), nInfo.GetData() + cbTemplates, nTemplateData.GetSize());
			break;
		}
		if ((pTemplate = new CTCAutomaticStackComposedItemTemplate))
		{
			if (pTemplate->Unmap(nTemplateData) && Add(pTemplate) >= 0) continue;
			delete pTemplate;
		}
		break;
	}
	return((cbTemplates == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCAutomaticStackComposedItemTemplates::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCAutomaticStackComposedItemTemplate  *pTemplate;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTemplate = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTemplate->GetName() < pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTemplate = GetAt((nIndex[0] = max(nIndex[0], 0)))) && pTemplate->GetName() == pszName) || bInsert) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFilter

CTCAutomaticStackSearchFilter::CTCAutomaticStackSearchFilter() : CObject()
{
	m_nType = TCAUTOMATICSTACKSEARCHFILTER_TYPE_NONE;
}

VOID CTCAutomaticStackSearchFilter::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCAutomaticStackSearchFilter::GetName() CONST
{
	return m_szName;
}

VOID CTCAutomaticStackSearchFilter::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CTCAutomaticStackSearchFilter::GetType() CONST
{
	return m_nType;
}

VOID CTCAutomaticStackSearchFilter::SetSearchKeys(CONST CStringArray &szKeys, CONST CStringArray &szValues)
{
	m_szSearchKeys.Copy(szKeys);
	m_szSearchValues.Copy(szValues);
}

INT CTCAutomaticStackSearchFilter::GetSearchKeys(CStringArray &szKeys, CStringArray &szValues) CONST
{
	szKeys.Copy(m_szSearchKeys);
	szValues.Copy(m_szSearchValues);
	return((INT)szKeys.GetSize());
}

VOID CTCAutomaticStackSearchFilter::Copy(CONST CTCAutomaticStackSearchFilter *pFilter)
{
	m_nType = pFilter->m_nType;
	m_szName = pFilter->m_szName;
	m_szSearchKeys.Copy(pFilter->m_szSearchKeys);
	m_szSearchValues.Copy(pFilter->m_szSearchValues);
}

BOOL CTCAutomaticStackSearchFilter::Compare(CONST CTCAutomaticStackSearchFilter *pFilter) CONST
{
	INT  nKey;
	INT  nKeys;

	for (nKey = 0, nKeys = (pFilter->m_nType == m_nType && pFilter->m_szName == m_szName && pFilter->m_szSearchKeys.GetSize() == m_szSearchKeys.GetSize() && pFilter->m_szSearchValues.GetSize() == m_szSearchValues.GetSize()) ? (INT)m_szSearchKeys.GetSize() : -1; nKey < nKeys; nKey++)
	{
		if (pFilter->m_szSearchKeys.GetAt(nKey) != m_szSearchKeys.GetAt(nKey) || pFilter->m_szSearchValues.GetAt(nKey) != m_szSearchValues.GetAt(nKey)) break;
		continue;
	}
	return((nKey == nKeys) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSearchFilter::Map(CByteArray &nInfo) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nValue;
	INT  nValues;
	INT  cbData;
	DATA  sData;
	CByteArray  nKeysData;
	CByteArray  nValuesData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nKey = 0, nKeys = (INT)m_szSearchKeys.GetSize(), sData.cbSearchKeys = 0; nKey < nKeys; nKey++, sData.cbSearchKeys += cbData)
	{
		nKeysData.SetSize(sData.cbSearchKeys + (cbData = (m_szSearchKeys.GetAt(nKey).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nKeysData.GetData() + sData.cbSearchKeys, (LPCTSTR)m_szSearchKeys.GetAt(nKey), cbData);
	}
	for (nValue = 0, nValues = (INT)m_szSearchValues.GetSize(), sData.cbSearchValues = 0; nValue < nValues; nValue++, sData.cbSearchValues += cbData)
	{
		nValuesData.SetSize(sData.cbSearchValues + (cbData = (m_szSearchValues.GetAt(nValue).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nValuesData.GetData() + sData.cbSearchValues, (LPCTSTR)m_szSearchValues.GetAt(nValue), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbSearchKeys + sData.cbSearchValues)), sData.nType = m_nType; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nKeysData.GetData(), sData.cbSearchKeys);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSearchKeys), nValuesData.GetData(), sData.cbSearchValues);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackSearchFilter::Unmap(CONST CByteArray &nInfo)
{
	INT  cbKey;
	INT  cbKeys;
	INT  cbValue;
	INT  cbValues;
	INT  cbData;
	DATA  sData;
	CByteArray  nKeysData;
	CByteArray  nValuesData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbSearchKeys + sData.cbSearchValues && sData.cbName > 0 && sData.cbSearchKeys >= 0 && sData.cbSearchValues >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), nKeysData.SetSize(sData.cbSearchKeys), nValuesData.SetSize(sData.cbSearchValues), CopyMemory(nKeysData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbSearchKeys), CopyMemory(nValuesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSearchKeys), sData.cbSearchValues), m_nType = sData.nType, m_szName.ReleaseBuffer(), m_szSearchKeys.RemoveAll(), m_szSearchValues.RemoveAll(), cbKey = cbKeys = 0; cbKeys < sData.cbSearchKeys; cbKeys += (cbKey = (m_szSearchKeys.GetAt(m_szSearchKeys.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szSearchKeys.Add((LPCTSTR)(nKeysData.GetData() + cbKeys));
			continue;
		}
		for (cbValue = cbValues = 0; cbValues < sData.cbSearchValues; cbValues += (cbValue = (m_szSearchValues.GetAt(m_szSearchValues.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szSearchValues.Add((LPCTSTR)(nValuesData.GetData() + cbValues));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFilters

CTCAutomaticStackSearchFilters::CTCAutomaticStackSearchFilters() : CPtrArray()
{
	return;
}

CTCAutomaticStackSearchFilters::~CTCAutomaticStackSearchFilters()
{
	RemoveAll();
}

INT CTCAutomaticStackSearchFilters::Add(CTCAutomaticStackSearchFilter *pFilter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFilter->GetName(), TRUE)) >= 0) InsertAt(nIndex, pFilter, 1);
	return nIndex;
}

INT CTCAutomaticStackSearchFilters::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTCAutomaticStackSearchFilter *CTCAutomaticStackSearchFilters::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackSearchFilter *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackSearchFilter *)NULL);
}

CTCAutomaticStackSearchFilter *CTCAutomaticStackSearchFilters::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackSearchFilter *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackSearchFilter *)NULL);
}

VOID CTCAutomaticStackSearchFilters::RemoveAll()
{
	INT  nFilter;
	INT  nFilters;

	for (nFilter = 0, nFilters = (INT)GetSize(); nFilter < nFilters; nFilter++)
	{
		delete GetAt(nFilter);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCAutomaticStackSearchFilters::Copy(CONST CTCAutomaticStackSearchFilters *pFilters)
{
	INT  nFilter;
	INT  nFilters;
	CTCAutomaticStackSearchFilter  *pFilter;

	for (nFilter = 0, nFilters = (INT)pFilters->GetSize(), RemoveAll(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = new CTCAutomaticStackSearchFilter))
		{
			pFilter->Copy(pFilters->GetAt(nFilter));
			InsertAt(nFilter, pFilter, 1);
			continue;
		}
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSearchFilters::Compare(CONST CTCAutomaticStackSearchFilters *pFilters) CONST
{
	INT  nFilter;
	INT  nFilters;

	for (nFilter = 0, nFilters = (pFilters->GetSize() == GetSize()) ? (INT)GetSize() : -1; nFilter < nFilters; nFilter++)
	{
		if (!pFilters->GetAt(nFilter)->Compare(GetAt(nFilter))) break;
		continue;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSearchFilters::Map(CByteArray &nInfo) CONST
{
	INT  nFilter;
	INT  nFilters;
	CByteArray  nFilterData;
	CTCAutomaticStackSearchFilter  *pFilter;

	for (nFilter = 0, nFilters = (INT)GetSize(), nInfo.RemoveAll(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = GetAt(nFilter)) && pFilter->Map(nFilterData) && nInfo.Append(nFilterData) >= 0) continue;
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSearchFilters::Unmap(CONST CByteArray &nInfo)
{
	INT  cbFilter;
	INT  cbFilters;
	CByteArray  nFilterData;
	CTCAutomaticStackSearchFilter  *pFilter;

	for (cbFilters = 0, RemoveAll(); cbFilters < nInfo.GetSize(); cbFilters += cbFilter)
	{
		for (CopyMemory(&cbFilter, nInfo.GetData() + cbFilters, sizeof(cbFilter)), nFilterData.SetSize(max(min(cbFilter, nInfo.GetSize() - cbFilters), 0)); nFilterData.GetSize() >= 0; )
		{
			CopyMemory(nFilterData.GetData(), nInfo.GetData() + cbFilters, nFilterData.GetSize());
			break;
		}
		if ((pFilter = new CTCAutomaticStackSearchFilter))
		{
			if (pFilter->Unmap(nFilterData) && Add(pFilter) >= 0) continue;
			delete pFilter;
		}
		break;
	}
	return((cbFilters == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTCAutomaticStackSearchFilters::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTCAutomaticStackSearchFilter  *pFilter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pFilter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pFilter->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pFilter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pFilter->GetName() == pszName) || (bInsert && (((pFilter = GetAt(max(nIndex[0] - 1, 0))) && pFilter->GetName() != pszName && (pFilter = GetAt((INT)min(nIndex[0], GetUpperBound()))) && pFilter->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPrintJobInfo

CTCAutomaticStackPrintJobInfo::CTCAutomaticStackPrintJobInfo() : CObject()
{
	m_nPrintMode = 0;
	m_nPrintRange[0] = 0;
	m_nPrintRange[1] = 0;
	m_tPrintRange[0] = 0;
	m_tPrintRange[1] = 0;
}

VOID CTCAutomaticStackPrintJobInfo::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTCAutomaticStackPrintJobInfo::GetName() CONST
{
	return m_szName;
}

VOID CTCAutomaticStackPrintJobInfo::SetProfile(LPCTSTR pszProfile)
{
	m_szProfile = pszProfile;
}

CString CTCAutomaticStackPrintJobInfo::GetProfile() CONST
{
	return m_szProfile;
}

VOID CTCAutomaticStackPrintJobInfo::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CTCAutomaticStackPrintJobInfo::GetComments() CONST
{
	return m_szComments;
}

BOOL CTCAutomaticStackPrintJobInfo::SetPrintMode(UINT nMode)
{
	m_nPrintMode = nMode;
	return TRUE;
}

UINT CTCAutomaticStackPrintJobInfo::GetPrintMode() CONST
{
	return m_nPrintMode;
}

BOOL CTCAutomaticStackPrintJobInfo::SetPrintRange(UINT nMin, UINT nMax)
{
	if (m_nPrintMode & TCAUTOMATICSTACK_PRINT_ITEMRANGE)
	{
		m_nPrintRange[0] = nMin;
		m_nPrintRange[1] = nMax;
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackPrintJobInfo::SetPrintRange(CONST CTimeKey &tMin, CONST CTimeKey &tMax)
{
	if (m_nPrintMode & TCAUTOMATICSTACK_PRINT_TIMERANGE)
	{
		m_tPrintRange[0] = tMin;
		m_tPrintRange[1] = tMax;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPrintJobInfo::GetPrintRange(UINT &nMin, UINT &nMax) CONST
{
	if (m_nPrintMode & TCAUTOMATICSTACK_PRINT_ITEMRANGE)
	{
		nMin = m_nPrintRange[0];
		nMax = m_nPrintRange[1];
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackPrintJobInfo::GetPrintRange(CTimeKey &tMin, CTimeKey &tMax) CONST
{
	if (m_nPrintMode & TCAUTOMATICSTACK_PRINT_TIMERANGE)
	{
		tMin = m_tPrintRange[0];
		tMax = m_tPrintRange[1];
		return TRUE;
	}
	return FALSE;
}

VOID CTCAutomaticStackPrintJobInfo::Copy(CONST CTCAutomaticStackPrintJobInfo *pJobInfo)
{
	m_szName = pJobInfo->m_szName;
	m_szProfile = pJobInfo->m_szProfile;
	m_szComments = pJobInfo->m_szComments;
	m_nPrintMode = pJobInfo->m_nPrintMode;
	m_nPrintRange[0] = pJobInfo->m_nPrintRange[0];
	m_nPrintRange[1] = pJobInfo->m_nPrintRange[1];
	m_tPrintRange[0] = pJobInfo->m_tPrintRange[0];
	m_tPrintRange[1] = pJobInfo->m_tPrintRange[1];
}

BOOL CTCAutomaticStackPrintJobInfo::Compare(CONST CTCAutomaticStackPrintJobInfo *pJobInfo) CONST
{
	return((pJobInfo->m_szName == m_szName  &&  pJobInfo->m_szProfile == m_szProfile  &&  pJobInfo->m_szComments == m_szComments  &&  pJobInfo->m_nPrintMode == m_nPrintMode && ((m_nPrintMode & TCAUTOMATICSTACK_PRINT_ITEMRANGE) != TCAUTOMATICSTACK_PRINT_ITEMRANGE || (pJobInfo->m_nPrintRange[0] == m_nPrintRange[0] && pJobInfo->m_nPrintRange[1] == m_nPrintRange[1])) && ((m_nPrintMode & TCAUTOMATICSTACK_PRINT_TIMERANGE) != TCAUTOMATICSTACK_PRINT_TIMERANGE || (pJobInfo->m_tPrintRange[0] == m_tPrintRange[0] && pJobInfo->m_tPrintRange[1] == m_tPrintRange[1]))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPrintJobInfo::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProfile = (m_szProfile.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments)), sData.nPrintMode = m_nPrintMode, sData.nPrintRange[0] = m_nPrintRange[0], sData.nPrintRange[1] = m_nPrintRange[1], sData.tPrintRange[0] = m_tPrintRange[0].GetTime(), sData.tPrintRange[1] = m_tPrintRange[1].GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szProfile, sData.cbProfile);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbProfile), (LPCTSTR)m_szComments, sData.cbComments);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPrintJobInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbProfile + sData.cbComments && sData.cbName > 0 && sData.cbProfile > 0 && sData.cbComments > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szProfile.GetBufferSetLength(STRINGCHARS(sData.cbProfile)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbProfile));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbProfile), STRINGBYTES(sData.cbComments));
		m_nPrintMode = sData.nPrintMode;
		m_nPrintRange[0] = sData.nPrintRange[0];
		m_nPrintRange[1] = sData.nPrintRange[1];
		m_tPrintRange[0] = sData.tPrintRange[0];
		m_tPrintRange[1] = sData.tPrintRange[1];
		m_szName.ReleaseBuffer();
		m_szProfile.ReleaseBuffer();
		m_szComments.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPrintJobs

CTCAutomaticStackPrintJobs::CTCAutomaticStackPrintJobs() : CPtrArray()
{
	return;
}

CTCAutomaticStackPrintJobs::~CTCAutomaticStackPrintJobs()
{
	RemoveAll();
}

INT CTCAutomaticStackPrintJobs::Add(CTCAutomaticStackPrintJobInfo *pJobInfo)
{
	return((INT)CPtrArray::Add(pJobInfo));
}

INT CTCAutomaticStackPrintJobs::Find(LPCTSTR pszName) CONST
{
	INT  nJob;
	INT  nJobs;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->GetName() == pszName) break;
		continue;
	}
	return((nJob < nJobs) ? nJob : -1);
}

CTCAutomaticStackPrintJobInfo *CTCAutomaticStackPrintJobs::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackPrintJobInfo *)NULL);
}

CTCAutomaticStackPrintJobInfo *CTCAutomaticStackPrintJobs::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCAutomaticStackPrintJobInfo *)CPtrArray::GetAt(nIndex) : (CTCAutomaticStackPrintJobInfo *)NULL);
}

VOID CTCAutomaticStackPrintJobs::RemoveAll()
{
	INT  nJob;
	INT  nJobs;

	for (nJob = 0, nJobs = (INT)GetSize(); nJob < nJobs; nJob++)
	{
		delete GetAt(nJob);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTCAutomaticStackPrintJobs::Copy(CONST CTCAutomaticStackPrintJobs *pPrintJobs)
{
	INT  nJob;
	INT  nJobs;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)pPrintJobs->GetSize(), RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = new CTCAutomaticStackPrintJobInfo))
		{
			pJobInfo->Copy(pPrintJobs->GetAt(nJob));
			InsertAt(nJob, pJobInfo, 1);
			continue;
		}
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPrintJobs::Compare(CONST CTCAutomaticStackPrintJobs *pPrintJobs) CONST
{
	INT  nJob[2];
	INT  nJobs[2];

	for (nJob[0] = 0, nJobs[0] = (INT)GetSize(), nJobs[1] = (INT)pPrintJobs->GetSize(); nJob[0] < nJobs[0]; nJob[0]++)
	{
		for (nJob[1] = (nJobs[0] != nJobs[1]) ? nJobs[1] : 0; nJob[1] < nJobs[1]; nJob[1]++)
		{
			if (pPrintJobs->GetAt(nJob[0])->Compare(GetAt(nJob[1]))) break;
			continue;
		}
		if (nJob[1] == nJobs[1]) break;
	}
	return((nJob[0] == nJobs[0] && nJobs[0] == nJobs[1]) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPrintJobs::Map(CByteArray &nInfo) CONST
{
	INT  nJob;
	INT  nJobs;
	CByteArray  nJobData;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	for (nJob = 0, nJobs = (INT)GetSize(), nInfo.RemoveAll(); nJob < nJobs; nJob++)
	{
		if ((pJobInfo = GetAt(nJob)) && pJobInfo->Map(nJobData) && nInfo.Append(nJobData) >= 0) continue;
		break;
	}
	return((nJob == nJobs) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPrintJobs::Unmap(CONST CByteArray &nInfo)
{
	INT  cbJob;
	INT  cbJobs;
	CByteArray  nJobData;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	for (cbJobs = 0, RemoveAll(); cbJobs < nInfo.GetSize(); cbJobs += cbJob)
	{
		for (CopyMemory(&cbJob, nInfo.GetData() + cbJobs, sizeof(cbJob)), nJobData.SetSize(max(min(cbJob, nInfo.GetSize() - cbJobs), 0)); nJobData.GetSize() >= 0; )
		{
			CopyMemory(nJobData.GetData(), nInfo.GetData() + cbJobs, nJobData.GetSize());
			break;
		}
		if ((pJobInfo = new CTCAutomaticStackPrintJobInfo))
		{
			if (pJobInfo->Unmap(nJobData) && Add(pJobInfo) >= 0) continue;
			delete pJobInfo;
		}
		break;
	}
	if ((pJobInfo = (!GetSize()) ? new CTCAutomaticStackPrintJobInfo : (CTCAutomaticStackPrintJobInfo *)NULL))
	{
		for (pJobInfo->SetName(STRING(IDS_PRINTJOB_DEFAULTNAME)), pJobInfo->SetProfile(STRING(IDS_PRINTPROFILE_DEFAULTNAME)), pJobInfo->SetPrintMode(TCAUTOMATICSTACK_PRINT_NORMALSTACK | TCAUTOMATICSTACK_PRINT_ONSTACKITEMS); Add(pJobInfo) >= 0; ) return TRUE;
		delete pJobInfo;
		return FALSE;
	}
	return((cbJobs == nInfo.GetSize()) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsLayoutPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsLayoutPage, CLocalePropertyPage)

CTCAutomaticStackSettingsLayoutPage::CTCAutomaticStackSettingsLayoutPage() : CLocalePropertyPage(CTCAutomaticStackSettingsLayoutPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsLayoutPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsLayoutPage::Initialize()
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;

	if (GetParentDisplay()->GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, m_nColumns[0][0][0]) && GetParentDisplay()->GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, m_nColumns[0][1][0]) && GetParentDisplay()->GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, m_nColumns[1][0][0]) && GetParentDisplay()->GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, m_nColumns[1][1][0]) && GetParentDisplay()->GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &m_fntTitle[0][0][0]) && GetParentDisplay()->GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &m_fntTitle[0][1][0]) && GetParentDisplay()->GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &m_fntTitle[1][0][0]) && GetParentDisplay()->GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &m_fntTitle[1][1][0]) && GetParentDisplay()->GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &m_fntItems[0][0][0]) && GetParentDisplay()->GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &m_fntItems[0][1][0]) && GetParentDisplay()->GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &m_fntItems[1][0][0]) && GetParentDisplay()->GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &m_fntItems[1][1][0]) && GetParentDisplay()->GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, m_nGridBackgroundColor[0][0][0]) && GetParentDisplay()->GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, m_nGridBackgroundColor[0][1][0]) && GetParentDisplay()->GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, m_nGridBackgroundColor[1][0][0]) && GetParentDisplay()->GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, m_nGridBackgroundColor[1][1][0]))
	{
		for (nPage = 0, nPages = TCAUTOMATICSTACK_PAGES, m_bToolTips[1] = m_bToolTips[0] = GetParentDisplay()->IsToolTipModeEnabled(); nPage < nPages; nPage++)
		{
			for (nPane = 0, nPanes = TCAUTOMATICSTACK_PANES; nPane < nPanes; nPane = nPane + 1)
			{
				CopyMemory(&m_fntTitle[nPage][nPane][1], &m_fntTitle[nPage][nPane][0], sizeof(LOGFONT));
				CopyMemory(&m_fntItems[nPage][nPane][1], &m_fntItems[nPage][nPane][0], sizeof(LOGFONT));
				m_nGridBackgroundColor[nPage][nPane][1] = m_nGridBackgroundColor[nPage][nPane][0];
				m_nColumns[nPage][nPane][1].Copy(m_nColumns[nPage][nPane][0]);
			}
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::GetColumns(UINT nPane, CUIntArray &nColumns) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[0][0][0]);
			return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[0][1][0]);
			return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[1][0][0]);
			return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[1][1][0]);
			return((nColumns.GetSize() > 0) ? Check(FALSE) : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::GetTitleFont(UINT nPane, LPLOGFONT pTitleFont) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			CopyMemory(pTitleFont, &m_fntTitle[0][0][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			CopyMemory(pTitleFont, &m_fntTitle[0][1][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			CopyMemory(pTitleFont, &m_fntTitle[1][0][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			CopyMemory(pTitleFont, &m_fntTitle[1][1][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::GetItemsFont(UINT nPane, LPLOGFONT pItemsFont) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			CopyMemory(pItemsFont, &m_fntItems[0][0][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			CopyMemory(pItemsFont, &m_fntItems[0][1][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			CopyMemory(pItemsFont, &m_fntItems[1][0][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			CopyMemory(pItemsFont, &m_fntItems[1][1][0], sizeof(LOGFONT));
			return Check(FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColor = m_nGridBackgroundColor[0][0][0];
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColor = m_nGridBackgroundColor[0][1][0];
			return Check(FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColor = m_nGridBackgroundColor[1][0][0];
			return Check(FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColor = m_nGridBackgroundColor[1][1][0];
			return Check(FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::GetToolTipMode(BOOL &bEnable) CONST
{
	bEnable = m_bToolTips[0];
	return Check(FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsLayoutPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsLayoutPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCAutomaticStackSettingsLayoutPage::EnumLayoutPanes()
{
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGESCHEDULEDPANE)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGEHISTORICALPANE)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TIMETAGGEDPAGESCHEDULEDPANE)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TIMETAGGEDPAGEHISTORICALPANE)) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsLayoutPage::EnumLayoutColumns()
{
	INT  nColumn;
	INT  nColumns;
	CStringArray  szColumns;

	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_NUMBER));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_NAME));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_CATEGORY));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_FLAGS));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_TCPACKET));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_RELEASETIME));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_PTVRESULT));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_PEVRESULT));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_CEVRESULT));
	szColumns.Add(LookupColumnName(TCAUTOMATICSTACK_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szColumns.GetAt(nColumn));
		continue;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, CB_SETCURSEL);
	return((nColumn == nColumns) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsLayoutPage::ShowLayoutColumns()
{
	INT  nPage;
	INT  nPane;
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_nColumns[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW, LVM_DELETEALLITEMS), m_nColumnIndex = 0; nColumn < nColumns; nColumn++)
	{
		if ((nColumn >= m_szColumns.GetSize() && InsertLayoutColumn(nColumn, LookupColumnName(m_nColumns[nPage][nPane][0].GetAt(nColumn)))) || (nColumn < m_szColumns.GetSize() && ModifyLayoutColumn(nColumn, LookupColumnName(m_nColumns[nPage][nPane][0].GetAt(nColumn))))) continue;
		break;
	}
	while (nColumn < m_szColumns.GetSize())
	{
		if (!RemoveLayoutColumn(nColumn)) break;
		continue;
	}
	for (nColumn = (nColumn != nColumns) ? (nColumns + 1) : 0; nColumn < nColumns; nColumn++)
	{
		if ((!nColumn  &&  !Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, EMPTYSTRING)) || (nColumn > 0 && !Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), 0, nColumn, EMPTYSTRING))) break;
		continue;
	}
	return((nColumn == nColumns) ? SetCurLayoutColumn() : FALSE);
}

VOID CTCAutomaticStackSettingsLayoutPage::ShowLayoutBackground()
{
	INT  nPage;
	INT  nPane;

	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, (m_nGridBackgroundColor[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0] != GetSysColor(COLOR_WINDOW)) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nGridBackgroundColor[nPage][nPane][0]);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID));
}

VOID CTCAutomaticStackSettingsLayoutPage::ShowLayoutFontDetails()
{
	INT  nPage;
	INT  nPane;
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? m_fntTitle[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].lfFaceName : m_fntItems[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].lfFaceName))); (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE) && cFontTools.EnumerateFont(m_fntTitle[nPage][nPane][0].lfFaceName, szStyles, szSizes, bUnderlined)) || (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS) && cFontTools.EnumerateFont(m_fntItems[nPage][nPane][0].lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_fntTitle[nPage][nPane][0])), 0));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[nPage][nPane][0])), max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntTitle[nPage][nPane][1])), 0)));
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_fntItems[nPage][nPane][0])), 0));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[nPage][nPane][0])), max(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_fntItems[nPage][nPane][1])), 0)));
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackSettingsLayoutPage::ShowLayoutFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

BOOL CTCAutomaticStackSettingsLayoutPage::InsertLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.InsertAt(nIndex, pszColumn);
	m_nColumnIndex = (nIndex <= m_nColumnIndex) ? (INT)min(m_nColumnIndex + 1, m_szColumns.GetSize() - 1) : m_nColumnIndex;
	return Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCAutomaticStackSettingsLayoutPage::ModifyLayoutColumn(INT nIndex, LPCTSTR pszColumn)
{
	m_szColumns.SetAt(nIndex, pszColumn);
	return Listview_SetColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(pszColumn));
}

BOOL CTCAutomaticStackSettingsLayoutPage::RemoveLayoutColumn(INT nIndex)
{
	if (Listview_DeleteColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex))
	{
		m_nColumnIndex = (nIndex >= m_nColumnIndex) ? ((nIndex > m_nColumnIndex) ? m_nColumnIndex : 0) : max(m_nColumnIndex - 1, 0);
		m_szColumns.RemoveAt(nIndex);
		return SetCurLayoutColumn(m_nColumnIndex);
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLayoutPage::SetCurLayoutColumn(INT nIndex)
{
	if (nIndex < m_nColumns[FindPageIndex()][FindPaneIndex()][0].GetSize())
	{
		for (m_szColumns.SetAt(m_nColumnIndex, (m_szColumns.GetAt(m_nColumnIndex).Right(lstrlen(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER))) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)) ? (m_szColumns.GetAt(m_nColumnIndex).Left(m_szColumns.GetAt(m_nColumnIndex).GetLength() - lstrlen(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)))) : m_szColumns.GetAt(m_nColumnIndex)), m_szColumns.SetAt(nIndex, m_szColumns.GetAt(nIndex) + STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_COLUMNMARKER)); TRUE; )
		{
			Listview_SetColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), m_nColumnIndex, m_szColumns.GetAt(m_nColumnIndex), CalcColumnWidth(m_szColumns.GetAt(m_nColumnIndex)));
			Listview_SetColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW), nIndex, m_szColumns.GetAt(nIndex), CalcColumnWidth(m_szColumns.GetAt((m_nColumnIndex = nIndex))));
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
		return TRUE;
	}
	return FALSE;
}

INT CTCAutomaticStackSettingsLayoutPage::GetCurLayoutColumn() CONST
{
	return m_nColumnIndex;
}

BOOL CTCAutomaticStackSettingsLayoutPage::CheckLayoutColumn() CONST
{
	INT  nPage;
	INT  nPane;
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn);
	for (nColumn = 0, nColumns = (INT)m_nColumns[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName(m_nColumns[nPage][nPane][0].GetAt(nColumn)) == szColumn) break;
		continue;
	}
	return((nColumn == nColumns) ? TRUE : FALSE);
}

CString CTCAutomaticStackSettingsLayoutPage::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NUMBER) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NAME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CATEGORY) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_FLAGS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TCPACKET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_STATUS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCAutomaticStackSettingsLayoutPage::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)))) return TCAUTOMATICSTACK_TITLEITEM_NUMBER;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME)))) return TCAUTOMATICSTACK_TITLEITEM_NAME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION)))) return TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY)))) return TCAUTOMATICSTACK_TITLEITEM_CATEGORY;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM)))) return TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS)))) return TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS)))) return TCAUTOMATICSTACK_TITLEITEM_FLAGS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET)))) return TCAUTOMATICSTACK_TITLEITEM_TCPACKET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME)))) return TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME)))) return TCAUTOMATICSTACK_TITLEITEM_RELEASETIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET)))) return TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME)))) return TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME)))) return TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET)))) return TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION)))) return TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW)))) return TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)))) return TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)))) return TCAUTOMATICSTACK_TITLEITEM_PTVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)))) return TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)))) return TCAUTOMATICSTACK_TITLEITEM_PEVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW)))) return TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS)))) return TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT)))) return TCAUTOMATICSTACK_TITLEITEM_CEVRESULT;
	if (!_tcsncmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS), lstrlen(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS)))) return TCAUTOMATICSTACK_TITLEITEM_STATUS;
	return 0;
}

INT CTCAutomaticStackSettingsLayoutPage::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nWidths.Add((nIndex > 0) ? (nWidths.GetAt(nIndex - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex)))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex))));
		continue;
	}
	return((nCount == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

INT CTCAutomaticStackSettingsLayoutPage::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	UINT  nColumn;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			if (pDC->GetTextMetrics(&tmFont) && tmFont.tmAveCharWidth > 0)
			{
				nWidth = ((nColumn = LookupColumnName(pszColumn)) == TCAUTOMATICSTACK_TITLEITEM_NUMBER) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackNumberColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : 0;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_NAME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackNameColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackDescriptionColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CATEGORY) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackCategoryColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackSubSystemColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackArgumentsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_FLAGS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackFlagsColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_TCPACKET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackTCPacketColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackDispatchTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackReleaseTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackReleaseTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackTransmissionTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackExecutionTimeColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackExecutionTimeOffsetColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackAuthorizationColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackPTVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackPTVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackPTVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackPEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackPEVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackCEVTimeWindowColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackCEVChecksColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackCEVResultColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_STATUS) ? (2 * CalcColumnIndent() + max((GetDatabase()->GetTCAutomaticStackStatusColumnCharWidth())*tmFont.tmAveCharWidth, pDC->GetTextExtent(pszColumn).cx)) : nWidth;
				nWidth = (!nWidth) ? (2 * CalcColumnIndent() + pDC->GetTextExtent(pszColumn).cx) : nWidth;
				pDC->SelectObject(pOldFont);
				ReleaseDC(pDC);
				return nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
	return 0;
}

INT CTCAutomaticStackSettingsLayoutPage::CalcColumnIndent() CONST
{
	return 3 * GetSystemMetrics(SM_CXEDGE);
}

INT CTCAutomaticStackSettingsLayoutPage::FindPageIndex() CONST
{
	CString  szPane;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE)->GetWindowText(szPane);
	return((szPane == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGESCHEDULEDPANE) || szPane == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGEHISTORICALPANE)) ? 0 : 1);
}

INT CTCAutomaticStackSettingsLayoutPage::FindPaneIndex() CONST
{
	CString  szPane;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE)->GetWindowText(szPane);
	return((szPane == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGESCHEDULEDPANE) || szPane == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TIMETAGGEDPAGESCHEDULEDPANE)) ? 0 : 1);
}

VOID CTCAutomaticStackSettingsLayoutPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TOOLTIPS, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, bCheck);
}

BOOL CTCAutomaticStackSettingsLayoutPage::IsModified(BOOL bAll) CONST
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;
	INT  nColumn;
	INT  nColumns;
	CFontTools  cFontTools;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nPage = 0, nPages = TCAUTOMATICSTACK_PAGES; nPage < nPages; nPage++)
		{
			for (nPane = 0, nPanes = TCAUTOMATICSTACK_PANES; nPane < nPanes; nPane++)
			{
				for (nColumn = 0, nColumns = (m_nColumns[nPage][nPane][0].GetSize() == m_nColumns[nPage][nPane][1].GetSize() && !lstrcmp(m_fntTitle[nPage][nPane][0].lfFaceName, m_fntTitle[nPage][nPane][1].lfFaceName) && (m_fntTitle[nPage][nPane][0].lfHeight == m_fntTitle[nPage][nPane][1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[nPage][nPane][0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntTitle[nPage][nPane][1]))) && m_fntTitle[nPage][nPane][0].lfWeight == m_fntTitle[nPage][nPane][1].lfWeight && m_fntTitle[nPage][nPane][0].lfItalic == m_fntTitle[nPage][nPane][1].lfItalic && !lstrcmp(m_fntItems[nPage][nPane][0].lfFaceName, m_fntItems[nPage][nPane][1].lfFaceName) && (m_fntItems[nPage][nPane][0].lfHeight == m_fntItems[nPage][nPane][1].lfHeight || cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[nPage][nPane][0])) == cFontTools.QueryPixels(cFontTools.QueryPoints(&m_fntItems[nPage][nPane][1]))) && m_fntItems[nPage][nPane][0].lfWeight == m_fntItems[nPage][nPane][1].lfWeight && m_fntItems[nPage][nPane][0].lfItalic == m_fntItems[nPage][nPane][1].lfItalic && m_nGridBackgroundColor[nPage][nPane][0] == m_nGridBackgroundColor[nPage][nPane][1] && m_bToolTips[0] == m_bToolTips[1]) ? (INT)m_nColumns[nPage][nPane][0].GetSize() : -1; nColumn < nColumns; nColumn++)
				{
					if (m_nColumns[nPage][nPane][0].GetAt(nColumn) != m_nColumns[nPage][nPane][1].GetAt(nColumn)) break;
					continue;
				}
				if (nColumn != nColumns) break;
			}
			if (nPane != nPanes) break;
		}
		return((nPage != nPages) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTCAutomaticStackSettingsLayoutPage::Check(BOOL bAll) CONST
{
	INT  nPage;
	INT  nPages;
	INT  nPane;
	INT  nPanes;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nPage = 0, nPages = TCAUTOMATICSTACK_PAGES; nPage < nPages; nPage++)
		{
			for (nPane = 0, nPanes = TCAUTOMATICSTACK_PANES; nPane < nPanes; nPane++)
			{
				if (!m_nColumns[nPage][nPane][0].GetSize() || m_nColumns[nPage][nPane][0].GetAt(0) != TCAUTOMATICSTACK_TITLEITEM_NUMBER) break;
				continue;
			}
		}
		return((GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowTextLength() > 0 && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->SendMessage(CB_GETCURSEL) >= 0) && nPage == nPages) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTCAutomaticStackSettingsLayoutPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsLayoutPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSettingsLayoutPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nColumns[0][0][0].RemoveAll();
	m_nColumns[0][0][1].RemoveAll();
	m_nColumns[0][1][0].RemoveAll();
	m_nColumns[0][1][1].RemoveAll();
	m_nColumns[1][0][0].RemoveAll();
	m_nColumns[1][0][1].RemoveAll();
	m_nColumns[1][1][0].RemoveAll();
	m_nColumns[1][1][1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsLayoutPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsLayoutPage)
	ON_WM_PAINT()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TOOLTIPS, OnToolTips)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER, OnInsertColumnAfter)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE, OnRemoveColumn)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID, OnGridBackground)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, OnTitleFont)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, OnItemsFont)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, OnSelchangePane)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME, OnSelchangeColumnName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, OnSelchangeGridBackgroundColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsLayoutPage message handlers

BOOL CTCAutomaticStackSettingsLayoutPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); EnumLayoutPanes(); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_NORMALPAGESCHEDULEDPANE)));
		break;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TOOLTIPS, m_bToolTips[0]);
	CheckRadioButton(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE, IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS, IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_PANE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TOOLTIPS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_CHARACTERISTICS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES)->EnableWindow();
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_fntTitle[FindPageIndex()][FindPaneIndex()][0].lfFaceName));
	EnumLayoutColumns();
	ShowLayoutColumns();
	ShowLayoutBackground();
	ShowLayoutFontDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackSettingsLayoutPage::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect((IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE)) ? &m_fntTitle[FindPageIndex()][FindPaneIndex()][0] : &m_fntItems[FindPageIndex()][FindPaneIndex()][0]); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE, CB_GETCOUNT) > 0) ? GetSysColor(COLOR_WINDOWTEXT) : GetSysColor(COLOR_GRAYTEXT));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

BOOL CTCAutomaticStackSettingsLayoutPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMLISTVIEW  *pNotifyInfo = (NMLISTVIEW *)lParam;

	if (pNotifyInfo->hdr.idFrom == IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_VIEW)
	{
		if (pNotifyInfo->hdr.code == LVN_COLUMNCLICK) SetCurLayoutColumn(pNotifyInfo->iSubItem);
		if (pNotifyInfo->hdr.code == LVN_ITEMCHANGING  &&  !(pNotifyInfo->uChanged & LVIF_TEXT))
		{
			*pResult = TRUE;
			return TRUE;
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackSettingsLayoutPage::OnInsertColumnAfter()
{
	INT  nIndex;
	CString  szColumn;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->GetWindowText(szColumn); InsertLayoutColumn((nIndex = m_nColumnIndex + 1), szColumn); )
	{
		m_nColumns[FindPageIndex()][FindPaneIndex()][0].InsertAt(nIndex, LookupColumnName(szColumn));
		SetCurLayoutColumn(nIndex);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnRemoveColumn()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if (RemoveLayoutColumn((nIndex = m_nColumnIndex)))
	{
		m_nColumns[FindPageIndex()][FindPaneIndex()][0].RemoveAt(nIndex);
		SetCurLayoutColumn();
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnGridBackground()
{
	COLORREF  nColor;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (nColor = VGA_COLOR_GRAY));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID));
	m_nGridBackgroundColor[FindPageIndex()][FindPaneIndex()][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRID)) ? nColor : GetSysColor(COLOR_WINDOW);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnToolTips()
{
	m_bToolTips[0] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_TOOLTIPS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnTitleFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCAutomaticStackSettingsLayoutPage::OnItemsFont()
{
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCAutomaticStackSettingsLayoutPage::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangePane()
{
	ShowLayoutColumns();
	ShowLayoutBackground();
	ShowLayoutFontDetails();
	ShowLayoutFontSample();
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangeColumnName()
{
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_INSERTAFTER)->EnableWindow((m_nColumnIndex >= 0) ? (CheckLayoutColumn() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_REMOVE)->EnableWindow((m_nColumnIndex > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangeFontName()
{
	INT  nPage;
	INT  nPane;
	CString  szSize;
	CString  szStyle;
	CFontTools  cFontTools;

	for (nPage = FindPageIndex(), nPane = FindPaneIndex(); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE); )
	{
		_tcscpy_s(m_fntTitle[nPage][nPane][0].lfFaceName, sizeof(m_fntTitle[nPage][nPane][0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
		break;
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		_tcscpy_s(m_fntItems[nPage][nPane][0].lfFaceName, sizeof(m_fntItems[nPage][nPane][0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_NAMES, CB_GETCURSEL)));
		ShowLayoutFontDetails();
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntTitle[nPage][nPane][0].lfWeight, m_fntTitle[nPage][nPane][0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_fntTitle[nPage][nPane][0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_fntTitle[nPage][nPane][0]);
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntItems[nPage][nPane][0].lfWeight, m_fntItems[nPage][nPane][0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_fntItems[nPage][nPane][0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_fntItems[nPage][nPane][0]);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangeFontStyle()
{
	INT  nPage;
	INT  nPane;
	CString  szStyle;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntTitle[nPage][nPane][0].lfWeight, m_fntTitle[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].lfItalic);
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_STYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_fntItems[nPage][nPane][0].lfWeight, m_fntItems[(nPage = FindPageIndex())][(nPane = FindPaneIndex())][0].lfItalic);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangeFontSize()
{
	CString  szSize;
	CFontTools  cFontTools;

	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_TITLE))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_fntTitle[FindPageIndex()][FindPaneIndex()][0].lfHeight);
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_LOCATION_ITEMS))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FONTS_SIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_fntItems[FindPageIndex()][FindPaneIndex()][0].lfHeight);
	}
	ShowLayoutFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLayoutPage::OnSelchangeGridBackgroundColor()
{
	m_nGridBackgroundColor[FindPageIndex()][FindPaneIndex()][0] = (COLORREF)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LAYOUTPAGE_FORMAT_GRIDCOLOR, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsOperationsPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsOperationsPage, CLocalePropertyPage)

CTCAutomaticStackSettingsOperationsPage::CTCAutomaticStackSettingsOperationsPage() : CLocalePropertyPage(CTCAutomaticStackSettingsOperationsPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsOperationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsOperationsPage::Initialize()
{
	for (m_bModes[0][0] = m_bModes[1][0] = (GetParentDisplay()->GetTelecommandingMode() & TCAUTOMATICSTACK_MODE_MASTERMANUAL) ? TRUE : FALSE, m_bModes[0][1] = m_bModes[1][1] = GetParentDisplay()->IsTelecommandingReleaseWaitModeEnabled(), m_bModes[0][2] = m_bModes[1][2] = GetParentDisplay()->IsTelecommandingAutoRejectionModeEnabled(), m_bModes[0][3] = m_bModes[1][3] = GetParentDisplay()->IsTelecommandingInterlockModeEnabled(), m_bAlerts[0] = m_bAlerts[1] = FALSE, m_bPermissions[0] = m_bPermissions[1] = FALSE, m_nArguments[0] = m_nArguments[1] = -1, m_bArguments[0] = m_bArguments[1] = FALSE; GetParentDisplay()->GetListOptions(m_nArguments[0], m_bArguments[0]); )
	{
		m_nArguments[1] = m_nArguments[0];
		m_bArguments[1] = m_bArguments[0];
		break;
	}
	for (m_bStateFlags[0] = m_bStateFlags[1] = (GetParentDisplay()->GetTelecommandingState() & TCAUTOMATICSTACK_STATE_DISABLED) ? TRUE : FALSE, m_nCheckFlags[0] = m_nCheckFlags[1] = GetParentDisplay()->GetTelecommandingChecks(), m_nChecks[0] = m_nChecks[1] = 0; GetParentDisplay()->GetListUpdateChecks(m_nChecks[0]); )
	{
		m_nChecks[1] = m_nChecks[0];
		break;
	}
	for (m_nMiscellaneousOptions[0] = m_nMiscellaneousOptions[1] = 0; GetParentDisplay()->GetMiscellaneousOptions(m_nMiscellaneousOptions[0]); )
	{
		m_nMiscellaneousOptions[1] = m_nMiscellaneousOptions[0];
		break;
	}
	for (m_tDefaultReleaseTimeWindow[0] = m_tDefaultReleaseTimeWindow[1] = TCAUTOMATICSTACK_RELEASETIMEWINDOW_DEFAULTINTERVAL; GetParentDisplay()->GetDefaultReleaseTimeWindow(m_tDefaultReleaseTimeWindow[0]); )
	{
		m_tDefaultReleaseTimeWindow[1] = m_tDefaultReleaseTimeWindow[0];
		break;
	}
	for (m_tDispatchTimeWindow[0] = m_tDispatchTimeWindow[1] = TCAUTOMATICSTACK_DISPATCHTIMEWINDOW_DEFAULTINTERVAL; GetParentDisplay()->GetDispatchTimeWindow(m_tDispatchTimeWindow[0]); )
	{
		m_tDispatchTimeWindow[1] = m_tDispatchTimeWindow[0];
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	nArguments = m_nArguments[0];
	bAll = m_bArguments[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetListCheckOptions(UINT &nFlags, INT &nCount) CONST
{
	nFlags = m_nCheckFlags[0];
	nCount = m_nChecks[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	nOptions = m_nMiscellaneousOptions[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDefaultReleaseTimeWindow[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDispatchTimeWindow[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetMasterManualModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetReleaseWaitModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][1];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetAutoRejectionModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][2];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetInterlockModeFlag(BOOL &bEnabled) CONST
{
	bEnabled = m_bModes[0][3];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::GetDisabledStateFlag(BOOL &bFlag) CONST
{
	bFlag = m_bStateFlags[0];
	return Check(FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsOperationsPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsOperationsPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCAutomaticStackSettingsOperationsPage::ShowConfiguration()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, m_bModes[0][0]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, m_bModes[0][1]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, m_bModes[0][2]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, m_bStateFlags[0]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, m_bModes[0][3]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_PTV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_PEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, (m_nCheckFlags[0] & TCAUTOMATICSTACK_CHECKS_CEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, (m_nChecks[0] > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, (m_nArguments[0] >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, m_bArguments[0]);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, (m_nMiscellaneousOptions[0] & TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, (m_nMiscellaneousOptions[0] & TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), m_tDefaultReleaseTimeWindow[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), m_tDispatchTimeWindow[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), m_nArguments[0]);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), m_nChecks[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT));
}

VOID CTCAutomaticStackSettingsOperationsPage::AdjustToPrivileges()
{
	BOOL  bCheck[2];

	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, (bCheck[0] = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, (bCheck[1] = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || bCheck[0]));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, bCheck[0]);
}

BOOL CTCAutomaticStackSettingsOperationsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_bModes[0][0] != m_bModes[1][0] || m_bModes[0][1] != m_bModes[1][1] || m_bModes[0][2] != m_bModes[1][2] || m_bModes[0][3] != m_bModes[1][3] || m_bStateFlags[0] != m_bStateFlags[1] || m_nCheckFlags[0] != m_nCheckFlags[1] || m_nChecks[0] != m_nChecks[1] || m_nMiscellaneousOptions[0] != m_nMiscellaneousOptions[1] || m_nArguments[0] != m_nArguments[1] || m_bArguments[0] != m_bArguments[1] || m_tDefaultReleaseTimeWindow[0] != m_tDefaultReleaseTimeWindow[1] || m_tDispatchTimeWindow[0] != m_tDispatchTimeWindow[1] || m_bPermissions[0] != m_bPermissions[1] || m_bAlerts[0] != m_bAlerts[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCAutomaticStackSettingsOperationsPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCAutomaticStackSettingsOperationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsOperationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsOperationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsOperationsPage)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE, OnMasterManualMode)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE, OnReleaseWaitMode)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE, OnAutomaticRejectionMode)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED, OnDisabledState)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS, OnInterlockChecks)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE, OnUpdateChecks)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_PERMISSIONS, OnPermissions)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_ALERTS, OnAlerts)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED, OnLimitArguments)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL, OnAllArguments)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT, OnAlwaysAllowExit)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, OnUndispatchOnExit)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT, OnSpinchangeUpdateChecksCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT, OnSpinchangeArgumentsCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, OnSpinchangeDefaultReleaseTimeWindow)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, OnSpinchangeDispatchTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsOperationsPage message handlers

BOOL CTCAutomaticStackSettingsOperationsPage::OnInitDialog()
{
	CButton  *pButton;
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); (pButton = (CButton *)GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_PERMISSIONS)); )
	{
		pButton->SetIcon((HICON)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDI_USERPERMISSIONS), IMAGE_ICON, 0, 0, LR_DEFAULTCOLOR));
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MINIMUMCHECKCOUNT, TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MAXIMUMCHECKCOUNT);
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MINIMUMARGUMENTS, TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MAXIMUMARGUMENTS);
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MINIMUMDEFAULTRELEASETIMEWINDOW, TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MAXIMUMDEFAULTRELEASETIMEWINDOW);
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MINIMUMDISPATCHTIMEWINDOW, TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_MAXIMUMDISPATCHTIMEWINDOW);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_PERMISSIONS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_ALERTS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT)->EnableWindow();
	ShowConfiguration();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackSettingsOperationsPage::OnMasterManualMode()
{
	m_bModes[0][0] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_MASTERMANUALMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnReleaseWaitMode()
{
	m_bModes[0][1] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_RELEASEWAITMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnAutomaticRejectionMode()
{
	m_bModes[0][2] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MODES_AUTOMATICREJECTIONMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnDisabledState()
{
	m_bStateFlags[0] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_STATE_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnOverridePTV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PTV_DISABLE) | TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_PTV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnDisablePTV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPTV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE) | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PTV_DISABLE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPTV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnOverridePEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PEV_DISABLE) | TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_PEV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnDisablePEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLEPEV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE) | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_PEV_DISABLE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDEPEV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnOverrideCEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_CEV_DISABLE) | TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_CEV_DISABLE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnDisableCEV()
{
	for (m_nCheckFlags[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_DISABLECEV)) ? ((m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE) | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE) : (m_nCheckFlags[0] & ~TCAUTOMATICSTACK_CHECKS_CEV_DISABLE); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV); )
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_OVERRIDECEV, FALSE);
		m_nCheckFlags[0] &= ~TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnInterlockChecks()
{
	m_bModes[0][3] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_INTERLOCKS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnUpdateChecks()
{
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT), (m_nChecks[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE)) ? TCAUTOMATICSTACK_UPDATELISTCHECKS_DEFAULTCOUNT : 0));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnPermissions()
{
	CTCAutomaticStackUserPermissionsDialog  cUserPermissionsDialog;

	m_bPermissions[0] = (cUserPermissionsDialog.Create(this) == IDOK) ? TRUE : FALSE;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnAlerts()
{
	CTCAutomaticStackAlertOptionsDialog  cAlertOptionsDialog;

	m_bAlerts[0] = (cAlertOptionsDialog.Create(this) == IDOK) ? TRUE : FALSE;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnLimitArguments()
{
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT), (m_nArguments[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED)) ? TCAUTOMATICSTACKSETTINGSOPERATIONSPAGE_DEFAULTARGUMENTS : -1));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnAllArguments()
{
	m_bArguments[0] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_ALL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnAlwaysAllowExit()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT, ((m_nMiscellaneousOptions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT)) ? (m_nMiscellaneousOptions[0] | TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT) : (m_nMiscellaneousOptions[0] & ~(TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT | TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT))) & TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT) ? IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ALWAYSALLOWEXIT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnUndispatchOnExit()
{
	m_nMiscellaneousOptions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_UNDISPATCHONEXIT)) ? (m_nMiscellaneousOptions[0] | TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT) : (m_nMiscellaneousOptions[0] & ~TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnSpinchangeUpdateChecksCount()
{
	m_nChecks[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_CHECKS_UPDATE_COUNT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnSpinchangeArgumentsCount()
{
	m_nArguments[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_ARGUMENTS_LIMITED_COUNT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnSpinchangeDefaultReleaseTimeWindow()
{
	m_tDefaultReleaseTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnSpinchangeDispatchTimeWindow()
{
	m_tDispatchTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsOperationsPage::OnDestroy()
{
	HICON  hIcon;
	CButton  *pButton;

	if ((pButton = (CButton *)GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_OPERATIONSPAGE_PERMISSIONS)))
	{
		if ((hIcon = pButton->GetIcon()))
		{
			pButton->SetIcon((HICON)NULL);
			DestroyIcon(hIcon);
		}
	}
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsFilteringPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsFilteringPage, CLocalePropertyPage)

CTCAutomaticStackSettingsFilteringPage::CTCAutomaticStackSettingsFilteringPage() : CLocalePropertyPage(CTCAutomaticStackSettingsFilteringPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsFilteringPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsFilteringPage::Initialize()
{
	if (GetParentDisplay()->GetFilterMode(m_nMode[0][0]) && GetParentDisplay()->GetFilterTelecommandName(m_szTelecommand[0][0]) && GetParentDisplay()->GetFilterTelecommandSequence(m_szTelecommand[1][0]) && GetParentDisplay()->GetFilterTelecommandSubSystems(m_nSubSystems[0]) && GetParentDisplay()->GetFilterLimitation(m_nLimitation[0]) && GetParentDisplay()->GetFilterSortMode(m_nMode[1][0]))
	{
		m_szTelecommand[0][1] = m_szTelecommand[0][0];
		m_szTelecommand[1][1] = m_szTelecommand[1][0];
		m_nSubSystems[1].Copy(m_nSubSystems[0]);
		m_nLimitation[1] = m_nLimitation[0];
		m_nMode[0][1] = m_nMode[0][0];
		m_nMode[1][1] = m_nMode[1][0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetMode(UINT &nMode) CONST
{
	nMode = m_nMode[0][0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetTelecommandName(CString &szName) CONST
{
	szName = m_szTelecommand[0][0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetTelecommandSequence(CString &szSequence) CONST
{
	szSequence = m_szTelecommand[1][0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	nSubSystems.Copy(m_nSubSystems[0]);
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetLimitation(UINT &nCount) CONST
{
	nCount = m_nLimitation[0];
	return Check(FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::GetSortMode(UINT &nMode) CONST
{
	nMode = m_nMode[1][0];
	return Check(FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsFilteringPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsFilteringPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCAutomaticStackSettingsFilteringPage::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::EnumVerificationStages()
{
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION)) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::EnumVerificationStates()
{
	INT  nIndex;
	CString  szStage;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->GetWindowText(szStage);
	return(((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) >= 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) >= 0) && (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) >= 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) >= 0) && ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN))) < 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_DELETESTRING, nIndex) >= 0)) || (szStage != STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) >= 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) >= 0))) && ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNVERIFIED))) < 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_DELETESTRING, nIndex) >= 0)) || (szStage != STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNVERIFIED)) >= 0 || SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNVERIFIED)) >= 0)))) ? TRUE : FALSE);
}

VOID CTCAutomaticStackSettingsFilteringPage::ShowFilterInfo()
{
	INT  nSubSystem;
	INT  nSubSystems;
	UINT  nState;

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystems[0].GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(m_nSubSystems[0].GetAt(nSubSystem)));
		continue;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND, (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMAND | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE, (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSUBSYSTEMS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION, (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE, (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES, (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYLIMITENTRIES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME, (m_nMode[1][0] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME, (m_nMode[1][0] & TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_LATESTFIRST, (m_nMode[1][0] & TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM)) ? 0 : -1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((nState = (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED)))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) : (((nState = (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED)))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) : (((nState = (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED)))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) : (((nState = (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED)))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) : (((nState = (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) : EMPTYSTRING)))))));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((nState & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED)) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED) : ((nState & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED)) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED) : ((nState & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN)) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN) : ((nState & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNVERIFIED) : EMPTYSTRING))))));
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT), m_nLimitation[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->SetWindowText(m_szTelecommand[0][0]);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->SetWindowText(m_szTelecommand[1][0]);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL))) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES));
}

VOID CTCAutomaticStackSettingsFilteringPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_LATESTFIRST, bCheck);
}

BOOL CTCAutomaticStackSettingsFilteringPage::IsModified(BOOL bAll) CONST
{
	INT  nSubSystem[2];
	INT  nSubSystems[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nSubSystem[0] = 0, nSubSystems[0] = (m_nMode[0][0] == m_nMode[0][1] && m_nMode[1][0] == m_nMode[1][1] && m_szTelecommand[0][0] == m_szTelecommand[0][1] && m_szTelecommand[1][0] == m_szTelecommand[1][1] && m_nSubSystems[0].GetSize() == m_nSubSystems[1].GetSize() && m_nLimitation[0] == m_nLimitation[1]) ? (INT)m_nSubSystems[0].GetSize() : -1; nSubSystem[0] < nSubSystems[0]; nSubSystem[0]++)
		{
			for (nSubSystem[1] = 0, nSubSystems[1] = (INT)m_nSubSystems[1].GetSize(); nSubSystem[1] < nSubSystems[1]; nSubSystem[1]++)
			{
				if (m_nSubSystems[0].GetAt(nSubSystem[0]) == m_nSubSystems[1].GetAt(nSubSystem[1])) break;
				continue;
			}
			if (nSubSystem[1] == nSubSystems[1]) break;
		}
		return((nSubSystem[0] != nSubSystems[0]) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTCAutomaticStackSettingsFilteringPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? ((!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP)) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->SendMessage(LB_GETCOUNT) > 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION) || (GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->SendMessage(CB_GETCURSEL) >= 0 && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->SendMessage(CB_GETCURSEL) >= 0))) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES) || Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT)) > 0) && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME))) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCAutomaticStackSettingsFilteringPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsFilteringPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsFilteringPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsFilteringPage)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND, OnTelecommand)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM, OnTelecommandName)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE, OnTelecommandSequence)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE, OnTelecommandType)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, OnTelecommandTypeImmediate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, OnTelecommandTypeTimeTagged)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, OnTelecommandType1stStep)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, OnTelecommandType2ndStep)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM, OnTelecommandSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD, OnTelecommandAddSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE, OnTelecommandRemoveSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION, OnVerificationStatus)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE, OnVerificationState)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES, OnLimitEntries)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME, OnSortByReleaseTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME, OnSortByExecutionTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_LATESTFIRST, OnSortOrderLatestFirst)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, OnSelchangeTelecommandSubSystems)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, OnSelchangeVerificationStage)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, OnSelchangeVerificationState)
	ON_LBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, OnSelchangeTelecommandSubSystemList)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME, OnEditchangeTelecommandTypeName)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME, OnEditchangeTelecommandTypeSequence)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT, OnSpinchangeLimitationCount)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsFilteringPage message handlers

BOOL CTCAutomaticStackSettingsFilteringPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT), TCAUTOMATICSTACKSETTINGSFILTERINGPAGE_MINIMUMENTRYLIMITATION, TCAUTOMATICSTACKSETTINGSFILTERINGPAGE_MAXIMUMENTRYLIMITATION);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_LATESTFIRST)->EnableWindow();
	EnumSubSystems();
	EnumVerificationStages();
	EnumVerificationStates();
	ShowFilterInfo();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommand()
{
	m_nSubSystems[0].RemoveAll();
	m_nMode[0][0] &= ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMAND | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSUBSYSTEMS);
	m_nMode[0][0] |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND)) ? TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMAND : 0;
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_RESETCONTENT);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->SetWindowText((m_szTelecommand[0][0] = EMPTYSTRING));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->SetWindowText((m_szTelecommand[1][0] = EMPTYSTRING));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandName()
{
	for (m_nMode[0][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM)) ? (m_nMode[0][0] | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM) : (m_nMode[0][0] & ~TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM); !IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM); )
	{
		m_szTelecommand[0][0].Empty();
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandSequence()
{
	for (m_nMode[0][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE)) ? (m_nMode[0][0] | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE) : (m_nMode[0][0] & ~TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE); !IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE); )
	{
		m_szTelecommand[1][0].Empty();
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandType()
{
	m_nMode[0][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE)) ? ((m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE) : (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP));
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandTypeImmediate()
{
	m_nMode[0][0] = (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandTypeTimeTagged()
{
	m_nMode[0][0] = (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandType1stStep()
{
	m_nMode[0][0] = (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP)) | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandType2ndStep()
{
	m_nMode[0][0] = (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP)) | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_IMMEDIATE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_1STSTEP, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_TYPE_2NDSTEP, TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandSubSystem()
{
	CString  szSubSystem;

	m_nSubSystems[0].RemoveAll();
	m_nMode[0][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM)) ? (m_nMode[0][0] | TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSUBSYSTEMS) : (m_nMode[0][0] & ~TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSUBSYSTEMS);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->GetWindowText(szSubSystem);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM)) ? 0 : -1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandAddSubSystem()
{
	CString  szSubSystem;

	m_nSubSystems[0].Add(GetTCService()->TranslateTCSubSystemToID((szSubSystem = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL)))));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnTelecommandRemoveSubSystem()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CString  szSubSystem;

	for (nSubSystem = 0, nSubSystems = (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szSubSystem = Listbox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_GETCURSEL))))) >= 0) ? (INT)m_nSubSystems[0].GetSize() : -1; nSubSystem < nSubSystems; nSubSystem++)
	{
		if (m_nSubSystems[0].GetAt(nSubSystem) == GetTCService()->TranslateTCSubSystemToID(szSubSystem))
		{
			m_nSubSystems[0].RemoveAt(nSubSystem);
			break;
		}
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_SETCURSEL);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS, CB_GETCURSEL))) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnVerificationStatus()
{
	for (m_nMode[0][0] &= ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE)->EnableWindow();
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION))
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE, FALSE);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnVerificationState()
{
	CString  szStage;

	for (GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->GetWindowText(szStage); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE); )
	{
		m_nMode[0][0] = (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION)) ? ((m_nMode[0][0] & ~TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED) | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)) ? ((m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED)) | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START)) ? ((m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED)) | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS)) ? ((m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED)) | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED) : ((m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)) | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED))));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->SetFocus();
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE))
	{
		m_nMode[0][0] = (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION)) ? (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED)) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)) ? (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED)) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START)) ? (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED)) : ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS)) ? (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED)) : (m_nMode[0][0] & ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)))));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->EnableWindow();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnLimitEntries()
{
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES))
	{
		m_nMode[0][0] = m_nMode[0][0] | TCAUTOMATICSTACK_FILTERMODE_BYLIMITENTRIES;
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT), (m_nLimitation[0] = TCAUTOMATICSTACKSETTINGSFILTERINGPAGE_DEFAULTENTRYLIMITATION));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT)->SetFocus();
	}
	else
	{
		m_nMode[0][0] &= ~TCAUTOMATICSTACK_FILTERMODE_BYLIMITENTRIES;
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT), (m_nLimitation[0] = 0));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSortByReleaseTime()
{
	m_nMode[1][0] = (m_nMode[1][0] & ~TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) | TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSortByExecutionTime()
{
	m_nMode[1][0] = (m_nMode[1][0] & ~TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME) | TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYRELEASETIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_BYEXECUTIONTIME, TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSortOrderLatestFirst()
{
	m_nMode[1][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_SORTING_ORDER_LATESTFIRST)) ? (m_nMode[1][0] | TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST) : (m_nMode[1][0] & ~TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSelchangeTelecommandSubSystems()
{
	CString  szSubSystem;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEMS)->GetWindowText(szSubSystem);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCAutomaticStackSettingsFilteringPage::OnSelchangeTelecommandSubSystemList()
{
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SUBSYSTEM_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
}

void CTCAutomaticStackSettingsFilteringPage::OnSelchangeVerificationStage()
{
	CString  szStage;

	EnumVerificationStates();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->GetWindowText(szStage);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE, ((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED))) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) && (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED))) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) && (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED))) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) && (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED))) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) && (m_nMode[0][0] & (TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)))) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED) : (((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED) : (((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN) : (((szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED)) || (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION) && (m_nMode[0][0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED))) ? STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNVERIFIED) : EMPTYSTRING))))));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSelchangeVerificationState()
{
	CString  szStage;
	CString  szState;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STAGE)->GetWindowText(szStage);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATION_STATE_NAME)->GetWindowText(szState);
	m_nMode[0][0] &= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION)) ? ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED) : m_nMode[0][0];
	m_nMode[0][0] &= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)) ? ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED) : m_nMode[0][0];
	m_nMode[0][0] &= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START)) ? ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED) : m_nMode[0][0];
	m_nMode[0][0] &= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS)) ? ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED) : m_nMode[0][0];
	m_nMode[0][0] &= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION)) ? ~(TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN | TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED) : m_nMode[0][0];
	m_nMode[0][0] |= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_TRANSMISSION)) ? ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED : TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED) : 0;
	m_nMode[0][0] |= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_ACCEPTANCE)) ? ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN : TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED))) : 0;
	m_nMode[0][0] |= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_START)) ? ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN : TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED))) : 0;
	m_nMode[0][0] |= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_PROGRESS)) ? ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN : TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED))) : 0;
	m_nMode[0][0] |= (szStage == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTAGE_COMPLETION)) ? ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_PASSED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_FAILED)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED : ((szState == STRING(IDS_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_VERIFICATIONSTATE_UNKNOWN)) ? TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN : TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED))) : 0;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnSpinchangeLimitationCount()
{
	m_nLimitation[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_LIMITATION_ENTRIES_COUNT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnEditchangeTelecommandTypeName()
{
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_ITEM_NAME)->GetWindowText(m_szTelecommand[0][0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsFilteringPage::OnEditchangeTelecommandTypeSequence()
{
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_FILTERINGPAGE_TELECOMMAND_SEQUENCE_NAME)->GetWindowText(m_szTelecommand[1][0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPlanningPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsPlanningPage, CLocalePropertyPage)

CTCAutomaticStackSettingsPlanningPage::CTCAutomaticStackSettingsPlanningPage() : CLocalePropertyPage(CTCAutomaticStackSettingsPlanningPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsPlanningPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsPlanningPage::Initialize()
{
	CComputerToken  cComputerToken;

	if (GetParentDisplay()->GetPlanningOptions(m_szComputer[0][0][0], m_szComputer[0][1][0], m_nOptions[0][0], m_tPeriod[0], m_szAudition[0], m_szNotification[0], m_szComputer[1][0][0], m_szComputer[1][1][0], m_nOptions[1][0]))
	{
		m_szComputer[0][0][0] = (m_szComputer[0][0][0].IsEmpty()) ? cComputerToken.GetComputerName() : m_szComputer[0][0][0];
		m_szComputer[1][0][0] = (m_szComputer[1][0][0].IsEmpty()) ? cComputerToken.GetComputerName() : m_szComputer[1][0][0];
		m_szComputer[0][0][1] = m_szComputer[0][0][0];
		m_szComputer[0][1][1] = m_szComputer[0][1][0];
		m_szComputer[1][0][1] = m_szComputer[1][0][0];
		m_szComputer[1][1][1] = m_szComputer[1][1][0];
		m_szAudition[1] = m_szAudition[0];
		m_szNotification[1] = m_szNotification[0];
		m_nOptions[0][1] = m_nOptions[0][0];
		m_nOptions[1][1] = m_nOptions[1][0];
		m_tPeriod[1] = m_tPeriod[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsPlanningPage::GetOptions(CString &szMissionPlannerComputer, CString &szMissionPlannerBackupComputer, UINT &nMissionPlannerOptions, CTimeSpan &tMissionPlannerPeriod, CString &szMissionPlannerAudition, CString &szMissionPlannerNotification, CString &szFlightDynamicsComputer, CString &szFlightDynamicsBackupComputer, UINT &nFlightDynamicsOptions) CONST
{
	szMissionPlannerComputer = m_szComputer[0][0][0];
	szMissionPlannerBackupComputer = m_szComputer[0][1][0];
	szMissionPlannerAudition = m_szAudition[0];
	szMissionPlannerNotification = m_szNotification[0];
	nMissionPlannerOptions = m_nOptions[0][0];
	tMissionPlannerPeriod = m_tPeriod[0];
	szFlightDynamicsComputer = m_szComputer[1][0][0];
	szFlightDynamicsBackupComputer = m_szComputer[1][1][0];
	nFlightDynamicsOptions = m_nOptions[1][0];
	return Check(FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsPlanningPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsPlanningPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

BOOL CTCAutomaticStackSettingsPlanningPage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
	}
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsPlanningPage::EnumAuditions()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumAuditionProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsPlanningPage::EnumNotifications()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumNotificationProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackSettingsPlanningPage::ShowPlanningDetails()
{
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD), m_tPeriod[0].GetTotalHours());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szComputer[0][0][0]));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szComputer[0][1][0]));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szComputer[1][0][0]));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szComputer[1][1][0]));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szAudition[0]));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szNotification[0]));
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER, (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER, (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY, (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_MANUALIMPORT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY, (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_AUTOMATICIMPORT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_REPORTNOTHING) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_REPORTFAILURES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION, (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION, (SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_AUTOMATICALLY, (m_nOptions[1][0] & TCAUTOMATICSTACK_PLANNINGOPTION_PERFORMAUTOMATICSYNCHRONIZATION) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_MANUALLY, (m_nOptions[1][0] & TCAUTOMATICSTACK_PLANNINGOPTION_ALLOWMANUALSYNCHRONIZATION) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_ACTION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER));
}

VOID CTCAutomaticStackSettingsPlanningPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_AUTOMATICALLY, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_MANUALLY, bCheck);
}

BOOL CTCAutomaticStackSettingsPlanningPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_szComputer[0][0][0].CompareNoCase(m_szComputer[0][0][1]) || m_szComputer[0][1][0].CompareNoCase(m_szComputer[0][1][1]) || m_szComputer[1][0][0].CompareNoCase(m_szComputer[1][0][1]) || m_szComputer[1][1][0].CompareNoCase(m_szComputer[1][1][1]) || m_nOptions[0][0] != m_nOptions[0][1] || m_nOptions[1][0] != m_nOptions[1][1] || m_tPeriod[0] != m_tPeriod[1] || m_szAudition[0] != m_szAudition[1] || m_szNotification[0] != m_szNotification[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCAutomaticStackSettingsPlanningPage::Check(BOOL bAll) CONST
{
	CString  szComputer[2][2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER)->GetWindowText(szComputer[0][0]);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER)->GetWindowText(szComputer[0][1]);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER)->GetWindowText(szComputer[1][0]);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER)->GetWindowText(szComputer[1][1]);
		return((!szComputer[0][0].IsEmpty() && !szComputer[1][0].IsEmpty() && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER) || !szComputer[0][1].IsEmpty()) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER) || !szComputer[1][1].IsEmpty()) && szComputer[0][0].CompareNoCase(szComputer[0][1]) && szComputer[1][0].CompareNoCase(szComputer[1][1]) && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION)) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION) || GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION)->SendMessage(CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTCAutomaticStackSettingsPlanningPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsPlanningPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsPlanningPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsPlanningPage)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER, OnUseMissionPlannerBackupComputer)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY, OnMissionPlannerImportManually)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY, OnMissionPlannerImportAutomatically)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, OnMissionPlannerReportNothing)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, OnMissionPlannerReportEverything)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, OnMissionPlannerReportFailures)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION, OnMissionPlannerUseAudition)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION, OnMissionPlannerUseNotification)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER, OnUseFlightDynamicsBackupComputer)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_AUTOMATICALLY, OnFlightDynamicsSynchronizationAutomatically)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_MANUALLY, OnFlightDynamicsSynchronizationManually)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, OnEditchangeMissionPlannerComputer)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, OnEditchangeMissionPlannerBackupComputer)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, OnEditchangeFlightDynamicsComputer)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, OnEditchangeFlightDynamicsBackupComputer)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, OnSelchangeMissionPlannerComputer)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, OnSelchangeMissionPlannerBackupComputer)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, OnSelchangeMissionPlannerAudition)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, OnSelchangeMissionPlannerNotification)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, OnSelchangeFlightDynamicsComputer)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, OnSelchangeFlightDynamicsBackupComputer)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD, OnSpinchangeMissionPlannerImportPeriod)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPlanningPage message handlers

BOOL CTCAutomaticStackSettingsPlanningPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD), TCAUTOMATICSTACKSETTINGSPLANNINGPAGE_MINIMUMPERIOD, TCAUTOMATICSTACKSETTINGSPLANNINGPAGE_MAXIMUMPERIOD);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_AUTOMATICALLY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_MANUALLY)->EnableWindow();
	EnumComputers();
	EnumAuditions();
	EnumNotifications();
	ShowPlanningDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackSettingsPlanningPage::OnUseMissionPlannerBackupComputer()
{
	m_szComputer[0][1][0].Empty();
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_USEBACKUPCOMPUTER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerImportManually()
{
	m_nOptions[0][0] = (m_nOptions[0][0] & ~TCAUTOMATICSTACK_PLANNINGOPTION_AUTOMATICIMPORT) | TCAUTOMATICSTACK_PLANNINGOPTION_MANUALIMPORT;
	m_tPeriod[0] = (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_AUTOMATICIMPORT) ? m_tPeriod[0] : 0;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerImportAutomatically()
{
	m_nOptions[0][0] = (m_nOptions[0][0] & ~TCAUTOMATICSTACK_PLANNINGOPTION_MANUALIMPORT) | TCAUTOMATICSTACK_PLANNINGOPTION_AUTOMATICIMPORT;
	m_tPeriod[0] = (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_AUTOMATICIMPORT) ? TCAUTOMATICSTACKSETTINGSPLANNINGPAGE_DEFAULTPERIOD*SECONDSPERHOUR : 0;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_MANUALLY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_AUTOMATICALLY, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD), TCAUTOMATICSTACKSETTINGSPLANNINGPAGE_DEFAULTPERIOD);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerReportNothing()
{
	m_nOptions[0][0] = (m_nOptions[0][0] & ~(TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTFAILURES)) | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTNOTHING;
	m_szAudition[0] = (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING) ? m_szAudition[0] : EMPTYSTRING;
	m_szNotification[0] = (m_nOptions[0][0] & TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING) ? m_szNotification[0] : EMPTYSTRING;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION, FALSE);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_ACTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerReportEverything()
{
	m_nOptions[0][0] = (m_nOptions[0][0] & ~(TCAUTOMATICSTACK_PLANNINGOPTION_REPORTNOTHING | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTFAILURES)) | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_ACTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerReportFailures()
{
	m_nOptions[0][0] = (m_nOptions[0][0] & ~(TCAUTOMATICSTACK_PLANNINGOPTION_REPORTNOTHING | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTEVERYTHING)) | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTFAILURES;
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTHING, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_EVERYTHING, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_FAILURES, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_ACTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerUseAudition()
{
	m_szAudition[0].Empty();
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USEAUDITION));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnMissionPlannerUseNotification()
{
	m_szNotification[0].Empty();
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_USENOTIFICATION));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnUseFlightDynamicsBackupComputer()
{
	m_szComputer[1][1][0].Empty();
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_USEBACKUPCOMPUTER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnFlightDynamicsSynchronizationAutomatically()
{
	m_nOptions[1][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_AUTOMATICALLY)) ? (m_nOptions[1][0] | TCAUTOMATICSTACK_PLANNINGOPTION_PERFORMAUTOMATICSYNCHRONIZATION) : (m_nOptions[1][0] & ~TCAUTOMATICSTACK_PLANNINGOPTION_PERFORMAUTOMATICSYNCHRONIZATION);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnFlightDynamicsSynchronizationManually()
{
	m_nOptions[1][0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_OPTIONS_SYNCHRONIZATION_MANUALLY)) ? (m_nOptions[1][0] | TCAUTOMATICSTACK_PLANNINGOPTION_ALLOWMANUALSYNCHRONIZATION) : (m_nOptions[1][0] & ~TCAUTOMATICSTACK_PLANNINGOPTION_ALLOWMANUALSYNCHRONIZATION);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnEditchangeMissionPlannerComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER)->GetWindowText(szComputer);
	m_szComputer[0][0][0] = (!szComputer.IsEmpty()) ? szComputer : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnEditchangeMissionPlannerBackupComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER)->GetWindowText(szComputer);
	m_szComputer[0][1][0] = (!szComputer.IsEmpty()) ? szComputer : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnEditchangeFlightDynamicsComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER)->GetWindowText(szComputer);
	m_szComputer[1][0][0] = (!szComputer.IsEmpty()) ? szComputer : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnEditchangeFlightDynamicsBackupComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER)->GetWindowText(szComputer);
	m_szComputer[1][1][0] = (!szComputer.IsEmpty()) ? szComputer : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeMissionPlannerComputer()
{
	m_szComputer[0][0][0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_COMPUTER, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeMissionPlannerBackupComputer()
{
	m_szComputer[0][1][0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_BACKUPCOMPUTER, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeMissionPlannerAudition()
{
	m_szAudition[0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_AUDITION, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeMissionPlannerNotification()
{
	m_szNotification[0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_REPORT_NOTIFICATION, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeFlightDynamicsComputer()
{
	m_szComputer[1][0][0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_COMPUTER, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSelchangeFlightDynamicsBackupComputer()
{
	m_szComputer[1][1][0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_FLIGHTDYNAMICSSYSTEM_BACKUPCOMPUTER, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPlanningPage::OnSpinchangeMissionPlannerImportPeriod()
{
	m_tPeriod[0] = Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PLANNINGPAGE_MISSIONPLANNERSYSTEM_OPTIONS_IMPORT_PERIOD))*SECONDSPERHOUR;
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsLoggingPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsLoggingPage, CLocalePropertyPage)

CTCAutomaticStackSettingsLoggingPage::CTCAutomaticStackSettingsLoggingPage() : CLocalePropertyPage(CTCAutomaticStackSettingsLoggingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsLoggingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsLoggingPage::Initialize()
{
	if (GetParentDisplay()->GetLoggingOptions(m_nArchivalPolicy[0], m_szArchivalFileName[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0], m_nRetrievalReloadCount[0], m_bShowAsEvent[0]))
	{
		m_nArchivalPolicy[1] = m_nArchivalPolicy[0] = m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET;
		m_szArchivalFileName[1] = m_szArchivalFileName[0];
		m_dwArchivalRetention[1] = m_dwArchivalRetention[0];
		m_tArchivalRetention[1] = m_tArchivalRetention[0];
		m_szRetrievalFileName[1] = m_szRetrievalFileName[0];
		m_nRetrievalReloadCount[1] = m_nRetrievalReloadCount[0];
		m_bShowAsEvent[1] = m_bShowAsEvent[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackSettingsLoggingPage::GetOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	nArchivalPolicy = m_nArchivalPolicy[0];
	szArchivalFileName = m_szArchivalFileName[0];
	dwArchivalRetention = m_dwArchivalRetention[0];
	tArchivalRetention = m_tArchivalRetention[0];
	szRetrievalFileName = m_szRetrievalFileName[0];
	nRetrievalReloadCount = m_nRetrievalReloadCount[0];
	bShowAsEvent = m_bShowAsEvent[0];
	return Check(FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsLoggingPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsLoggingPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCAutomaticStackSettingsLoggingPage::ShowLoggingDetails()
{
	for (Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_MINIMUMRELOADCOUNT, TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_MAXIMUMRELOADCOUNT), Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_MINIMUMRETRIEVALSTOPCOUNT, TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_MAXIMUMRETRIEVALSTOPCOUNT), CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME, TRUE), CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE), CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, m_bShowAsEvent[0]); m_nRetrievalReloadCount[0] > 0; )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), m_nRetrievalReloadCount[0]);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD, TRUE);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	SetTimer(TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_TIMERID, TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_TIMEOUT, NULL);
	RetrieveLogEntries();
}

VOID CTCAutomaticStackSettingsLoggingPage::ShowLogEntries(CONST CTCLogEntries &pEntries)
{
	INT  nEntry;
	INT  nEntries;
	CTCLogEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)pEntries.GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pEntry = pEntries.GetAt(nEntry)))
		{
			ShowLogEntry(pEntry, nEntry);
			continue;
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST), nEntries);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackSettingsLoggingPage::ShowLogEntry(CONST CTCLogEntry *pEntry, INT nIndex)
{
	INT  nColumn;
	INT  nColumns;
	CString  szEntry;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME); )
		{
			szEntry = pEntry->GetName();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION); )
		{
			szEntry = pEntry->GetDescription();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY); )
		{
			szEntry = pEntry->GetActivity();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME); )
		{
			szEntry = pEntry->GetTime().FormatGmt();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_USER); )
		{
			szEntry = pEntry->GetUser();
			break;
		}
		if ((nIndex >= SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) || nIndex < 0) && !nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) : nIndex, szEntry);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)(SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) - 1) : nIndex, nColumn, szEntry);
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSettingsLoggingPage::RetrieveLogEntries()
{
	CTCLogEntries  pEntries;

	if (RetrieveLogEntries(pEntries))
	{
		ShowLogEntries(pEntries);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackSettingsLoggingPage::RetrieveLogEntries(CTCLogEntries &pEntries)
{
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	for (pEntries.RemoveAll(); IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME); )
	{
		if ((nCount = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)) : 0) > 0)
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.SeekFromEnd(nCount))
				{
					do
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry) != (CTCLogEntry *)NULL)
							{
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					} while (TRUE);
					for (nEntry = 0, nEntries = (INT)(pEntries.GetSize() - nCount); nEntry < nEntries; nEntry++)
					{
						if ((pEntry = pEntries.GetAt(nEntry)))
						{
							pEntries.RemoveAt(nEntry);
							delete pEntry;
							nEntries--;
							nEntry--;
						}
					}
					m_cRetrievalFile.Close();
					return TRUE;
				}
				if (m_cRetrievalFile.IsEmpty())
				{
					m_cRetrievalFile.Close();
					return TRUE;
				}
				m_cRetrievalFile.Close();
			}
			return FALSE;
		}
		return TRUE;
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL))
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
		{
			for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)), nCount = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)); m_cRetrievalFile.SeekTo(tStartTime); )
			{
				do
				{
					if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && tLogTime <= tStopTime)
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && nCount > pEntries.GetSize())
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
					}
					break;
				} while (TRUE);
				m_cRetrievalFile.Close();
				return TRUE;
			}
			if (m_cRetrievalFile.IsEmpty())
			{
				m_cRetrievalFile.Close();
				return TRUE;
			}
			m_cRetrievalFile.Close();
		}
	}
	return FALSE;
}

VOID CTCAutomaticStackSettingsLoggingPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, bCheck);
}

BOOL CTCAutomaticStackSettingsLoggingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1]) || m_nRetrievalReloadCount[0] != m_nRetrievalReloadCount[1] || m_bShowAsEvent[0] != m_bShowAsEvent[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCAutomaticStackSettingsLoggingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTCAutomaticStackSettingsLoggingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsLoggingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSettingsLoggingPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsLoggingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsLoggingPage)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME, OnRealtime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD, OnReloadCount)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, OnStopAtTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, OnStopAtLimit)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, OnStopAtEnd)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE, OnRetrieve)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT, OnShowAsEvent)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT, OnSpinchangeReloadCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsLoggingPage message handlers

BOOL CTCAutomaticStackSettingsLoggingPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_USER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_DESCRIPTION) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_ACTIVITY)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_TITLEITEM_TIME)) ? (rColumns.Width() / 4) : (rColumns.Width() / 5))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_MODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT)->EnableWindow();
	ShowLoggingDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackSettingsLoggingPage::OnRealtime()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
}

void CTCAutomaticStackSettingsLoggingPage::OnHistorical()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), CTimeKey(CTime::GetCurrentTime().GetTime() - SECONDSPERHOUR));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
}

void CTCAutomaticStackSettingsLoggingPage::OnReloadCount()
{
	m_nRetrievalReloadCount[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD)) ? TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT : 0;
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT), TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_DEFAULTRELOADCOUNT);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLoggingPage::OnStopAtTime()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), CTimeKey(CTime::GetCurrentTime().GetTime()));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->SetFocus();
}

void CTCAutomaticStackSettingsLoggingPage::OnStopAtLimit()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_DEFAULTRETRIEVALSTOPCOUNT);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->SetFocus();
}

void CTCAutomaticStackSettingsLoggingPage::OnStopAtEnd()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
}

void CTCAutomaticStackSettingsLoggingPage::OnOptions()
{
	CTCAutomaticStackLoggingOptionsDialog  cLoggingOptionsDialog;

	for (cLoggingOptionsDialog.Create(this, m_szArchivalFileName[0], m_nArchivalPolicy[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0]); m_nArchivalPolicy[0] & LOGFILE_POLICY_RESET; )
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			m_cRetrievalFile.Reset();
			m_cRetrievalFile.Close();
			RetrieveLogEntries();
		}
		m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RESET;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLoggingPage::OnRetrieve()
{
	CHourglassCursor  cCursor;

	RetrieveLogEntries();
}

void CTCAutomaticStackSettingsLoggingPage::OnShowAsEvent()
{
	m_bShowAsEvent[0] = IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_SHOWASEVENT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLoggingPage::OnSpinchangeReloadCount()
{
	m_nRetrievalReloadCount[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_RELOAD_COUNT));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsLoggingPage::OnSpinchangeStartTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME), tTime[0]);
		break;
	}
}

void CTCAutomaticStackSettingsLoggingPage::OnSpinchangeStopTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_HISTORICAL_STARTTIME), tTime[1]);
		break;
	}
}

void CTCAutomaticStackSettingsLoggingPage::OnTimer(UINT_PTR nEventID)
{
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	if (nEventID == TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_TIMERID)
	{
		if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_LOGGINGPAGE_REALTIME))
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.IsWatched() || m_cRetrievalFile.BeginWatch())
				{
					if (m_cRetrievalFile.Watch(nLogData))
					{
						do
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (pEntry->Unmap(nLogData)) ShowLogEntry(pEntry);
								delete pEntry;
							}
						} while (m_cRetrievalFile.Watch(nLogData));
					}
				}
				m_cRetrievalFile.Close();
			}
		}
	}
	CLocalePropertyPage::OnTimer(nEventID);
}

void CTCAutomaticStackSettingsLoggingPage::OnDestroy()
{
	if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
	{
		m_cRetrievalFile.EndWatch();
		m_cRetrievalFile.Close();
	}
	KillTimer(TCAUTOMATICSTACKSETTINGSLOGGINGPAGE_TIMERID);
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPrintingComments

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsPrintingComments, CEdit)

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsPrintingComments, CEdit)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsPrintingComments)
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPrintingComments message handlers

void CTCAutomaticStackSettingsPrintingComments::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_TAB)
	{
		if (!HIBYTE(GetKeyState(VK_SHIFT)))
		{
			GetParent()->GetParent()->GetNextDlgTabItem(GetParent())->SetFocus();
			return;
		}
	}
	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPrintingPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsPrintingPage, CLocalePropertyPage)

CTCAutomaticStackSettingsPrintingPage::CTCAutomaticStackSettingsPrintingPage() : CLocalePropertyPage(CTCAutomaticStackSettingsPrintingPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSettingsPrintingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCAutomaticStackSettingsPrintingPage::Initialize()
{
	return((GetParentDisplay()->GetPrintJobs(m_pJobs[0])) ? m_pJobs[1].Copy(&m_pJobs[0]) : FALSE);
}

BOOL CTCAutomaticStackSettingsPrintingPage::GetJobs(CTCAutomaticStackPrintJobs &pJobs) CONST
{
	return((pJobs.Copy(&m_pJobs[0])) ? Check(FALSE) : FALSE);
}

CTCAutomaticStackSettingsDialog *CTCAutomaticStackSettingsPrintingPage::GetParentDialog() CONST
{
	return((CTCAutomaticStackSettingsDialog *)CLocalePropertyPage::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsPrintingPage::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)GetParentDialog()->GetParentDisplay());
}

VOID CTCAutomaticStackSettingsPrintingPage::ShowJobInfo()
{
	UINT  nMode;
	UINT  nRange[2];
	CTimeKey  tRange[2];
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL, ((nMode = pJobInfo->GetPrintMode()) & TCAUTOMATICSTACK_PRINT_NORMALSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED, (nMode & TCAUTOMATICSTACK_PRINT_TIMETAGGEDSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, (nMode & TCAUTOMATICSTACK_PRINT_ONSTACKITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, (nMode & TCAUTOMATICSTACK_PRINT_DISPATCHEDITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED, (nMode & TCAUTOMATICSTACK_PRINT_RELEASEDITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, (nMode & TCAUTOMATICSTACK_PRINT_NOTRELEASEDITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, (nMode & TCAUTOMATICSTACK_PRINT_FAILEDRELEASEITEMS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, (nMode & TCAUTOMATICSTACK_PRINT_ITEMRANGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, (nMode & TCAUTOMATICSTACK_PRINT_TIMERANGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (nMode & TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pJobInfo->GetProfile()));
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[0] : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), (pJobInfo->GetPrintRange(tRange[0], tRange[1])) ? tRange[1] : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[0] : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), (pJobInfo->GetPrintRange(nRange[0], nRange[1])) ? nRange[1] : 0);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(pJobInfo->GetComments());
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!pJobInfo->GetComments().IsEmpty());
		return;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(FALSE);
}

CTCAutomaticStackPrintJobInfo *CTCAutomaticStackSettingsPrintingPage::FindJobInfo() CONST
{
	return m_pJobs[0].GetAt(m_pJobs[0].Find(STRING(IDS_PRINTJOB_DEFAULTNAME)));
}

BOOL CTCAutomaticStackSettingsPrintingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pJobs[0].Compare(&m_pJobs[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTCAutomaticStackSettingsPrintingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE)->SendMessage(CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED)) && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER) || Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)) <= Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH))) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME) || Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)))) : CLocalePropertyPage::Check()) : TRUE);
}

void CTCAutomaticStackSettingsPrintingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSettingsPrintingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSettingsPrintingPage::PostNcDestroy()
{
	m_pJobs[0].RemoveAll();
	m_pJobs[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsPrintingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsPrintingPage)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL, OnPrintNormalStack)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED, OnPrintTimeTaggedStack)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK, OnPrintOnStackItems)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED, OnPrintDispatchedItems)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED, OnPrintReleasedItems)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED, OnPrintNotReleasedItems)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE, OnPrintFailedReleaseItems)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER, OnPrintItemRange)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME, OnPrintTimeRange)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, OnResetComments)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE, OnSelchangeProfile)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT, OnEditchangeComments)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW, OnSpinchangeLowItemRange)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH, OnSpinchangeHighItemRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START, OnSpinchangeStartTimeRange)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP, OnSpinchangeStopTimeRange)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsPrintingPage message handlers

BOOL CTCAutomaticStackSettingsPrintingPage::OnInitDialog()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	for (nProfile = 0, nProfiles = (EnumPrintProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0, Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MAXIMUMITEMRANGE), m_wndComments.SubclassWindow(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetSafeHwnd()); nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	ShowJobInfo();
	return TRUE;
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintNormalStack()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_NORMAL)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_NORMALSTACK) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_NORMALSTACK);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintTimeTaggedStack()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STACK_TIMETAGGED)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_TIMETAGGEDSTACK) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_TIMETAGGEDSTACK);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintOnStackItems()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_ONSTACK)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_ONSTACKITEMS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_ONSTACKITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintDispatchedItems()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_DISPATCHED)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_DISPATCHEDITEMS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_DISPATCHEDITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintReleasedItems()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_RELEASED)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_RELEASEDITEMS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_RELEASEDITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintNotReleasedItems()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_NOTRELEASED)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_NOTRELEASEDITEMS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_NOTRELEASEDITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintFailedReleaseItems()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_STATUS_FAILEDRELEASE)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_FAILEDRELEASEITEMS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_FAILEDRELEASEITEMS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintItemRange()
{
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_ITEMRANGE);
			pJobInfo->SetPrintRange(TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE, TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
		}
		else
		{
			pJobInfo->SetPrintRange(0, 0);
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_ITEMRANGE);
		}
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW), TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_MINIMUMITEMRANGE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH), TCAUTOMATICSTACKSETTINGSPRINTINGPAGE_DEFAULTITEMRANGE);
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnPrintTimeRange()
{
	CTimeKey  tTime;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME))
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_TIMERANGE);
			pJobInfo->SetPrintRange(tTime, tTime.GetTime() + SECONDSPERHOUR);
		}
		else
		{
			pJobInfo->SetPrintRange(CTimeKey(0), CTimeKey(0));
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_TIMERANGE);
		}
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), CTimeKey(tTime.GetTime() + SECONDSPERHOUR));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_TO_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME));
	GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnSelchangeProfile()
{
	CString  szProfile;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_PROFILE)->GetWindowText(szProfile);
		pJobInfo->SetProfile(szProfile);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnSpinchangeLowItemRange()
{
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo())) pJobInfo->SetPrintRange((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnSpinchangeHighItemRange()
{
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo())) pJobInfo->SetPrintRange((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_LOW)), (UINT)Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_NUMBER_HIGH)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnSpinchangeStartTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]), tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)); tTime[0] > tRange[1]; )
		{
			tRange[1] = tTime[0];
			break;
		}
		pJobInfo->SetPrintRange(tTime[0], tRange[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP), tTime[0]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnSpinchangeStopTimeRange()
{
	CTimeKey  tTime[2];
	CTimeKey  tRange[2];
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		for (pJobInfo->GetPrintRange(tRange[0], tRange[1]), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[1] < tRange[0]; )
		{
			tRange[0] = tTime[1];
			break;
		}
		pJobInfo->SetPrintRange(tRange[0], tTime[1]);
	}
	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_STOP)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_OPTIONS_RELEASETIME_START), tTime[1]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnEditchangeComments()
{
	CString  szComments;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_COMMENTSTEXT)->GetWindowText(szComments);
		GetDlgItem(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)->EnableWindow(!szComments.IsEmpty());
		CheckDlgButton(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS, (!szComments.IsEmpty()) ? IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS) : FALSE);
		pJobInfo->SetPrintMode((IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS));
		pJobInfo->SetComments(szComments);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSettingsPrintingPage::OnResetComments()
{
	UINT  nMode;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;

	if ((pJobInfo = FindJobInfo()))
	{
		nMode = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACKSETTINGS_PRINTINGPAGE_CLEARCOMMENTS)) ? (pJobInfo->GetPrintMode() | TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS) : (pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS);
		pJobInfo->SetPrintMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsTabCtrl

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsTabCtrl, CTabCtrl)

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsTabCtrl)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsTabCtrl message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsDialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSettingsDialog, CDisplayPropertySheetDialog)

CTCAutomaticStackSettingsDialog::CTCAutomaticStackSettingsDialog() : CDisplayPropertySheetDialog()
{
	AddPage(&m_pageLayout);
	AddPage(&m_pageOperations);
	AddPage(&m_pageFiltering);
	AddPage(&m_pagePlanning);
	AddPage(&m_pageLogging);
	AddPage(&m_pagePrinting);
}

BOOL CTCAutomaticStackSettingsDialog::GetColumns(UINT nPane, CUIntArray &nColumns) CONST
{
	return m_pageLayout.GetColumns(nPane, nColumns);
}

BOOL CTCAutomaticStackSettingsDialog::GetTitleFont(UINT nPane, LPLOGFONT pTitleFont) CONST
{
	return m_pageLayout.GetTitleFont(nPane, pTitleFont);
}

BOOL CTCAutomaticStackSettingsDialog::GetItemsFont(UINT nPane, LPLOGFONT pItemsFont) CONST
{
	return m_pageLayout.GetItemsFont(nPane, pItemsFont);
}

BOOL CTCAutomaticStackSettingsDialog::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	return m_pageLayout.GetGridBackgroundColor(nPane, nColor);
}

BOOL CTCAutomaticStackSettingsDialog::GetToolTipMode(BOOL &bEnable) CONST
{
	return m_pageLayout.GetToolTipMode(bEnable);
}

BOOL CTCAutomaticStackSettingsDialog::IsLayoutModified() CONST
{
	return m_pageLayout.IsModified();
}

BOOL CTCAutomaticStackSettingsDialog::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return m_pageOperations.GetListOptions(nArguments, bAll);
}

BOOL CTCAutomaticStackSettingsDialog::GetListCheckOptions(UINT &nFlags, INT &nCount) CONST
{
	return m_pageOperations.GetListCheckOptions(nFlags, nCount);
}

BOOL CTCAutomaticStackSettingsDialog::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return m_pageOperations.GetMiscellaneousOptions(nOptions);
}

BOOL CTCAutomaticStackSettingsDialog::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pageOperations.GetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackSettingsDialog::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pageOperations.GetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackSettingsDialog::GetMasterManualModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetMasterManualModeFlag(bEnabled);
}

BOOL CTCAutomaticStackSettingsDialog::GetReleaseWaitModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetReleaseWaitModeFlag(bEnabled);
}

BOOL CTCAutomaticStackSettingsDialog::GetAutoRejectionModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetAutoRejectionModeFlag(bEnabled);
}

BOOL CTCAutomaticStackSettingsDialog::GetInterlockModeFlag(BOOL &bEnabled) CONST
{
	return m_pageOperations.GetInterlockModeFlag(bEnabled);
}

BOOL CTCAutomaticStackSettingsDialog::GetDisabledStateFlag(BOOL &bFlag) CONST
{
	return m_pageOperations.GetDisabledStateFlag(bFlag);
}

BOOL CTCAutomaticStackSettingsDialog::IsOperationsModified() CONST
{
	return m_pageOperations.IsModified();
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterMode(UINT &nMode) CONST
{
	return m_pageFiltering.GetMode(nMode);
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterTelecommandName(CString &szName) CONST
{
	return m_pageFiltering.GetTelecommandName(szName);
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	return m_pageFiltering.GetTelecommandSequence(szSequence);
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	return m_pageFiltering.GetTelecommandSubSystems(nSubSystems);
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterLimitation(UINT &nCount) CONST
{
	return m_pageFiltering.GetLimitation(nCount);
}

BOOL CTCAutomaticStackSettingsDialog::GetFilterSortMode(UINT &nMode) CONST
{
	return m_pageFiltering.GetSortMode(nMode);
}

BOOL CTCAutomaticStackSettingsDialog::IsFilteringModified() CONST
{
	return m_pageFiltering.IsModified();
}

BOOL CTCAutomaticStackSettingsDialog::GetPlanningOptions(CString &szMissionPlannerComputer, CString &szMissionPlannerBackupComputer, UINT &nMissionPlannerOptions, CTimeSpan &tMissionPlannerPeriod, CString &szMissionPlannerAudition, CString &szMissionPlannerNotification, CString &szFlightDynamicsComputer, CString &szFlightDynamicsBackupComputer, UINT &nFlightDynamicsOptions) CONST
{
	return m_pagePlanning.GetOptions(szMissionPlannerComputer, szMissionPlannerBackupComputer, nMissionPlannerOptions, tMissionPlannerPeriod, szMissionPlannerAudition, szMissionPlannerNotification, szFlightDynamicsComputer, szFlightDynamicsBackupComputer, nFlightDynamicsOptions);
}

BOOL CTCAutomaticStackSettingsDialog::IsPlanningModified() CONST
{
	return m_pagePlanning.IsModified();
}

BOOL CTCAutomaticStackSettingsDialog::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	return m_pageLogging.GetOptions(nArchivalPolicy, szArchivalFileName, dwArchivalRetention, tArchivalRetention, szRetrievalFileName, nRetrievalReloadCount, bShowAsEvent);
}

BOOL CTCAutomaticStackSettingsDialog::IsLoggingModified() CONST
{
	return m_pageLogging.IsModified();
}

BOOL CTCAutomaticStackSettingsDialog::GetPrintJobs(CTCAutomaticStackPrintJobs &pPrintJobs) CONST
{
	return m_pagePrinting.GetJobs(pPrintJobs);
}

BOOL CTCAutomaticStackSettingsDialog::IsPrintingModified() CONST
{
	return m_pagePrinting.IsModified();
}

CTCAutomaticStackWnd *CTCAutomaticStackSettingsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayPropertySheetDialog::GetParentDisplay());
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSettingsDialog, CDisplayPropertySheetDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSettingsDialog message handlers

BOOL CTCAutomaticStackSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayPropertySheetDialog::OnInitDialog();
	SetTitle(STRING(IDS_TCAUTOMATICSTACKSETTINGSDIALOG_TITLE));
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTCAutomaticStackSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	ReportEvent((!GetParentDisplay()->OnCloseSettingsDialog(IDOK)) ? SYSTEM_WARNING_TCAUTOMATICSTACK_SETUP_FAILURE : SYSTEM_NOERROR);
	CDisplayPropertySheetDialog::OnOK();
}

void CTCAutomaticStackSettingsDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->OnCloseSettingsDialog(IDCANCEL);
	CDisplayPropertySheetDialog::OnCancel();
}

BOOL CTCAutomaticStackSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackUserPermissionsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackUserPermissionsDialog, CDisplayDialog)

CTCAutomaticStackUserPermissionsDialog::CTCAutomaticStackUserPermissionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackUserPermissionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackUserPermissionsDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackUserPermissionsDialog::IDD);
}

BOOL CTCAutomaticStackUserPermissionsDialog::Initialize()
{
	if (GetParentDisplay()->GetUserPermissions(m_nPermissions[0]))
	{
		m_nPermissions[1] = m_nPermissions[0];
		return TRUE;
	}
	return FALSE;
}

CTCAutomaticStackOperationsPage *CTCAutomaticStackUserPermissionsDialog::GetParentDialog() CONST
{
	return((CTCAutomaticStackOperationsPage *)CDisplayDialog::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackUserPermissionsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackUserPermissionsDialog::ShowPermissions()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_CHECKS, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_FLAGS, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_RELEASETIME, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_INTERLOCKS, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME_EXECUTIONTIME, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_PARAMETERVALUES, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_TEMPLATES, (m_nPermissions[0] & TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) ? TRUE : FALSE);
}

VOID CTCAutomaticStackUserPermissionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_CHECKS, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_FLAGS, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_RELEASETIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_INTERLOCKS, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME_EXECUTIONTIME, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_PARAMETERVALUES, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_TEMPLATES, bCheck);
}

BOOL CTCAutomaticStackUserPermissionsDialog::IsModified() CONST
{
	return((m_nPermissions[0] != m_nPermissions[1]) ? TRUE : FALSE);
}

void CTCAutomaticStackUserPermissionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackUserPermissionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackUserPermissionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackUserPermissionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_CHECKS, OnReleaseConstraintsChecks)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_FLAGS, OnReleaseConstraintsFlags)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_RELEASETIME, OnReleaseConstraintsReleaseTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_INTERLOCKS, OnReleaseConstraintsInterlocks)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME_EXECUTIONTIME, OnOnBoardExecutionTimesExecutionTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_PARAMETERVALUES, OnMiscellaneousParameterValues)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_TEMPLATES, OnMiscellaneousTemplates)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackUserPermissionsDialog message handlers

BOOL CTCAutomaticStackUserPermissionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_COMMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_CHECKS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_FLAGS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_RELEASETIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME_EXECUTIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_PARAMETERVALUES)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_TEMPLATES)->EnableWindow();
	ShowPermissions();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackUserPermissionsDialog::OnReleaseConstraintsChecks()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_CHECKS)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnReleaseConstraintsFlags()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_FLAGS)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnReleaseConstraintsReleaseTime()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_RELEASETIME)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnReleaseConstraintsInterlocks()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_RELEASECONSTRAINTS_INTERLOCKS)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnOnBoardExecutionTimesExecutionTime()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_ONBOARDEXECUTIONTIME_EXECUTIONTIME)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnMiscellaneousParameterValues()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_PARAMETERVALUES)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnMiscellaneousTemplates()
{
	m_nPermissions[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_USERPERMISSIONS_MISCELLANEOUS_TEMPLATES)) ? (m_nPermissions[0] | TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : (m_nPermissions[0] & ~TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackUserPermissionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SetUserPermissions(m_nPermissions[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackUserPermissionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKUSERPERMISSIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackUserPermissionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKUSERPERMISSIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackAlertOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackAlertOptionsDialog, CDisplayDialog)

CTCAutomaticStackAlertOptionsDialog::CTCAutomaticStackAlertOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackAlertOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackAlertOptionsDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackAlertOptionsDialog::IDD);
}

BOOL CTCAutomaticStackAlertOptionsDialog::Initialize()
{
	if (GetParentDisplay()->GetAlertOptions(m_nTypes[0], m_szAuditions[0], m_szNotifications[0], m_nAcknowledgeColors[0], m_bAcknowledgments[0]))
	{
		m_nTypes[1].Copy(m_nTypes[0]);
		m_szAuditions[1].Copy(m_szAuditions[0]);
		m_szNotifications[1].Copy(m_szNotifications[0]);
		m_nAcknowledgeColors[1].Copy(m_nAcknowledgeColors[0]);
		m_bAcknowledgments[1].Copy(m_bAcknowledgments[0]);
		return TRUE;
	}
	return FALSE;
}

CTCAutomaticStackOperationsPage *CTCAutomaticStackAlertOptionsDialog::GetParentDialog() CONST
{
	return((CTCAutomaticStackOperationsPage *)CDisplayDialog::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackAlertOptionsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackAlertOptionsDialog::EnumTypes()
{
	if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_INSERTSTRING, TCAUTOMATICSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_ALERTTYPE_TELECOMMANDRELEASEFAILURE)) >= 0 && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_INSERTSTRING, TCAUTOMATICSTACK_ALERTTYPE_INTERLOCKFAILURE, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_ALERTTYPE_INTERLOCKFAILURE)) >= 0)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_ALERTTYPE_TELECOMMANDRELEASEFAILURE)));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackAlertOptionsDialog::EnumAuditions()
{
	INT  nAudition;
	INT  nAuditions;
	CStringArray  szAuditions;

	for (nAudition = 0, nAuditions = (EnumAuditionProfiles(szAuditions)) ? (INT)szAuditions.GetSize() : 0; nAudition < nAuditions; nAudition++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szAuditions.GetAt(nAudition));
		continue;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE));
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackAlertOptionsDialog::EnumNotifications()
{
	INT  nNotification;
	INT  nNotifications;
	CStringArray  szNotifications;

	for (nNotification = 0, nNotifications = (EnumNotificationProfiles(szNotifications)) ? (INT)szNotifications.GetSize() : 0; nNotification < nNotifications; nNotification++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szNotifications.GetAt(nNotification));
		continue;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE));
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackAlertOptionsDialog::ShowAlertDetails()
{
	INT  nPos;
	INT  nAlertType;
	CString  szAudition;
	CString  szNotification[2];

	for (szNotification[0] = ((nAlertType = FindAlertType()) >= 0) ? m_szNotifications[0].GetAt(nAlertType) : EMPTYSTRING, SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_RESETCONTENT); !szNotification[0].IsEmpty(); )
	{
		for (szNotification[1] = szNotification[0]; (nPos = szNotification[0].Find(TAB)) >= 0; )
		{
			szNotification[1] = szNotification[0].Left(nPos);
			szNotification[0] = szNotification[0].Mid(nPos + 1);
			break;
		}
		for (szNotification[0] = (nPos >= 0) ? szNotification[0] : EMPTYSTRING; SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[1]) < 0; )
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[1]);
			break;
		}
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szAudition = (nAlertType >= 0 && !m_szAuditions[0].GetAt(nAlertType).IsEmpty()) ? m_szAuditions[0].GetAt(nAlertType) : STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE))));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE)), 0));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)((nAlertType >= 0) ? m_nAcknowledgeColors[0].GetAt(nAlertType) : GetSysColor(COLOR_WINDOWTEXT)));
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, (szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE) && nAlertType >= 0) ? m_bAcknowledgments[0].GetAt(nAlertType) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR_STATIC)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification[0] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification[0]) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCAutomaticStackAlertOptionsDialog::FindAlertType() CONST
{
	INT  nType;
	INT  nTypes;
	INT  nAlertType;

	for (nType = 0, nTypes = (INT)m_nTypes[0].GetSize(), nAlertType = (INT)GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE)->SendMessage(CB_GETCURSEL); nType < nTypes; nType++)
	{
		if (m_nTypes[0].GetAt(nType) == nAlertType) break;
		continue;
	}
	return((nType < nTypes) ? nType : -1);
}

VOID CTCAutomaticStackAlertOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, bCheck);
}

BOOL CTCAutomaticStackAlertOptionsDialog::IsModified() CONST
{
	INT  nType[2];
	INT  nTypes[2];

	for (nType[0] = 0, nTypes[0] = (m_nTypes[0].GetSize() == m_nTypes[1].GetSize()) ? (INT)m_nTypes[0].GetSize() : -1; nType[0] < nTypes[0]; nType[0]++)
	{
		for (nType[1] = 0, nTypes[1] = (INT)m_nTypes[1].GetSize(); nType[1] < nTypes[1]; nType[1]++)
		{
			if (m_nTypes[0].GetAt(nType[0]) == m_nTypes[1].GetAt(nType[1])) break;
			continue;
		}
		if (nType[1] == nTypes[1] || m_szAuditions[0].GetAt(nType[0]) != m_szAuditions[1].GetAt(nType[1]) || m_szNotifications[0].GetAt(nType[0]) != m_szNotifications[1].GetAt(nType[1]) || m_nAcknowledgeColors[0].GetAt(nType[0]) != m_nAcknowledgeColors[1].GetAt(nType[1]) || m_bAcknowledgments[0].GetAt(nType[0]) != m_bAcknowledgments[1].GetAt(nType[1])) break;
	}
	return((nType[0] != nTypes[0]) ? TRUE : FALSE);
}

void CTCAutomaticStackAlertOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackAlertOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackAlertOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackAlertOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, OnAuditionBlink)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD, OnAddNotification)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE, OnRemoveNotification)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL, OnRemoveAllNotifications)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, OnSelchangeType)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, OnSelchangeAudition)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, OnSelchangeAuditionColor)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, OnSelchangeNotification)
	ON_LBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, OnSelchangeNotificationList)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackAlertOptionsDialog message handlers

BOOL CTCAutomaticStackAlertOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->EnableWindow();
	EnumTypes();
	EnumAuditions();
	EnumNotifications();
	ShowAlertDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackAlertOptionsDialog::OnAuditionBlink()
{
	INT  nAlertType;
	CHourglassCursor  cCursor;

	for (; (nAlertType = FindAlertType()) >= 0; )
	{
		m_bAcknowledgments[0].SetAt(nAlertType, IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnAddNotification()
{
	INT  nIndex;
	INT  nAlertType[2];
	CString  szAudition;
	CString  szNotification;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)(szNotification = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))))) >= 0)
	{
		for (nAlertType[0] = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_GETCURSEL), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL, nIndex), szAudition = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION, CB_GETCURSEL)), szAudition = (szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? szAudition : EMPTYSTRING; (nAlertType[1] = FindAlertType()) >= 0; )
		{
			m_szNotifications[0].SetAt(nAlertType[1], (!m_szNotifications[0].GetAt(nAlertType[1]).IsEmpty()) ? (m_szNotifications[0].GetAt(nAlertType[1]) + TAB + szNotification) : szNotification);
			break;
		}
		if (nAlertType[1] < 0)
		{
			m_nTypes[0].Add(nAlertType[0]);
			m_szAuditions[0].Add(szAudition);
			m_szNotifications[0].Add(szNotification);
			m_nAcknowledgeColors[0].Add((DWORD)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
			m_bAcknowledgments[0].Add(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		}
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnRemoveNotification()
{
	INT  nPos;
	INT  nIndex;
	INT  nAlertType;
	CString  szNotification;
	CHourglassCursor  cCursor;

	for (szNotification = Listbox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST), (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL))); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_DELETESTRING, nIndex) >= 0; )
	{
		for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_SETCURSEL); (nAlertType = FindAlertType()) >= 0; )
		{
			if (m_szNotifications[0].GetAt(nAlertType) == szNotification)
			{
				if (m_szAuditions[0].GetAt(nAlertType).IsEmpty())
				{
					m_nTypes[0].RemoveAt(nAlertType);
					m_szAuditions[0].RemoveAt(nAlertType);
					m_szNotifications[0].RemoveAt(nAlertType);
					m_nAcknowledgeColors[0].RemoveAt(nAlertType);
					m_bAcknowledgments[0].RemoveAt(nAlertType);
					break;
				}
				m_szNotifications[0].SetAt(nAlertType, EMPTYSTRING);
				break;
			}
			for (; (nPos = m_szNotifications[0].GetAt(nAlertType).Find(szNotification)) >= 0; )
			{
				m_szNotifications[0].SetAt(nAlertType, (nPos + szNotification.GetLength() < m_szNotifications[0].GetAt(nAlertType).GetLength()) ? (m_szNotifications[0].GetAt(nAlertType).Left(nPos) + m_szNotifications[0].GetAt(nAlertType).Mid(nPos + szNotification.GetLength() + 1)) : m_szNotifications[0].GetAt(nAlertType).Left(max(nPos - 1, 0)));
				break;
			}
			break;
		}
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnRemoveAllNotifications()
{
	INT  nAlertType;
	CString  szNotification;
	CHourglassCursor  cCursor;

	for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_RESETCONTENT); (nAlertType = FindAlertType()) >= 0; )
	{
		if (m_szAuditions[0].GetAt(nAlertType).IsEmpty())
		{
			m_nTypes[0].RemoveAt(nAlertType);
			m_szAuditions[0].RemoveAt(nAlertType);
			m_szNotifications[0].RemoveAt(nAlertType);
			m_nAcknowledgeColors[0].RemoveAt(nAlertType);
			m_bAcknowledgments[0].RemoveAt(nAlertType);
			break;
		}
		m_szNotifications[0].SetAt(nAlertType, EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow(((szNotification = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS, CB_GETCURSEL))) != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnSelchangeType()
{
	ShowAlertDetails();
}

void CTCAutomaticStackAlertOptionsDialog::OnSelchangeAudition()
{
	INT  nAlertType[2];
	CString  szAudition;

	for (nAlertType[0] = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_TYPE, CB_GETCURSEL), GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION)->GetWindowText(szAudition); (nAlertType[1] = FindAlertType()) >= 0; )
	{
		for (m_szAuditions[0].SetAt(nAlertType[1], (szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? szAudition : EMPTYSTRING); szAudition == STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE) && m_szNotifications[0].GetAt(nAlertType[1]).IsEmpty(); )
		{
			m_nTypes[0].RemoveAt(nAlertType[1]);
			m_szAuditions[0].RemoveAt(nAlertType[1]);
			m_szNotifications[0].RemoveAt(nAlertType[1]);
			m_nAcknowledgeColors[0].RemoveAt(nAlertType[1]);
			m_bAcknowledgments[0].RemoveAt(nAlertType[1]);
			break;
		}
		break;
	}
	if (nAlertType[1] < 0)
	{
		if (szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE))
		{
			m_nTypes[0].Add(nAlertType[0]);
			m_szAuditions[0].Add(szAudition);
			m_szNotifications[0].Add(EMPTYSTRING);
			m_nAcknowledgeColors[0].Add((DWORD)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
			m_bAcknowledgments[0].Add(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK));
		}
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK, (szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_BLINK)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR_STATIC)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR)->EnableWindow((szAudition != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_AUDITION_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnSelchangeAuditionColor()
{
	INT  nAlertType;

	for (; (nAlertType = FindAlertType()) >= 0; )
	{
		m_nAcknowledgeColors[0].SetAt(nAlertType, (DWORD)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_AUDITION_COLOR, CB_GETCURSEL)));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackAlertOptionsDialog::OnSelchangeNotification()
{
	CString  szNotification;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS)->GetWindowText(szNotification);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_ADD)->EnableWindow((szNotification != STRING(IDS_TCAUTOMATICSTACKALERTOPTIONSDIALOG_NOTIFICATION_NONE) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCAutomaticStackAlertOptionsDialog::OnSelchangeNotificationList()
{
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCURSEL) >= 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ALERTOPTIONS_ACTION_NOTIFICATIONS_LIST, LB_GETCOUNT) > 0) ? (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

void CTCAutomaticStackAlertOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SetAlertOptions(m_nTypes[0], m_szAuditions[0], m_szNotifications[0], m_nAcknowledgeColors[0], m_bAcknowledgments[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackAlertOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKALERTOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackAlertOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKALERTOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackLoggingOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackLoggingOptionsDialog, CDisplayDialog)

CTCAutomaticStackLoggingOptionsDialog::CTCAutomaticStackLoggingOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackLoggingOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackLoggingOptionsDialog::Create(CWnd *pParentWnd, CString &szArchivalFileName, UINT &nArchivalPolicy, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName)
{
	INT  nResult;

	for (m_nArchivalPolicy[0] = m_nArchivalPolicy[1] = nArchivalPolicy, m_szArchivalFileName[0] = m_szArchivalFileName[1] = szArchivalFileName, m_dwArchivalRetention[0] = m_dwArchivalRetention[1] = dwArchivalRetention, m_tArchivalRetention[0] = m_tArchivalRetention[1] = tArchivalRetention, m_szRetrievalFileName[0] = m_szRetrievalFileName[1] = szRetrievalFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackLoggingOptionsDialog::IDD)) == IDOK; )
	{
		szRetrievalFileName = m_szRetrievalFileName[0];
		szArchivalFileName = m_szArchivalFileName[0];
		dwArchivalRetention = m_dwArchivalRetention[0];
		tArchivalRetention = m_tArchivalRetention[0];
		nArchivalPolicy = m_nArchivalPolicy[0];
		break;
	}
	return nResult;
}

CTCAutomaticStackLoggingPage *CTCAutomaticStackLoggingOptionsDialog::GetParentDialog() CONST
{
	return((CTCAutomaticStackLoggingPage *)CDisplayDialog::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackLoggingOptionsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackLoggingOptionsDialog::ShowLoggingOptions()
{
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DISABLED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME) != LOGFILE_POLICY_RETENTIONBYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) != LOGFILE_POLICY_CYCLICMODE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) != LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS), m_tArchivalRetention[0].GetTotalSeconds() / SECONDSPERDAY);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), m_dwArchivalRetention[0] / 1024);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME)->SetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED));
}

VOID CTCAutomaticStackLoggingOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DISABLED, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_RESET, bCheck);
}

BOOL CTCAutomaticStackLoggingOptionsDialog::IsModified() CONST
{
	return((m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1])) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackLoggingOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szArchivalFileName[0].IsEmpty() && !m_szRetrievalFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackLoggingOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackLoggingOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackLoggingOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackLoggingOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_RETRIEVALS, OnRetrievals)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, OnOverwriteLogs)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, OnOverwriteOldLogs)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, OnOverwriteNoLogs)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_RESET, OnResetSize)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS, OnSpinchangeDays)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM, OnSpinchangeSize)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackLoggingOptionsDialog message handlers

BOOL CTCAutomaticStackLoggingOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS), TCAUTOMATICSTACKLOGGINGOPTIONS_MINIMUMDAYS, TCAUTOMATICSTACKLOGGINGOPTIONS_MAXIMUMDAYS);
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), TCAUTOMATICSTACKLOGGINGOPTIONS_MINIMUMSIZE, TCAUTOMATICSTACKLOGGINGOPTIONS_MAXIMUMSIZE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_RETRIEVALS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_RESET)->EnableWindow();
	ShowLoggingOptions();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackLoggingOptionsDialog::OnRetrievals()
{
	CTCAutomaticStackRetrievalOptionsDialog  cRetrievalOptions;

	cRetrievalOptions.Create(this, m_szRetrievalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME)->SetWindowText((m_szArchivalFileName[0] = cFileBrowseDialog.GetPathName()));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnOverwriteLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnOverwriteOldLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = SECONDSPERDAY*TCAUTOMATICSTACKLOGGINGOPTIONS_DEFAULTDAYS).GetTotalSeconds() / SECONDSPERDAY);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnOverwriteNoLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_NONCYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_NOOVERWRITE, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnUnlimitedSize()
{
	m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 0));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnLimitedSize()
{
	m_nArchivalPolicy[0] |= LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 1024 * TCAUTOMATICSTACKLOGGINGOPTIONS_DEFAULTSIZE) / 1024);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnResetSize()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_RESET)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_RESET) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnDisabled()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_DISABLED)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_DISABLED) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnSpinchangeDays()
{
	m_tArchivalRetention[0] = SECONDSPERDAY*Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_POLICY_DAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnSpinchangeSize()
{
	m_dwArchivalRetention[0] = 1024 * Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_SIZE_MAXIMUM));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOGGINGOPTIONS_FILENAME)->GetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoggingOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackLoggingOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackLoggingOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKLOGGINGOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackRetrievalOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackRetrievalOptionsDialog, CDisplayDialog)

CTCAutomaticStackRetrievalOptionsDialog::CTCAutomaticStackRetrievalOptionsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackRetrievalOptionsDialog::Create(CWnd *pParentWnd, CString &szFileName)
{
	INT  nResult;

	for (m_szFileName[0] = m_szFileName[1] = szFileName; (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackRetrievalOptionsDialog::IDD)) == IDOK; )
	{
		szFileName = m_szFileName[0];
		break;
	}
	return nResult;
}

CTCAutomaticStackLoggingOptionsDialog *CTCAutomaticStackRetrievalOptionsDialog::GetParentDialog() CONST
{
	return((CTCAutomaticStackLoggingOptionsDialog *)CDisplayDialog::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackRetrievalOptionsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackRetrievalOptionsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME, CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
}

BOOL CTCAutomaticStackRetrievalOptionsDialog::IsModified() CONST
{
	return((m_szFileName[0].CompareNoCase(m_szFileName[1])) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackRetrievalOptionsDialog::Check(BOOL bModified) CONST
{
	return((!m_szFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackRetrievalOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackRetrievalOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackRetrievalOptionsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackRetrievalOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackRetrievalOptionsDialog message handlers

BOOL CTCAutomaticStackRetrievalOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME)->SetWindowText(m_szFileName[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackRetrievalOptionsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackRetrievalOptionsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TCAUTOMATICSTACK_RETRIEVALOPTIONS_FILENAME)->GetWindowText(m_szFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackRetrievalOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackRetrievalOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackRetrievalOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKRETRIEVALOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFilterDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchFilterDialog, CDisplayDialog)

CTCAutomaticStackSearchFilterDialog::CTCAutomaticStackSearchFilterDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchFilterDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackSearchFilterDialog::Create(CWnd *pParentWnd, CTCAutomaticStackSearchFilter *pFilter)
{
	INT  nResult;

	for (m_cFilter[0].Copy(pFilter), m_cFilter[1].Copy(pFilter); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackSearchFilterDialog::IDD)) == IDOK; )
	{
		pFilter->Copy(&m_cFilter[0]);
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackSearchFilterDialog::EnumSearchKeys()
{
	INT  nKey;
	INT  nKeys;
	INT  nIndex;
	INT  nCount;
	INT  nEvent;
	INT  nEvents;
	INT  nTCID[2];
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nSubSystem;
	INT  nSubSystems;
	INT  nSubSchedule;
	INT  nSubSchedules;
	CString  szExample;
	CStringArray  szTypes;
	CStringArray  szCategories;
	CStringArray  szSubSystems;
	CStringArray  szSubSchedules;
	CStringArray  szMissionPlannerEvents;
	CLongUIntArray  nAttributes;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;
	CStringTools  cStringTools;

	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_FUNCTIONS)
	{
		for (nKey = 0, nKeys = MAXTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY - MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey)); !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TYPE)); )
			{
				if (GetDatabase()->EnumTCFunctionTypes(szTypes, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TYPE), (LPCTSTR)szTypes.GetAt(rand() % szTypes.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCTYPE)); )
			{
				if (GetDatabase()->EnumTCFunctionTCTypes(szTypes, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCTYPE), (LPCTSTR)szTypes.GetAt(rand() % szTypes.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCID)); )
			{
				if (GetDatabase()->GetTCFunctionTCIDRange(nTCID[0], nTCID[1]))
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCID), (LPCTSTR)cStringTools.ConvertIntToString(nTCID[0] + rand() % (nTCID[1] - nTCID[0] + 1), 16));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCPACKET)); )
			{
				if ((nCount = (INT)GetDatabase()->GetTCPackets()->GetSize()) > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_TCPACKET), (LPCTSTR)GetDatabase()->GetTCPackets()->GetAt(rand() % nCount)->GetTag());
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_CATEGORY)); )
			{
				if (GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nAttributes) > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_CATEGORY), (LPCTSTR)szCategories.GetAt(rand() % szCategories.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSYSTEM)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetDestinationSubSystem().IsEmpty())
					{
						for (nSubSystem = 0, nSubSystems = (INT)szSubSystems.GetSize(); nSubSystem < nSubSystems; nSubSystem++)
						{
							if (pFunction->GetDestinationSubSystem() == szSubSystems.GetAt(nSubSystem)) break;
							continue;
						}
						if (nSubSystem == nSubSystems)
						{
							szSubSystems.Add(pFunction->GetDestinationSubSystem());
							continue;
						}
					}
				}
				if (szSubSystems.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_SUBSYSTEM), (LPCTSTR)szSubSystems.GetAt(rand() % szSubSystems.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSCHEDULE)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetDestinationSubSchedule().IsEmpty())
					{
						for (nSubSchedule = 0, nSubSchedules = (INT)szSubSchedules.GetSize(); nSubSchedule < nSubSchedules; nSubSchedule++)
						{
							if (pFunction->GetDestinationSubSchedule() == szSubSchedules.GetAt(nSubSchedule)) break;
							continue;
						}
						if (nSubSchedule == nSubSchedules)
						{
							szSubSchedules.Add(pFunction->GetDestinationSubSchedule());
							continue;
						}
					}
				}
				if (szSubSchedules.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_SUBSCHEDULE), (LPCTSTR)szSubSchedules.GetAt(rand() % szSubSchedules.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGFUNCTIONKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_MISSIONPLANNEREVENT)); )
			{
				for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && !pFunction->GetMissionPlannerEvent().IsEmpty())
					{
						for (nEvent = 0, nEvents = (INT)szMissionPlannerEvents.GetSize(); nEvent < nEvents; nEvent++)
						{
							if (pFunction->GetMissionPlannerEvent() == szMissionPlannerEvents.GetAt(nEvent)) break;
							continue;
						}
						if (nEvent == nEvents)
						{
							szMissionPlannerEvents.Add(pFunction->GetMissionPlannerEvent());
							continue;
						}
					}
				}
				if (szMissionPlannerEvents.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEYVALUEEXAMPLE_MISSIONPLANNEREVENT), (LPCTSTR)szMissionPlannerEvents.GetAt(rand() % szMissionPlannerEvents.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_SEQUENCES)
	{
		for (nKey = 0, nKeys = MAXTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY - MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey)); !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_USER)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_FUNCTION)); )
			{
				if ((nCount = (INT)GetDatabase()->GetTCFunctions()->GetSize()) > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_FUNCTION), (LPCTSTR)GetDatabase()->GetTCFunctions()->GetAt(rand() % nCount)->GetName());
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_SUBSCHEDULE)); )
			{
				for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
				{
					if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) && !pSequence->GetDestinationSubSchedule().IsEmpty())
					{
						for (nSubSchedule = 0, nSubSchedules = (INT)szSubSchedules.GetSize(); nSubSchedule < nSubSchedules; nSubSchedule++)
						{
							if (pSequence->GetDestinationSubSchedule() == szSubSchedules.GetAt(nSubSchedule)) break;
							continue;
						}
						if (nSubSchedule == nSubSchedules)
						{
							szSubSchedules.Add(pFunction->GetDestinationSubSchedule());
							continue;
						}
					}
				}
				if (szSubSchedules.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_SUBSCHEDULE), (LPCTSTR)szSubSchedules.GetAt(rand() % szSubSchedules.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSEQUENCEKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_MISSIONPLANNEREVENT)); )
			{
				for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
				{
					if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) && !pSequence->GetMissionPlannerEvent().IsEmpty())
					{
						for (nEvent = 0, nEvents = (INT)szMissionPlannerEvents.GetSize(); nEvent < nEvents; nEvent++)
						{
							if (pSequence->GetMissionPlannerEvent() == szMissionPlannerEvents.GetAt(nEvent)) break;
							continue;
						}
						if (nEvent == nEvents)
						{
							szMissionPlannerEvents.Add(pFunction->GetMissionPlannerEvent());
							continue;
						}
					}
				}
				if (szMissionPlannerEvents.GetSize() > 0)
				{
					szExample.Format(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEYVALUEEXAMPLE_MISSIONPLANNEREVENT), (LPCTSTR)szMissionPlannerEvents.GetAt(rand() % szMissionPlannerEvents.GetSize()));
					m_szFilterExamples.Add(szExample);
					break;
				}
				m_szFilterExamples.Add(EMPTYSTRING);
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS)
	{
		for (nKey = 0, nKeys = MAXTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY - MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + 1; nKey < nKeys; nKey++)
		{
			for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey)); !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_NAME)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_AUTHOR)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_WORKSTATION)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
			for (; !lstrcmp(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEY + nKey), STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS)); )
			{
				m_szFilterExamples.Add(STRING(MINTCAUTOMATICSTACKSEARCHFILTERDIALOGSTACKSKEYVALUEEXAMPLE + nKey));
				break;
			}
		}
		for (szExample.Empty(); (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION))) >= 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = m_szFilterExamples.GetAt(nIndex)));
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_SETCURSEL, (WPARAM)nIndex);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackSearchFilterDialog::ShowFilterInfo()
{
	INT  nKey;
	INT  nKeys;
	INT  nColumn;
	INT  nColumns;
	CString  szKey;
	CString  szItem;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME)->SetWindowText(m_cFilter[0].GetName());
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY); )
			{
				szItem = szKeys.GetAt(nKey);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE); )
			{
				szItem = szValues.GetAt(nKey);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), nKey, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), nKey, nColumn, szItem);
		}
		if (szKey == szKeys.GetAt(nKey))
		{
			for (; SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValues.GetAt(nKey))) < 0; )
			{
				GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValues.GetAt(nKey));
				break;
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCAutomaticStackSearchFilterDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackSearchFilterDialog::IsModified() CONST
{
	return !m_cFilter[0].Compare(&m_cFilter[1]);
}

BOOL CTCAutomaticStackSearchFilterDialog::Check(BOOL bModified) CONST
{
	CString  szName;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME)->GetWindowText(szName);
	return((!szName.IsEmpty() && GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackSearchFilterDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchFilterDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSearchFilterDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szFilterExamples.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchFilterDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchFilterDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD, OnAddSearchKey)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE, OnRemoveSearchKey)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL, OnRemoveAllSearchKeys)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SEARCHFILTER_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, OnEditchangeKeyValue)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, OnSelchangeKeyValue)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, OnSelchangeSearchKey)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFilterDialog message handlers

BOOL CTCAutomaticStackSearchFilterDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY)) ? (rColumns.Width() / 3) : ((2 * rColumns.Width()) / 3));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME)->EnableWindow();
	EnumSearchKeys();
	ShowFilterInfo();
	return TRUE;
}

BOOL CTCAutomaticStackSearchFilterDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackSearchFilterDialog::OnAddSearchKey()
{
	INT  nColumn;
	INT  nColumns;
	CString  szKey;
	CString  szItem;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), m_cFilter[0].GetSearchKeys(szKeys, szValues), szKeys.Add(szKey), szValues.Add(szValue), m_cFilter[0].SetSearchKeys(szKeys, szValues); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY); )
		{
			szItem = szKey;
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE); )
		{
			szItem = szValue;
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT), szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) - 1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow((!SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnRemoveSearchKey()
{
	INT  nKey;
	INT  nKeys;
	CString  szValue;
	CString  szKey[2];
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues), szKey[1] = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_KEY))); nKey < nKeys; nKey++)
	{
		if (szKey[1] == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST))))
		{
			Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), 0);
			szKeys.RemoveAt(nKey);
			szValues.RemoveAt(nKey);
			m_cFilter[0].SetSearchKeys(szKeys, szValues);
		}
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE); szKey[0] == szKey[1]; )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow(!szValue.IsEmpty());
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnRemoveAllSearchKeys()
{
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;
	CHourglassCursor  cCursor;

	m_cFilter[0].SetSearchKeys(szKeys, szValues);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow(!szValue.IsEmpty());
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnSelchangeSearchKey()
{
	INT  nKey;
	INT  nKeys;
	INT  nType;
	INT  nTypes;
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nCategory;
	INT  nCategories;
	CString  szKey;
	CString  szValue;
	CString  szExample;
	CStringArray  szKeys;
	CStringArray  szTypes;
	CStringArray  szValues;
	CStringArray  szCategories;
	CLongUIntArray  nAttributes;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCSequence  *pSequence;

	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_FUNCTIONS)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TYPE); )
		{
			for (nType = 0, nTypes = GetDatabase()->EnumTCFunctionTypes(szTypes, nAttributes); nType < nTypes; nType = nType + 1)
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTypes.GetAt(nType));
				continue;
			}
			break;
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCTYPE))
		{
			for (nType = 0, nTypes = GetDatabase()->EnumTCFunctionTCTypes(szTypes, nAttributes); nType < nTypes; nType++)
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTypes.GetAt(nType));
				continue;
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_TCPACKET))
		{
			for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
			{
				if ((pPacket = GetDatabase()->GetTCPackets()->GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
				{
					SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pPacket->GetTag());
					continue;
				}
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_CATEGORY))
		{
			for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nAttributes); nCategory < nCategories; nCategory++)
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szCategories.GetAt(nCategory));
				continue;
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSYSTEM))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSystem()) < 0 && !pFunction->GetDestinationSubSystem().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSystem());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_SUBSCHEDULE))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSchedule()) < 0 && !pFunction->GetDestinationSubSchedule().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetDestinationSubSchedule());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_FUNCTIONKEY_MISSIONPLANNEREVENT))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetMissionPlannerEvent()) < 0 && !pFunction->GetMissionPlannerEvent().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetMissionPlannerEvent());
						continue;
					}
				}
			}
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_SEQUENCES)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_USER); )
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetUser()) < 0 && !pSequence->GetUser().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pSequence->GetUser());
						continue;
					}
				}
			}
			break;
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_FUNCTION))
		{
			for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFunction->GetName());
					continue;
				}
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_SUBSCHEDULE))
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetDestinationSubSchedule()) < 0 && !pSequence->GetDestinationSubSchedule().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetDestinationSubSchedule());
						continue;
					}
				}
			}
		}
		if (szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_SEQUENCEKEY_MISSIONPLANNEREVENT))
		{
			for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
			{
				if ((pSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
				{
					if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetMissionPlannerEvent()) < 0 && !pSequence->GetMissionPlannerEvent().IsEmpty())
					{
						SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSequence->GetMissionPlannerEvent());
						continue;
					}
				}
			}
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	if (m_cFilter[0].GetType() == TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS)
	{
		for (szKey = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY), (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY, CB_GETCURSEL))), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_RESETCONTENT); szKey == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS); )
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED));
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED));
			break;
		}
		for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
		{
			if (szKey == szKeys.GetAt(nKey)) break;
			continue;
		}
		for (szValue = (nKey < nKeys) ? szValues.GetAt(nKey) : EMPTYSTRING; SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue)) < 0; )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->SetWindowText(szValue);
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->SetWindowText((szExample = (nIndex >= 0 && nIndex < m_szFilterExamples.GetSize()) ? m_szFilterExamples.GetAt(nIndex) : EMPTYSTRING));
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->ShowWindow((!szExample.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE_STATIC)->EnableWindow(!szExample.IsEmpty());
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_EXAMPLE)->EnableWindow(!szExample.IsEmpty());
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow(FALSE);
}

void CTCAutomaticStackSearchFilterDialog::OnSelchangeKeyValue()
{
	INT  nKey;
	INT  nKeys;
	CString  szKey;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	szValue = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE, CB_GETCURSEL));
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		if (szKey == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		szValues.SetAt(nKey, szValue);
		m_cFilter[0].SetSearchKeys(szKeys, szValues);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), nKey, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE)), szValue);
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow((nKey == nKeys) ? !szValue.IsEmpty() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnEditchangeName()
{
	CString  szName;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_NAME)->GetWindowText(szName); szName.GetLength() >= 0; )
	{
		m_cFilter[0].SetName(szName);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnEditchangeKeyValue()
{
	INT  nKey;
	INT  nKeys;
	CString  szKey;
	CString  szValue;
	CStringArray  szKeys;
	CStringArray  szValues;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEY)->GetWindowText(szKey);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_VALUE)->GetWindowText(szValue);
	for (nKey = 0, nKeys = m_cFilter[0].GetSearchKeys(szKeys, szValues); nKey < nKeys; nKey++)
	{
		if (szKey == szKeys.GetAt(nKey)) break;
		continue;
	}
	if (nKey < nKeys)
	{
		szValues.SetAt(nKey, szValue);
		m_cFilter[0].SetSearchKeys(szKeys, szValues);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_KEYSLIST), nKey, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TITLEITEM_VALUE)), szValue);
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SEARCHFILTER_ADD)->EnableWindow((nKey == nKeys) ? !szValue.IsEmpty() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSearchFilterDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackSearchFilterDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackSearchFilterDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSEARCHFILTERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesParametersCalibrationPage, CLocalePropertyPage)

CTCAutomaticStackItemPropertiesParametersCalibrationPage::CTCAutomaticStackItemPropertiesParametersCalibrationPage() : CLocalePropertyPage(CTCAutomaticStackItemPropertiesParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCAutomaticStackItemPropertiesParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nIndex;
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_nCalTableIDs.RemoveAll(); pDatabaseTCParameter != (CONST CDatabaseTCParameter *) NULL; )
	{
		if ((m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))) != (CDatabaseTCNumCalTable *)NULL)
			{
				for (szName.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))))
			{
				for (szName.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_nCalTableIDs.Add(nIndex);
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCAutomaticStackItemPropertiesParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(m_nCalTableIDs.GetAt(nIndex)) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCAutomaticStackItemPropertiesParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCAutomaticStackItemPropertiesParametersFolder *CTCAutomaticStackItemPropertiesParametersCalibrationPage::GetParent() CONST
{
	return((CTCAutomaticStackItemPropertiesParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCAutomaticStackItemPropertiesParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCAutomaticStackItemPropertiesParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemPropertiesParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersCalibrationPage message handlers

BOOL CTCAutomaticStackItemPropertiesParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCAutomaticStackItemPropertiesParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackItemPropertiesParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesParametersFolderTabCtrl, CTabCtrl)

CTCAutomaticStackItemPropertiesParametersFolder *CTCAutomaticStackItemPropertiesParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCAutomaticStackItemPropertiesParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersFolderTabCtrl message handlers

UINT CTCAutomaticStackItemPropertiesParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCAutomaticStackItemPropertiesParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersFolder

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesParametersFolder, CLocalePropertySheetDialog)

CTCAutomaticStackItemPropertiesParametersFolder::CTCAutomaticStackItemPropertiesParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCAutomaticStackItemPropertiesParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCAutomaticStackItemPropertiesParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pDatabaseTCParameter);
}

BOOL CTCAutomaticStackItemPropertiesParametersFolder::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szX, szY);
}

CTCAutomaticStackItemPropertiesParametersDialog *CTCAutomaticStackItemPropertiesParametersFolder::GetParent() CONST
{
	return((CTCAutomaticStackItemPropertiesParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersFolder message handlers

void CTCAutomaticStackItemPropertiesParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesParametersDialog, CDisplayDialog)

CTCAutomaticStackItemPropertiesParametersDialog::CTCAutomaticStackItemPropertiesParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemPropertiesParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszParameter)
{
	CString  szValue;

	return Create(pParentWnd, pszParameter, szValue);
}
INT CTCAutomaticStackItemPropertiesParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszParameter, CString &szValue)
{
	CString  szX;
	CString  szY;
	INT  nResult;

	for (m_szParameter = pszParameter, szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return nResult;
}

VOID CTCAutomaticStackItemPropertiesParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
}

BOOL CTCAutomaticStackItemPropertiesParametersDialog::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CDisplayDialog *CTCAutomaticStackItemPropertiesParametersDialog::GetParent() CONST
{
	return((CDisplayDialog *)CDisplayDialog::GetParent());
}

BOOL CTCAutomaticStackItemPropertiesParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTCParameter  *pParameter;

	if ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(m_szParameter))))
	{
		if (pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_szParameter, EMPTYSTRING);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackItemPropertiesParametersDialog::ShowParameterInfo()
{
	CString  szParameter[2];
	CDatabaseTCParameter  *pParameter;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM)->GetWindowText(szParameter[0]), szParameter[1].Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSDIALOG_FORMAT), EMPTYSTRING, EMPTYSTRING), szParameter[0] = (szParameter[0].Find(szParameter[1]) >= 0) ? szParameter[0].Left(szParameter[0].Find(szParameter[1])) : szParameter[0]; (pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter[0]))); )
	{
		m_wndFolderCtrl.ShowParameterInfo(pParameter);
		return;
	}
	m_wndFolderCtrl.ShowParameterInfo();
}

CRect CTCAutomaticStackItemPropertiesParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCAutomaticStackItemPropertiesParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParametersDialog message handlers

BOOL CTCAutomaticStackItemPropertiesParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CDisplayDialog::OnInitDialog(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	return TRUE;
}

void CTCAutomaticStackItemPropertiesParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCAutomaticStackItemPropertiesParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemPropertiesParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemPropertiesParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParameterSetsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesParameterSetsDialog, CDisplayDialog)

CTCAutomaticStackItemPropertiesParameterSetsDialog::CTCAutomaticStackItemPropertiesParameterSetsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesParameterSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemPropertiesParameterSetsDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackItem *pItem, CString &szParameterSet)
{
	INT  nResult;

	for (m_cItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesParameterSetsDialog::IDD)) == IDOK; )
	{
		szParameterSet = m_szParameterSet;
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackItemPropertiesParameterSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CString  szParameterSet;
	CStringArray  szParameterSets;
	CDatabaseTCParameterSet  *pParameterSet;

	for (nSet = 0, nSets = m_cItem.GetParameterSets(szParameterSets); nSet < nSets; nSet++)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
		{
			szParameterSet.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_FORMAT), (LPCTSTR)pParameterSet->GetName(), (LPCTSTR)pParameterSet->GetDescription());
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameterSet);
		}
	}
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackItemPropertiesParameterSetsDialog::ShowParameterSetContents()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CStringTools  cStringTools;
	CStringArray  szParameterSets;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_DELETEALLITEMS);
	if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_cItem.GetName()))))
	{
		if ((pParameterSet = ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_GETCURSEL)) < m_cItem.GetParameterSets(szParameterSets)) ? GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nIndex))) : (CDatabaseTCParameterSet *)NULL))
		{
			for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) != (CDatabaseTCFunctionElement *)NULL)
				{
					if ((pFunctionElement[1] = m_cItem.GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))))
					{
						if (pFunctionElement[0]->GetName() == pFunctionElement[1]->GetName() && pFunctionElement[0]->GetWidth() == pFunctionElement[1]->GetWidth())
						{
							for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
							{
								if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET)))) > 8 * pFunctionElement[1]->GetBytePos() + pFunctionElement[1]->GetBitPos()) break;
								continue;
							}
							for (nColumn = 0, nColumns = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
							{
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG); )
								{
									szItem = pFunctionElement[0]->GetName();
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION); )
								{
									szItem = pFunctionElement[0]->GetDescription();
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE))
								{
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_RAW) : EMPTYSTRING;
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_NUMERICAL) : szItem;
									szItem = ((pFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement[0]->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_STATUS) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET); )
								{
									szItem = cStringTools.ConvertIntToString(8 * pFunctionElement[1]->GetBytePos() + pFunctionElement[1]->GetBitPos());
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH); )
								{
									szItem = cStringTools.ConvertIntToString(pFunctionElement[1]->GetWidth());
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING))
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_DATETIME) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_STRING) : szItem;
									szItem = ((pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN)) : szItem;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX))
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_OCTAL) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG); )
								{
									szItem = (pFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_FIXED) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_VARIABLE);
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE); )
								{
									szItem = pFunctionElement[0]->GetConstValueAsText();
									break;
								}
								if (!nColumn)
								{
									Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, szItem);
									continue;
								}
								Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nItem, nColumn, szItem);
							}
						}
					}
				}
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

INT CTCAutomaticStackItemPropertiesParameterSetsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackItemPropertiesParameterSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTCAutomaticStackItemPropertiesParameterSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesParameterSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemPropertiesParameterSetsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesParameterSetsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesParameterSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, OnSelchangeSet)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesParameterSetsDialog message handlers

BOOL CTCAutomaticStackItemPropertiesParameterSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME)->EnableWindow();
	EnumParameterSets();
	ShowParameterSetContents();
	return TRUE;
}

void CTCAutomaticStackItemPropertiesParameterSetsDialog::OnSelchangeSet()
{
	ShowParameterSetContents();
}

void CTCAutomaticStackItemPropertiesParameterSetsDialog::OnOK()
{
	INT  nIndex;
	CStringArray  szParameterSets;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESPARAMETERSETS_NAME, CB_GETCURSEL)) >= 0 && nIndex < m_cItem.GetParameterSets(szParameterSets)) m_szParameterSet = szParameterSets.GetAt(nIndex);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemPropertiesParameterSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemPropertiesParameterSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesSaveTemplateDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesSaveTemplateDialog, CDisplayDialog)

CTCAutomaticStackItemPropertiesSaveTemplateDialog::CTCAutomaticStackItemPropertiesSaveTemplateDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesSaveTemplateDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemPropertiesSaveTemplateDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackItem *pItem)
{
	m_cItem.Copy(pItem);
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesSaveTemplateDialog::IDD);
}
INT CTCAutomaticStackItemPropertiesSaveTemplateDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackComposedItem *pItem)
{
	m_cComposedItem.Copy(pItem);
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesSaveTemplateDialog::IDD);
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::Initialize()
{
	for (m_pItemTemplates[0].RemoveAll(), m_pItemTemplates[1].RemoveAll(); !m_cComposedItem.GetSize(); )
	{
		GetParentDisplay()->GetItemTemplates(m_pItemTemplates[0]);
		return m_pItemTemplates[1].Copy(&m_pItemTemplates[0]);
	}
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	GetParentDisplay()->GetItemTemplates(m_pComposedItemTemplates[0]);
	return m_pComposedItemTemplates[1].Copy(&m_pComposedItemTemplates[0]);
}

CTCAutomaticStackWnd *CTCAutomaticStackItemPropertiesSaveTemplateDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackItemPropertiesSaveTemplateDialog::EnumTemplates()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	INT  nTemplate;
	INT  nTemplates;
	CString  szItem;

	for (nTemplate = 0, nTemplates = ((!m_cComposedItem.GetSize() && m_pItemTemplates[0].Enum(m_cItem.GetName(), m_szTemplates) >= 0) || (m_cComposedItem.GetSize() > 0 && m_pComposedItemTemplates[0].Enum(m_cComposedItem.GetName(), m_szTemplates) >= 0)) ? (INT)m_szTemplates.GetSize() : 0; nTemplate < nTemplates; nTemplate++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
		{
			for (nPos = m_szTemplates.GetAt(nTemplate).Find(TAB); m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Left(nPos) : m_szTemplates.GetAt(nTemplate);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_DESCRIPTION); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nTemplate, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nTemplate, nColumn, szItem);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::IsModified() CONST
{
	return(((!m_cComposedItem.GetSize() && !m_pItemTemplates[0].Compare(&m_pItemTemplates[1])) || (m_cComposedItem.GetSize() > 0 && !m_pComposedItemTemplates[0].Compare(&m_pComposedItemTemplates[1]))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::Check(BOOL bModified) CONST
{
	INT  nPos;
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;
	CString  szDescription;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->GetWindowText(szDescription);
	for (nTemplate = 0, nTemplates = (INT)m_szTemplates.GetSize(); nTemplate < nTemplates; nTemplate++)
	{
		if (((nPos = m_szTemplates.GetAt(nTemplate).Find(TAB)) >= 0 && m_szTemplates.GetAt(nTemplate).Left(nPos) == szName) || (nPos < 0 && m_szTemplates.GetAt(nTemplate) == szName)) break;
		continue;
	}
	return((nTemplate == nTemplates) ? (!bModified || IsModified() || (!szName.IsEmpty() && !szDescription.IsEmpty())) : FALSE);
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesSaveTemplateDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szTemplates.RemoveAll();
	m_pItemTemplates[0].RemoveAll();
	m_pItemTemplates[1].RemoveAll();
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesSaveTemplateDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesSaveTemplateDialog)
	ON_WM_CREATE()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE, OnRemoveTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL, OnRemoveAllTemplates)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, OnEditchangeTemplateName)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION, OnEditchangeTemplateDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesSaveTemplateDialog message handlers

int CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	INT  nPos[3];
	CString  szTitle[2];

	if (CDisplayDialog::OnCreate(lpCreateStruct) != -1)
	{
		for (GetWindowText(szTitle[0]), GetParent()->GetWindowText(szTitle[1]), nPos[0] = szTitle[0].ReverseFind(SPACE[0]), nPos[1] = szTitle[1].Find(SPACE[0]), nPos[2] = szTitle[1].ReverseFind(SPACE[0]); nPos[0] > 0 && nPos[1] > 0 && nPos[1] < nPos[2]; )
		{
			SetWindowText(szTitle[0].Left(nPos[0]) + szTitle[1].Mid(nPos[1], nPos[2] - nPos[1]) + szTitle[0].Mid(nPos[0]));
			break;
		}
		return 0;
	}
	return -1;
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : (3 * rColumns.Width() / 4));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->EnableWindow();
	EnumTemplates();
	return TRUE;
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnRemoveTemplate()
{
	INT  nIndex;
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					if (pItemTemplate->GetTemplateName() + TAB + pItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
					{
						m_pItemTemplates[0].RemoveAt(nTemplate);
						m_szTemplates.RemoveAt(nIndex);
						delete pItemTemplate;
						nTemplates--;
						nTemplate--;
						break;
					}
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() + TAB + pComposedItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
				{
					m_pComposedItemTemplates[0].RemoveAt(nTemplate);
					m_szTemplates.RemoveAt(nIndex);
					delete pComposedItemTemplate;
					nTemplates--;
					nTemplate--;
					break;
				}
				continue;
			}
			break;
		}
		break;
	}
	Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), nIndex);
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST), 0);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnRemoveAllTemplates()
{
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					m_pItemTemplates[0].RemoveAt(nTemplate);
					delete pItemTemplate;
					nTemplates--;
					nTemplate--;
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				m_pComposedItemTemplates[0].RemoveAt(nTemplate);
				delete pComposedItemTemplate;
				nTemplates--;
				nTemplate--;
				continue;
			}
			break;
		}
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME, EM_SETSEL, 0, -1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnEditchangeTemplateName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnEditchangeTemplateDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnOK()
{
	CString  szName;
	CString  szDescription;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESSAVETEMPLATE_DESCRIPTION)->GetWindowText(szDescription); !m_cComposedItem.GetSize(); )
	{
		if (!szName.IsEmpty() && !szDescription.IsEmpty())
		{
			if ((pItemTemplate = new CTCAutomaticStackItemTemplate))
			{
				pItemTemplate->SetTemplateName(szName);
				pItemTemplate->SetTemplateDescription(szDescription);
				if (pItemTemplate->CTCAutomaticStackItem::Copy(&m_cItem) && m_pItemTemplates[0].Add(pItemTemplate) >= 0)
				{
					GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
					break;
				}
				delete pItemTemplate;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
		break;
	}
	for (; m_cComposedItem.GetSize() > 0; )
	{
		if (!szName.IsEmpty() && !szDescription.IsEmpty())
		{
			if ((pComposedItemTemplate = new CTCAutomaticStackComposedItemTemplate))
			{
				pComposedItemTemplate->SetTemplateName(szName);
				pComposedItemTemplate->SetTemplateDescription(szDescription);
				if (pComposedItemTemplate->CTCAutomaticStackComposedItem::Copy(&m_cComposedItem) && m_pComposedItemTemplates[0].Add(pComposedItemTemplate) >= 0)
				{
					GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
					break;
				}
				delete pComposedItemTemplate;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
		break;
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemPropertiesSaveTemplateDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESSAVETEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesLoadTemplateDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesLoadTemplateDialog, CDisplayDialog)

CTCAutomaticStackItemPropertiesLoadTemplateDialog::CTCAutomaticStackItemPropertiesLoadTemplateDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesLoadTemplateDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemPropertiesLoadTemplateDialog::Create(CWnd *pParentWnd, CTCAutomaticStackItem *pItem)
{
	INT  nResult;

	for (m_cItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesLoadTemplateDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cItem)) return nResult;
		break;
	}
	return -1;
}
INT CTCAutomaticStackItemPropertiesLoadTemplateDialog::Create(CWnd *pParentWnd, CTCAutomaticStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cComposedItem.Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesLoadTemplateDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cComposedItem)) return nResult;
		break;
	}
	return -1;
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::Initialize()
{
	for (m_pItemTemplates[0].RemoveAll(), m_pItemTemplates[1].RemoveAll(); !m_cComposedItem.GetSize(); )
	{
		GetParentDisplay()->GetItemTemplates(m_pItemTemplates[0]);
		return m_pItemTemplates[1].Copy(&m_pItemTemplates[0]);
	}
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	GetParentDisplay()->GetItemTemplates(m_pComposedItemTemplates[0]);
	return m_pComposedItemTemplates[1].Copy(&m_pComposedItemTemplates[0]);
}

CTCAutomaticStackWnd *CTCAutomaticStackItemPropertiesLoadTemplateDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::EnumTemplates()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	INT  nTemplate;
	INT  nTemplates;
	CString  szItem;

	for (nTemplate = 0, nTemplates = ((!m_cComposedItem.GetSize() && m_pItemTemplates[0].Enum(m_cItem.GetName(), m_szTemplates) >= 0) || (m_cComposedItem.GetSize() > 0 && m_pComposedItemTemplates[0].Enum(m_cComposedItem.GetName(), m_szTemplates) >= 0)) ? (INT)m_szTemplates.GetSize() : 0; nTemplate < nTemplates; nTemplate++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
		{
			for (nPos = m_szTemplates.GetAt(nTemplate).Find(TAB); m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Left(nPos) : m_szTemplates.GetAt(nTemplate);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_DESCRIPTION); )
			{
				szItem = (nPos >= 0) ? m_szTemplates.GetAt(nTemplate).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nTemplate, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nTemplate, nColumn, szItem);
		}
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::IsModified() CONST
{
	return(((!m_cComposedItem.GetSize() && !m_pItemTemplates[0].Compare(&m_pItemTemplates[1])) || (m_cComposedItem.GetSize() > 0 && !m_pComposedItemTemplates[0].Compare(&m_pComposedItemTemplates[1]))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::Check(BOOL bModified) CONST
{
	INT  nPos;
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName);
	for (nTemplate = 0, nTemplates = (!szName.IsEmpty()) ? (INT)m_szTemplates.GetSize() : -1; nTemplate < nTemplates; nTemplate++)
	{
		if (((nPos = m_szTemplates.GetAt(nTemplate).Find(TAB)) >= 0 && m_szTemplates.GetAt(nTemplate).Left(nPos) == szName) || (nPos < 0 && m_szTemplates.GetAt(nTemplate) == szName)) break;
		continue;
	}
	return((nTemplate < nTemplates || nTemplates < 0) ? (!bModified || IsModified() || !szName.IsEmpty()) : FALSE);
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesLoadTemplateDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szTemplates.RemoveAll();
	m_pItemTemplates[0].RemoveAll();
	m_pItemTemplates[1].RemoveAll();
	m_pComposedItemTemplates[0].RemoveAll();
	m_pComposedItemTemplates[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesLoadTemplateDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesLoadTemplateDialog)
	ON_WM_CREATE()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE, OnRemoveTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL, OnRemoveAllTemplates)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, OnEditchangeTemplateName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesLoadTemplateDialog message handlers

int CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	INT  nPos[3];
	CString  szTitle[2];

	if (CDisplayDialog::OnCreate(lpCreateStruct) != -1)
	{
		for (GetWindowText(szTitle[0]), GetParent()->GetWindowText(szTitle[1]), nPos[0] = szTitle[0].ReverseFind(SPACE[0]), nPos[1] = szTitle[1].Find(SPACE[0]), nPos[2] = szTitle[1].ReverseFind(SPACE[0]); nPos[0] > 0 && nPos[1] > 0 && nPos[1] < nPos[2]; )
		{
			SetWindowText(szTitle[0].Left(nPos[0]) + szTitle[1].Mid(nPos[1], nPos[2] - nPos[1]) + szTitle[0].Mid(nPos[0]));
			break;
		}
		return 0;
	}
	return -1;
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_DESCRIPTION));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 4) : (3 * rColumns.Width() / 4));
		continue;
	}
	EnumTemplates();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	return FALSE;
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), pNotifyListView->iItem, 0));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((pNotifyListView->iItem >= 0) ? TRUE : FALSE);
			GetDlgItem(IDOK)->EnableWindow(Check());
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnRemoveTemplate()
{
	INT  nIndex;
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					if (pItemTemplate->GetTemplateName() + TAB + pItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
					{
						m_pItemTemplates[0].RemoveAt(nTemplate);
						m_szTemplates.RemoveAt(nIndex);
						delete pItemTemplate;
						nTemplates--;
						nTemplate--;
						break;
					}
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() + TAB + pComposedItemTemplate->GetTemplateDescription() == m_szTemplates.GetAt(nIndex))
				{
					m_pComposedItemTemplates[0].RemoveAt(nTemplate);
					m_szTemplates.RemoveAt(nIndex);
					delete pComposedItemTemplate;
					nTemplates--;
					nTemplate--;
					break;
				}
				continue;
			}
			break;
		}
		break;
	}
	for (Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), nIndex), Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST), 0), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, EM_SETSEL, 0, -1); !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnRemoveAllTemplates()
{
	INT  nTemplate;
	INT  nTemplates;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; TRUE; )
	{
		if (!m_cComposedItem.GetSize())
		{
			for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
			{
				if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
				{
					m_pItemTemplates[0].RemoveAt(nTemplate);
					delete pItemTemplate;
					nTemplates--;
					nTemplate--;
					continue;
				}
				break;
			}
			break;
		}
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), m_szTemplates.RemoveAll(); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				m_pComposedItemTemplates[0].RemoveAt(nTemplate);
				delete pComposedItemTemplate;
				nTemplates--;
				nTemplate--;
				continue;
			}
			break;
		}
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME, EM_SETSEL, 0, -1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnEditchangeTemplateName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnOK()
{
	INT  nTemplate;
	INT  nTemplates;
	CString  szName;
	CTCAutomaticStackItemTemplate  *pItemTemplate;
	CTCAutomaticStackComposedItemTemplate  *pComposedItemTemplate;
	CHourglassCursor  cCursor;

	for (; !m_cComposedItem.GetSize(); )
	{
		for (nTemplate = m_pItemTemplates[0].Find(m_cItem.GetName()), nTemplates = (INT)m_pItemTemplates[0].GetSize(), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName); nTemplate < nTemplates; nTemplate++)
		{
			if ((pItemTemplate = m_pItemTemplates[0].GetAt(nTemplate)) && pItemTemplate->GetName() == m_cItem.GetName())
			{
				if (pItemTemplate->GetTemplateName() == szName)
				{
					m_cItem.Copy(pItemTemplate);
					break;
				}
				continue;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pItemTemplates[0]);
		break;
	}
	for (; m_cComposedItem.GetSize() > 0; )
	{
		for (nTemplate = m_pComposedItemTemplates[0].Find(m_cComposedItem.GetName()), nTemplates = (INT)m_pComposedItemTemplates[0].GetSize(), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIESLOADTEMPLATE_NAME)->GetWindowText(szName); nTemplate < nTemplates; nTemplate++)
		{
			if ((pComposedItemTemplate = m_pComposedItemTemplates[0].GetAt(nTemplate)) && pComposedItemTemplate->GetName() == m_cComposedItem.GetName())
			{
				if (pComposedItemTemplate->GetTemplateName() == szName)
				{
					m_cComposedItem.Copy(pComposedItemTemplate);
					break;
				}
				continue;
			}
			break;
		}
		GetParentDisplay()->SetItemTemplates(m_pComposedItemTemplates[0]);
		break;
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemPropertiesLoadTemplateDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESLOADTEMPLATEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseConstraintsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemReleaseConstraintsDialog, CDisplayDialog)

CTCAutomaticStackItemReleaseConstraintsDialog::CTCAutomaticStackItemReleaseConstraintsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemReleaseConstraintsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemReleaseConstraintsDialog::Create(CWnd *pParentWnd, CTCAutomaticStackItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(pItem), m_nItemIndex = 0; (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemReleaseConstraintsDialog::IDD)) == IDOK; )
	{
		if (pItem->Copy(&m_cItem[0])) return nResult;
		break;
	}
	return -1;
}
INT CTCAutomaticStackItemReleaseConstraintsDialog::Create(CWnd *pParentWnd, CTCAutomaticStackComposedItem *pComposedItem, INT nIndex)
{
	INT  nResult;

	for (m_cComposedItem[0].Copy(pComposedItem), m_cComposedItem[1].Copy(pComposedItem), m_nItemIndex = (nIndex < pComposedItem->GetSize()) ? nIndex : 0; (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemReleaseConstraintsDialog::IDD)) == IDOK; )
	{
		if (pComposedItem->Copy(&m_cComposedItem[0])) return nResult;
		break;
	}
	return -1;
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::Initialize()
{
	GetTCService()->GetTCInterlocks(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, m_pInterlocks[0]);
	GetParentDisplay()->GetUserPermissions((m_nPermissions = 0));
	return m_pInterlocks[1].Copy(&m_pInterlocks[0]);
}

CTCAutomaticStackWnd *CTCAutomaticStackItemReleaseConstraintsDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::EnumInterlocks()
{
	INT  nItem;
	INT  nItems;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CTCAutomaticStackItem  *pItem;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_RESETCONTENT);
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) != (CTCInterlock *)NULL)
		{
			for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
				{
					if (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION || pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION || CheckTCVerificationStage(pItem, (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? TCVERIFICATIONSTAGE_ACCEPTANCE : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? TCVERIFICATIONSTAGE_START : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? TCVERIFICATIONSTAGE_PROGRESS : TCVERIFICATIONSTAGE_COMPLETION)))) break;
					continue;
				}
			}
			if ((!nItems && (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION || pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION || CheckTCVerificationStage(&m_cItem[0], (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? TCVERIFICATIONSTAGE_ACCEPTANCE : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? TCVERIFICATIONSTAGE_START : ((pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? TCVERIFICATIONSTAGE_PROGRESS : TCVERIFICATIONSTAGE_COMPLETION))))) || nItem < nItems) SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
			if (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
		}
	}
	if (!SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE));
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::EnumBlocks()
{
	CString  szBlockMacro;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctionBlock  *pBlock;

	for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_RESETCONTENT); (pFunction = ((pBlock = ((pItem = (m_cComposedItem[0].GetSize() > 0) ? m_cComposedItem[0].GetAt(m_nItemIndex) : (CTCAutomaticStackItem *)NULL) && GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()) >= 0) ? GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName())) : (CDatabaseTCFunctionBlock *)NULL)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pBlock->GetName())) : (CDatabaseTCFunction *)NULL); )
	{
		szBlockMacro.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASECONSTRAINTSDIALOG_BLOCKMACRO_FORMAT), (LPCTSTR)pBlock->GetName(), (LPCTSTR)pFunction->GetDescription());
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szBlockMacro);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED)->EnableWindow((m_cComposedItem[0].GetSize() > 1 && m_nItemIndex > 0) ? TRUE : FALSE);
	return TRUE;
}

VOID CTCAutomaticStackItemReleaseConstraintsDialog::ShowConstraints()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CString  szInterlock[4];
	CTimeKey  tTimeKey;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tInterval;
	CTCAutomaticStackItem  *pItem[2];

	if ((pItem[0] = m_cComposedItem[0].GetAt(m_nItemIndex)))
	{
		for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
			{
				if (!pItem[1]->GetInterlock().IsEmpty() && szInterlock[0].IsEmpty())
				{
					szInterlock[0] = pItem[1]->GetInterlock();
					continue;
				}
				if (pItem[1]->GetReleaseInterlock(szInterlock[3], bInterlock) && szInterlock[1].IsEmpty())
				{
					szInterlock[2] = (bInterlock) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE);
					szInterlock[1] = szInterlock[3];
				}
			}
		}
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[0]) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[1]) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, ((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pItem[0]->GetName()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED, (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, ((!pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || !tOpenTime.GetTime()) && (!pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) || !tOpenTime.GetTime()) && !pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) && tInterval.GetTotalSeconds() > 0) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[0]));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[1]));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCURSEL) >= 0) ? SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterlock[2]) : -1));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) ? (LPCTSTR)pItem[0]->GetName() : EMPTYSTRING)));
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET), (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET), (pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME), ((pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? tOpenTime.GetTimeInSeconds() : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME), (pItem[0]->GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? tCloseTime.GetTimeInSeconds() : tTimeKey);
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), (pItem[0]->GetReleaseTimeWindow(tOpenTime, tInterval) || pItem[0]->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? tInterval.GetTotalSeconds() : 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->ShowWindow((m_cComposedItem[0].GetName().IsEmpty() || (!pItem[0]->GetMembershipID() && m_cComposedItem[0].GetSize() == 1)) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->ShowWindow((!m_cComposedItem[0].GetName().IsEmpty() && (pItem[0]->GetMembershipID() > 0 || m_cComposedItem[0].GetSize() > 1)) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->EnableWindow((m_cComposedItem[0].GetName().IsEmpty() || (!pItem[0]->GetMembershipID() && m_cComposedItem[0].GetSize() == 1)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->EnableWindow((!m_cComposedItem[0].GetName().IsEmpty() && (pItem[0]->GetMembershipID() > 0 || m_cComposedItem[0].GetSize() > 1)) ? TRUE : FALSE);
	}
	else
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetInterlock()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? (LPCTSTR)szInterlock[0] : EMPTYSTRING)) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, ((m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetName()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED, (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, ((!m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || !tOpenTime.GetTime()) && (!m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) || !tOpenTime.GetTime()) && !m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) && tInterval.GetTotalSeconds() > 0) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cItem[0].GetInterlock()));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? (LPCTSTR)szInterlock[0] : EMPTYSTRING)));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_GETCURSEL) >= 0) ? SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cItem[0].GetReleaseInterlock(szInterlock[0], bInterlock)) ? ((bInterlock) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_FAILURE)) : EMPTYSTRING)) : -1));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_FINDSTRING, (WPARAM)-1, (LPARAM)((m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) ? (LPCTSTR)m_cItem[0].GetName() : EMPTYSTRING)));
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET), (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && !bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET), (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch) && bAfterDispatch) ? (SECONDSPERDAY*(tTimeKey.GetTime() / SECONDSPERDAY) + dwOpenOffset / 1000) : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME), ((m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) && tOpenTime > 0) || (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tOpenTime > 0)) ? tOpenTime.GetTimeInSeconds() : tTimeKey);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME), (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime) && tCloseTime > 0) ? tCloseTime.GetTimeInSeconds() : tTimeKey);
		Spinbox_SetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval) || m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) ? tInterval.GetTotalSeconds() : 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_STATIC)->EnableWindow(TRUE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERFIRST_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL));
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::CheckTCVerificationStage(CONST CTCAutomaticStackItem *pItem, UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;

	if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())))
	{
		for (nParameter = 0, nParameters = (INT)pGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pGroupParameter = pGroup->GetAt(nParameter)) && pGroupParameter->GetStage() == nStage) break;
			continue;
		}
		return((nParameter < nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::CheckPrivileges(UINT nPermission) CONST
{
	CTCAutomaticStackItem  *pItem;

	return(((!m_cComposedItem[0].GetSize() && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) || ((pItem = m_cComposedItem[0].GetAt(m_nItemIndex)) && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? ((((m_nPermissions & nPermission) || !nPermission) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) || ((m_nPermissions & nPermission) == 0 && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) : FALSE);
}

VOID CTCAutomaticStackItemReleaseConstraintsDialog::AdjustToPrivileges()
{
	BOOL  bCheck[3];

	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, (bCheck[0] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS)));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, (bCheck[1] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS)));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, (bCheck[2] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME)));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME, bCheck[2]);
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::IsModified() CONST
{
	return((!m_cItem[0].Compare(&m_cItem[1]) || !m_cComposedItem[0].Compare(&m_cComposedItem[1]) || !m_pInterlocks[0].Compare(&m_pInterlocks[1])) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::Check(BOOL bModified) CONST
{
	CString  szInterlock[2];

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->GetWindowText(szInterlock[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[1]);
	return(((!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK) || GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED) || (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->SendMessage(CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->SendMessage(CB_GETCURSEL) >= 0)) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK) || !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED) || szInterlock[0] != szInterlock[1]) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED) || GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->SendMessage(CB_GETCURSEL) >= 0) && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN)) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN) || !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE) || Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)) <= Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)))) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackItemReleaseConstraintsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemReleaseConstraintsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemReleaseConstraintsDialog::PostNcDestroy()
{
	m_pInterlocks[0].RemoveAll();
	m_pInterlocks[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemReleaseConstraintsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemReleaseConstraintsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK, OnInterlock)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKS, OnInterlocks)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED, OnInterlocked)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED, OnBlocked)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO, OnBlockMacro)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED, OnGrouped)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY, OnTimeWindowImmediately)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS, OnTimeWindowAfterPrevious)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH, OnTimeWindowAfterDispatch)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN, OnTimeWindowOpen)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE, OnTimeWindowClose)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL, OnTimeWindowInterval)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, OnSelchangeInterlock)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, OnSelchangeInterlocked)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, OnSelchangeInterlockedResult)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET, OnSpinchangeTimeWindowAfterPrevious)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET, OnSpinchangeTimeWindowAfterDispatch)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME, OnSpinchangeTimeWindowOpen)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME, OnSpinchangeTimeWindowClose)
	ON_CONTROL(SBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD, OnSpinchangeTimeWindowInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseConstraintsDialog message handlers

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD), TCAUTOMATICSTACKITEMRELEASECONSTRAINTSDIALOG_MINIMUMTIMEWINDOWINTERVAL, TCAUTOMATICSTACKITEMRELEASECONSTRAINTSDIALOG_MAXIMUMTIMEWINDOWINTERVAL);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPEN)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSE)->EnableWindow();
	EnumInterlocks();
	EnumBlocks();
	ShowConstraints();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnInterlock()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetInterlock(EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetInterlock(EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnInterlocks()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCAutomaticStackItem  *pItem;
	CTCAutomaticStackItemReleaseInterlocksDialog  cInterlocksDialog;

	if (cInterlocksDialog.Create(this, (!m_cComposedItem[0].GetSize()) ? (m_cItem[0].GetAttributes() & (TCFUNCTION_ILSCOPE_NONE | TCFUNCTION_ILSCOPE_GLOBAL | TCFUNCTION_ILSCOPE_LOCAL | TCFUNCTION_ILSCOPE_GLOBALSUBSYSTEM | TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM | TCFUNCTION_ILSTAGE_RECEPTION | TCFUNCTION_ILSTAGE_UPLINK | TCFUNCTION_ILSTAGE_ONBOARD | TCFUNCTION_ILSTAGE_ACCEPTANCE | TCFUNCTION_ILSTAGE_COMPLETION)) : 0, m_pInterlocks[0]) == IDOK)
	{
		for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), EnumInterlocks(); nItem < nItems; nItem++)
		{
			if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
			{
				for (pItem->SetInterlock((m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pItem->GetInterlock()) >= 0) ? pItem->GetInterlock() : EMPTYSTRING), pItem->GetReleaseInterlock(szInterlock, bInterlock); m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock) < 0; )
				{
					pItem->SetReleaseInterlock(EMPTYSTRING);
					break;
				}
			}
		}
		if (!nItems)
		{
			for (m_cItem[0].SetInterlock((m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, m_cItem[0].GetInterlock()) >= 0) ? m_cItem[0].GetInterlock() : EMPTYSTRING), m_cItem[0].GetReleaseInterlock(szInterlock, bInterlock); m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock) < 0; )
			{
				m_cItem[0].SetReleaseInterlock(EMPTYSTRING);
				break;
			}
		}
		ShowConstraints();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnInterlocked()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetReleaseInterlock(EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnBlocked()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionBlock  *pBlock;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED))
			{
				if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
				{
					pItem->SetFlags(pItem->GetFlags() | TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED);
					pItem->SetReleaseBlock(pBlock->GetName());
					pItem->SetReleaseBlockID(nItem);
					break;
				}
				continue;
			}
			pItem->SetFlags(pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED);
			pItem->SetReleaseBlock(EMPTYSTRING);
			pItem->SetReleaseBlockID(-1);
		}
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED)) ? 0 : -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKMACRO)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_BLOCKED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnBlockMacro()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	BOOL  bGrouped;
	BOOL  bBlocked;
	BOOL  bBlockMacro;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szInterlock;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackComposedItem  pItems;
	CTCAutomaticStackItemReleaseBlockMacroDialog  cBlockMacroDialog;

	for (nItem = m_nItemIndex, nItems = (INT)m_cComposedItem[0].GetSize(), szInterlock.Empty(), bGrouped = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL && (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED))
		{
			szInterlock = (((pItem[1] = m_cComposedItem[0].GetAt(nItem + 1)) && (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) || nItem == nItems - 1) ? pItem[0]->GetInterlock() : EMPTYSTRING;
			bGrouped = (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) ? TRUE : bGrouped;
			pItems.InsertAt(pItems.GetSize(), pItem[0], 1);
			m_cComposedItem[0].RemoveAt(nItem);
			nItems = nItems - 1;
			nItem = nItem - 1;
			continue;
		}
		break;
	}
	for (bBlockMacro = (cBlockMacroDialog.Create(this, &pItems) == IDOK) ? TRUE : FALSE, nItem = 0, nItems = (INT)pItems.GetSize(), nCount = 0; nItem < nItems; nItem++)
	{
		if ((pItem[0] = pItems.GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			m_cComposedItem[0].InsertAt(m_nItemIndex + nCount, pItem[0], 1);
			pItems.RemoveAt(nItem);
			nCount++;
			nItems--;
			nItem--;
		}
	}
	for (nItem = 0, nItems = (bBlockMacro) ? (INT)(m_cComposedItem[0].GetSize() - 1) : 0; nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = m_cComposedItem[0].GetAt(nItem))) ? m_cComposedItem[0].GetAt(nItem + 1) : (CTCAutomaticStackItem *)NULL))
		{
			if ((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) || (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED))
			{
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
				pItem[1]->SetLoadTime(pItem[0]->GetLoadTime());
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), bBlocked = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) && (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED))
		{
			pItem[0]->SetFlags((bGrouped  &&  bBlocked) ? (pItem[0]->GetFlags() | TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) : pItem[0]->GetFlags());
			pItem[0]->SetInterlock((((pItem[1] = m_cComposedItem[0].GetAt(nItem + 1)) && (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) || nItem == nItems - 1) ? szInterlock : EMPTYSTRING);
			bBlocked = TRUE;
		}
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnGrouped()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem[0]->SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_GROUPED) && ((pItem[0]->GetMembershipID() > 0 && pItem[0]->GetMembershipID() != (UINT)-1) || nItem > 0)) ? (pItem[0]->GetFlags() | TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) : (pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED));
			continue;
		}
	}
	for (nItem = 0, nItems = (INT)(m_cComposedItem[0].GetSize() - 1); nItem < nItems; nItem++)
	{
		if ((pItem[1] = ((pItem[0] = m_cComposedItem[0].GetAt(nItem))) ? m_cComposedItem[0].GetAt(nItem + 1) : (CTCAutomaticStackItem *)NULL))
		{
			if ((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) || (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED))
			{
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
			}
		}
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowImmediately()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)))
		{
			pItem->SetReleaseTimeWindow(CTimeTag(0));
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(CTimeTag(0));
		break;
	}
	ShowConstraints();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowAfterPrevious()
{
	INT  nItem;
	INT  nItems;
	CTimeSpan  tTimeWindow;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetReleaseTimeWindow(0, tTimeWindow, FALSE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(0, tTimeWindow, FALSE);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowAfterDispatch()
{
	INT  nItem;
	INT  nItems;
	CTimeSpan  tTimeWindow;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetReleaseTimeWindow(0, tTimeWindow, TRUE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(0, tTimeWindow, TRUE);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowOpen()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tTime[2];
	CTimeSpan  tTimeWindow;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow), tTime[0] = 1000000 * SECONDSPERMINUTE*(tTime[0].GetTime() / (1000000 * SECONDSPERMINUTE) + 1), tTime[1] = tTime[0] + 1000000 * tTimeWindow.GetTotalSeconds(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetReleaseTimeWindow(tTime[0], tTime[1]);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseTimeWindow(tTime[0], tTime[1]);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowClose()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tTimeWindow[2];
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow[0]); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, (!tCloseTime.GetTime()) ? (tOpenTime + 1000000 * tTimeWindow[0].GetTotalSeconds()) : 0);
				continue;
			}
			if (!pItem->GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
			{
				pItem->GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]);
				pItem->SetReleaseTimeWindow(tOpenTime, CTimeTag(1000000 * max(tOpenTime.GetTimeInSeconds(), SECONDSPERMINUTE*((CTime::GetCurrentTime().GetTime() + tTimeWindow[0].GetTotalSeconds()) / SECONDSPERMINUTE))));
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, (!tCloseTime.GetTime()) ? (tOpenTime + 1000000 * tTimeWindow[0].GetTotalSeconds()) : 0);
			break;
		}
		if (!m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
		{
			m_cItem[0].GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]);
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, CTimeTag(1000000 * max(tOpenTime.GetTimeInSeconds(), SECONDSPERMINUTE*((CTime::GetCurrentTime().GetTime() + tTimeWindow[0].GetTotalSeconds()) / SECONDSPERMINUTE))));
			break;
		}
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnTimeWindowInterval()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeSpan  tTimeWindow[2];
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(), GetParentDisplay()->GetDefaultReleaseTimeWindow(tTimeWindow[0]); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
			{
				pItem->SetReleaseTimeWindow(dwOpenOffset, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0, bAfterDispatch);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, tTimeWindow[0]);
				continue;
			}
			pItem->SetReleaseTimeWindow(CTimeTag(0), tTimeWindow[0]);
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tTimeWindow[1], bAfterDispatch))
		{
			m_cItem[0].SetReleaseTimeWindow(dwOpenOffset, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0, bAfterDispatch);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tTimeWindow[1]))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, (!tTimeWindow[1].GetTotalSeconds()) ? tTimeWindow[0] : 0);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, tTimeWindow[0]);
			break;
		}
		m_cItem[0].SetReleaseTimeWindow(CTimeTag(0), tTimeWindow[0]);
		break;
	}
	ShowConstraints();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSelchangeInterlock()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock;
	CTCAutomaticStackItem  *pItem;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCK_NAME)->GetWindowText(szInterlock);
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetInterlock((nItem == nItems - 1) ? szInterlock : EMPTYSTRING);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetInterlock(szInterlock);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSelchangeInterlocked()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock[2];
	CTCAutomaticStackItem  *pItem;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[0]), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->GetWindowText(szInterlock[1]); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCURSEL) < 0; )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szInterlock[1] = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS))));
		break;
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetReleaseInterlock((!nItem) ? szInterlock[0] : EMPTYSTRING, (szInterlock[1] == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) && !nItem) ? TRUE : FALSE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(szInterlock[0], (szInterlock[1] == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS)) ? TRUE : FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSelchangeInterlockedResult()
{
	INT  nItem;
	INT  nItems;
	CString  szInterlock[2];
	CTCAutomaticStackItem  *pItem;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_NAME)->GetWindowText(szInterlock[0]), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT)->GetWindowText(szInterlock[1]); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_GETCURSEL) < 0; )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_INTERLOCKED_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szInterlock[1] = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS))));
		break;
	}
	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetReleaseInterlock((!nItem) ? szInterlock[0] : EMPTYSTRING, (szInterlock[1] == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS) && !nItem) ? TRUE : FALSE);
			continue;
		}
	}
	for (; !nItems; )
	{
		m_cItem[0].SetReleaseInterlock(szInterlock[0], (szInterlock[1] == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEINTERLOCKSDIALOG_RESULT_SUCCESS)) ? TRUE : FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowAfterPrevious()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERPREVIOUS_OFFSET))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) && pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch))
		{
			pItem->SetReleaseTimeWindow((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), tInterval, FALSE);
			continue;
		}
	}
	if (!nItems  &&  m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) m_cItem[0].SetReleaseTimeWindow((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), tInterval, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowAfterDispatch()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_AFTERDISPATCH_OFFSET))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) && pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch))
		{
			pItem->SetReleaseTimeWindow(max((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), 1), tInterval, TRUE);
			continue;
		}
	}
	if (!nItems  &&  m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval, bAfterDispatch)) m_cItem[0].SetReleaseTimeWindow(max((DWORD)(1000 * (tReleaseTime.GetTime() % SECONDSPERDAY)), 1), tInterval, TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowOpen()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeKey  tReleaseTime;
	CTimeSpan  tInterval;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_START_OPENTIME))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime))
			{
				pItem->SetReleaseTimeWindow(tReleaseTime, tCloseTime);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tInterval))
			{
				pItem->SetReleaseTimeWindow(tReleaseTime, tInterval);
				continue;
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime))
		{
			m_cItem[0].SetReleaseTimeWindow(tReleaseTime, tCloseTime);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval))
		{
			m_cItem[0].SetReleaseTimeWindow(tReleaseTime, tInterval);
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowClose()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tOpenTime;
	CTimeTag  tCloseTime;
	CTimeKey  tReleaseTime;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = ((tReleaseTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_CLOSETIME))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->GetReleaseTimeWindow(tOpenTime, tCloseTime);
			pItem->SetReleaseTimeWindow(tOpenTime, tReleaseTime);
		}
	}
	if (!nItems)
	{
		m_cItem[0].GetReleaseTimeWindow(tOpenTime, tCloseTime);
		m_cItem[0].SetReleaseTimeWindow(tOpenTime, tReleaseTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnSpinchangeTimeWindowInterval()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwOpenOffset;
	CTimeTag  tOpenTime;
	CTimeSpan  tInterval[2];
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = ((tInterval[0] = Spinbox_GetPos(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASECONSTRAINTS_TIMEWINDOW_STOP_INTERVAL_PERIOD))) > 0) ? (INT)m_cComposedItem[0].GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(dwOpenOffset, tInterval[1], bAfterDispatch))
			{
				pItem->SetReleaseTimeWindow(dwOpenOffset, tInterval[0], bAfterDispatch);
				continue;
			}
			if (pItem->GetReleaseTimeWindow(tOpenTime, tInterval[1]))
			{
				pItem->SetReleaseTimeWindow(tOpenTime, tInterval[0]);
				continue;
			}
		}
	}
	for (; !nItems; )
	{
		if (m_cItem[0].GetReleaseTimeWindow(dwOpenOffset, tInterval[1], bAfterDispatch))
		{
			m_cItem[0].SetReleaseTimeWindow(dwOpenOffset, tInterval[0], bAfterDispatch);
			break;
		}
		if (m_cItem[0].GetReleaseTimeWindow(tOpenTime, tInterval[1]))
		{
			m_cItem[0].SetReleaseTimeWindow(tOpenTime, tInterval[0]);
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	BOOL  bInterlock[3];
	CString  szInterlock[3];
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_cComposedItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cComposedItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (; !pItem->GetInterlock().IsEmpty() && szInterlock[0].IsEmpty(); )
			{
				szInterlock[0] = pItem->GetInterlock();
				break;
			}
			if (pItem->GetReleaseInterlock(szInterlock[2], bInterlock[2]) && szInterlock[1].IsEmpty())
			{
				szInterlock[1] = szInterlock[2];
				bInterlock[1] = bInterlock[2];
			}
			pItem->SetInterlock(EMPTYSTRING);
			pItem->SetReleaseInterlock(EMPTYSTRING);
		}
	}
	if (!szInterlock[0].IsEmpty())
	{
		for (; (pItem = m_cComposedItem[0].GetAt((INT)m_cComposedItem[0].GetUpperBound())); )
		{
			pItem->SetInterlock(szInterlock[0]);
			break;
		}
	}
	if (!szInterlock[1].IsEmpty())
	{
		for (; (pItem = m_cComposedItem[0].GetAt(0)); )
		{
			pItem->SetReleaseInterlock(szInterlock[1], bInterlock[1]);
			break;
		}
	}
	GetTCService()->SetTCInterlocks(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, m_pInterlocks[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemReleaseConstraintsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASECONSTRAINTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemReleaseConstraintsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASECONSTRAINTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseInterlocksDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemReleaseInterlocksDialog, CDisplayDialog)

CTCAutomaticStackItemReleaseInterlocksDialog::CTCAutomaticStackItemReleaseInterlocksDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemReleaseInterlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemReleaseInterlocksDialog::Create(CWnd *pParentWnd, ULONGLONG nInterlockFlags, CTCInterlocks &pInterlocks)
{
	INT  nResult;

	for (m_nInterlockFlags = nInterlockFlags, m_pInterlocks[0].Copy(&pInterlocks), m_pInterlocks[1].Copy(&pInterlocks); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemReleaseInterlocksDialog::IDD)) == IDOK; )
	{
		pInterlocks.Copy(&m_pInterlocks[0]);
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::Initialize()
{
	GetParentDisplay()->GetUserPermissions((m_nPermissions = 0));
	return TRUE;
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::EnumInterlocks()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock))) SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	return TRUE;
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

VOID CTCAutomaticStackItemReleaseInterlocksDialog::ShowProperties()
{
	UINT  nScope;
	UINT  nStage;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, ((nScope = TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope())) == TCINTERLOCK_SCOPE_GLOBAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, (nScope == TCINTERLOCK_SCOPE_LOCAL || nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, ((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) && SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, (nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT || (nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT  &&  SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, (nScope == TCINTERLOCK_SCOPE_COMMANDS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, ((nStage = pInterlock->GetStage()) == TCINTERLOCK_STAGE_RECEPTION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, (nStage == TCINTERLOCK_STAGE_START) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, (nStage == TCINTERLOCK_STAGE_PROGRESS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, (nStage == TCINTERLOCK_STAGE_COMPLETION) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)TranslateIDToSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope()))) : -1));
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		AdjustToPrivileges();
		return;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, (m_nInterlockFlags & TCFUNCTION_ILSCOPE_GLOBAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, (m_nInterlockFlags & TCFUNCTION_ILSCOPE_LOCAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, (m_nInterlockFlags & TCFUNCTION_ILSCOPE_LOCALSUBSYSTEM) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_RECEPTION) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_UPLINK) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_ONBOARD) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_ACCEPTANCE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, (m_nInterlockFlags & TCFUNCTION_ILSTAGE_COMPLETION) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	AdjustToPrivileges();
}

CTCInterlock *CTCAutomaticStackItemReleaseInterlocksDialog::FindInterlock() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName);
	return m_pInterlocks[0].GetAt(m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szName));
}

UINT CTCAutomaticStackItemReleaseInterlocksDialog::TranslateToSubSystemID(LPCTSTR pszSubSystem) CONST
{
	return GetTCService()->TranslateTCSubSystemToID(pszSubSystem);
}

CString CTCAutomaticStackItemReleaseInterlocksDialog::TranslateIDToSubSystem(UINT nSubSystemID) CONST
{
	return GetTCService()->TranslateIDToTCSubSystem(nSubSystemID);
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::CanAddInterlock() CONST
{
	return((!FindInterlock() && Check(FALSE)) ? (((m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::CanRemoveInterlock() CONST
{
	CTCInterlock  *pInterlock;

	return(((pInterlock = FindInterlock()) && !pInterlock->IsAutomatic()) ? (((m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) && TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) : FALSE);
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::CanRemoveAllInterlocks() CONST
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && !pInterlock->IsAutomatic() && (((m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) && TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) break;
		continue;
	}
	return((nInterlock < nInterlocks) ? TRUE : FALSE);
}

CTCAutomaticStackWnd *CTCAutomaticStackItemReleaseInterlocksDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackItemReleaseInterlocksDialog::AdjustToPrivileges()
{
	BOOL  bCheck[2];
	CTCInterlock  *pInterlock;

	for (bCheck[0] = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE), bCheck[1] = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE), bCheck[0] = bCheck[0] || bCheck[1]; (pInterlock = FindInterlock()); )
	{
		bCheck[0] = ((pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && !pInterlock->IsAutomatic()) ? bCheck[0] : FALSE;
		bCheck[1] = ((pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && !pInterlock->IsAutomatic()) ? bCheck[1] : FALSE;
		bCheck[0] = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL || bCheck[1]) ? bCheck[0] : FALSE;
		break;
	}
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, (((m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE)) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) ? TRUE : FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[1] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, (m_nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? bCheck[0] : bCheck[1]);
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::IsModified() CONST
{
	return !m_pInterlocks[0].Compare(&m_pInterlocks[1]);
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::Check(BOOL bModified) CONST
{
	return(((GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) || (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SendMessage(CB_GETCURSEL) >= 0) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) && (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION))) || (!GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowTextLength() && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION))) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackItemReleaseInterlocksDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemReleaseInterlocksDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemReleaseInterlocksDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemReleaseInterlocksDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, OnScopeGlobal)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, OnScopeLocal)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, OnScopeSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, OnScopeTeleommands)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, OnScopeNoWaitState)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, OnStageReception)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, OnStageTransmission)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, OnStageAcceptance)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, OnStageStart)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, OnStageProgress)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, OnStageCompletion)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, OnSelchangeSubSystem)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseInterlocksDialog message handlers

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION)->EnableWindow();
	EnumInterlocks();
	EnumSubSystems();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnAdd()
{
	UINT  nScope;
	UINT  nStage;
	CString  szName;
	CString  szSubSystem;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (; (pInterlock = new CTCInterlock); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		nScope = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL)) ? TCINTERLOCK_SCOPE_GLOBAL : TCINTERLOCK_SCOPE_NONE;
		nScope = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? ((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALNOWAIT : TCINTERLOCK_SCOPE_LOCAL) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? ((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT : TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) ? TCINTERLOCK_SCOPE_COMMANDS : nScope;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION)) ? TCINTERLOCK_STAGE_RECEPTION : TCINTERLOCK_STAGE_NONE;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)) ? TCINTERLOCK_STAGE_TRANSMISSION : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)) ? TCINTERLOCK_STAGE_ACCEPTANCE : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START)) ? TCINTERLOCK_STAGE_START : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS)) ? TCINTERLOCK_STAGE_PROGRESS : nStage;
		nStage = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION)) ? TCINTERLOCK_STAGE_COMPLETION : nStage;
		for (pInterlock->SetName(szName), pInterlock->SetSourceType(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK), pInterlock->SetScope((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? MAKETCINTERLOCKSCOPECODE(nScope, TranslateToSubSystemID(szSubSystem)) : MAKETCINTERLOCKSCOPECODE(nScope, 0)), pInterlock->SetStage(nStage); m_pInterlocks[0].Add(pInterlock) >= 0; )
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName));
			break;
		}
		if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0)
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
			break;
		}
		delete pInterlock;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnRemove()
{
	INT  nIndex;
	CString  szName;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->GetWindowText(szName); (pInterlock = m_pInterlocks[0].GetAt((nIndex = m_pInterlocks[0].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szName)))); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		m_nInterlockFlags = TCINTERLOCK_SCOPE_NONE | TCINTERLOCK_STAGE_NONE;
		m_pInterlocks[0].RemoveAt(nIndex);
		delete pInterlock;
		ShowProperties();
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnRemoveAll()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && (pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) != TCINTERLOCK_SCOPE_GLOBAL || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)))
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName()));
			m_nInterlockFlags = TCINTERLOCK_SCOPE_NONE | TCINTERLOCK_STAGE_NONE;
			m_pInterlocks[0].RemoveAt(nInterlock);
			delete pInterlock;
			nInterlocks--;
			nInterlock--;
		}
	}
	if (!SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		ShowProperties();
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnScopeGlobal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_GLOBAL, 0));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnScopeLocal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnScopeSubSystem()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1));
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnScopeTeleommands()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_COMMANDS, 0));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnScopeNoWaitState()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? ((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1)) : ((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageReception()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_RECEPTION);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageTransmission()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_TRANSMISSION);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageAcceptance()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_ACCEPTANCE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageStart()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_START);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageProgress()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_PROGRESS);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnStageCompletion()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_COMPLETION);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_STAGE_COMPLETION, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	AdjustToPrivileges();
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnSelchangeName()
{
	if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_NAME, CB_GETCURSEL)) >= 0)
	{
		AdjustToPrivileges();
		ShowProperties();
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnSelchangeSubSystem()
{
	CString  szSubSystem;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()), TranslateToSubSystemID(szSubSystem)));
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEINTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemReleaseInterlocksDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASEINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemReleaseInterlocksDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASEINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseBlockMacroDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemReleaseBlockMacroDialog, CDisplayDialog)

CTCAutomaticStackItemReleaseBlockMacroDialog::CTCAutomaticStackItemReleaseBlockMacroDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemReleaseBlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemReleaseBlockMacroDialog::Create(CWnd *pParentWnd, CTCAutomaticStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(pItem); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemReleaseBlockMacroDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::Initialize()
{
	GetParentDisplay()->GetUserPermissions((m_nPermissions = 0));
	return TRUE;
}

CTCAutomaticStackWnd *CTCAutomaticStackItemReleaseBlockMacroDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::EnumBlockMembers()
{
	INT  nIndex;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	CString  szElement;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctionBlock  *pBlock;
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	if ((pItem = m_cItem[0].GetAt(0)))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_NAME)->SetWindowText(pItem->GetName());
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION)->SetWindowText(pItem->GetDescription());
		if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
		{
			for (nElement = 0, nElements = (INT)pBlock->GetSize(), m_szMembers.RemoveAll(); nElement < nElements; nElement++)
			{
				if ((pBlockElement = pBlock->GetAt(nElement)) != (CDatabaseTCFunctionBlockElement *)NULL)
				{
					if ((pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION) == TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION)
					{
						if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pBlockElement->GetName()))))
						{
							for (szElement.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
							{
								for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
								{
									m_szMembers.InsertAt(nIndex, pFunction->GetName());
									break;
								}
								break;
							}
						}
						continue;
					}
					if (pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_PACKET)
					{
						for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
						{
							if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && GetDatabase()->GetTCPackets()->Find(pBlockElement->GetName()) == pFunction->GetTCPacketRef() && pFunction->GetTCPacketRef() >= 0)
							{
								for (szElement.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
								{
									for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
									{
										m_szMembers.InsertAt(nIndex, pFunction->GetName());
										break;
									}
									break;
								}
							}
						}
						continue;
					}
					if (pBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE)
					{
						for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
						{
							if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) && (GetDatabase()->TranslateTCFunctionType(pBlockElement->GetName()) & pFunction->GetAttributes()))
							{
								for (szElement.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_MEMBER_FORMAT), (LPCTSTR)pFunction->GetName(), (LPCTSTR)pFunction->GetDescription()); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szElement) < 0; )
								{
									for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szElement)) >= 0; )
									{
										m_szMembers.InsertAt(nIndex, pFunction->GetName());
										break;
									}
									break;
								}
							}
						}
						continue;
					}
				}
			}
		}
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_SETCURSEL);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		return TRUE;
	}
	return FALSE;
}

VOID CTCAutomaticStackItemReleaseBlockMacroDialog::ShowMacroContents()
{
	INT  nItem;
	INT  nItems;
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nMember;
	INT  nMembers;
	CString  szItem;
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;

	for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(), nDigits = max(cStringTools.ConvertIntToString(nItems).GetLength(), 3); nItem < nItems; nItem++)
	{
		if ((pItem = m_cItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nMember = 0, nMembers = (INT)m_szMembers.GetSize(); nMember < nMembers; nMember++)
			{
				if (m_szMembers.GetAt(nMember) == pItem->GetName()) break;
				continue;
			}
			for (nColumn = 0, nColumns = (!nItem || nMember < nMembers) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem, nDigits);
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (nItem >= SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItem, nColumn, szItem);
			}
			if (nItem > 0 && nMember == nMembers)
			{
				m_cItem[0].RemoveAt(nItem);
				delete pItem;
				nItems--;
				nItem--;
			}
		}
	}
	while (nItems < SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nItems);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), max(Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)), 0));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && !CheckMacroSize()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->ShowWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && !CheckMacroSize()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 0 && CheckMacroSize()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)) > 0) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 1) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::CheckMacroSize() CONST
{
	INT  nItem;
	INT  nItems;
	INT  nElement;
	INT  nElements;
	INT  nMaxLength;
	INT  nByteOffset;
	INT  nBitOffset[2];
	INT  nBlockLength[2];
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionBlock  *pBlock;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nByteOffset = 0, nMaxLength = 0, nBlockLength[0] = nBlockLength[1] = 0; (pItem = m_cItem[0].GetAt(0)) && pItem->GetTCPacket(&cPacket); )
	{
		if ((pBlock = GetDatabase()->GetTCFunctionBlocks()->GetAt(GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()))))
		{
			for (; pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LI, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NI, nByteOffset, nMaxLength)) break;
				break;
			}
			for (; pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LTT, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NTT, nByteOffset, nMaxLength)) break;
				break;
			}
			for (; pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP; )
			{
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_L2S, nByteOffset, nMaxLength)) break;
				if (pBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_N2S, nByteOffset, nMaxLength)) break;
				break;
			}
		}
		break;
	}
	for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nElement = 0, nElements = (INT)pItem->GetSize(), nBitOffset[0] = nBitOffset[1] = 0; nElement < nElements; nElement++)
			{
				if ((pFunctionElement = (CDatabaseTCFunctionElement *)pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					for (; 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() < nBitOffset[1] || !nBitOffset[1]; )
					{
						nBitOffset[1] = 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos();
						break;
					}
					for (; 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() + pFunctionElement->GetWidth() > nBitOffset[0]; )
					{
						nBitOffset[0] = 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos() + pFunctionElement->GetWidth();
						break;
					}
				}
			}
			if (nItem > 0)
			{
				nBlockLength[0] += max(nBitOffset[0] - nBitOffset[1], 0);
				nBlockLength[1]++;
			}
		}
	}
	return((cPacket.GetDataSize() > nByteOffset + nBlockLength[0] / 8 && nBlockLength[1] <= nMaxLength) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::CheckPrivileges(UINT nPermission) CONST
{
	return(((((m_nPermissions & nPermission) || !nPermission) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) || ((m_nPermissions & nPermission) == 0 && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::Check(BOOL bModified) CONST
{
	CTCAutomaticStackItem  *pItem;

	return(((pItem = m_cItem[0].GetAt(0)) && GetDatabase()->GetTCFunctionBlocks()->Find(pItem->GetName()) >= 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemReleaseBlockMacroDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::PostNcDestroy()
{
	m_szMembers.RemoveAll();
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemReleaseBlockMacroDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemReleaseBlockMacroDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD, OnAddMember)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemReleaseBlockMacroDialog message handlers

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_DESCRIPTION));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NUMBER)) ? (rColumns.Width() / 10) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESRELEASEBLOCKMACRODIALOG_TITLEITEM_NAME)) ? ((9 * rColumns.Width()) / 40) : ((27 * rColumns.Width()) / 40)));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_DESCRIPTION)->EnableWindow();
	EnumBlockMembers();
	ShowMacroContents();
	return TRUE;
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_ADD)->EnableWindow((CheckMacroSize()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVE)->EnableWindow((pNotifyListView->iItem > 0) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS, LVM_GETITEMCOUNT) > 1) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) : FALSE);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::OnAddMember()
{
	INT  nIndex[2];
	BOOL  bBlockMacro;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCFunction  *pFunction;
	CTCAutomaticStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (; (pItem[0] = new CTCAutomaticStackItem); )
	{
		if ((pItem[1] = m_cItem[0].GetAt(0)) != (CTCAutomaticStackItem *)NULL)
		{
			if ((pFunction = ((nIndex[0] = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS, CB_GETCURSEL)) >= 0 && nIndex[0] < m_szMembers.GetSize()) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_szMembers.GetAt(nIndex[0]))) : (CDatabaseTCFunction *)NULL))
			{
				for (pItem[0]->SetName(pFunction->GetName()), pItem[0]->SetType(pItem[1]->GetType()), pItem[0]->SetFlags(pItem[1]->GetFlags()); TRUE; )
				{
					if (pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
					{
						pItem[0]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
						pItem[0]->SetReleaseTime(pItem[1]->GetReleaseTime());
						break;
					}
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
					{
						pItem[0]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
						break;
					}
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
					{
						pItem[0]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
						break;
					}
					pItem[0]->SetReleaseTimeWindow(CTimeTag(0));
					break;
				}
				for (nIndex[1] = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)); (pPacket = GetDatabase()->GetTCPackets()->GetAt(pFunction->GetTCPacketRef())) && pItem[0]->CDatabaseTCFunction::Copy(pFunction) && pItem[0]->SetTCPacket(pPacket); )
				{
					for (m_cItem[0].InsertAt(nIndex[1] + 1, pItem[0], 1); (bBlockMacro = CheckMacroSize()); )
					{
						ShowMacroContents();
						nIndex[1]++;
						break;
					}
					for (; !bBlockMacro; )
					{
						m_cItem[0].RemoveAt(nIndex[1] + 1);
						break;
					}
					break;
				}
				if (nIndex[1] == Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS)))
				{
					GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->EnableWindow();
					GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS_REMARK)->ShowWindow(SW_SHOW);
					delete pItem[0];
				}
				Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS), nIndex[1]);
				break;
			}
		}
		delete pItem[0];
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::OnRemoveMember()
{
	INT  nIndex;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	if ((pItem = m_cItem[0].GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_CONTENTS))))))
	{
		m_cItem[0].RemoveAt(nIndex);
		delete pItem;
	}
	ShowMacroContents();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::OnRemoveAllMembers()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 1, nItems = (INT)m_cItem[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_cItem[0].GetAt(nItem)))
		{
			m_cItem[0].RemoveAt(nItem);
			delete pItem;
			nItems--;
			nItem--;
			continue;
		}
		break;
	}
	ShowMacroContents();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMRELEASEBLOCKMACRO_MEMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	if ((pItem[0] = m_cItem[0].GetAt(0)))
	{
		for (nItem = 1, nItems = (INT)m_cItem[0].GetSize(), pItem[0]->SetFlags(pItem[0]->GetFlags() | TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED), pItem[0]->SetReleaseBlock(pItem[0]->GetName()), pItem[0]->SetReleaseBlockID(0); nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_cItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
			{
				pItem[1]->SetFlags(pItem[1]->GetFlags() | TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED);
				pItem[1]->SetReleaseBlock(pItem[0]->GetReleaseBlock());
				pItem[1]->SetReleaseBlockID(pItem[0]->GetReleaseBlockID() + nItem);
				if (pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[1]->SetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch);
					pItem[1]->SetReleaseTime(pItem[0]->GetReleaseTime());
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval);
					continue;
				}
				if (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					pItem[1]->SetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]);
					continue;
				}
				pItem[1]->SetReleaseTimeWindow(CTimeTag(0));
			}
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemReleaseBlockMacroDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASEBLOCKMACRODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemReleaseBlockMacroDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMRELEASEBLOCKMACRODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackItemPropertiesDialog, CDisplayDialog)

CTCAutomaticStackItemPropertiesDialog::CTCAutomaticStackItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackItemPropertiesDialog::Create(CWnd *pParentWnd, CTCAutomaticStackItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(&m_cItem[0]); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackItemPropertiesDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackItemPropertiesDialog::Initialize()
{
	GetParentDisplay()->GetUserPermissions((m_nPermissions = 0));
	return TRUE;
}

CTCAutomaticStackWnd *CTCAutomaticStackItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackItemPropertiesDialog::ShowProperties()
{
	UINT  nExecutionOBRT;
	CString  szExecutionTime;
	CTimeTag  tExecutionTime;
	CStringTools  cStringTools;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_NAME)->SetWindowText(m_cItem[0].GetName());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_cItem[0].GetDescription());
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((m_cItem[0].GetExecutionOBRT(nExecutionOBRT)) ? cStringTools.ConvertUIntToString(nExecutionOBRT, 16) : EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szExecutionTime = (m_cItem[0].GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) ? tExecutionTime.FormatGmt() : EMPTYSTRING));
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), (m_cItem[0].GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && m_cItem[0].GetExecutionTime(tExecutionTime)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && m_cItem[0].GetExecutionOBRT(nExecutionOBRT)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, (m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (m_cItem[0].GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP))) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_START) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, (m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT)->EnableWindow(m_cItem[0].GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szExecutionTime.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP)->EnableWindow((m_cItem[0].GetAttributes() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? TRUE : FALSE);
	ShowParameters();
}

VOID CTCAutomaticStackItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = 0, nParameters = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
		{
			for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pPacketParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pPacketParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
					{
						szItem = pPacketParameter->GetConstValueAsText();
						break;
					}
					for (szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pPacketParameter->GetConstValueAsText().IsEmpty(); )
					{
						szItem.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pPacketParameter->GetConstValueAsText());
						break;
					}
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nCount, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nCount, nColumn, szItem);
				nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
			}
		}
	}
	for (nElement = 0, nElements = (INT)m_cItem[0].GetSize(); nElement < nElements; nElement++)
	{
		if ((pFunctionElement = m_cItem[0].GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
		{
			for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
			{
				if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
				continue;
			}
			for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pFunctionElement->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pFunctionElement->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					if ((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pFunctionElement->GetConstValueAsText().IsEmpty(); )
					{
						szItem.Format(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pFunctionElement->GetConstValueAsText());
						break;
					}
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LOADVALUES)->EnableWindow((m_cItem[0].GetParameterSets(szSets) > 0) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow(FALSE);
}

VOID CTCAutomaticStackItemPropertiesDialog::EvaluateParameters()
{
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPackets  pPackets;
	CDatabaseTCFunction  cFunction;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	if (cFunction.Copy(&m_cItem[0]) && m_cItem[0].GetTCPacket(&cPacket))
	{
		for (nElement = 0, nElements = (INT)cFunction.GetSize(); nElement < nElements; nElement++)
		{
			if ((pFunctionElement = cFunction.GetAt(nElement)) && pFunctionElement->GetName().IsEmpty() && !pFunctionElement->HasConstValue())
			{
				if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
				{
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 2)));
					continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
				{
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 8)));
					continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
				{
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 16)));
					continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
				{
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText())));
					continue;
				}
				if ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
				{
					pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 10)));
					continue;
				}
			}
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)) && pPacketParameter->GetTag().IsEmpty() && !pPacketParameter->HasConstValue())
			{
				if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
				{
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 2)));
					continue;
				}
				if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
				{
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 8)));
					continue;
				}
				if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
				{
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 16)));
					continue;
				}
				if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
				{
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText())));
					continue;
				}
				if ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
				{
					pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 10)));
					continue;
				}
			}
		}
		for (nFunction = 0, nFunctions = (GetTCService()->GenerateTCPackets(&cFunction, &cPacket, m_cItem[0].GetMemoryPatch(), m_cItem[0].GetExecutionTime(tExecutionTime) | m_cItem[0].GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) | m_cItem[0].GetExecutionOBRT(nExecutionOBRT), FALSE, FALSE, TRUE, pFunctions, pPackets) >= 0) ? (INT)pFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
		{
			if ((pFunction = pFunctions.GetAt(nFunction)) && pFunction->GetName() == cFunction.GetName())
			{
				for (m_cItem[0].CDatabaseTCFunction::Copy(pFunction); (pPacket = pPackets.GetAt(nFunction)); )
				{
					m_cItem[0].SetTCPacket(pPacket);
					break;
				}
				break;
			}
		}
	}
}

BOOL CTCAutomaticStackItemPropertiesDialog::HasTemplates() CONST
{
	CStringArray  szTemplates;
	CTCAutomaticStackItemTemplates  pTemplates;

	return((GetParentDisplay()->GetItemTemplates(pTemplates) && pTemplates.Enum(m_cItem[0].GetName(), szTemplates) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackItemPropertiesDialog::CheckTCVerificationStage(UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pGroupParameter;

	if ((pGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(m_cItem[0].GetExeVerGroupRef())))
	{
		for (nParameter = 0, nParameters = (INT)pGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pGroupParameter = pGroup->GetAt(nParameter)) && pGroupParameter->GetStage() == nStage) break;
			continue;
		}
		return((nParameter < nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCFunctionElement *pFunctionElement) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pFunctionElement->GetName()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}
BOOL CTCAutomaticStackItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCPacketParameter *pPacketParameter) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pPacketParameter->GetTag()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}

INT CTCAutomaticStackItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackItemPropertiesDialog::CheckPrivileges(UINT nPermission) CONST
{
	return(((m_cItem[0].GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP && ((((m_nPermissions & nPermission) || !nPermission) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) || ((m_nPermissions & nPermission) == 0 && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)))) ? TRUE : FALSE);
}

VOID CTCAutomaticStackItemPropertiesDialog::AdjustToPrivileges()
{
	BOOL  bCheck[4];

	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (bCheck[0] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS)));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, (bCheck[1] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME)));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, (bCheck[2] = CheckPrivileges()));
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, bCheck[2]);
	AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, (bCheck[3] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES)));
}

BOOL CTCAutomaticStackItemPropertiesDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCAutomaticStackItemPropertiesDialog::Check(BOOL bModified) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	UINT  nExecutionOBRT;
	BOOL  bAfterDispatch;
	DWORD  dwTimeOffset;
	CTimeKey  tTimeKey;
	CTimeTag  tTimeTag[3];
	CTimeSpan  tInterval;
	CTimeSpan  tMinOffset;
	CTimeSpan  tMaxOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	if (((m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && tInterval > 0 && (tTimeKey <= tTimeTag[0].GetTimeInSeconds() + tInterval.GetTotalSeconds() || (tTimeTag[0] == 0 && !m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch)))) || (m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && tTimeTag[0] <= tTimeTag[1] && tTimeKey <= tTimeTag[1].GetTimeInSeconds()) || m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch) || (m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && tInterval == 0 && tTimeTag[1] == 0) || (!m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tInterval) && !m_cItem[0].GetReleaseTimeWindow(tTimeTag[0], tTimeTag[1]) && !m_cItem[0].GetReleaseTimeWindow(dwTimeOffset, tInterval, bAfterDispatch))) && (((m_cItem[0].GetExecutionTime(tTimeTag[2]) || (m_cItem[0].GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tTimeTag[2]))) && GetTCService()->GetTCFunctionExecutionTimeOffsets(tMinOffset, tMaxOffset) && (m_cItem[0].GetReleaseTime() == 0 || tTimeTag[2] >= m_cItem[0].GetReleaseTime() + 1000000 * tMinOffset.GetTotalSeconds()) && tTimeTag[2].GetTimeInSeconds() >= tTimeKey.GetTime() + tMinOffset.GetTotalSeconds() && tTimeTag[2].GetTimeInSeconds() <= tTimeKey.GetTime() + tMaxOffset.GetTotalSeconds()) || (!m_cItem[0].GetExecutionTime(tTimeTag[2]) && !m_cItem[0].GetExecutionOBRT(nExecutionOBRT))))
	{
		for (nElement = 0, nElements = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)m_cItem[0].GetSize() : -1; nElement < nElements; nElement++)
		{
			if ((pFunctionElement = m_cItem[0].GetAt(nElement)))
			{
				if (!pFunctionElement->GetConstValueAsText().IsEmpty())
				{
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
			}
			break;
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)))
			{
				if (!pPacketParameter->GetConstValueAsText().IsEmpty())
				{
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
					{
						if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
				}
				if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
			}
			break;
		}
		return((nElement == nElements  &&  nParameter == nParameters) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCAutomaticStackItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, OnPreAuthorize)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_RELEASE, OnReleaseConstraints)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, OnExecuteAtOBRT)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, OnExecuteAs2Step)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE, OnAcknowledgeAcceptance)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START, OnAcknowledgeStart)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS, OnAcknowledgeProgress)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION, OnAcknowledgeCompletion)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE, OnLoadDynamicParameterValue)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_SAVETEMPLATE, OnSaveTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_LOADTEMPLATE, OnLoadTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, OnEditchangeExecutionOBRT)
	ON_CONTROL(EN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, OnSpinchangeExecutionTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackItemPropertiesDialog message handlers

BOOL CTCAutomaticStackItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), EvaluateParameters(); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	ShowProperties();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_RELEASE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_SAVETEMPLATE)->EnableWindow(CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCAutomaticStackItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL  bValue;
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCAutomaticStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE, AccessControl(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, (szFlag != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC)) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, (pFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pFunctionElement);
				break;
			}
			if ((pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL))
			{
				CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION, (pPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pPacketParameter);
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow((szFlag != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) && bValue) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) == IDOK  &&  !szValue.IsEmpty() && CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES))
			{
				GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? TRUE : FALSE);
				GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackItemPropertiesDialog::OnOverridePTV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnOverridePEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnOverrideCEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnDisablePTV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnDisablePEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnDisableCEV()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_DISABLECEV)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV); )
	{
		m_cItem[0].SetFlags(m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnPreAuthorize()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnReleaseConstraints()
{
	CTCAutomaticStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	cReleaseConstraintsDialog.Create(this, &m_cItem[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnExecuteImmediately()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE), m_cItem[0].SetExecutionTime(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnExecuteAtTime()
{
	CTimeKey  tTime;
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED), m_cItem[0].SetExecutionTime(1000000 * ((tTime = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + 2 * SECONDSPERHOUR) / SECONDSPERHOUR)).GetTime())); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), tTime);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnExecuteAtOBRT()
{
	CString  szOBRT;
	CTimeTag  tOBRT;
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED), m_cItem[0].SetExecutionOBRT(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT = (GetTCService()->ConvertOBRTToTime(0, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_LIMITTEXT, cStringTools.ConvertUIntToString(UINT_MAX, 16).GetLength());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnExecuteAs2Step()
{
	CHourglassCursor  cCursor;

	for (m_cItem[0].SetFlags((m_cItem[0].GetFlags() & ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP), m_cItem[0].SetExecutionTime(0); TRUE; )
	{
		ShowParameters();
		break;
	}
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_2STEP, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnAcknowledgeAcceptance()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_ACCEPTANCE)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ACCEPTANCE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnAcknowledgeStart()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_START)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_START) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_START));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnAcknowledgeProgress()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_PROGRESS)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_PROGRESS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnAcknowledgeCompletion()
{
	CHourglassCursor  cCursor;

	m_cItem[0].SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ACKNOWLEDGMENTS_COMPLETION)) ? (m_cItem[0].GetFlags() | TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION) : (m_cItem[0].GetFlags() & ~TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szOffset;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
	{
		pFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_NOEXTRAPOLATION)) ? ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackItemPropertiesDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CString  szOolStatus;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (m_cItem[0].GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			for (pFunctionElement->SetConstValueAsText(szValue), pFunctionElement->SetConstValue(), EvaluateParameters(); (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, nByte, nBit))); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szOolStatus = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szFlag = (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				szOolStatus = (!bOolStatus) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szOolStatus;
				break;
			}
			break;
		}
		if ((pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))))
		{
			for (pPacketParameter->SetConstValueAsText(szValue), pPacketParameter->SetConstValue(), m_cItem[0].SetTCPacket(&cPacket), EvaluateParameters(); (pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szOolStatus = STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szOolStatus = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szFlag = (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				szOolStatus = (!bOolStatus) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szOolStatus;
				break;
			}
		}
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szOolStatus);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTCAutomaticStackItemPropertiesParameterSetsDialog  cParameterSetsDialog;

	if (cParameterSetsDialog.Create(this, &m_cItem[0], szParameterSet) == IDOK)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
		{
			if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_cItem[0].GetName()))))
			{
				for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) && pFunctionElement[0]->HasConstValue())
					{
						if ((pFunctionElement[1] = m_cItem[0].GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))) && (pFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
						{
							pFunctionElement[1]->SetAttributes((pFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
							pFunctionElement[1]->SetConstValueAsText(pFunctionElement[0]->GetConstValueAsText());
							pFunctionElement[1]->SetConstValue(pFunctionElement[0]->GetConstValue());
						}
					}
				}
			}
		}
		ShowParameters();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnLoadDynamicParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	ULONGLONG  nFlags;
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szValue.Empty(); (nIndex = (m_cItem[0].GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), nFlags = 0; (pFunctionElement = m_cItem[0].GetAt(m_cItem[0].Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pFunctionElement->GetName());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pFunctionElement->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		for (; (pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pPacketParameter->GetTag());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pPacketParameter->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		if ((pTCParameter = (GetTCService()->Initialize(pTCParameters)) ? pTCParameters.GetAt(0) : (CTCParameter *)NULL) && pTCParameter->GetValueAsText(GetDatabase(), 0, nFlags, szValue))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetWindowText(szValue);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->SetFocus();
		}
		break;
	}
}

void CTCAutomaticStackItemPropertiesDialog::OnSaveTemplate()
{
	CTCAutomaticStackItemPropertiesSaveTemplateDialog  cSaveTemplateDialog;

	if (cSaveTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
		return;
	}
}

void CTCAutomaticStackItemPropertiesDialog::OnLoadTemplate()
{
	CTCAutomaticStackItemPropertiesLoadTemplateDialog  cLoadTemplateDialog;

	if (cLoadTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
		ShowProperties();
	}
	for (; !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) && !HasTemplates(); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_SAVETEMPLATE)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_VALUE)->GetWindowText(szValue);
	for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pFunctionElement = (szValue.IsEmpty()) ? m_cItem[0].GetAt(m_cItem[0].Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		bValue = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	for (; (pPacketParameter = (m_cItem[0].GetTCPacket(&cPacket) && szValue.IsEmpty()) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL); )
	{
		bValue = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckPrivileges() : FALSE);
}

void CTCAutomaticStackItemPropertiesDialog::OnEditchangeExecutionOBRT()
{
	INT  nPos;
	UINT  nOBRT;
	CTimeTag  tOBRT;
	CString  szOBRT[2];
	CString  szDigit[2];
	CStringTools  cStringTools;

	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT))
	{
		for (GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->GetWindowText(szOBRT[0]), szOBRT[0].MakeUpper(), nOBRT = 0, szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16), nPos = 0; nPos < szOBRT[0].GetLength(); nPos++)
		{
			if (_istxdigit(szOBRT[0].GetAt(nPos)))
			{
				if (_istdigit(szOBRT[0].GetAt(nPos)))
				{
					nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[0].GetAt(0));
					continue;
				}
				nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[1].GetAt(0)) + 10;
				continue;
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((szOBRT[0] = (nPos < szOBRT[0].GetLength() - 1) ? (szOBRT[0].Left(nPos) + szOBRT[0].Mid(nPos + 1)) : szOBRT[0].Left(nPos)));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime((UINT)_ttoi64(szOBRT[0]), tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			CAudioDevice::AlertBySound();
			break;
		}
		if (nPos == szOBRT[0].GetLength())
		{
			for (m_cItem[0].SetExecutionOBRT(nOBRT); IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT) && !szOBRT[0].GetLength(); )
			{
				GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
				break;
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime(nOBRT, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnSpinchangeExecutionTime()
{
	m_cItem[0].SetExecutionTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_ITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackItemPropertiesDialog::OnOK()
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	ULONGLONG  nConstValue;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (nElement = 0, nElements = (m_cItem[0].GetTCPacket(&cPacket)) ? (INT)m_cItem[0].GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pFunctionElement = m_cItem[0].GetAt(nElement)) && GetTCService()->ConvertTCParameterValue(pFunctionElement->GetName(), pFunctionElement->GetAttributes(), pFunctionElement->GetConstValueAsText(), nConstValue))
		{
			pFunctionElement->SetConstValue(nConstValue);
			continue;
		}
	}
	for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) && GetTCService()->ConvertTCParameterValue(pPacketParameter->GetTag(), pPacketParameter->GetAttributes(), pPacketParameter->GetConstValueAsText(), nConstValue))
		{
			pPacketParameter->SetConstValue(nConstValue);
			continue;
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackComposedItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackComposedItemPropertiesDialog, CDisplayDialog)

CTCAutomaticStackComposedItemPropertiesDialog::CTCAutomaticStackComposedItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackComposedItemPropertiesDialog::Create(CWnd *pParentWnd, CTCAutomaticStackComposedItem *pItem)
{
	INT  nResult;

	for (m_cItem[0].Copy(pItem), m_cItem[1].Copy(&m_cItem[0]); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackComposedItemPropertiesDialog::IDD)) == IDOK; )
	{
		pItem->Copy(&m_cItem[0]);
		break;
	}
	return nResult;
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::Initialize()
{
	GetParentDisplay()->GetUserPermissions((m_nPermissions = 0));
	return TRUE;
}

CTCAutomaticStackWnd *CTCAutomaticStackComposedItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::EnumEntries()
{
	INT  nEntry;
	INT  nEntries;
	INT  nDigits;
	CString  szEntry[2];
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;

	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->GetWindowText(szEntry[0]);
	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), nDigits = cStringTools.ConvertIntToString(nEntries).GetLength(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = (CTCAutomaticStackItem *)m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			for (szEntry[1].Format(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_ENTRY_FORMAT), (LPCTSTR)cStringTools.ConvertIntToPaddedString(nEntry + 1, nDigits), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetDescription()); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[1]) < 0; )
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_INSERTSTRING, nEntry, (LPARAM)(LPCTSTR)szEntry[1]);
				break;
			}
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_DELETESTRING, nEntries);
		continue;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[0]), 0));
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackComposedItemPropertiesDialog::ShowProperties()
{
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CString  szExecutionOBRT;
	CTimeTag  tExecutionTime;
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameters  pParameters;

	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_NAME)->SetWindowText((!m_cItem[0].GetName().IsEmpty()) ? m_cItem[0].GetName() : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULT_NAME));
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION)->SetWindowText((!m_cItem[0].GetName().IsEmpty()) ? m_cItem[0].GetDescription() : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULT_DESCRIPTION));
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)->EnableWindow((m_cItem[0].GetParameters(pParameters) > 0) ? TRUE : FALSE);
	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) != (CTCAutomaticStackItem *)NULL)
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), (pItem->GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), (pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? ((bEarlierExecution) ? -CTimeKey(dwExecutionOffset / 1000).GetTime() : CTimeKey(dwExecutionOffset / 1000)) : CTimeKey(0));
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionTime(tExecutionTime)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS)) == (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && pItem->GetExecutionOBRT(nExecutionOBRT)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP))) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION  &&  pItem->GetExecutionOBRT(nExecutionOBRT)) ? cStringTools.ConvertUIntToString(nExecutionOBRT, 16) : EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szExecutionOBRT = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION  &&  pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) ? tExecutionTime.FormatGmt() : EMPTYSTRING));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? CheckTCExecutionType(pItem) : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szExecutionOBRT.IsEmpty()) ? TRUE : FALSE);
	}
	else
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	}
	ShowParameters();
}

VOID CTCAutomaticStackComposedItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = nParameters = 0, nElement = nElements = 0; IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST); )
	{
		for (nParameter = 0, nParameters = m_cItem[0].GetParameters(pParameters); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (szItem = (m_szColumns.GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)) ? szItem : EMPTYSTRING; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? cStringTools.ConvertIntToString(pParameter->GetWidth()) : EMPTYSTRING;
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) ? ((pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pParameter->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if ((pParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0)
						{
							if (GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						szItem.Empty();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, nColumn, szItem);
				}
			}
		}
		CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, FALSE);
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetMembershipParameters(pParameters) >= 0)
		{
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, pItem->GetParameterSets(szSets), nCount = 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
				{
					for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pPacketParameter->GetTag();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pPacketParameter->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pPacketParameter->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pPacketParameter->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pPacketParameter->GetConstValueAsText());
								break;
							}
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, nColumn, szItem);
						nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
					}
				}
			}
			for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
					{
						if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
						continue;
					}
					for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pFunctionElement->GetName();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pFunctionElement->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							szItem += (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FORMAL) : EMPTYSTRING;
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pFunctionElement->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pFunctionElement->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pFunctionElement->GetConstValueAsText());
								break;
							}
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, nColumn, szItem);
					}
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0 || m_cItem[0].GetSize() > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST) : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADVALUES)->EnableWindow((szSets.GetSize() > 0) ? CheckPrivileges() : FALSE); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow(FALSE);
}

VOID CTCAutomaticStackComposedItemPropertiesDialog::EvaluateParameters()
{
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPackets  pPackets;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunction  cFunction;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pFunctions;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) && cFunction.Copy(pItem) && pItem->GetTCPacket(&cPacket))
		{
			for (nElement = 0, nElements = (INT)cFunction.GetSize(); nElement < nElements; nElement++)
			{
				if ((pFunctionElement = cFunction.GetAt(nElement)) && pFunctionElement->GetName().IsEmpty() && !pFunctionElement->HasConstValue())
				{
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 2)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 8)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 16)));
						continue;
					}
					if (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText())));
						continue;
					}
					if ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
					{
						pFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pFunctionElement->GetAttributes(), pFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pFunctionElement->GetConstValueAsText(), 10)));
						continue;
					}
				}
			}
			for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && pPacketParameter->GetTag().IsEmpty() && !pPacketParameter->HasConstValue())
				{
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 2)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 8)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 16)));
						continue;
					}
					if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText())));
						continue;
					}
					if ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
					{
						pPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pPacketParameter->GetAttributes(), pPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pPacketParameter->GetConstValueAsText(), 10)));
						continue;
					}
				}
			}
			for (nFunction = 0, nFunctions = (GetTCService()->GenerateTCPackets(&cFunction, &cPacket, pItem->GetMemoryPatch(), pItem->GetExecutionTime(tExecutionTime) | pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) | pItem->GetExecutionOBRT(nExecutionOBRT), FALSE, FALSE, TRUE, pFunctions, pPackets) >= 0) ? (INT)pFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
			{
				if ((pFunction = pFunctions.GetAt(nFunction)) && pFunction->GetName() == cFunction.GetName())
				{
					for (pItem->CDatabaseTCFunction::Copy(pFunction); (pPacket = pPackets.GetAt(nFunction)); )
					{
						pItem->SetTCPacket(pPacket);
						break;
					}
					break;
				}
			}
		}
	}
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::HasTemplates() CONST
{
	CStringArray  szTemplates;
	CTCAutomaticStackComposedItemTemplates  pTemplates;

	return((GetParentDisplay()->GetItemTemplates(pTemplates) && pTemplates.Enum(m_cItem[0].GetName(), szTemplates) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::CheckTCExecutionType(CONST CTCAutomaticStackItem *pItem) CONST
{
	return((pItem->GetAttributes() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCFunctionElement *pFunctionElement) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pFunctionElement->GetName()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}
BOOL CTCAutomaticStackComposedItemPropertiesDialog::CheckTCParameterValue(CONST CDatabaseTCPacketParameter *pPacketParameter) CONST
{
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCParameter  *pParameter;

	if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
	{
		for (pTCParameter->SetTag(pPacketParameter->GetTag()), pTCParameter->SetAttributes(pParameter->GetAttributes()); pTCParameters.Add(pTCParameter) >= 0; )
		{
			if (GetTCService()->Initialize(pTCParameters)) return((pTCParameter->GetValueCount() > 0) ? TRUE : FALSE);
			return FALSE;
		}
		delete pTCParameter;
	}
	return FALSE;
}

INT CTCAutomaticStackComposedItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::CheckPrivileges(UINT nPermission) CONST
{
	CTCAutomaticStackItem  *pItem;

	return(((pItem = m_cItem[0].GetAt((INT)GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->SendMessage(CB_GETCURSEL))) && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP && ((((m_nPermissions & nPermission) || !nPermission) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE))) || ((m_nPermissions & nPermission) == 0 && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)))) ? TRUE : FALSE);
}

VOID CTCAutomaticStackComposedItemPropertiesDialog::AdjustToPrivileges()
{
	BOOL  bCheck[3];

	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL, (bCheck[0] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS)));
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, bCheck[0]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, (bCheck[1] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME)));
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, bCheck[1]);
	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, (bCheck[2] = CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES)));
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::IsModified() CONST
{
	return !m_cItem[0].Compare(&m_cItem[1]);
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::Check(BOOL bModified) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nEntry[2];
	INT  nEntries[2];
	UINT  nOolStatus;
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CTimeTag  tReleaseTime[2][2];
	CTimeTag  tExecutionTime[3];
	CTimeSpan  tReleaseInterval;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
	{
		for (nElement = 0, nElements = ((pItem = m_cItem[0].GetAt(nEntry[0])) && pItem->GetTCPacket(&cPacket)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
		{
			if ((pFunctionElement = pItem->GetAt(nElement)))
			{
				if (!pFunctionElement->GetConstValueAsText().IsEmpty())
				{
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
				}
				if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
			}
			break;
		}
		for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pPacketParameter = cPacket.GetAt(nParameter)))
			{
				if (!pPacketParameter->GetConstValueAsText().IsEmpty())
				{
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
					{
						if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
				}
				if ((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
			}
			break;
		}
		if (nElement != nElements || nParameter != nParameters) break;
	}
	for (nEntry[1] = 0, nEntries[1] = nEntries[0], tReleaseTime[0][0] = tReleaseTime[0][1] = 0, tExecutionTime[0] = 0; nEntry[1] < nEntries[1]; nEntry[1]++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry[1])) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseTime[1][1]) || pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseInterval))
			{
				if (tReleaseTime[1][0] < tReleaseTime[0][1] || tReleaseTime[1][0] <= tExecutionTime[2] || (tReleaseTime[0][0] == 0 && nEntry[1] > 0)) break;
				tReleaseTime[0][0] = (!nEntry[1]) ? tReleaseTime[1][0] : tReleaseTime[0][0];
				tReleaseTime[0][1] = tReleaseTime[1][0];
			}
			if (pItem->GetExecutionTime(tExecutionTime[1]))
			{
				if (((pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseTime[1][1]) || pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseInterval)) && tExecutionTime[1] <= tReleaseTime[1][0]) || (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && tReleaseTime[0][0] > 0 && tExecutionTime[1].GetTime() <= tReleaseTime[0][0].GetTime() + 1000 * (TIMETAG)dwReleaseOffset) || tExecutionTime[1].GetTimeInSeconds() >= tExecutionTime[2].GetTimeInSeconds()) break;
				tExecutionTime[0] = (!nEntry[1]) ? tExecutionTime[1] : tExecutionTime[0];
			}
			if (pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution))
			{
				if (((pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseTime[1][1]) || pItem->GetReleaseTimeWindow(tReleaseTime[1][0], tReleaseInterval)) && ((!bEarlierExecution  &&  tExecutionTime[0].GetTime() + 1000 * (TIMETAG)dwExecutionOffset <= tReleaseTime[1][0].GetTime()) || (bEarlierExecution  &&  tExecutionTime[0].GetTime() - 1000 * (TIMETAG)dwExecutionOffset <= tReleaseTime[1][0].GetTime()))) || (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && ((tReleaseTime[0][0] > 0 && tExecutionTime[0] > 0 && ((!bEarlierExecution  &&  tExecutionTime[0].GetTime() + 1000 * (TIMETAG)dwExecutionOffset <= tReleaseTime[0][0].GetTime() + 1000 * (TIMETAG)dwReleaseOffset) || (bEarlierExecution  &&  tExecutionTime[0].GetTime() - 1000 * (TIMETAG)dwExecutionOffset <= tReleaseTime[0][0].GetTime() + 1000 * (TIMETAG)dwReleaseOffset))) || (tReleaseTime[0][0] == 0 && tExecutionTime[0] == 0 && dwReleaseOffset >= dwExecutionOffset)))) break;
				continue;
			}
		}
	}
	return((nEntry[0] == nEntries[0] && nEntry[1] == nEntries[1]) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackComposedItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackComposedItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackComposedItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackComposedItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL, OnApplyToAll)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, OnPreAuthorize)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASE, OnReleaseConstraints)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, OnExecuteAtOffset)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, OnExecuteAtOffsetAfterPrevious)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, OnExecuteAtOBRT)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, OnExecuteAs2Step)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, OnShowFormalParameters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE, OnLoadDynamicParameterValue)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE, OnSaveTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE, OnLoadTemplate)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, OnSelchangeEntry)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, OnEditchangeExecutionOBRT)
	ON_CONTROL(EN_CHANGE, IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME, OnSpinchangeExecutionOffset)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackComposedItemPropertiesDialog message handlers

BOOL CTCAutomaticStackComposedItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	Timespinbox_SetRange(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), CTimeKey(TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_MINIMUMEXECUTIONTIMEOFFSET), CTimeKey(TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_MAXIMUMEXECUTIONTIMEOFFSET));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (EvaluateParameters(); EnumEntries(); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE)->EnableWindow(CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES));
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
		ShowProperties();
		break;
	}
	AdjustToPrivileges();
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL  bValue;
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCAutomaticStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE, AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, (!szType.IsEmpty() && szFlag != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC)) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE); (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
			{
				CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, ((pFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pFunctionElement);
				break;
			}
			if ((pPacketParameter = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL))
			{
				CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION, ((pPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				bValue = CheckTCParameterValue(pPacketParameter);
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LOADDYNAMICVALUE)->EnableWindow((!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST) && szFlag != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) && szFlag != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) && bValue) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) == IDOK  &&  !szValue.IsEmpty() && CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES))
			{
				GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? TRUE : FALSE);
				GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnApplyToAll()
{
	CHourglassCursor  cCursor;

	AccessControl(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? CheckPrivileges() : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnOverridePTV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnOverridePEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnOverrideCEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnDisablePTV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnDisablePEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnDisableCEV()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV : 0;
			nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		nFlags = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV);
		nFlags &= ~TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV;
		pItem->SetFlags(nFlags);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnPreAuthorize()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			nFlags = pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED;
			nFlags |= (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED : 0;
			pItem->SetFlags(nFlags);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL)) pItem->SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)) ? (pItem->GetFlags() | TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) : (pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnReleaseConstraints()
{
	INT  nIndex;
	INT  nEntry[2];
	INT  nEntries[2];
	CTCAutomaticStackItem  *pItem[4];
	CTCAutomaticStackComposedItem  cComposedItem;
	CTCAutomaticStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	for (; !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL); )
	{
		if ((pItem[0] = m_cItem[0].GetAt((nIndex = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))))
		{
			for (nEntry[0] = nIndex, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] >= 0; nEntry[0]--)
			{
				if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])) != (CTCAutomaticStackItem *)NULL)
				{
					if (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) continue;
					if ((pItem[2] = m_cItem[0].GetAt(nEntry[0] - 1)) && (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && (pItem[2]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem[1]->GetReleaseBlockID() == pItem[2]->GetReleaseBlockID() + 1) continue;
				}
				break;
			}
			for (nEntry[1] = nEntries[1] = nEntry[0]; nEntry[0] < nEntries[0]; nEntry[0]++, nEntries[1]++)
			{
				if ((pItem[2] = ((pItem[1] = m_cItem[0].GetAt(nEntry[0]))) ? new CTCAutomaticStackItem : (CTCAutomaticStackItem *)NULL))
				{
					if (((pItem[1]->GetFlags() & (TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED | TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED)) || ((pItem[3] = m_cItem[0].GetAt(nEntry[0] + 1)) && (pItem[3]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED))) && pItem[2]->Copy(pItem[1]) && cComposedItem.Add(pItem[2]) >= 0) continue;
					if (nEntry[0] == nEntry[1] && pItem[2]->Copy(pItem[1]) && cComposedItem.Add(pItem[2]) >= 0)
					{
						nEntries[1]++;
						break;
					}
					delete pItem[2];
				}
				break;
			}
			if (cReleaseConstraintsDialog.Create(this, &cComposedItem, nIndex) == IDOK)
			{
				for (nEntry[0] = nEntry[1], nEntries[0] = nEntries[1]; nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
					{
						m_cItem[0].RemoveAt(nEntry[0]);
						delete pItem[1];
						nEntries[0]--;
						nEntry[0]--;
					}
				}
				for (nEntry[0] = 0, nEntries[0] = (INT)cComposedItem.GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					m_cItem[0].InsertAt(nEntry[0] + nEntry[1], cComposedItem.GetAt(nEntry[0]), 1);
					continue;
				}
				for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
					{
						pItem[1]->SetMembership(m_cItem[0].GetName());
						pItem[1]->SetMembershipDescription(m_cItem[0].GetDescription());
						pItem[1]->SetMembershipID((!m_cItem[0].GetName().IsEmpty()) ? nEntry[0] : -1);
						pItem[1]->SetMembershipSize((!m_cItem[0].GetName().IsEmpty()) ? nEntries[0] : 0);
					}
				}
				cComposedItem.CPtrArray::RemoveAll();
				EvaluateParameters();
				EnumEntries();
			}
		}
		break;
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
	{
		if (cReleaseConstraintsDialog.Create(this, &m_cItem[0]) == IDOK)
		{
			for (nEntry[0] = 0, nEntries[0] = (INT)m_cItem[0].GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
			{
				if ((pItem[1] = m_cItem[0].GetAt(nEntry[0])))
				{
					pItem[1]->SetMembership(m_cItem[0].GetName());
					pItem[1]->SetMembershipDescription(m_cItem[0].GetDescription());
					pItem[1]->SetMembershipID((!m_cItem[0].GetName().IsEmpty()) ? nEntry[0] : -1);
					pItem[1]->SetMembershipSize((!m_cItem[0].GetName().IsEmpty()) ? nEntries[0] : 0);
				}
			}
			EvaluateParameters();
			EnumEntries();
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteImmediately()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, nFlags[0] = TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE, nFlags[1] = ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset();
			pItem->SetExecutionTime(0);
			pItem->SetExecutionOBRT();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteAtTime()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CTimeKey  tTime;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, tTime = SECONDSPERHOUR*((CTime::GetCurrentTime().GetTime() + 2 * SECONDSPERHOUR) / SECONDSPERHOUR), nFlags[0] = TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTime(1000000 * tTime.GetTime());
			pItem->SetExecutionTimeOffset();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTime(1000000 * tTime.GetTime());
		pItem->SetExecutionTimeOffset();
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), tTime);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteAtOffset()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	DWORD  dwOffset;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, dwOffset = 1000 * TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_DEFAULTEXECUTIONTIMEOFFSET, nFlags[0] = TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset(dwOffset);
			pItem->SetExecutionTime(0);
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset(dwOffset);
		pItem->SetExecutionTime(0);
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME), CTimeKey(dwOffset / 1000));
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteAtOffsetAfterPrevious()
{
	INT  nEntry;
	INT  nEntries;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry))) pItem->SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)) ? ((pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERBEGIN) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) : ((pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERBEGIN));
		continue;
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL)) pItem->SetFlags((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)) ? ((pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERBEGIN) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) : ((pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERBEGIN));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteAtOBRT()
{
	INT  nEntry;
	INT  nEntries;
	UINT  nFlags[2];
	CString  szOBRT;
	CTimeTag  tOBRT;
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0, nFlags[0] = TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED, nFlags[1] = ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
			pItem->SetExecutionTimeOffset();
			pItem->SetExecutionTime(0);
			pItem->SetExecutionOBRT();
		}
	}
	if ((pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL))
	{
		pItem->SetFlags((pItem->GetFlags() & nFlags[1]) | nFlags[0]);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, TRUE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT = (GetTCService()->ConvertOBRTToTime(0, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_LIMITTEXT, cStringTools.ConvertUIntToString(UINT_MAX, 16).GetLength());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnExecuteAs2Step()
{
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))))
	{
		pItem->SetFlags((pItem->GetFlags() & ~(TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP);
		pItem->SetExecutionTimeOffset();
		pItem->SetExecutionTime(0);
		pItem->SetExecutionOBRT();
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ShowParameters();
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_2STEP, TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_AFTERPREVIOUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnShowFormalParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szOffset;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)))) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		pFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_NOEXTRAPOLATION)) ? ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szItem;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? (((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)) : -1) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pFunctionElement = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? pItem->GetAt(pItem->Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8))) : pItem->GetAt(pItem->Find(szTag))); )
		{
			for (pFunctionElement->SetConstValueAsText(szValue), pFunctionElement->SetConstValue(), EvaluateParameters(); (pFunctionElement = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? pItem->GetAt(pItem->Find(szTag, nByte, nBit)) : pItem->GetAt(pItem->Find(szTag))); )
			{
				if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
				{
					if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
				break;
			}
			szFlag = (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
			break;
		}
		if ((pPacketParameter = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL))
		{
			for (pPacketParameter->SetConstValueAsText(szValue), pPacketParameter->SetConstValue(), pItem->SetTCPacket(&cPacket), EvaluateParameters(); (pPacketParameter = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetAt(cPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL); )
			{
				for (; (bOolStatus = GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus)); )
				{
					if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				szItem = (!bOolStatus) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szItem;
				szFlag = (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
				break;
			}
		}
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szItem);
		break;
	}
	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		for (nParameter = 0, nParameters = m_cItem[0].GetParameters(pParameters), szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pParameters.GetAt(nParameter)) && pParameter->GetTag() == szTag)
			{
				for (nItem = 0, nItems = (INT)m_cItem[0].GetSize(), pParameter->SetConstValueAsText(szValue); nItem < nItems; nItem++)
				{
					if ((pItem = m_cItem[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
					{
						for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
						{
							if ((pFunctionElement = pItem->GetAt(nElement)))
							{
								if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_SEQUENCE)
								{
									if (pFunctionElement->GetConstValueSource() == pParameter->GetTag())
									{
										pFunctionElement->SetConstValueAsText(pParameter->GetConstValueAsText());
										continue;
									}
								}
								if (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
								{
									if (pFunctionElement->GetConstValueSource() == pParameter->GetTag())
									{
										pFunctionElement->SetConstValueAsText(pParameter->GetConstValueAsText());
										continue;
									}
								}
							}
						}
					}
				}
				for (m_cItem[0].SetParameters(pParameters); (bOolStatus = GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus)); )
				{
					if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
					break;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), (szItem = (!bOolStatus) ? STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE) : szItem));
				break;
			}
		}
	}
	Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CDatabaseTCFunction  *pFunction;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameterSet  *pParameterSet;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTCAutomaticStackItemPropertiesParameterSetsDialog  cParameterSetsDialog;

	if ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && cParameterSetsDialog.Create(this, pItem, szParameterSet) == IDOK)
	{
		if ((pParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
		{
			if ((pFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pItem->GetName()))))
			{
				for (nParameter = 0, nParameters = (INT)pParameterSet->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pFunctionElement[0] = pParameterSet->GetAt(nParameter)) && pFunctionElement[0]->HasConstValue())
					{
						if ((pFunctionElement[1] = pItem->GetAt(pFunction->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))) && (pFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
						{
							pFunctionElement[1]->SetAttributes((pFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
							pFunctionElement[1]->SetConstValueAsText(pFunctionElement[0]->GetConstValueAsText());
							pFunctionElement[1]->SetConstValue(pFunctionElement[0]->GetConstValue());
						}
					}
				}
			}
		}
		ShowParameters();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnLoadDynamicParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	ULONGLONG  nFlags;
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (szValue.Empty(); (nIndex = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)) : -1) >= 0; )
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), nFlags = 0; (pFunctionElement = pItem->GetAt(pItem->Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pFunctionElement->GetName());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pFunctionElement->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		for (; (pPacketParameter = cPacket.GetAt(cPacket.Find(szTag, nByte, nBit))); )
		{
			if ((pTCParameter = ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pPacketParameter->GetRef()))) ? new CTCParameter : (CTCParameter *)NULL))
			{
				pTCParameter->SetTag(pPacketParameter->GetTag());
				pTCParameter->SetAttributes(pParameter->GetAttributes());
				if (pTCParameters.Add(pTCParameter) >= 0)
				{
					nFlags = pPacketParameter->GetAttributes();
					break;
				}
				delete pTCParameter;
			}
			break;
		}
		if ((pTCParameter = (GetTCService()->Initialize(pTCParameters)) ? pTCParameters.GetAt(0) : (CTCParameter *)NULL) && pTCParameter->GetValueAsText(GetDatabase(), 0, nFlags, szValue))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetWindowText(szValue);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->SetFocus();
		}
		break;
	}
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnSaveTemplate()
{
	CTCAutomaticStackItemPropertiesSaveTemplateDialog  cSaveTemplateDialog;

	if (cSaveTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
		return;
	}
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnLoadTemplate()
{
	CTCAutomaticStackItemPropertiesLoadTemplateDialog  cLoadTemplateDialog;

	if (cLoadTemplateDialog.Create(this, &m_cItem[0]) == IDOK)
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_LOADTEMPLATE)->EnableWindow((HasTemplates()) ? CheckPrivileges(TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) : FALSE);
		ShowProperties();
	}
	for (; !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) && !HasTemplates(); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_SAVETEMPLATE)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnSelchangeEntry()
{
	ShowProperties();
	ShowParameters();
	AdjustToPrivileges();
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_VALUE)->GetWindowText(szValue);
	for (szTag = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pFunctionElement = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && szValue.IsEmpty()) ? pItem->GetAt(pItem->Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCFunctionElement *)NULL); )
	{
		bValue = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	for (; (pPacketParameter = ((pItem = m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetTCPacket(&cPacket) && szValue.IsEmpty()) ? cPacket.GetAt(cPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8)) : (CDatabaseTCPacketParameter *)NULL); )
	{
		bValue = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckPrivileges() : FALSE);
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnEditchangeExecutionOBRT()
{
	INT  nPos;
	INT  nEntry;
	INT  nEntries;
	UINT  nOBRT;
	CTimeTag  tOBRT;
	CString  szOBRT[2];
	CString  szDigit[2];
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;

	if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT))
	{
		for (GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->GetWindowText(szOBRT[0]), szOBRT[0].MakeUpper(), nOBRT = 0, szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16), nPos = 0; nPos < szOBRT[0].GetLength(); nPos++)
		{
			if (_istxdigit(szOBRT[0].GetAt(nPos)))
			{
				if (_istdigit(szOBRT[0].GetAt(nPos)))
				{
					nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[0].GetAt(0));
					continue;
				}
				nOBRT = 16 * nOBRT + __toascii(szOBRT[0].GetAt(nPos)) - __toascii(szDigit[1].GetAt(0)) + 10;
				continue;
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText((szOBRT[0] = (nPos < szOBRT[0].GetLength() - 1) ? (szOBRT[0].Left(nPos) + szOBRT[0].Mid(nPos + 1)) : szOBRT[0].Left(nPos)));
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime((UINT)_ttoi64(szOBRT[0]), tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			CAudioDevice::AlertBySound();
			break;
		}
		if (nPos == szOBRT[0].GetLength())
		{
			for (nEntry = 0, nEntries = (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? (INT)m_cItem[0].GetSize() : 0; nEntry < nEntries; nEntry++)
			{
				if ((pItem = m_cItem[0].GetAt(nEntry)))
				{
					pItem->SetExecutionOBRT(nOBRT);
					continue;
				}
			}
			for (; (pItem = (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL)) ? m_cItem[0].GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL)) : (CTCAutomaticStackItem *)NULL); )
			{
				pItem->SetExecutionOBRT(nOBRT);
				break;
			}
			if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT) && !szOBRT[0].GetLength())
			{
				GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT)->SetWindowText(cStringTools.ConvertUIntToString(0));
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_COUNT, EM_SETSEL, 0, -1);
			}
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->SetWindowText((szOBRT[1] = (GetTCService()->ConvertOBRTToTime(nOBRT, tOBRT)) ? tOBRT.FormatGmt() : EMPTYSTRING));
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME_STATIC)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OBRT_TIME)->ShowWindow((!szOBRT[1].IsEmpty()) ? SW_SHOW : SW_HIDE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnSpinchangeExecutionTime()
{
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tTime;
	CTCAutomaticStackItem  *pItem;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
			{
				pItem->SetExecutionTime(1000000 * tTime.GetTime());
				continue;
			}
			if (nEntry == SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))
			{
				pItem->SetExecutionTime(1000000 * tTime.GetTime());
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnSpinchangeExecutionOffset()
{
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tTime;
	CTCAutomaticStackItem  *pItem;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_OFFSET_TIME)); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			if (IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_APPLYTOALL))
			{
				pItem->SetExecutionTimeOffset((DWORD)(1000 * tTime.GetTime()), tTime < 0);
				continue;
			}
			if (nEntry == SendDlgItemMessage(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))
			{
				pItem->SetExecutionTimeOffset((DWORD)(1000 * tTime.GetTime()), tTime < 0);
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnOK()
{
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	ULONGLONG  nConstValue;
	CTimeSpan  tReleaseInterval;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CHourglassCursor  cCursor;

	for (nEntry = 0, nEntries = (INT)m_cItem[0].GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = m_cItem[0].GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nElement = 0, nElements = (pItem->GetTCPacket(&cPacket)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) && GetTCService()->ConvertTCParameterValue(pFunctionElement->GetName(), pFunctionElement->GetAttributes(), pFunctionElement->GetConstValueAsText(), nConstValue))
				{
					pFunctionElement->SetConstValue(nConstValue);
					continue;
				}
			}
			for (nParameter = 0, nParameters = (INT)cPacket.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && GetTCService()->ConvertTCParameterValue(pPacketParameter->GetTag(), pPacketParameter->GetAttributes(), pPacketParameter->GetConstValueAsText(), nConstValue))
				{
					pPacketParameter->SetConstValue(nConstValue);
					continue;
				}
			}
			if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
			{
				pItem->SetReleaseTime(0);
				continue;
			}
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackComposedItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackComposedItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackHistoricalItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackHistoricalItemPropertiesDialog, CDisplayDialog)

CTCAutomaticStackHistoricalItemPropertiesDialog::CTCAutomaticStackHistoricalItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackHistoricalItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackHistoricalItemPropertiesDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackItem *pItem)
{
	return((m_cItem.Copy(pItem)) ? CDisplayDialog::Create(pParentWnd, CTCAutomaticStackHistoricalItemPropertiesDialog::IDD) : -1);
}

CTCAutomaticStackWnd *CTCAutomaticStackHistoricalItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCAutomaticStackHistoricalItemPropertiesDialog::ShowProperties()
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseDelay;
	CString  szExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;

	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_NAME)->SetWindowText(m_cItem.GetName());
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_cItem.GetDescription());
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText((m_cItem.GetReleaseTime() > 0) ? m_cItem.GetReleaseTime().FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_RELEASETIME_NONE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText((!m_cItem.GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? ((m_cItem.GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0) ? CTimeTag(tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : ((m_cItem.GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0) ? tReleaseTime[1].FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_RELEASETIME_NONE))) : ((m_cItem.GetReleaseTime() > 0 && tReleaseInterval > 0) ? CTimeTag(m_cItem.GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_RELEASETIME_NONE)));
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText((m_cItem.GetTransmissionTime() > 0) ? m_cItem.GetTransmissionTime().FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_TRANSMISSIONTIME_NONE));
	for (szReleaseDelay.Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_TRANSMISSIONDELAY_FORMAT), max((double)(m_cItem.GetTransmissionTime().GetTime() - m_cItem.GetReleaseTime().GetTime()) / 1000000.0, 0.0)); m_cItem.GetReleaseTime() <= 0 || m_cItem.GetTransmissionTime() <= 0; )
	{
		szReleaseDelay.Empty();
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(szReleaseDelay);
	Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME), (m_cItem.GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLECEV, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP, (m_cItem.GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow((!GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow((!GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG));
	ShowParameters();
	ShowRawData();
}

VOID CTCAutomaticStackHistoricalItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nBlockItem;
	INT  nBlockItems;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = 0, nParameters = (m_cItem.GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
	{
		if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
		{
			for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pPacketParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pPacketParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
				{
					szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
					szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
				{
					szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					szItem = pPacketParameter->GetConstValueAsText();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
				{
					if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
					{
						if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nCount, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nCount, nColumn, szItem);
				nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
			}
		}
	}
	for (nBlockItem = -1, nBlockItems = m_cItem.GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
	{
		for (nElement = 0, nElements = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)m_cItem.GetSize(); nElement < nElements; nElement++)
		{
			if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nElement) : m_cItem.GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
				{
					if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
					continue;
				}
				for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pFunctionElement->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								break;
							}
							szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nItem, nColumn, szItem);
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow(FALSE);
}

VOID CTCAutomaticStackHistoricalItemPropertiesDialog::ShowRawData()
{
	INT  nByte;
	INT  nBytes;
	CString  szRawData[2];
	CByteArray  nRawData[2];
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCPacket  cTCPacket;

	if (m_cItem.GetTCPacket(&cPacket))
	{
		szRawData[0].Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_RAWDATA_FORMAT), (LPCTSTR)cPacket.GetDescription(), (LPCTSTR)cPacket.GetTag());
		szRawData[1].Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_RAWDATA_SIMPLEFORMAT), (LPCTSTR)cPacket.GetTag());
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_RAWDATA)->SetWindowText((!cPacket.GetDescription().IsEmpty()) ? szRawData[0] : szRawData[1]);
	}
	for (nByte = 0, nBytes = (m_cItem.GetTCPacket(nRawData[0]) > 0 && cTCPacket.Unmap(nRawData[0])) ? cTCPacket.GetData(nRawData[1]) : 0, szRawData[0].Empty(); nByte < nBytes; nByte++)
	{
		szRawData[0] += (nByte > 0 && nByte % 2 == 0) ? CString(SPACE) : CString(EMPTYSTRING);
		szRawData[0] += cStringTools.ConvertIntToPaddedString(nRawData[1].GetAt(nByte), 2, 16);
	}
	for (; !szRawData[0].IsEmpty(); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_RAWDATA_AREA)->SetWindowText(szRawData[0]);
		break;
	}
}

INT CTCAutomaticStackHistoricalItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCAutomaticStackHistoricalItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackHistoricalItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackHistoricalItemPropertiesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackHistoricalItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackHistoricalItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackHistoricalItemPropertiesDialog message handlers

BOOL CTCAutomaticStackHistoricalItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CFont  cFont;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST)->GetClientRect(rColumns); cFont.CreateStockObject(ANSI_FIXED_FONT); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_RAWDATA_AREA)->SetFont(&cFont);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPTV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLECEV)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_RAWDATA)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_RAWDATA_AREA)->EnableWindow();
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPTV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDEPEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_OVERRIDECEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPTV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLEPEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_DISABLECEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_TIMETAG_TIME, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_ONBOARDEXECUTION_SECONDSTEP, FALSE);
	ShowProperties();
	return TRUE;
}

BOOL CTCAutomaticStackHistoricalItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CTCAutomaticStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_REMARK)->ShowWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_REMARK)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))));
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackHistoricalItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackHistoricalItemPropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackHistoricalItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackHistoricalItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackHistoricalComposedItemPropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackHistoricalComposedItemPropertiesDialog, CDisplayDialog)

CTCAutomaticStackHistoricalComposedItemPropertiesDialog::CTCAutomaticStackHistoricalComposedItemPropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackHistoricalComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackHistoricalComposedItemPropertiesDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackItems &pItems)
{
	INT  nItem[2];
	INT  nItems[2];
	CTCAutomaticStackItem  *pItem[3];

	for (nItem[0] = 0, nItems[0] = (INT)pItems.GetSize(), m_pItems.RemoveAll(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pItems.GetAt(nItem[0])))
		{
			if ((pItem[1] = new CTCAutomaticStackItem))
			{
				if (pItem[1]->Copy(pItem[0]))
				{
					for (nItem[1] = 0, nItems[1] = (INT)m_pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
					{
						if ((pItem[2] = m_pItems.GetAt(nItem[1])) && pItem[1]->GetMembershipID() < pItem[2]->GetMembershipID()) break;
						continue;
					}
					m_pItems.InsertAt(nItem[1], pItem[1], 1);
					continue;
				}
				delete pItem[1];
			}
		}
	}
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackHistoricalComposedItemPropertiesDialog::IDD);
}

CTCAutomaticStackWnd *CTCAutomaticStackHistoricalComposedItemPropertiesDialog::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCAutomaticStackHistoricalComposedItemPropertiesDialog::EnumEntries()
{
	INT  nEntry;
	INT  nEntries;
	INT  nDigits;
	CString  szEntry[2];
	CStringTools  cStringTools;
	CTCAutomaticStackItem  *pItem;

	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY)->GetWindowText(szEntry[0]);
	for (nEntry = 0, nEntries = (INT)m_pItems.GetSize(), m_szName.Empty(), m_szDescription.Empty(), m_pParameters.RemoveAll(), nDigits = cStringTools.ConvertIntToString(nEntries).GetLength(); nEntry < nEntries; nEntry++)
	{
		if ((pItem = (CTCAutomaticStackItem *)m_pItems.GetAt(nEntry)) != (CTCAutomaticStackItem *)NULL)
		{
			for (szEntry[1].Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_ENTRY_FORMAT), (LPCTSTR)cStringTools.ConvertIntToPaddedString(nEntry + 1, nDigits), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetDescription()); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[1]) < 0; )
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_INSERTSTRING, nEntry, (LPARAM)(LPCTSTR)szEntry[1]);
				break;
			}
			if (!nEntry)
			{
				m_szName = pItem->GetMembership();
				m_szDescription = pItem->GetMembershipDescription();
				pItem->GetMembershipParameters(m_pParameters);
			}
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_DELETESTRING, nEntries);
		continue;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry[0]), 0));
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCAutomaticStackHistoricalComposedItemPropertiesDialog::ShowProperties()
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseDelay;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem;

	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_NAME)->SetWindowText(m_szName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DESCRIPTION)->SetWindowText(m_szDescription);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)->EnableWindow((m_pParameters.GetSize() > 0) ? TRUE : FALSE);
	for (CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, FALSE); (pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText((pItem->GetReleaseTime() > 0) ? pItem->GetReleaseTime().FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE));
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText((!pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0) ? CTimeTag(tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0) ? tReleaseTime[1].FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE))) : ((pItem->GetReleaseTime() > 0 && tReleaseInterval > 0) ? CTimeTag(pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds()).FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_RELEASETIME_NONE)));
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText((pItem->GetTransmissionTime() > 0) ? pItem->GetTransmissionTime().FormatGmt() : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_TRANSMISSIONTIME_NONE));
		for (szReleaseDelay.Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_TRANSMISSIONDELAY_FORMAT), max((double)(pItem->GetTransmissionTime().GetTime() - pItem->GetReleaseTime().GetTime()) / 1000000.0, 0.0)); pItem->GetReleaseTime() <= 0 || pItem->GetTransmissionTime() <= 0; )
		{
			szReleaseDelay.Empty();
			break;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(szReleaseDelay);
		Timespinbox_SetTime(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME), (pItem->GetExecutionTime(tExecutionTime)) ? CTimeKey(tExecutionTime.GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_IMMEDIATE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow(pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow((GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow((!GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow((!GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->GetWindowTextLength()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->ShowWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_EXECUTIONTIME_STATIC)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_EXECUTIONTIME_STATIC)->ShowWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG));
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow((pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? TRUE : FALSE);
		break;
	}
	if (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL) < 0)
	{
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_COMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_UNLIMITED)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_NONE)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP)->EnableWindow(FALSE);
	}
	ShowParameters();
	ShowRawData();
}

VOID CTCAutomaticStackHistoricalComposedItemPropertiesDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nBlockItem;
	INT  nBlockItems;
	UINT  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CTCAutomaticStackItem  *pItem;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nParameter = nParameters = 0, nElement = nElements = 0; IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST); )
	{
		for (nParameter = 0, nParameters = (INT)m_pParameters.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = m_pParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = EMPTYSTRING;
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pParameter->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = ((pParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) ? ((pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pParameter->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (GetTCService()->CheckTCParameterOolStatus(pParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
								break;
							}
							szItem = (!pParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nParameter, nColumn, szItem);
				}
			}
		}
		break;
	}
	if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST))
	{
		if ((pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))))
		{
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1, nCount = 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
				{
					for (nColumn = 0, nColumns = ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pPacketParameter->GetTag();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pPacketParameter->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pPacketParameter->GetTag())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pPacketParameter->GetBytePos() + pPacketParameter->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = cStringTools.ConvertIntToString(pPacketParameter->GetWidth());
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							szItem = pPacketParameter->GetConstValueAsText();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
									break;
								}
								szItem = (!pPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nCount, nColumn, szItem);
						nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
					}
				}
			}
			for (nBlockItem = -1, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
			{
				for (nElement = 0, nElements = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)pItem->GetSize(); nElement < nElements; nElement++)
				{
					if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nElement) : pItem->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
					{
						for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
						{
							if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos()) break;
							continue;
						}
						for (nColumn = 0, nColumns = ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
						{
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
							{
								szItem = pFunctionElement->GetName();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
							{
								szItem = pFunctionElement->GetDescription();
								break;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
							{
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
								szItem = ((pFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pFunctionElement->GetName())))) && (pParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
							{
								szItem = cStringTools.ConvertIntToString(8 * pFunctionElement->GetBytePos() + pFunctionElement->GetBitPos());
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
							{
								szItem = cStringTools.ConvertIntToString(pFunctionElement->GetWidth());
								break;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
							{
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_STRING) : szItem;
								szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0) ? (((pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
							}
							if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
							{
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
								szItem = (pFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
							{
								szItem = ((pFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
							{
								szItem = pFunctionElement->GetConstValueAsText();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
							{
								if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement, nOolStatus))
								{
									if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
									{
										szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
									{
										szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_SOFTLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
									{
										szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_HARDLIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
									{
										szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_DELTALIMIT);
										break;
									}
									if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
									{
										szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_VALUELIMIT);
										break;
									}
									szItem = (!pFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NONE) : ((pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
									break;
								}
								szItem = STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_LIMITCHECK_FAILURE);
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, szItem);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nItem, nColumn, szItem);
						}
					}
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE), GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL)->EnableWindow((nParameters > 0 || nElements > 0) ? TRUE : FALSE); SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow(FALSE);
}

VOID CTCAutomaticStackHistoricalComposedItemPropertiesDialog::ShowRawData()
{
	INT  nByte;
	INT  nBytes;
	CString  szRawData[2];
	CByteArray  nRawData[2];
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CTCPacket  cTCPacket;

	if ((pItem = m_pItems.GetAt((INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, CB_GETCURSEL))) && pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION)
	{
		for (pItem->GetTCPacket(&cPacket), szRawData[0].Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_RAWDATA_FORMAT), (LPCTSTR)cPacket.GetDescription(), (LPCTSTR)cPacket.GetTag()), szRawData[1].Format(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_RAWDATA_SIMPLEFORMAT), (LPCTSTR)cPacket.GetTag()); !cPacket.GetTag().IsEmpty() || !cPacket.GetDescription().IsEmpty(); )
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->SetWindowText((!cPacket.GetDescription().IsEmpty()) ? szRawData[0] : szRawData[1]);
			break;
		}
		for (nByte = 0, nBytes = (pItem->GetTCPacket(nRawData[0]) > 0 && cTCPacket.Unmap(nRawData[0])) ? cTCPacket.GetData(nRawData[1]) : 0, szRawData[0].Empty(); nByte < nBytes; nByte++)
		{
			szRawData[0] += (nByte > 0 && nByte % 2 == 0) ? CString(SPACE) : CString(EMPTYSTRING);
			szRawData[0] += cStringTools.ConvertIntToPaddedString(nRawData[1].GetAt(nByte), 2, 16);
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetWindowText((szRawData[0].IsEmpty()) ? m_szRawData[1] : szRawData[0]);
		return;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->SetWindowText(m_szRawData[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetWindowText(m_szRawData[1]);
}

INT CTCAutomaticStackHistoricalComposedItemPropertiesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackHistoricalComposedItemPropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::PostNcDestroy()
{
	m_pItems.RemoveAll();
	m_szColumns.RemoveAll();
	m_pParameters.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackHistoricalComposedItemPropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackHistoricalComposedItemPropertiesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWALL, OnShowAllParameters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST, OnShowFormalParameters)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY, OnSelchangeEntry)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackHistoricalComposedItemPropertiesDialog message handlers

BOOL CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CFont  cFont;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->GetWindowText(m_szRawData[0]), GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->GetWindowText(m_szRawData[1]); cFont.CreateStockObject(ANSI_FIXED_FONT); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->SetFont(&cFont);
		break;
	}
	if (EnumEntries())
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_NAME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DESCRIPTION_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_DESCRIPTION)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_STOPTIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_TRANSMISSIONTIME)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_RELEASETIMEWINDOW_DELAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA)->EnableWindow();
		GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_RAWDATA_AREA)->EnableWindow();
		ShowProperties();
	}
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPTV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDEPEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_OVERRIDECEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPTV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLEPEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_DISABLECEV, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_CONSTRAINTS_PREAUTHORIZED, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_IMMEDIATELY, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_TIMETAG_TIME, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_FIRSTSTEP, FALSE);
	AccessControl(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_ONBOARDEXECUTION_SECONDSTEP, FALSE);
	return TRUE;
}

BOOL CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CTCAutomaticStackItemPropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->ShowWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_REMARK)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST)->SetFocus();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALITEMPROPERTIES_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCAUTOMATICSTACKHISTORICALITEMPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_SHOWFORMALLIST)) cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_HISTORICALCOMPOSEDITEMPROPERTIES_ENTRY_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))));
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnSelchangeEntry()
{
	ShowProperties();
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnShowAllParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnShowFormalParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackHistoricalComposedItemPropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKHISTORICALCOMPOSEDITEMPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSaveContentsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSaveContentsDialog, CDisplayDialog)

CTCAutomaticStackSaveContentsDialog::CTCAutomaticStackSaveContentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSaveContentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackSaveContentsDialog::Create(CWnd *pParentWnd, CONST CTCAutomaticStackItems &pItems)
{
	return((m_pItems[0].Copy(&pItems) && m_pItems[1].Copy(&pItems)) ? CDisplayDialog::Create(pParentWnd, CTCAutomaticStackSaveContentsDialog::IDD) : -1);
}

CTCAutomaticStackWnd *CTCAutomaticStackSaveContentsDialog::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCAutomaticStackSaveContentsDialog::EnumStackMembers()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	BOOL  bAbsoluteTime[2];
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CString  szItem;
	CString  szArgument;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bAbsoluteTime[0] = bAbsoluteTime[1] = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem + 1, max(cStringTools.ConvertIntToString(nItems).GetLength(), 3));
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS))
				{
					for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
					{
						if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							szArgument.Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
					{
						if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							for (szArgument.Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText()); (pParameter = ((pFunctionElement->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL)) && pItem->GetMembershipParameters(pParameters) > 0) ? pParameters.GetAt(pParameters.Find(pFunctionElement->GetConstValueSource())) : (CDatabaseTCParameter *)NULL); )
							{
								szArgument.Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pParameter->GetConstValueAsText());
								break;
							}
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					szItem += (nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_NOARGUMENTS) : EMPTYSTRING;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS); )
				{
					if ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED))
					{
						szItem.Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_FLAGSFORMAT), STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_GROUPEDFLAG), STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_BLOCKEDFLAG));
						break;
					}
					if (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_GROUPEDFLAG);
						break;
					}
					if (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_BLOCKEDFLAG);
						break;
					}
					szItem.Empty();
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIME))
				{
					for (szReleaseTime[0].Empty(); (tReleaseTime = pItem->GetReleaseTime()) > 0; )
					{
						szReleaseTime[0] = tReleaseTime.FormatGmt(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_FORMAT));
						break;
					}
					if (!tReleaseTime.GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (pItem->GetMembership().IsEmpty() || !pItem->GetMembershipID()) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_WITHPREVIOUS);
					szItem = szReleaseTime[0];
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET))
				{
					for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
					{
						szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT));
						szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[2].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[3].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
						break;
					}
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIME))
				{
					szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
					szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
					szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
					szItem = szExecutionTime[0];
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET))
				{
					for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
					{
						szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OFFSETFORMAT));
						szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
						szExecutionTime[1].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[2].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[3].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
						break;
					}
					szItem = szExecutionTime[0];
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, nColumn, szItem);
			}
			bAbsoluteTime[0] = (!nItem) ? (pItem->GetReleaseTime() > 0) : bAbsoluteTime[0];
			bAbsoluteTime[1] = (!nItem) ? pItem->GetExecutionTime(tExecutionTime) : bAbsoluteTime[1];
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_STATIC)->EnableWindow(bAbsoluteTime[0] || bAbsoluteTime[1]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES)->EnableWindow(bAbsoluteTime[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES)->EnableWindow(bAbsoluteTime[1]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSaveContentsDialog::EnumRepositoryMembers()
{
	INT  nStack;
	INT  nStacks;
	INT  nColumn;
	INT  nColumns;
	CString  szName;
	CString  szItem;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_DELETEALLITEMS);
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); LoadRepository(szFileName, pRepository); )
	{
		for (nStack = 0, nStacks = (INT)pRepository.GetSize(); nStack < nStacks; nStack++)
		{
			if ((pStack = (CTCSavedStack *)pRepository.GetAt(nStack)) != (CTCSavedStack *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME); )
					{
						szItem = pStack->GetName();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION); )
					{
						szItem = pStack->GetDescription();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR); )
					{
						szItem = pStack->GetAuthor();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE); )
					{
						szItem = pStack->GetCreationDate().FormatGmt(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_TIMEFORMAT));
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION); )
					{
						szItem = pStack->GetOriginWorkstation();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_STATUS); )
					{
						szItem = (pStack->IsValidated()) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_VALIDATED) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITORYLIST_NOTVALIDATED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), nStack, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), nStack, nColumn, szItem);
				}
			}
		}
		break;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow((pRepository.Find(szName) >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow((pRepository.Find(szName) >= 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSaveContentsDialog::SaveRepository(CFileEx &cFile, CONST CTCSavedStacks &pStacks)
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	for (cFile.SeekToBegin(); pStacks.Map(nRepositoryData) && WriteFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL); )
	{
		cFile.SetLength(nRepositoryData.GetSize());
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackSaveContentsDialog::SaveRepository(LPCTSTR pszFileName, CONST CTCSavedStacks &pStacks)
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCAutomaticStackSaveContentsDialog::LoadRepository(CFileEx &cFile, CTCSavedStacks &pStacks) CONST
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	nRepositoryData.SetSize((INT_PTR)cFile.GetLength());
	return((ReadFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL) && pStacks.Unmap(nRepositoryData)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackSaveContentsDialog::LoadRepository(LPCTSTR pszFileName, CTCSavedStacks &pStacks) CONST
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeRead))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (LoadRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCAutomaticStackSaveContentsDialog::LogActivity(LPCTSTR pszFileName, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetDescription(pszFileName), cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}
BOOL CTCAutomaticStackSaveContentsDialog::LogActivity(CONST CTCSavedStack *pStack, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(pStack->GetName()), cEntry.SetDescription(pStack->GetDescription()), cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_SAVING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SAVEDSTACK)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SAVEDSTACK));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}

INT CTCAutomaticStackSaveContentsDialog::FindColumnIndex(UINT nID, LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (nID == IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST) ? (INT)m_szColumns[0].GetSize() : ((nID == IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST) ? (INT)m_szColumns[1].GetSize() : -1); nColumn < nColumns; nColumn++)
	{
		if ((nID == IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST  &&  m_szColumns[0].GetAt(nColumn) == pszColumn) || (nID == IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST  &&  m_szColumns[1].GetAt(nColumn) == pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackSaveContentsDialog::Check(BOOL bModified) CONST
{
	CString  szName;
	CString  szDescription;
	CString  szFileName;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DESCRIPTION)->GetWindowText(szDescription);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	return((!szName.IsEmpty() && !szDescription.IsEmpty() && !szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CTCAutomaticStackSaveContentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSaveContentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSaveContentsDialog::PostNcDestroy()
{
	m_pItems[0].RemoveAll();
	m_pItems[1].RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSaveContentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSaveContentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES, OnRelativeReleaseTimes)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES, OnRelativeExecutionTimes)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_INSPECT, OnInspectRepository)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SAVECONTENTS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSaveContentsDialog message handlers

BOOL CTCAutomaticStackSaveContentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIME));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIME));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NUMBER)) ? (rColumns[0].Width() / 12) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_NAME)) ? (rColumns[0].Width() / 6) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION)) ? (rColumns[0].Width() / 2) : (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_ARGUMENTS)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_FLAGS)) ? (rColumns[0].Width() / 10) : rColumns[0].Width() / 4))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME)) ? (rColumns[1].Width() / 4) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_DESCRIPTION)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_AUTHOR)) ? (rColumns[1].Width() / 4) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_CREATIONDATE)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_WORKSTATION)) ? (rColumns[1].Width() / 5) : (rColumns[1].Width() / 6))))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_STATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_STATUS_VALIDATED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_BROWSE)->EnableWindow();
	EnumStackMembers();
	return TRUE;
}

void CTCAutomaticStackSaveContentsDialog::OnRelativeReleaseTimes()
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CString  szReleaseTime[2];
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (tReleaseTime[0] = (!nItem) ? pItem[0]->GetReleaseTime() : tReleaseTime[0]; IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES) && !pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
			{
				for (pItem[0]->SetReleaseTimeWindow((dwReleaseOffset = (pItem[0]->GetReleaseTime() > 0) ? (1000 * (DWORD)max(pItem[0]->GetReleaseTime().GetTimeInSeconds() - tReleaseTime[0].GetTimeInSeconds(), 0)) : 0), (pItem[0]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]) && tReleaseTime[1] > 0) ? max(tReleaseTime[2].GetTimeInSeconds() - tReleaseTime[1].GetTimeInSeconds(), 0) : ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) ? tReleaseInterval.GetTotalSeconds() : 0), TRUE), pItem[0]->SetReleaseTime(0); pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS; )
				{
					pItem[0]->SetFlags((pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) | TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERBEGIN);
					break;
				}
				szReleaseTime[0].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)));
				szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_RELEASETIME_OFFSETFORMAT)));
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET)), (!nItem) ? szReleaseTime[0] : szReleaseTime[1]);
				break;
			}
			if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVERELEASETIMES))
			{
				if ((pItem[1] = m_pItems[1].GetAt(nItem)) && !pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2])) pItem[0]->SetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]);
					if (pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) pItem[0]->SetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval);
					if (!pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseTime[2]) && !pItem[1]->GetReleaseTimeWindow(tReleaseTime[1], tReleaseInterval)) pItem[0]->SetReleaseTimeWindow(pItem[1]->GetReleaseTime());
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_RELEASETIMEOFFSET)), EMPTYSTRING);
				}
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnRelativeExecutionTimes()
{
	INT  nItem;
	INT  nItems;
	BOOL  bExecutionOffset;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT[2];
	DWORD  dwExecutionOffset;
	CString  szExecutionTime;
	CTimeTag  tExecutionTime[2];
	CTCAutomaticStackItem  *pItem[2];
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (tExecutionTime[0] = (!nItem) ? ((pItem[0]->GetExecutionTime(tExecutionTime[1])) ? tExecutionTime[1] : 0) : tExecutionTime[0], nExecutionOBRT[0] = (!nItem) ? ((pItem[0]->GetExecutionOBRT(nExecutionOBRT[1])) ? nExecutionOBRT[1] : 0) : nExecutionOBRT[0]; IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES); )
			{
				for (bExecutionOffset = pItem[0]->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); pItem[0]->GetExecutionTime(tExecutionTime[1]); )
				{
					pItem[0]->SetExecutionTimeOffset((dwExecutionOffset = (DWORD)abs(tExecutionTime[1].GetTime() / 1000 - tExecutionTime[0].GetTime() / 1000)), (bEarlierExecution = (tExecutionTime[0] > tExecutionTime[1])));
					pItem[0]->SetExecutionTime(0);
					bExecutionOffset = TRUE;
					break;
				}
				if (pItem[0]->GetExecutionOBRT(nExecutionOBRT[1]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT[0], tExecutionTime[0]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT[1], tExecutionTime[1]))
				{
					pItem[0]->SetExecutionTimeOffset((dwExecutionOffset = (nExecutionOBRT[0] != nExecutionOBRT[1]) ? (DWORD)abs(tExecutionTime[1].GetTime() / 1000 - tExecutionTime[0].GetTime() / 1000) : 0), (bEarlierExecution = (nExecutionOBRT[0] != nExecutionOBRT[1]) ? (tExecutionTime[0] > tExecutionTime[1]) : FALSE));
					pItem[0]->SetExecutionTime(0);
					bExecutionOffset = TRUE;
				}
				for (pItem[0]->SetFlags((pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERBEGIN), szExecutionTime = CTimeSpan(dwExecutionOffset / 1000).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_OFFSETFORMAT)), szExecutionTime = (!bEarlierExecution) ? (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime) : (STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime); nItem > 0; )
				{
					szExecutionTime.Format(STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime);
					break;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET)), (bExecutionOffset) ? szExecutionTime : EMPTYSTRING);
				break;
			}
			if (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SAVECONTENTS_OPTIONS_RELATIVEEXECUTIONTIMES))
			{
				if ((pItem[1] = m_pItems[1].GetAt(nItem)) && (pItem[1]->GetExecutionTime(tExecutionTime[1]) || pItem[1]->GetExecutionOBRT(nExecutionOBRT[1])))
				{
					if (pItem[1]->GetExecutionTime(tExecutionTime[1])) pItem[0]->SetExecutionTime(tExecutionTime[1]);
					if (pItem[1]->GetExecutionOBRT(nExecutionOBRT[1])) pItem[0]->SetExecutionOBRT(nExecutionOBRT[1]);
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST), nItem, FindColumnIndex(IDC_TCAUTOMATICSTACK_SAVECONTENTS_LIST, STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_LIST_TITLEITEM_EXECUTIONTIMEOFFSET)), EMPTYSTRING);
				}
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnInspectRepository()
{
	CHourglassCursor  cCursor;

	EnumRepositoryMembers();
}

void CTCAutomaticStackSaveContentsDialog::OnRemoveMember()
{
	INT  nIndex[2];
	CFileEx  cFile;
	CString  szName[2];
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->GetWindowText(szName[0]), GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if ((pStack = (LoadRepository(cFile, pRepository)) ? pRepository.GetAt((nIndex[1] = pRepository.Find((szName[1] = Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), (nIndex[0] = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST))), FindColumnIndex(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, STRING(IDS_TCAUTOMATICSTACKSAVECONTENTSDIALOG_REPOSITARYLIST_TITLEITEM_NAME))))))) : (CTCSavedStack *)NULL))
			{
				for (pRepository.RemoveAt(nIndex[1]); SaveRepository(cFile, pRepository); )
				{
					for (Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), nIndex[0]); szName[0] == szName[1]; )
					{
						GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
						GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
						break;
					}
					LogActivity(pStack, TRUE);
					break;
				}
				delete pStack;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST), 0); !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
		break;
	}
}

void CTCAutomaticStackSaveContentsDialog::OnRemoveAllMembers()
{
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pRepository))
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_DELETEALLITEMS);
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				LogActivity(szFileName);
				cFile.Close();
				break;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	if (!SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST, LVM_GETITEMCOUNT))
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->SetFocus();
	}
}

void CTCAutomaticStackSaveContentsDialog::OnEditchangeName()
{
	CString  szName;
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->ShowWindow((LoadRepository(szFileName, pRepository) && pRepository.Find(szName) >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_REMARK)->EnableWindow((pRepository.Find(szName) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnEditchangeDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnEditchangeFileName()
{
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME_INSPECT)->EnableWindow((LoadRepository(szFileName, pRepository) && pRepository.GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSaveContentsDialog::OnOK()
{
	CFileEx  cFile;
	CString  szName;
	CString  szMessage;
	CString  szFileName;
	CString  szDescription;
	CTimeKey  tCreationDate;
	CByteArray  nFileData;
	CTCSavedStack  *pStack[2];
	CTCSavedStacks  pRepository;
	CComputerToken  cComputerToken;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	if ((pStack[0] = new CTCSavedStack))
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_DESCRIPTION)->GetWindowText(szDescription);
		GetDlgItem(IDC_TCAUTOMATICSTACK_SAVECONTENTS_REPOSITORY_FILENAME)->GetWindowText(szFileName);
		for (pStack[0]->SetName(szName), pStack[0]->SetDescription(szDescription), pStack[0]->SetCreationDate(tCreationDate), pStack[0]->SetOriginWorkstation(cComputerToken.GetComputerName()), pStack[0]->SetSpacecraft(GetAccountSpacecraftName()), pStack[0]->SetAuthor(GetAccountUserName()), pStack[0]->SetDatabase(GetAccountDatabase()), pStack[0]->SetDatabaseVersion(GetDatabase()->GetCreationTime(), GetDatabase()->GetLastUpdateTime()), pStack[0]->Validate(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SAVECONTENTS_STATUS_VALIDATED)); pStack[0]->CTCItems::Copy(&m_pItems[0]); )
		{
			if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
			{
				if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
				{
					for (LoadRepository(cFile, pRepository); (pStack[1] = pRepository.GetAt(pRepository.Find(pStack[0]->GetName()))); )
					{
						if (pStack[1]->Copy(pStack[0]) && pRepository.Map(nFileData))
						{
							if (SaveRepository(cFile, pRepository))
							{
								LogActivity(pStack[0]);
								delete pStack[0];
								break;
							}
						}
						nFileData.RemoveAll();
						delete pStack[0];
						break;
					}
					if (pRepository.Find(szName) < 0)
					{
						if (pRepository.Add(pStack[0]) >= 0)
						{
							for (; !pRepository.Map(nFileData) || !SaveRepository(cFile, pRepository); )
							{
								nFileData.RemoveAll();
								break;
							}
							for (; nFileData.GetSize() > 0; )
							{
								LogActivity(pStack[0]);
								break;
							}
							UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
							cFile.Close();
							break;
						}
						nFileData.RemoveAll();
						delete pStack[0];
					}
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				}
				cFile.Close();
			}
			break;
		}
	}
	if (!nFileData.GetSize())
	{
		szMessage.Format(STRING(IDS_TCAUTOMATICSTACK_MESSAGE_SAVECONTENTS_FAILURE), (LPCTSTR)szName);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackSaveContentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSAVECONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackSaveContentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSAVECONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackLoadContentsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackLoadContentsDialog, CDisplayDialog)

CTCAutomaticStackLoadContentsDialog::CTCAutomaticStackLoadContentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackLoadContentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackLoadContentsDialog::Create(CWnd *pParentWnd)
{
	m_pItems.RemoveAll();
	m_pRepository.RemoveAll();
	return CDisplayDialog::Create(pParentWnd, CTCAutomaticStackLoadContentsDialog::IDD);
}

BOOL CTCAutomaticStackLoadContentsDialog::Initialize()
{
	GetParent()->GetSearchFilters(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
	return TRUE;
}

CTCAutomaticStackWnd *CTCAutomaticStackLoadContentsDialog::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCAutomaticStackLoadContentsDialog::EnumFilters()
{
	INT  nFilter;
	INT  nFilters;
	CTCAutomaticStackSearchFilter  *pFilter;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_RESETCONTENT);
	for (nFilter = 0, nFilters = (INT)m_pFilters.GetSize(); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = m_pFilters.GetAt(nFilter)) != (CTCAutomaticStackSearchFilter *)NULL)
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFilter->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE));
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_ADD)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackLoadContentsDialog::EnumRepositoryMembers()
{
	INT  nStack;
	INT  nStacks;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szFileName;
	CTCSavedStack  *pStack;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_DELETEALLITEMS);
	for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); LoadRepository(szFileName, m_pRepository); )
	{
		for (nStack = 0, nStacks = (INT)m_pRepository.GetSize(); nStack < nStacks; nStack++)
		{
			if ((pStack = m_pRepository.GetAt(nStack)) != (CTCSavedStack *)NULL  &&  CheckFilter(pStack))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME); )
					{
						szItem = pStack->GetName();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION); )
					{
						szItem = pStack->GetDescription();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR); )
					{
						szItem = pStack->GetAuthor();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE); )
					{
						szItem = pStack->GetCreationDate().FormatGmt(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TIMEFORMAT));
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION); )
					{
						szItem = pStack->GetOriginWorkstation();
						break;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS); )
					{
						szItem = (pStack->IsValidated()) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_VALIDATED) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_NOTVALIDATED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT), szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
				}
			}
		}
		break;
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackLoadContentsDialog::EnumStackMembers()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bStackValidity;
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CString  szItem;
	CString  szArgument;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CTimeKey  tVersionTime[2];
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringTools  cStringTools;
	CTCSavedStack  *pStack;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS), CheckDlgButton(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE), m_pItems.RemoveAll(); (pStack = m_pRepository.GetAt((nIndex = m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME))))))); )
	{
		for (nItem = 0, nItems = (INT)pStack->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
			{
				pItem->CTCItem::Copy(pStack->GetAt(nItem));
				m_pItems.InsertAt(nItem, pItem, 1);
			}
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow((bStackValidity = (pStack->GetSpacecraft() != GetDatabase()->GetSpacecraft() || pStack->GetDatabase() != GetDatabase()->GetName() || !pStack->GetDatabaseVersion(tVersionTime[0], tVersionTime[1]) || GetDatabase()->GetCreationTime() != tVersionTime[0] || GetDatabase()->GetLastUpdateTime() != tVersionTime[1] || !pStack->IsValidated())) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(bStackValidity);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(bStackValidity);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(bStackValidity);
		break;
	}
	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem + 1, max(cStringTools.ConvertIntToString(nItems).GetLength(), 3));
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME); )
				{
					szItem = pItem->GetName();
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS))
				{
					for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
					{
						if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							szArgument.Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
					{
						if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							for (szArgument.Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText()); (pParameter = ((pFunctionElement->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL)) && pItem->GetMembershipParameters(pParameters) > 0) ? pParameters.GetAt(pParameters.Find(pFunctionElement->GetConstValueSource())) : (CDatabaseTCParameter *)NULL); )
							{
								szArgument.Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pParameter->GetConstValueAsText());
								break;
							}
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					szItem += (nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_NOARGUMENTS) : EMPTYSTRING;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS); )
				{
					if ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED))
					{
						szItem.Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_FLAGSFORMAT), STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_GROUPEDFLAG), STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_BLOCKEDFLAG));
						break;
					}
					if (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_GROUPEDFLAG);
						break;
					}
					if (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED)
					{
						szItem = STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_BLOCKEDFLAG);
						break;
					}
					szItem.Empty();
					break;
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIME))
				{
					for (szReleaseTime[0].Empty(); (tReleaseTime = pItem->GetReleaseTime()) > 0; )
					{
						szReleaseTime[0] = tReleaseTime.FormatGmt(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_FORMAT));
						break;
					}
					if (!tReleaseTime.GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (pItem->GetMembership().IsEmpty() || !pItem->GetMembershipID()) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_WITHPREVIOUS);
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIMEOFFSET))
				{
					for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
					{
						szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_OFFSETFORMAT));
						szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[2].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[3].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
						szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
						break;
					}
					szItem = szReleaseTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIME))
				{
					szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
					szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
					szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
					szItem = szExecutionTime[0];
				}
				if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIMEOFFSET))
				{
					for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
					{
						szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_OFFSETFORMAT));
						szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
						szExecutionTime[1].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[2].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[3].Format(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
						szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : ((!nItem || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
						break;
					}
					szItem = szExecutionTime[0];
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), 0); nIndex < 0; )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackLoadContentsDialog::SaveRepository(CFileEx &cFile, CONST CTCSavedStacks &pStacks)
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	for (cFile.SeekToBegin(); pStacks.Map(nRepositoryData) && WriteFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL); )
	{
		cFile.SetLength(nRepositoryData.GetSize());
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackLoadContentsDialog::SaveRepository(LPCTSTR pszFileName, CONST CTCSavedStacks &pStacks)
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCAutomaticStackLoadContentsDialog::LoadRepository(CFileEx &cFile, CTCSavedStacks &pStacks) CONST
{
	DWORD  cbData;
	CByteArray  nRepositoryData;

	nRepositoryData.SetSize((INT_PTR)cFile.GetLength());
	return((ReadFile(cFile.m_hFile, nRepositoryData.GetData(), (DWORD)nRepositoryData.GetSize(), &cbData, (LPOVERLAPPED)NULL) && pStacks.Unmap(nRepositoryData)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackLoadContentsDialog::LoadRepository(LPCTSTR pszFileName, CTCSavedStacks &pStacks) CONST
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(pszFileName, CFile::modeRead))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (LoadRepository(cFile, pStacks))
			{
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				cFile.Close();
				return TRUE;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CTCAutomaticStackLoadContentsDialog::LogActivity(LPCTSTR pszFileName, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetDescription(pszFileName), cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_STACKREPOSITORY));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}
BOOL CTCAutomaticStackLoadContentsDialog::LogActivity(CONST CTCSavedStack *pStack, BOOL bDeleted)
{
	CTCLogEntry  cEntry;

	for (cEntry.SetName(pStack->GetName()), cEntry.SetDescription(pStack->GetDescription()), cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_LOADING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SAVEDSTACK)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); bDeleted; )
	{
		cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DELETING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SAVEDSTACK));
		break;
	}
	return GetParent()->LogActivity(&cEntry);
}

BOOL CTCAutomaticStackLoadContentsDialog::CheckFilter(CONST CTCSavedStack *pStack) CONST
{
	INT  nKey;
	INT  nKeys;
	INT  nValue;
	INT  nValues;
	BOOL  bSearch;
	CString  szFilter;
	CUIntArray  nOperators;
	CStringArray  szKeys;
	CStringArray  szValues[2];
	CTCAutomaticStackSearchFilter  *pFilter;

	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter);
	if ((pFilter = m_pFilters.GetAt(m_pFilters.Find(szFilter))) != (CTCAutomaticStackSearchFilter *)NULL)
	{
		for (nKey = 0, nKeys = pFilter->GetSearchKeys(szKeys, szValues[0]); nKey < nKeys; nKey = nKey + 1)
		{
			if (szKeys.GetAt(nKey) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_NAME))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetName().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pStack->GetName().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_DESCRIPTION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0)) : (bSearch || (pStack->GetDescription().Find(szValues[1].GetAt(nValue)) >= 0));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_AUTHOR))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetAuthor() == szValues[1].GetAt(nValue))) : (bSearch || (pStack->GetAuthor() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_WORKSTATION))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && (pStack->GetOriginWorkstation() == szValues[1].GetAt(nValue))) : (bSearch || (pStack->GetOriginWorkstation() == szValues[1].GetAt(nValue)));
					continue;
				}
				if (!bSearch) break;
			}
			if (szKeys.GetAt(nKey) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEY_STATUS))
			{
				for (nValue = 0, nValues = ExtractFilterValues(szValues[0].GetAt(nKey), szValues[1], nOperators), bSearch = TRUE; nValue < nValues; nValue++)
				{
					bSearch = (!nValue || nOperators.GetAt(nValue - 1) == TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND) ? (bSearch && ((pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED)) || (!pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED)))) : (bSearch || ((pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_VALIDATED)) || (!pStack->IsValidated() && szValues[1].GetAt(nValue) == STRING(IDS_TCAUTOMATICSTACKSEARCHFILTERDIALOG_STACKSKEYVALUES_STATUS_NOTVALIDATED))));
					continue;
				}
				if (!bSearch) break;
			}
		}
		return((nKey == nKeys) ? TRUE : FALSE);
	}
	return TRUE;
}

INT CTCAutomaticStackLoadContentsDialog::ExtractFilterValues(LPCTSTR pszValues, CStringArray &szSearchValues, CUIntArray &nSearchOperators) CONST
{
	INT  nPos[3];
	CString  szValue;
	CString  szValues;

	for (nPos[0] = 0, nPos[1] = (szValues = pszValues).Find(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Find(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_OR)), szSearchValues.RemoveAll(), nSearchOperators.RemoveAll(); nPos[1] >= 0 || nPos[2] >= 0; nPos[1] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_AND)), nPos[2] = szValues.Mid(nPos[0]).Find(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_OR)))
	{
		if (nPos[1] >= 0 && (nPos[2] < 0 || nPos[1] < nPos[2]))
		{
			nSearchOperators.Add(TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_AND);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[1])));
			nPos[0] += nPos[1] + lstrlen(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_AND));
			continue;
		}
		if (nPos[2] >= 0 && (nPos[1] < 0 || nPos[2] < nPos[1]))
		{
			nSearchOperators.Add(TCAUTOMATICSTACKSEARCHFILTER_OPERATOR_OR);
			szSearchValues.Add(ExtractFilterValue(szValues.Mid(nPos[0]).Left(nPos[2])));
			nPos[0] += nPos[2] + lstrlen(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_OPERATOR_OR));
			continue;
		}
		break;
	}
	if (nPos[0] < szValues.GetLength())
	{
		for (szValue = ExtractFilterValue(szValues.Mid(nPos[0])); !szValue.IsEmpty(); )
		{
			szSearchValues.Add(szValue);
			break;
		}
	}
	return((INT)szSearchValues.GetSize());
}
CString CTCAutomaticStackLoadContentsDialog::ExtractFilterValue(LPCTSTR pszValue) CONST
{
	CString  szValue;

	for (szValue = pszValue; szValue.GetLength() > 0 && _istspace(szValue.GetAt(0)); )
	{
		szValue = szValue.Mid(1);
		continue;
	}
	while (szValue.GetLength() > 0 && _istspace(szValue.GetAt(szValue.GetLength() - 1)))
	{
		szValue = szValue.Mid(0, szValue.GetLength() - 1);
		continue;
	}
	if (szValue.GetLength() > 1 && szValue.GetAt(0) == STRINGCHAR(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER) && szValue.GetAt(szValue.GetLength() - 1) == STRINGCHAR(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER))
	{
		szValue = szValue.Left(szValue.GetLength() - lstrlen(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER)));
		szValue = szValue.Mid(lstrlen(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_TEXT_DELIMITER)));
	}
	return szValue;
}

INT CTCAutomaticStackLoadContentsDialog::FindColumnIndex(UINT nID, LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (nID == IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST) ? (INT)m_szColumns[0].GetSize() : ((nID == IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST) ? (INT)m_szColumns[1].GetSize() : -1); nColumn < nColumns; nColumn++)
	{
		if ((nID == IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST  &&  m_szColumns[0].GetAt(nColumn) == pszColumn) || (nID == IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST  &&  m_szColumns[1].GetAt(nColumn) == pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackLoadContentsDialog::Check(BOOL bModified) CONST
{
	CTimeKey  tVersionTime[2];
	CTCSavedStack  *pStack;

	return(((((pStack = m_pRepository.GetAt(m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))) && pStack->GetSpacecraft() == GetDatabase()->GetSpacecraft() && pStack->GetDatabase() == GetDatabase()->GetName() && pStack->GetDatabaseVersion(tVersionTime[0], tVersionTime[1]) && GetDatabase()->GetCreationTime() == tVersionTime[0] && GetDatabase()->GetLastUpdateTime() == tVersionTime[1] && pStack->IsValidated()) || IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)) && GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTCAutomaticStackLoadContentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackLoadContentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackLoadContentsDialog::PostNcDestroy()
{
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackLoadContentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackLoadContentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_INSPECT, OnInspectRepository)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_DELETE, OnDeleteRepository)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_ADD, OnAddFilter)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_MODIFY, OnModifyFilter)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVE, OnRemoveFilter)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL, OnRemoveAllFilters)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE, OnValidateMember)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, OnLoadMemberAnyway)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE, OnRemoveMember)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL, OnRemoveAllMembers)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_LOADCONTENTS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, OnSelchangeFilter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackLoadContentsDialog message handlers

BOOL CTCAutomaticStackLoadContentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION));
	m_szColumns[0].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIME));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_RELEASETIMEOFFSET));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIME));
	m_szColumns[1].Add(STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_EXECUTIONTIMEOFFSET));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)) ? (rColumns[0].Width() / 4) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_DESCRIPTION)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_AUTHOR)) ? (rColumns[0].Width() / 4) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_CREATIONDATE)) ? (rColumns[0].Width() / 2) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_WORKSTATION)) ? (rColumns[0].Width() / 5) : (rColumns[0].Width() / 6))))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NUMBER)) ? (rColumns[1].Width() / 12) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_NAME)) ? (rColumns[1].Width() / 6) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_DESCRIPTION)) ? (rColumns[1].Width() / 2) : (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_ARGUMENTS)) ? (rColumns[1].Width() / 2) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_CONTENTSLIST_TITLEITEM_FLAGS)) ? (rColumns[1].Width() / 10) : rColumns[1].Width() / 4))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->EnableWindow();
	EnumFilters();
	return TRUE;
}

BOOL CTCAutomaticStackLoadContentsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) EnumStackMembers();
		GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackLoadContentsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCSTACKCONTENTSFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnInspectRepository()
{
	CHourglassCursor  cCursor;

	for (; !EnumRepositoryMembers(); )
	{
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnDeleteRepository()
{
	BOOL  bRepository;
	CString  szFileName;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); (bRepository = CFileEx::Remove(szFileName)); )
	{
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_INSPECT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_DELETE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	if (bRepository)
	{
		LogActivity(szFileName, TRUE);
		EnumRepositoryMembers();
		EnumStackMembers();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnAddFilter()
{
	CTCAutomaticStackSearchFilter  *pFilter[2];
	CTCAutomaticStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCAutomaticStackSearchFilter))
	{
		for (pFilter[0]->SetType(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
		{
			if ((pFilter[1] = m_pFilters.GetAt(m_pFilters.Find(pFilter[0]->GetName()))))
			{
				pFilter[1]->Copy(pFilter[0]);
				delete pFilter[0];
				return;
			}
			if (m_pFilters.Add(pFilter[0]) >= 0)
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFilter[0]->GetName());
				GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow();
				GetParent()->SetSearchFilters(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
				return;
			}
			break;
		}
		delete pFilter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnModifyFilter()
{
	CString  szFilter;
	CTCAutomaticStackSearchFilter  *pFilter[2];
	CTCAutomaticStackSearchFilterDialog  cSearchFilterDialog;

	if ((pFilter[0] = new CTCAutomaticStackSearchFilter))
	{
		for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter); (pFilter[1] = m_pFilters.GetAt(m_pFilters.Find(szFilter))); )
		{
			for (pFilter[0]->Copy(pFilter[1]); cSearchFilterDialog.Create(this, pFilter[0]) == IDOK; )
			{
				pFilter[1]->Copy(pFilter[0]);
				EnumRepositoryMembers();
				EnumStackMembers();
				break;
			}
			GetParent()->SetSearchFilters(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters);
			break;
		}
		delete pFilter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnRemoveFilter()
{
	INT  nIndex;
	CString  szFilter;
	CTCAutomaticStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter); (pFilter = m_pFilters.GetAt((nIndex = m_pFilters.Find(szFilter)))); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilter));
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 1) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->SetFocus();
		m_pFilters.RemoveAt(nIndex);
		delete pFilter;
		break;
	}
	for (GetParent()->SetSearchFilters(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters); szFilter != STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE)));
		EnumRepositoryMembers();
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnRemoveAllFilters()
{
	INT  nIndex;
	INT  nFilter;
	INT  nFilters;
	CString  szFilter[2];
	CTCAutomaticStackSearchFilter  *pFilter;
	CHourglassCursor  cCursor;

	for (nFilter = 0, nFilters = (INT)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT), GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter[0]); nFilter < nFilters; nFilter++)
	{
		if ((pFilter = ((szFilter[1] = Combobox_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER), nFilter)) != STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? m_pFilters.GetAt((nIndex = m_pFilters.Find(szFilter[1]))) : (CTCAutomaticStackSearchFilter *)NULL))
		{
			SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_DELETESTRING, nFilter);
			GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->SetFocus();
			m_pFilters.RemoveAt(nIndex);
			delete pFilter;
			nFilters--;
			nFilter--;
		}
	}
	for (GetParent()->SetSearchFilters(TCAUTOMATICSTACKSEARCHFILTER_TYPE_STACKS, m_pFilters); szFilter[0] != STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE)));
		EnumRepositoryMembers();
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnValidateMember()
{
	INT  nItem;
	INT  nItems;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CTCItem  *pItem;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCProcedure  *pProcedure;
	CDatabaseTCPacketParameter  *pPacketParameter[2];
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CHourglassCursor  cCursor;

	if ((pStack = m_pRepository.GetAt(m_pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))))
	{
		for (nItem = 0, nItems = (INT)pStack->GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = (CTCItem *)pStack->GetAt(nItem)) != (CTCItem *)NULL)
			{
				if ((pFunction = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pItem->GetName())) : (CDatabaseTCFunction *)NULL) && pFunction->GetTCID() == pItem->GetTCID())
				{
					if ((pPacket[1] = ((pPacket[0] = new CDatabaseTCPacket) && pItem->GetTCPacket(pPacket[0])) ? GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pPacket[0]->GetTag())) : (CDatabaseTCPacket *)NULL) && pPacket[0]->GetAPID() == pPacket[1]->GetAPID())
					{
						for (nParameter = 0, nParameters = (INT)pPacket[0]->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pPacketParameter[0] = pPacket[0]->GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
							{
								if ((pPacketParameter[1] = pPacket[1]->GetAt(pPacket[1]->Find(pPacketParameter[0]->GetTag(), pPacketParameter[0]->GetBytePos(), pPacketParameter[0]->GetBitPos()))))
								{
									if (pPacketParameter[0]->GetAttributes() != pPacketParameter[1]->GetAttributes() || pPacketParameter[0]->GetWidth() != pPacketParameter[1]->GetWidth()) break;
									continue;
								}
								break;
							}
						}
						for (nElement = 0, nElements = (INT)pFunction->GetSize(); nElement < nElements; nElement++)
						{
							if ((pFunctionElement[0] = pFunction->GetAt(nParameter)) != (CDatabaseTCFunctionElement *)NULL)
							{
								if ((pFunctionElement[1] = pItem->GetAt(pItem->Find(pFunctionElement[0]->GetName(), pFunctionElement[0]->GetBytePos(), pFunctionElement[0]->GetBitPos()))))
								{
									if (pFunctionElement[0]->GetAttributes() != pFunctionElement[1]->GetAttributes() || pFunctionElement[0]->GetWidth() != pFunctionElement[1]->GetWidth()) break;
									continue;
								}
								break;
							}
						}
						if (nParameter == nParameters  &&  nElement == nElements)
						{
							delete pPacket[0];
							continue;
						}
					}
					delete pPacket[0];
				}
				if ((pProcedure = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pItem->GetName())) : (CDatabaseTCProcedure *)NULL)) continue;
			}
			break;
		}
		for (pStack->Validate((nItem == nItems) ? TRUE : FALSE); nItem == nItems; )
		{
			pStack->SetDatabaseVersion(GetDatabase()->GetCreationTime(), GetDatabase()->GetLastUpdateTime());
			GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName);
			SaveRepository(szFileName, m_pRepository);
			break;
		}
		CheckDlgButton(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow((nItem != nItems) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow((nItem != nItems) ? TRUE : FALSE);
		Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)), FindColumnIndex(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_STATUS)), (nItem == nItems) ? STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_VALIDATED) : STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_NOTVALIDATED));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnLoadMemberAnyway()
{
	CHourglassCursor  cCursor;

	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnRemoveMember()
{
	INT  nIndex[2];
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStack  *pStack;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if ((pStack = (LoadRepository(cFile, pRepository)) ? pRepository.GetAt((nIndex[1] = pRepository.Find(Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), (nIndex[0] = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST))), FindColumnIndex(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_LIST_TITLEITEM_NAME)))))) : (CTCSavedStack *)NULL))
			{
				for (pRepository.RemoveAt(nIndex[1]); SaveRepository(cFile, pRepository); )
				{
					Listview_DeleteText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), nIndex[0]);
					LogActivity(pStack, TRUE);
					break;
				}
				delete pStack;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), 0); !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnRemoveAllMembers()
{
	CFileEx  cFile;
	CString  szFileName;
	CTCSavedStacks  pRepository;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName); cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite); )
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
		{
			if (SaveRepository(cFile, pRepository))
			{
				SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_DELETEALLITEMS);
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				LogActivity(szFileName);
				cFile.Close();
				break;
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		break;
	}
	for (Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST), 0); !SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST, LVM_GETITEMCOUNT); )
	{
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST, LVM_DELETEALLITEMS);
		SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME, EM_SETSEL, 0, -1);
		CheckDlgButton(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY, FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_VALIDATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LOADANYWAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_REMARK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_LIST_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_PROPERTIES_CONTENTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnEditchangeFileName()
{
	BOOL  bRepository;
	CString  szFileName;
	CTCSavedStacks  pRepository;

	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_INSPECT)->EnableWindow(((bRepository = LoadRepository(szFileName, pRepository)) && pRepository.GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILENAME_DELETE)->EnableWindow(bRepository);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnSelchangeFilter()
{
	CString  szFilter;

	for (; !EnumRepositoryMembers(); )
	{
		EnumStackMembers();
		break;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER)->GetWindowText(szFilter);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_MODIFY)->EnableWindow((szFilter != STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVE)->EnableWindow((szFilter != STRING(IDS_TCAUTOMATICSTACKLOADCONTENTSDIALOG_FILTER_NONE)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_LOADCONTENTS_FILTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackLoadContentsDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)m_pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems.GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2]))
			{
				for (pItem->SetSourceType(TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem->SetReleaseTime(0); pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED; )
				{
					pItem->SetFlags(pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					break;
				}
				continue;
			}
			pItem->SetSourceType(TCITEM_SOURCETYPE_AUTOMATICSTACK);
			pItem->SetReleaseTime(0);
		}
	}
	GetParent()->LoadTelecommands(m_pItems);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackLoadContentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKLOADCONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackLoadContentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKLOADCONTENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackInterlocksDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackInterlocksDialog, CDisplayDialog)

CTCAutomaticStackInterlocksDialog::CTCAutomaticStackInterlocksDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackInterlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackInterlocksDialog::Create(CWnd *pParentWnd, CTCInterlocks &pInterlocks)
{
	INT  nResult;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock[2];

	for (pInterlocks.RemoveAll(); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackInterlocksDialog::IDD)) == IDOK; )
	{
		for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock = nInterlock + 1)
		{
			if ((pInterlock[1] = ((pInterlock[0] = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock[0]->GetState() == TCINTERLOCK_STATE_IDLE) ? m_pInterlocks[1].GetAt(m_pInterlocks[1].Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pInterlock[0]->GetName())) : (CTCInterlock *)NULL) && pInterlock[0]->GetState() != pInterlock[1]->GetState())
			{
				pInterlocks.InsertAt(pInterlocks.GetSize(), pInterlock[0], 1);
				m_pInterlocks[0].CPtrArray::RemoveAt(nInterlock);
				nInterlocks--;
				nInterlock--;
			}
		}
		break;
	}
	return nResult;
}

CTCAutomaticStackWnd *CTCAutomaticStackInterlocksDialog::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCAutomaticStackInterlocksDialog::EnumInterlocks()
{
	INT  nColumn;
	INT  nColumns;
	INT  nInterlock;
	INT  nInterlocks;
	CString  szItem;
	CString  szScope[2];
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (GetTCService()->GetTCInterlocks(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, m_pInterlocks[0])) ? (INT)m_pInterlocks[0].GetSize() : 0, m_pInterlocks[1].Copy(&m_pInterlocks[0]); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_NAME); )
				{
					szItem = pInterlock->GetName();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE))
				{
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_MANUALSTACKTYPE) : EMPTYSTRING;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_AUTOMATICSTACKTYPE) : szItem;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_PROCEDURESMONITORTYPE) : szItem;
					szItem = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_ALLSOURCES) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_ALLSOURCESTYPE) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE))
				{
					szScope[0].Format(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_SUBSYSTEMSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szScope[1].Format(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_SUBSYSTEMNOWAITSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_GLOBALSCOPE) : EMPTYSTRING;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_LOCALSCOPE) : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_LOCALNOWAITSCOPE) : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? szScope[0] : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? szScope[1] : szItem;
					szItem = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_COMMANDSSCOPE) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE))
				{
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_RECEPTIONSTAGE) : EMPTYSTRING;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_TRANSMISSIONSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_ACCEPTANCESTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_STARTSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_PROGRESSSTAGE) : szItem;
					szItem = (pInterlock->GetStage() == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_COMPLETIONSTAGE) : szItem;
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STATE))
				{
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_IDLESTATE) : EMPTYSTRING;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_PENDINGSTATE) : szItem;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_SUCCESSSTATE) : szItem;
					szItem = (pInterlock->GetState() == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_FAILURESTATE) : szItem;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), nInterlock, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), nInterlock, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), 0);
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESET)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESETALL)->EnableWindow((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCAutomaticStackInterlocksDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

BOOL CTCAutomaticStackInterlocksDialog::IsModified() CONST
{
	return !m_pInterlocks[0].Compare(&m_pInterlocks[1]);
}

void CTCAutomaticStackInterlocksDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackInterlocksDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackInterlocksDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	return CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackInterlocksDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackInterlocksDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESET, OnReset)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESETALL, OnResetAll)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_INTERLOCKS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackInterlocksDialog message handlers

BOOL CTCAutomaticStackInterlocksDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STATE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 3) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_SCOPE)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STAGE)) ? (rColumns.Width() / 4) : (rColumns.Width() / 5))));
		continue;
	}
	EnumInterlocks();
	return TRUE;
}

BOOL CTCAutomaticStackInterlocksDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESET)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STATE))) != STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_IDLESTATE)) ? TRUE : FALSE);
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackInterlocksDialog::OnReset()
{
	INT  nIndex;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = m_pInterlocks[0].GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST))))))
	{
		for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(), pInterlock->SetState(TCINTERLOCK_STATE_IDLE), Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STATE)), STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_IDLESTATE)); nInterlock < nInterlocks; nInterlock++)
		{
			if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE) break;
			continue;
		}
		GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESET)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESETALL)->EnableWindow((nInterlock < nInterlocks) ? TRUE : FALSE);
		GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackInterlocksDialog::OnResetAll()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && pInterlock->GetState() != TCINTERLOCK_STATE_IDLE)
		{
			Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST), nInterlock, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_TITLEITEM_STATE)), STRING(IDS_TCAUTOMATICSTACKINTERLOCKSDIALOG_LIST_IDLESTATE));
			pInterlock->SetState(TCINTERLOCK_STATE_IDLE);
		}
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_RESETALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_INTERLOCKS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackInterlocksDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetTCService()->SetTCInterlocks(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, m_pInterlocks[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackInterlocksDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackInterlocksDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSubSystemsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSubSystemsDialog, CDisplayDialog)

CTCAutomaticStackSubSystemsDialog::CTCAutomaticStackSubSystemsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSubSystemsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCAutomaticStackSubSystemsDialog::Create(CWnd *pParentWnd, CUIntArray &nSubSystemIDs, CByteArray &bSubSystemStatus)
{
	INT  nResult;
	INT  nSubSystem[2];
	INT  nSubSystems[2];

	for (nSubSystemIDs.RemoveAll(), bSubSystemStatus.RemoveAll(); (nResult = CDisplayDialog::Create(pParentWnd, CTCAutomaticStackSubSystemsDialog::IDD)) == IDOK; )
	{
		for (nSubSystem[0] = 0, nSubSystems[0] = (INT)m_nSubSystemIDs[0].GetSize(); nSubSystem[0] < nSubSystems[0]; nSubSystem[0]++)
		{
			for (nSubSystem[1] = 0, nSubSystems[1] = (INT)m_nSubSystemIDs[1].GetSize(); nSubSystem[1] < nSubSystems[1]; nSubSystem[1]++)
			{
				if (m_nSubSystemIDs[0].GetAt(nSubSystem[0]) == m_nSubSystemIDs[1].GetAt(nSubSystem[1]))
				{
					if (m_szSubSystemEvents[0][0].GetAt(nSubSystem[0]) != m_szSubSystemEvents[1][0].GetAt(nSubSystem[1])) continue;
					if (m_szSubSystemEvents[0][1].GetAt(nSubSystem[0]) != m_szSubSystemEvents[1][1].GetAt(nSubSystem[1])) continue;
					if (m_nSubSystemStatus[0].GetAt(nSubSystem[0]) != m_nSubSystemStatus[1].GetAt(nSubSystem[1])) continue;
					break;
				}
			}
			if (nSubSystem[1] == nSubSystems[1])
			{
				nSubSystemIDs.Add(m_nSubSystemIDs[0].GetAt(nSubSystem[0]));
				bSubSystemStatus.Add(LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem[0])));
			}
		}
		break;
	}
	return nResult;
}

CTCAutomaticStackWnd *CTCAutomaticStackSubSystemsDialog::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayDialog::GetParent());
}

BOOL CTCAutomaticStackSubSystemsDialog::EnumSubSystems()
{
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nSubSystem;
	INT  nSubSystems;
	CString  szItem;
	CString  szEvent;
	CStringTools  cStringTools;

	for (nSubSystem = 0, nSubSystems = (GetParent()->GetSubSystemChecks(m_nSubSystemIDs[0], m_szSubSystemEvents[0][0], m_szSubSystemEvents[0][1], m_nSubSystemStatus[0])) ? (INT)m_nSubSystemIDs[0].GetSize() : 0, m_nSubSystemIDs[1].Copy(m_nSubSystemIDs[0]), m_szSubSystemEvents[1][0].Copy(m_szSubSystemEvents[0][0]), m_szSubSystemEvents[1][1].Copy(m_szSubSystemEvents[0][1]), m_nSubSystemStatus[1].Copy(m_nSubSystemStatus[0]), nDigits = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		nDigits = max(cStringTools.ConvertUIntToString(m_nSubSystemIDs[0].GetAt(nSubSystem), 16).GetLength(), nDigits);
		continue;
	}
	for (nSubSystem = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_NAME); )
			{
				szItem = GetTCService()->TranslateIDToTCSubSystem(m_nSubSystemIDs[0].GetAt(nSubSystem));
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_APID); )
			{
				szItem = cStringTools.ConvertUIntToPaddedString(m_nSubSystemIDs[0].GetAt(nSubSystem), max(nDigits, 3), 16);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_SETTO); )
			{
				szItem = (LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS) : STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_STATUS); )
			{
				szEvent.Format(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_DISABLINGEVENT), (LPCTSTR)m_szSubSystemEvents[0][1].GetAt(nSubSystem));
				szItem = (LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) && HIBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS) : EMPTYSTRING;
				szItem = (!LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) || !HIBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? ((LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) && !m_szSubSystemEvents[0][1].GetAt(nSubSystem).IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS) + CString(SPACE) + szEvent) : STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS)) : szItem;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), nSubSystem, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), nSubSystem, nColumn, szItem);
		}
	}
	return Listview_SetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), 0);
}

BOOL CTCAutomaticStackSubSystemsDialog::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	for (nEvent = 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	return TRUE;
}

VOID CTCAutomaticStackSubSystemsDialog::ShowDetails()
{
	INT  nIndex;

	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][0].GetAt((nIndex = max(Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)), 0)))));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][1].GetAt(nIndex)));
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, (SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED, (LOBYTE(m_nSubSystemStatus[0].GetAt(nIndex))) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLED, (!LOBYTE(m_nSubSystemStatus[0].GetAt(nIndex))) ? TRUE : FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED));
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT));
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT));
}

INT CTCAutomaticStackSubSystemsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCAutomaticStackSubSystemsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED, (bCheck = CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLED, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, bCheck, TRUE, bCheck);
	AccessControl(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, bCheck, TRUE, bCheck);
}

BOOL CTCAutomaticStackSubSystemsDialog::IsModified() CONST
{
	INT  nSubSystem;
	INT  nSubSystems;

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs[0].GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		if ((m_nSubSystemIDs[0].GetAt(nSubSystem) != m_nSubSystemIDs[1].GetAt(nSubSystem) || m_szSubSystemEvents[0][0].GetAt(nSubSystem) != m_szSubSystemEvents[1][0].GetAt(nSubSystem) || m_szSubSystemEvents[0][1].GetAt(nSubSystem) != m_szSubSystemEvents[1][1].GetAt(nSubSystem) || m_nSubSystemStatus[0].GetAt(nSubSystem) != m_nSubSystemStatus[1].GetAt(nSubSystem)) && ((m_szSubSystemEvents[0][0].GetAt(nSubSystem).IsEmpty() && m_szSubSystemEvents[0][1].GetAt(nSubSystem).IsEmpty()) || m_szSubSystemEvents[0][0].GetAt(nSubSystem) != m_szSubSystemEvents[0][1].GetAt(nSubSystem))) break;
		continue;
	}
	return((nSubSystem < nSubSystems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackSubSystemsDialog::Check(BOOL bModified) CONST
{
	return(((!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT) || GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT) || GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->SendMessage(CB_GETCURSEL) >= 0)) ? (!bModified || IsModified()) : FALSE);
}

void CTCAutomaticStackSubSystemsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSubSystemsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCAutomaticStackSubSystemsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSubSystemsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSubSystemsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED, OnEnableSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLED, OnDisableSubSystem)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, OnUseEnableSubSystemEvent)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, OnUseDisableSubSystemEvent)
	ON_BN_CLICKED(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, OnSelchangeEnableSubSystemEvent)
	ON_CBN_SELCHANGE(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, OnSelchangeDisableSubSystemEvent)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSubSystemsDialog message handlers

BOOL CTCAutomaticStackSubSystemsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_APID));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_SETTO));
	m_szColumns.Add(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_APID)) ? (rColumns.Width() / 8) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_SETTO)) ? (rColumns.Width() / 5) : (rColumns.Width() / 2))));
		continue;
	}
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow();
	EnumSubSystems();
	EnumEvents();
	ShowDetails();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCAutomaticStackSubSystemsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowDetails();
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackSubSystemsDialog::OnEnableSubSystem()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)); nIndex < m_nSubSystemStatus[0].GetSize(); )
	{
		m_nSubSystemStatus[0].SetAt(nIndex, MAKEWORD(TRUE, HIBYTE(m_nSubSystemStatus[0].GetAt(nIndex))));
		break;
	}
	Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_SETTO)), STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS));
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow();
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnDisableSubSystem()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)); nIndex < m_nSubSystemStatus[0].GetSize(); )
	{
		m_nSubSystemStatus[0].SetAt(nIndex, MAKEWORD(FALSE, HIBYTE(m_nSubSystemStatus[0].GetAt(nIndex))));
		m_szSubSystemEvents[0][0].SetAt(nIndex, EMPTYSTRING);
		m_szSubSystemEvents[0][1].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	Listview_SetText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TITLEITEM_SETTO)), STRING(IDS_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS));
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, FALSE);
	CheckDlgButton(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnUseEnableSubSystemEvent()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)); nIndex < m_szSubSystemEvents[0][0].GetSize(); )
	{
		m_szSubSystemEvents[0][0].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnUseDisableSubSystemEvent()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)); nIndex < m_szSubSystemEvents[0][1].GetSize(); )
	{
		m_szSubSystemEvents[0][1].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnSelchangeEnableSubSystemEvent()
{
	INT  nIndex;
	CString  szEvent;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)), GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->GetWindowText(szEvent); nIndex < m_szSubSystemEvents[0][0].GetSize(); )
	{
		m_szSubSystemEvents[0][0].SetAt(nIndex, szEvent);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnSelchangeDisableSubSystemEvent()
{
	INT  nIndex;
	CString  szEvent;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_LIST)), GetDlgItem(IDC_TCAUTOMATICSTACK_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->GetWindowText(szEvent); nIndex < m_szSubSystemEvents[0][1].GetSize(); )
	{
		m_szSubSystemEvents[0][1].SetAt(nIndex, szEvent);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCAutomaticStackSubSystemsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParent()->SetSubSystemChecks(m_nSubSystemIDs[0], m_szSubSystemEvents[0][0], m_szSubSystemEvents[0][1], m_nSubSystemStatus[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCAutomaticStackSubSystemsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCAutomaticStackSubSystemsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TCAUTOMATICSTACKSUBSYSTEMSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchNumberDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchNumberDialog, CTCStackSearchNumberDialog)

CTCAutomaticStackSearchNumberDialog::CTCAutomaticStackSearchNumberDialog() : CTCStackSearchNumberDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchNumberDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchNumberDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchNumberDialog::GetParent());
}

void CTCAutomaticStackSearchNumberDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchNumberDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchNumberDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchNumberDialog, CTCStackSearchNumberDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchNumberDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNUMBER_GOTO, OnGotoNumber)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchNumberDialog message handlers

void CTCAutomaticStackSearchNumberDialog::OnGotoNumber()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByNumber((INT)Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHNUMBER_NUMBER))))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_NUMBER_NOTHING);
		return;
	}
}

void CTCAutomaticStackSearchNumberDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchNumberDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchNameDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchNameDialog, CTCStackSearchNameDialog)

CTCAutomaticStackSearchNameDialog::CTCAutomaticStackSearchNameDialog() : CTCStackSearchNameDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchNameDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchNameDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchNameDialog::GetParent());
}

void CTCAutomaticStackSearchNameDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchNameDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchNameDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchNameDialog, CTCStackSearchNameDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchNameDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHNAME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchNameDialog message handlers

void CTCAutomaticStackSearchNameDialog::OnFindTelecommand()
{
	CString  szName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHNAME_NAME)->GetWindowText(szName);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHNAME_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName);
		m_szNames.Add(szName);
	}
	if (!GetParent()->SearchTelecommandByName(szName, IsDlgButtonChecked(IDC_TCSTACK_SEARCHNAME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHNAME_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_NAME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHNAME_ALL, FALSE);
}

void CTCAutomaticStackSearchNameDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchNameDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchDescriptionDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchDescriptionDialog, CTCStackSearchDescriptionDialog)

CTCAutomaticStackSearchDescriptionDialog::CTCAutomaticStackSearchDescriptionDialog() : CTCStackSearchDescriptionDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchDescriptionDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchDescriptionDialog::GetParent());
}

void CTCAutomaticStackSearchDescriptionDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchDescriptionDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchDescriptionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchDescriptionDialog, CTCStackSearchDescriptionDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchDescriptionDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDESCRIPTION_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchDescriptionDialog message handlers

void CTCAutomaticStackSearchDescriptionDialog::OnFindTelecommand()
{
	CString  szDescription;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT)->GetWindowText(szDescription);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDescription) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHDESCRIPTION_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDescription);
		m_szDescriptions.Add(szDescription);
	}
	if (!GetParent()->SearchTelecommandByDescription(szDescription, IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_CASE), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDESCRIPTION_WORD)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_DESCRIPTION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDESCRIPTION_ALL, FALSE);
}

void CTCAutomaticStackSearchDescriptionDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchDescriptionDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCategoryDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchCategoryDialog, CTCStackSearchCategoryDialog)

CTCAutomaticStackSearchCategoryDialog::CTCAutomaticStackSearchCategoryDialog() : CTCStackSearchCategoryDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchCategoryDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchCategoryDialog::GetParent());
}

void CTCAutomaticStackSearchCategoryDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCategoryDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchCategoryDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchCategoryDialog, CTCStackSearchCategoryDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchCategoryDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCATEGORY_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCategoryDialog message handlers

void CTCAutomaticStackSearchCategoryDialog::OnFindTelecommand()
{
	CString  szCategory;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHCATEGORY_CATEGORY)->GetWindowText(szCategory);
	if (!GetParent()->SearchTelecommandByCategory(szCategory, IsDlgButtonChecked(IDC_TCSTACK_SEARCHCATEGORY_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCATEGORY_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CATEGORY_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCATEGORY_ALL, FALSE);
}

void CTCAutomaticStackSearchCategoryDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCategoryDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchSubSystemDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchSubSystemDialog, CTCStackSearchSubSystemDialog)

CTCAutomaticStackSearchSubSystemDialog::CTCAutomaticStackSearchSubSystemDialog() : CTCStackSearchSubSystemDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchSubSystemDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchSubSystemDialog::GetParent());
}

void CTCAutomaticStackSearchSubSystemDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchSubSystemDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchSubSystemDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchSubSystemDialog, CTCStackSearchSubSystemDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchSubSystemDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSUBSYSTEM_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchSubSystemDialog message handlers

void CTCAutomaticStackSearchSubSystemDialog::OnFindTelecommand()
{
	CString  szSubSystem;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME)->GetWindowText(szSubSystem);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystem) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHSUBSYSTEM_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSubSystem);
		m_szSubSystems.Add(szSubSystem);
	}
	if (!GetParent()->SearchTelecommandBySubSystem(szSubSystem, IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSUBSYSTEM_CASE)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_SUBSYSTEM_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSUBSYSTEM_ALL, FALSE);
}

void CTCAutomaticStackSearchSubSystemDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchSubSystemDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchArgumentsDialog, CTCStackSearchArgumentsDialog)

CTCAutomaticStackSearchArgumentsDialog::CTCAutomaticStackSearchArgumentsDialog() : CTCStackSearchArgumentsDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchArgumentsDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchArgumentsDialog::GetParent());
}

void CTCAutomaticStackSearchArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchArgumentsDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchArgumentsDialog, CTCStackSearchArgumentsDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchArgumentsDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHARGUMENTS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchArgumentsDialog message handlers

void CTCAutomaticStackSearchArgumentsDialog::OnFindTelecommand()
{
	CString  szArgument;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT)->GetWindowText(szArgument);
	if (SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szArgument) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCSTACK_SEARCHARGUMENTS_ARGUMENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szArgument);
		m_szArguments.Add(szArgument);
	}
	if (!GetParent()->SearchTelecommandByArgument(szArgument, IsDlgButtonChecked(IDC_TCSTACK_SEARCHARGUMENTS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHARGUMENTS_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_ARGUMENT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHARGUMENTS_ALL, FALSE);
}

void CTCAutomaticStackSearchArgumentsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchArgumentsDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFlagsDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchFlagsDialog, CTCStackSearchFlagsDialog)

CTCAutomaticStackSearchFlagsDialog::CTCAutomaticStackSearchFlagsDialog() : CTCStackSearchFlagsDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchFlagsDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchFlagsDialog::GetParent());
}

void CTCAutomaticStackSearchFlagsDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchFlagsDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchFlagsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchFlagsDialog, CTCStackSearchFlagsDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchFlagsDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHFLAGS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchFlagsDialog message handlers

void CTCAutomaticStackSearchFlagsDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByFlags(IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKING), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_INTERLOCKED), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_GROUPED), IsDlgButtonChecked(IDC_TCSTACK_SEARCHFLAGS_FLAG_BLOCKED)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_FLAGS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHFLAGS_ALL, FALSE);
}

void CTCAutomaticStackSearchFlagsDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchFlagsDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchTCPacketDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchTCPacketDialog, CTCStackSearchTCPacketDialog)

CTCAutomaticStackSearchTCPacketDialog::CTCAutomaticStackSearchTCPacketDialog() : CTCStackSearchTCPacketDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchTCPacketDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchTCPacketDialog::GetParent());
}

void CTCAutomaticStackSearchTCPacketDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchTCPacketDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchTCPacketDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchTCPacketDialog, CTCStackSearchTCPacketDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchTCPacketDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHTCPACKET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchTCPacketDialog message handlers

void CTCAutomaticStackSearchTCPacketDialog::OnFindTelecommand()
{
	INT  nPos;
	CString  szPacket;
	CString  szFormat;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCSTACK_SEARCHTCPACKET_TAG)->GetWindowText(szPacket), szFormat.Format(STRING(IDS_TCSTACKSEARCHDIALOG_TCPACKET_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szPacket.Find(szFormat)) >= 0; )
	{
		szPacket = szPacket.Left(nPos);
		break;
	}
	if (!GetParent()->SearchTelecommandByTCPacket(szPacket, IsDlgButtonChecked(IDC_TCSTACK_SEARCHTCPACKET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHTCPACKET_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_TCPACKET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHTCPACKET_ALL, FALSE);
}

void CTCAutomaticStackSearchTCPacketDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchTCPacketDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchDispatchTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchDispatchTimeDialog, CTCStackSearchDispatchTimeDialog)

CTCAutomaticStackSearchDispatchTimeDialog::CTCAutomaticStackSearchDispatchTimeDialog() : CTCStackSearchDispatchTimeDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchDispatchTimeDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchDispatchTimeDialog::GetParent());
}

void CTCAutomaticStackSearchDispatchTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchDispatchTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchDispatchTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchDispatchTimeDialog, CTCStackSearchDispatchTimeDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchDispatchTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHDISPATCHTIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchDispatchTimeDialog message handlers

void CTCAutomaticStackSearchDispatchTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByDispatchTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHDISPATCHTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHDISPATCHTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_DISPATCHTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHDISPATCHTIME_ALL, FALSE);
}

void CTCAutomaticStackSearchDispatchTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchDispatchTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchReleaseTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchReleaseTimeDialog, CTCStackSearchReleaseTimeDialog)

CTCAutomaticStackSearchReleaseTimeDialog::CTCAutomaticStackSearchReleaseTimeDialog() : CTCStackSearchReleaseTimeDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchReleaseTimeDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchReleaseTimeDialog::GetParent());
}

void CTCAutomaticStackSearchReleaseTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchReleaseTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchReleaseTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchReleaseTimeDialog, CTCStackSearchReleaseTimeDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchReleaseTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchReleaseTimeDialog message handlers

void CTCAutomaticStackSearchReleaseTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_RELEASETIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIME_ALL, FALSE);
}

void CTCAutomaticStackSearchReleaseTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchReleaseTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchReleaseTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchReleaseTimeOffsetDialog, CTCStackSearchReleaseTimeOffsetDialog)

CTCAutomaticStackSearchReleaseTimeOffsetDialog::CTCAutomaticStackSearchReleaseTimeOffsetDialog() : CTCStackSearchReleaseTimeOffsetDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchReleaseTimeOffsetDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchReleaseTimeOffsetDialog::GetParent());
}

void CTCAutomaticStackSearchReleaseTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchReleaseTimeOffsetDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchReleaseTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchReleaseTimeOffsetDialog, CTCStackSearchReleaseTimeOffsetDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchReleaseTimeOffsetDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchReleaseTimeOffsetDialog message handlers

void CTCAutomaticStackSearchReleaseTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByReleaseTimeOffset((DWORD)(1000 * (Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_OFFSET)).GetTime() % SECONDSPERDAY)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_RELEASETIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHRELEASETIMEOFFSET_ALL, FALSE);
}

void CTCAutomaticStackSearchReleaseTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchReleaseTimeOffsetDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchTransmissionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchTransmissionTimeDialog, CTCStackSearchTransmissionTimeDialog)

CTCAutomaticStackSearchTransmissionTimeDialog::CTCAutomaticStackSearchTransmissionTimeDialog() : CTCStackSearchTransmissionTimeDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchTransmissionTimeDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchTransmissionTimeDialog::GetParent());
}

void CTCAutomaticStackSearchTransmissionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchTransmissionTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchTransmissionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchTransmissionTimeDialog, CTCStackSearchTransmissionTimeDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchTransmissionTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHRELEASETIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchTransmissionTimeDialog message handlers

void CTCAutomaticStackSearchTransmissionTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByTransmissionTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_TRANSMISSIONTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHTRANSMISSIONTIME_ALL, FALSE);
}

void CTCAutomaticStackSearchTransmissionTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchTransmissionTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchExecutionTimeDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchExecutionTimeDialog, CTCStackSearchExecutionTimeDialog)

CTCAutomaticStackSearchExecutionTimeDialog::CTCAutomaticStackSearchExecutionTimeDialog() : CTCStackSearchExecutionTimeDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchExecutionTimeDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchExecutionTimeDialog::GetParent());
}

void CTCAutomaticStackSearchExecutionTimeDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchExecutionTimeDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchExecutionTimeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchExecutionTimeDialog, CTCStackSearchExecutionTimeDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchExecutionTimeDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIME_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchExecutionTimeDialog message handlers

void CTCAutomaticStackSearchExecutionTimeDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTime(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_TIME)), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIME_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIME_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_EXECUTIONTIME_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIME_ALL, FALSE);
}

void CTCAutomaticStackSearchExecutionTimeDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchExecutionTimeDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchExecutionTimeOffsetDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchExecutionTimeOffsetDialog, CTCStackSearchExecutionTimeOffsetDialog)

CTCAutomaticStackSearchExecutionTimeOffsetDialog::CTCAutomaticStackSearchExecutionTimeOffsetDialog() : CTCStackSearchExecutionTimeOffsetDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchExecutionTimeOffsetDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchExecutionTimeOffsetDialog::GetParent());
}

void CTCAutomaticStackSearchExecutionTimeOffsetDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchExecutionTimeOffsetDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchExecutionTimeOffsetDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchExecutionTimeOffsetDialog, CTCStackSearchExecutionTimeOffsetDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchExecutionTimeOffsetDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchExecutionTimeOffsetDialog message handlers

void CTCAutomaticStackSearchExecutionTimeOffsetDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByExecutionTimeOffset(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_OFFSET)).GetTime(), (IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL)) ? Spinbox_GetPos(GetDlgItem(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_INTERVAL_TIME)) : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL), IsDlgButtonChecked(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_MATCH)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_EXECUTIONTIMEOFFSET_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHEXECUTIONTIMEOFFSET_ALL, FALSE);
}

void CTCAutomaticStackSearchExecutionTimeOffsetDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchExecutionTimeOffsetDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchAuthorizationDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchAuthorizationDialog, CTCStackSearchAuthorizationDialog)

CTCAutomaticStackSearchAuthorizationDialog::CTCAutomaticStackSearchAuthorizationDialog() : CTCStackSearchAuthorizationDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchAuthorizationDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchAuthorizationDialog::GetParent());
}

void CTCAutomaticStackSearchAuthorizationDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchAuthorizationDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchAuthorizationDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchAuthorizationDialog, CTCStackSearchAuthorizationDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchAuthorizationDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHAUTHORIZATION_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchAuthorizationDialog message handlers

void CTCAutomaticStackSearchAuthorizationDialog::OnFindTelecommand()
{
	CString  szAuthorization;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHAUTHORIZATION_TYPE)->GetWindowText(szAuthorization);
	if (!GetParent()->SearchTelecommandByAuthorization((szAuthorization == STRING(IDS_TCSTACKSEARCHDIALOG_AUTHORIZATION_AUTOMATIC)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED : 0, IsDlgButtonChecked(IDC_TCSTACK_SEARCHAUTHORIZATION_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_AUTHORIZATION_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHAUTHORIZATION_ALL, FALSE);
}

void CTCAutomaticStackSearchAuthorizationDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchAuthorizationDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchPTVTimeWindowDialog, CTCStackSearchPTVTimeWindowDialog)

CTCAutomaticStackSearchPTVTimeWindowDialog::CTCAutomaticStackSearchPTVTimeWindowDialog() : CTCStackSearchPTVTimeWindowDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchPTVTimeWindowDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchPTVTimeWindowDialog::GetParent());
}

void CTCAutomaticStackSearchPTVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVTimeWindowDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchPTVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchPTVTimeWindowDialog, CTCStackSearchPTVTimeWindowDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchPTVTimeWindowDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVTimeWindowDialog message handlers

void CTCAutomaticStackSearchPTVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByPTVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVTIMEWINDOW_ALL, FALSE);
}

void CTCAutomaticStackSearchPTVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVTimeWindowDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchPTVCheckDialog, CTCStackSearchPTVCheckDialog)

CTCAutomaticStackSearchPTVCheckDialog::CTCAutomaticStackSearchPTVCheckDialog() : CTCStackSearchPTVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchPTVCheckDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchPTVCheckDialog::GetParent());
}

void CTCAutomaticStackSearchPTVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchPTVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchPTVCheckDialog, CTCStackSearchPTVCheckDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchPTVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVCheckDialog message handlers

void CTCAutomaticStackSearchPTVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPTVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPTVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_OFF)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PTVCHECK_DISABLED)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV : 0), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVCHECK_ALL, FALSE);
}

void CTCAutomaticStackSearchPTVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchPTVResultDialog, CTCStackSearchPTVResultDialog)

CTCAutomaticStackSearchPTVResultDialog::CTCAutomaticStackSearchPTVResultDialog() : CTCStackSearchPTVResultDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchPTVResultDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchPTVResultDialog::GetParent());
}

void CTCAutomaticStackSearchPTVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPTVResultDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchPTVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchPTVResultDialog, CTCStackSearchPTVResultDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchPTVResultDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPTVRESULT_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPTVResultDialog message handlers

void CTCAutomaticStackSearchPTVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPTVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPTVResult((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_GO)) ? TCAUTOMATICSTACKITEM_RESULT_PTV_GO : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_WAIT)) ? TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PTVRESULT_FAIL)) ? TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPTVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PTVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPTVRESULT_ALL, FALSE);
}

void CTCAutomaticStackSearchPTVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPTVResultDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchPEVCheckDialog, CTCStackSearchPEVCheckDialog)

CTCAutomaticStackSearchPEVCheckDialog::CTCAutomaticStackSearchPEVCheckDialog() : CTCStackSearchPEVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchPEVCheckDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchPEVCheckDialog::GetParent());
}

void CTCAutomaticStackSearchPEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPEVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchPEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchPEVCheckDialog, CTCStackSearchPEVCheckDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchPEVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPEVCheckDialog message handlers

void CTCAutomaticStackSearchPEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByPEVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_NONE)) ? ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_OFF)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_PEVCHECK_DISABLED)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVCHECK_ALL, FALSE);
}

void CTCAutomaticStackSearchPEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPEVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchPEVResultDialog, CTCStackSearchPEVResultDialog)

CTCAutomaticStackSearchPEVResultDialog::CTCAutomaticStackSearchPEVResultDialog() : CTCStackSearchPEVResultDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchPEVResultDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchPEVResultDialog::GetParent());
}

void CTCAutomaticStackSearchPEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchPEVResultDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchPEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchPEVResultDialog, CTCStackSearchPEVResultDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchPEVResultDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHPEVRESULT_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchPEVResultDialog message handlers

void CTCAutomaticStackSearchPEVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHPEVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByPEVResult((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_GO)) ? TCAUTOMATICSTACKITEM_RESULT_PEV_GO : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_PEVRESULT_NOGO)) ? TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO : 0), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHPEVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_PEVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHPEVRESULT_ALL, FALSE);
}

void CTCAutomaticStackSearchPEVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchPEVResultDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVTimeWindowDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchCEVTimeWindowDialog, CTCStackSearchCEVTimeWindowDialog)

CTCAutomaticStackSearchCEVTimeWindowDialog::CTCAutomaticStackSearchCEVTimeWindowDialog() : CTCStackSearchCEVTimeWindowDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchCEVTimeWindowDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchCEVTimeWindowDialog::GetParent());
}

void CTCAutomaticStackSearchCEVTimeWindowDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCEVTimeWindowDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchCEVTimeWindowDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchCEVTimeWindowDialog, CTCStackSearchCEVTimeWindowDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchCEVTimeWindowDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVTimeWindowDialog message handlers

void CTCAutomaticStackSearchCEVTimeWindowDialog::OnFindTelecommand()
{
	CHourglassCursor  cCursor;

	if (!GetParent()->SearchTelecommandByCEVTimeWindow(Timespinbox_GetTime(GetDlgItem(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_TIME)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CEVTIMEWINDOW_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVTIMEWINDOW_ALL, FALSE);
}

void CTCAutomaticStackSearchCEVTimeWindowDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCEVTimeWindowDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVCheckDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchCEVCheckDialog, CTCStackSearchCEVCheckDialog)

CTCAutomaticStackSearchCEVCheckDialog::CTCAutomaticStackSearchCEVCheckDialog() : CTCStackSearchCEVCheckDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchCEVCheckDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchCEVCheckDialog::GetParent());
}

void CTCAutomaticStackSearchCEVCheckDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCEVCheckDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchCEVCheckDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchCEVCheckDialog, CTCStackSearchCEVCheckDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchCEVCheckDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVCHECK_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVCheckDialog message handlers

void CTCAutomaticStackSearchCEVCheckDialog::OnFindTelecommand()
{
	CString  szCheck;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHCEVCHECK_CHECK)->GetWindowText(szCheck);
	if (!GetParent()->SearchTelecommandByCEVCheck((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_NONE)) ? ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_OFF)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV : ((szCheck == STRING(IDS_TCSTACKSEARCHDIALOG_CEVCHECK_DISABLED)) ? TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV : 0)), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVCHECK_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVCHECK_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CEVCHECK_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVCHECK_ALL, FALSE);
}

void CTCAutomaticStackSearchCEVCheckDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCEVCheckDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVResultDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchCEVResultDialog, CTCStackSearchCEVResultDialog)

CTCAutomaticStackSearchCEVResultDialog::CTCAutomaticStackSearchCEVResultDialog() : CTCStackSearchCEVResultDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchCEVResultDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchCEVResultDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchCEVResultDialog::GetParent());
}

void CTCAutomaticStackSearchCEVResultDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchCEVResultDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchCEVResultDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchCEVResultDialog, CTCStackSearchCEVResultDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchCEVResultDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHCEVRESULT_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchCEVResultDialog message handlers

void CTCAutomaticStackSearchCEVResultDialog::OnFindTelecommand()
{
	CString  szResult;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCSTACK_SEARCHCEVRESULT_RESULT)->GetWindowText(szResult);
	if (!GetParent()->SearchTelecommandByCEVResult((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_IDLE)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_PENDING)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_PASSED)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_FAILED)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_UNKNOWN)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN : ((szResult == STRING(IDS_TCSTACKSEARCHDIALOG_CEVRESULT_UNVERIFIED)) ? TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED : 0))))), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVRESULT_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHCEVRESULT_ALL)))
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_CEVRESULT_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHCEVRESULT_ALL, FALSE);
}

void CTCAutomaticStackSearchCEVResultDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchCEVResultDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchStatusDialog dialog

IMPLEMENT_DYNCREATE(CTCAutomaticStackSearchStatusDialog, CTCStackSearchStatusDialog)

CTCAutomaticStackSearchStatusDialog::CTCAutomaticStackSearchStatusDialog() : CTCStackSearchStatusDialog()
{
	//{{AFX_DATA_INIT(CTCAutomaticStackSearchStatusDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CTCAutomaticStackPageTextView *CTCAutomaticStackSearchStatusDialog::GetParent() CONST
{
	return((CTCAutomaticStackPageTextView *)CTCStackSearchStatusDialog::GetParent());
}

void CTCAutomaticStackSearchStatusDialog::DoDataExchange(CDataExchange *pDX)
{
	CTCStackSearchStatusDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCAutomaticStackSearchStatusDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackSearchStatusDialog, CTCStackSearchStatusDialog)
	//{{AFX_MSG_MAP(CTCAutomaticStackSearchStatusDialog)
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TCSTACK_SEARCHSTATUS_FIND, OnFindTelecommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackSearchStatusDialog message handlers

void CTCAutomaticStackSearchStatusDialog::OnFindTelecommand()
{
	CString  szStatus;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCSTACK_SEARCHSTATUS_STATUS)->GetWindowText(szStatus); !GetParent()->SearchTelecommandByStatus(szStatus, IsDlgButtonChecked(IDC_TCSTACK_SEARCHSTATUS_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCSTACK_SEARCHSTATUS_ALL)); )
	{
		ReportEvent(USER_INFORMATIONAL_TCSTACK_SEARCH_STATUS_NOTHING);
		EndDialog(IDOK);
		return;
	}
	CheckDlgButton(IDC_TCSTACK_SEARCHSTATUS_ALL, FALSE);
}

void CTCAutomaticStackSearchStatusDialog::OnDestroy()
{
	GetParent()->SelectTelecommand(-1);
	CTCStackSearchStatusDialog::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackToolBar

IMPLEMENT_DYNCREATE(CTCAutomaticStackToolBar, CDisplayToolBar)

CTCAutomaticStackToolBar::CTCAutomaticStackToolBar() : CDisplayToolBar()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackToolBar, CDisplayToolBar)
	//{{AFX_MSG_MAP(CTCAutomaticStackToolBar)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackToolBar message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackStatusBar

IMPLEMENT_DYNCREATE(CTCAutomaticStackStatusBar, CDisplayStatusBar)

CTCAutomaticStackStatusBar::CTCAutomaticStackStatusBar() : CDisplayStatusBar()
{
	m_bPanesColor = TRUE;
}

BOOL CTCAutomaticStackStatusBar::SetIndicators(CONST UINT *pPanesID, INT nCount)
{
	INT  nIndex;
	CRect  rPane;
	CString  szPane;
	CToolInfo  cToolInfo;
	CDisplayLock  cLock(this);

	if (CDisplayStatusBar::SetIndicators(pPanesID, nCount))
	{
		if (CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE) >= 0)
		{
			szPane.Format(STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_UPDATEMESSAGE), (UINT)-1);
			SetPaneInfo(CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE), ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE, SBPS_NOBORDERS | SBPS_STRETCH, CalcPaneWidth(szPane));
		}
		if (!IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			m_wndToolTip.Create(this, TTS_ALWAYSTIP | TTS_NOPREFIX | TTS_BALLOON);
			SetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE, GetClassLongPtr(m_wndToolTip.GetSafeHwnd(), GCL_STYLE) | CS_DROPSHADOW);
		}
		if (IsWindow(m_wndToolTip.GetSafeHwnd()))
		{
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE);
					break;
				}
			}
			if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE)) >= 0)
			{
				for (GetItemRect(nIndex, rPane); !m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE); )
				{
					m_wndToolTip.AddTool(this, LPSTR_TEXTCALLBACK, rPane, ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE);
					break;
				}
			}
			m_wndToolTip.SetMaxTipWidth(GetSystemMetrics(SM_CXSCREEN));
			m_wndToolTip.Activate(TRUE);
		}
		return TRUE;
	}
	return FALSE;
}

CTCAutomaticStackWnd *CTCAutomaticStackStatusBar::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CDisplayStatusBar::GetParent());
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackStatusBar, CDisplayStatusBar)
	//{{AFX_MSG_MAP(CTCAutomaticStackStatusBar)
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipNotify)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackStatusBar message handlers

void CTCAutomaticStackStatusBar::OnPaint()
{
	INT  nIndex;
	RECT  rPane;
	CToolInfo  cToolInfo;

	for (CDisplayStatusBar::OnPaint(); IsWindow(m_wndToolTip.GetSafeHwnd()); )
	{
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		if ((nIndex = CommandToIndex(ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE)) >= 0 && nIndex < m_prPanes.GetSize())
		{
			for (m_wndToolTip.GetToolInfo(cToolInfo, this, ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE), CopyMemory(&rPane, m_prPanes.GetAt(nIndex), sizeof(RECT)); !EqualRect(&cToolInfo.rect, &rPane); )
			{
				SetRect(&cToolInfo.rect, rPane.left, rPane.top, rPane.right, rPane.bottom);
				m_wndToolTip.SetToolInfo(&cToolInfo);
				break;
			}
		}
		break;
	}
}

void CTCAutomaticStackStatusBar::OnMouseMove(UINT nFlags, CPoint point)
{
	MSG  sMsg;

	if (IsWindow(m_wndToolTip.GetSafeHwnd()))
	{
		CopyMemory(&sMsg, GetCurrentMessage(), sizeof(MSG));
		m_wndToolTip.RelayEvent(&sMsg);
	}
	CDisplayStatusBar::OnMouseMove(nFlags, point);
}

BOOL CTCAutomaticStackStatusBar::OnToolTipNotify(UINT nID, NMHDR *pNotifyInfo, LRESULT *pResult)
{
	TOOLTIPTEXT  *pToolTipInfo = (TOOLTIPTEXT *)pNotifyInfo;

	switch (pNotifyInfo->idFrom)
	{
	case ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE);
	return TRUE;
	}
	case ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PTVPANE);
	return TRUE;
	}
	case ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PEVPANE);
	return TRUE;
	}
	case ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_CEVPANE);
	return TRUE;
	}
	case ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATEPANE);
	return TRUE;
	}
	case ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE:
	{ pToolTipInfo->lpszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_MODEPANE);
	return TRUE;
	}
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackToolTip

IMPLEMENT_DYNCREATE(CTCAutomaticStackToolTip, CDisplayToolTip)

CTCAutomaticStackToolTip::CTCAutomaticStackToolTip() : CDisplayToolTip()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackToolTip, CDisplayToolTip)
	//{{AFX_MSG_MAP(CTCAutomaticStackToolTip)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackToolTip message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackDocument

IMPLEMENT_DYNAMIC(CTCAutomaticStackDocument, CDocument)

CTCAutomaticStackDocument::CTCAutomaticStackDocument() : CDocument()
{
	return;
}

CTCAutomaticStackDocument::~CTCAutomaticStackDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPageTextView

IMPLEMENT_DYNCREATE(CTCAutomaticStackPageTextView, CTextView)

CTCAutomaticStackPageTextView::CTCAutomaticStackPageTextView() : CTextView()
{
	m_nPane = 0;
	m_nChecks = 0;
	m_nArguments = -1;
	m_nSearchIndex = -1;
	m_nClipboardFormat = 0;
	m_bProperties = FALSE;
	m_bAllArguments = FALSE;
	m_bFullViewMode = FALSE;
	m_nFilterMode[0] = 0;
	m_nFilterMode[1] = 0;
	m_nFilterLimitation = 0;
	m_nMiscellaneousOptions = 0;
	m_nTelecommandingMode = 0;
	m_nTelecommandingFlags = 0;
	m_nTelecommandingState = 0;
	m_nTelecommandingUplinkState = 0;
	m_bTelecommandingInterlockMode = TRUE;
	m_bTelecommandingReleaseWaitMode = FALSE;
	m_bTelecommandingAutoRejectionMode = TRUE;
	m_tDispatchTimeWindow = 0;
	m_tDefaultReleaseTimeWindow = 0;
	m_sizeFlagSymbols.cx = 0;
	m_sizeFlagSymbols.cy = 0;
	m_sizeAlertSymbols.cx = 0;
	m_sizeAlertSymbols.cy = 0;
	m_sizeResultSymbols.cx = 0;
	m_sizeResultSymbols.cy = 0;
	m_sizeCheckFlagSymbols.cx = 0;
	m_sizeCheckFlagSymbols.cy = 0;
	m_nBackgroundColor[0] = VGA_COLOR_GRAY;
	m_nBackgroundColor[1] = GetSysColor(COLOR_WINDOW);
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_NONE, GetSysColor(COLOR_WINDOW));
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_ONSTACK, GetSysColor(COLOR_WINDOW));
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_ARMED, VGA_COLOR_YELLOW);
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_DISPATCHED, VGA_COLOR_LTRED);
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_RELEASED, VGA_COLOR_GREEN);
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED, VGA_COLOR_RED);
	m_nStatusColors[0].SetAtGrow(TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE, VGA_COLOR_RED);
	m_nStatusColors[1].SetAtGrow(TCAUTOMATICSTACKITEM_STATUSCOLOR_NONE, GetSysColor(COLOR_WINDOW));
	m_nStatusColors[1].SetAtGrow(TCAUTOMATICSTACKITEM_STATUSCOLOR_IDLE, RGB(0, 64, 255));
	m_nStatusColors[1].SetAtGrow(TCAUTOMATICSTACKITEM_STATUSCOLOR_PENDING, VGA_COLOR_YELLOW);
	m_nStatusColors[1].SetAtGrow(TCAUTOMATICSTACKITEM_STATUSCOLOR_PASSED, VGA_COLOR_GREEN);
	m_nStatusColors[1].SetAtGrow(TCAUTOMATICSTACKITEM_STATUSCOLOR_NOTPASSED, VGA_COLOR_RED);
	m_pTCProcessEngine = (CTCProcessEngine *)NULL;
	m_pTCEnvironment = (CTCEnvironment *)NULL;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_bToolTips = TRUE;
}

BOOL CTCAutomaticStackPageTextView::Create(CWnd *pParentWnd, UINT nPane, CONST RECT &rect, DWORD dwStyle)
{
	for (m_nPane = nPane; CTextView::Create(pParentWnd, rect, dwStyle); )
	{
		SetTextSpacings(1, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SetLayout(UINT nColumns)
{
	CUIntArray  nTitleItems;

	nTitleItems.RemoveAll();
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_NUMBER) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_NUMBER);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_NAME) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_NAME);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_CATEGORY) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CATEGORY);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_FLAGS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_FLAGS);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_TCPACKET) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_TCPACKET);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVRESULT);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PEVRESULT);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVRESULT);
	if (nColumns & TCAUTOMATICSTACK_TITLEITEM_STATUS) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_STATUS);
	return SetLayout(nTitleItems);
}
BOOL CTCAutomaticStackPageTextView::SetLayout(CONST CUIntArray &nColumns)
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nWidths;
	CUIntArray  nTitleItems;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nTitleItems.Copy(nColumns); !nTitleItems.GetSize(); )
	{
		if (TCAUTOMATICSTACK_TITLEITEM_NUMBER & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_NUMBER);
		if (TCAUTOMATICSTACK_TITLEITEM_NAME & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_NAME);
		if (TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION);
		if (TCAUTOMATICSTACK_TITLEITEM_CATEGORY & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CATEGORY);
		if (TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM);
		if (TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS);
		if (TCAUTOMATICSTACK_TITLEITEM_FLAGS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_FLAGS);
		if (TCAUTOMATICSTACK_TITLEITEM_TCPACKET & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_TCPACKET);
		if (TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME);
		if (TCAUTOMATICSTACK_TITLEITEM_RELEASETIME & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
		if (TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET);
		if (TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME);
		if (TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME);
		if (TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
		if (TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION);
		if (TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW);
		if (TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS);
		if (TCAUTOMATICSTACK_TITLEITEM_PTVRESULT & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PTVRESULT);
		if (TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS);
		if (TCAUTOMATICSTACK_TITLEITEM_PEVRESULT & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_PEVRESULT);
		if (TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW);
		if (TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS);
		if (TCAUTOMATICSTACK_TITLEITEM_CEVRESULT & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_CEVRESULT);
		if (TCAUTOMATICSTACK_TITLEITEM_STATUS & TCAUTOMATICSTACK_TITLEITEMS_DEFAULT) nTitleItems.Add(TCAUTOMATICSTACK_TITLEITEM_STATUS);
		break;
	}
	for (nIndex = 0, nCount = (LookupColumnsName(nTitleItems, szColumns) && CalcColumnsWidth(nTitleItems, nWidths) && SetColumns(szColumns, nWidths)) ? (INT)nTitleItems.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nTitleItems.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackPageTextView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (LookupColumnsName(nColumns, szColumns) && SetColumns(szColumns, nWidths)) ? (INT)nColumns.GetSize() : -1; nIndex < nCount; nIndex++)
	{
		SetColumnColor(nIndex, LookupColumnColor(nColumns.GetAt(nIndex)), IsWindow(GetSafeHwnd()));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::GetLayout(UINT &nColumns) CONST
{
	INT  nIndex;
	INT  nCount;
	CUIntArray  nTitleItems;

	for (nIndex = 0, nCount = (GetLayout(nTitleItems)) ? (INT)nTitleItems.GetSize() : -1, nColumns = 0; nIndex < nCount; nIndex++)
	{
		nColumns |= nTitleItems.GetAt(nIndex);
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackPageTextView::GetLayout(CUIntArray &nColumns) CONST
{
	CUIntArray  nWidths;

	return GetLayout(nColumns, nWidths);
}
BOOL CTCAutomaticStackPageTextView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	INT  nIndex;
	INT  nCount;
	CStringArray  szColumns;
	CTextViewLock  cLock(this);

	for (nIndex = 0, nCount = (GetColumns(szColumns, nWidths)) ? (INT)szColumns.GetSize() : -1, nColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		nColumns.Add(LookupColumnName(szColumns.GetAt(nIndex)));
		continue;
	}
	return((nIndex == nCount) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::SetListTitleFont(CFont *pFont)
{
	return CTextView::SetTitleFont(pFont);
}
BOOL CTCAutomaticStackPageTextView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return CTextView::SetTitleFont(plfFont);
}

BOOL CTCAutomaticStackPageTextView::GetListTitleFont(CFont *pFont) CONST
{
	return CTextView::GetTitleFont(pFont);
}
BOOL CTCAutomaticStackPageTextView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTitleFont(plfFont);
}

BOOL CTCAutomaticStackPageTextView::SetListItemsFont(CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0) ? SetListItemsFont(&lfFont) : FALSE);
}
BOOL CTCAutomaticStackPageTextView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	CTextViewLock  cLock(this);

	if (CTextView::SetTextFont(plfFont))
	{
		SetTextSpacings(max(LOWORD(GetTextSpacings()), 1), max(HIWORD(GetTextSpacings()), 1));
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::GetListItemsFont(CFont *pFont) CONST
{
	return CTextView::GetTextFont(pFont);
}
BOOL CTCAutomaticStackPageTextView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return CTextView::GetTextFont(plfFont);
}

BOOL CTCAutomaticStackPageTextView::SetGridBackgroundColor(COLORREF nColor)
{
	m_nBackgroundColor[0] = nColor;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	nColor = m_nBackgroundColor[0];
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetAlertColors(CONST CUIntArray &nColors)
{
	CTextViewLock  cLock(this);

	m_nAlertColors.Copy(nColors);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetAlertColors(CUIntArray &nColors) CONST
{
	CTextViewLock  cLock(this);

	nColors.Copy(m_nAlertColors);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetListOptions(INT nArguments, BOOL bAll)
{
	CTextViewLock  cLock(this);

	m_nArguments = nArguments;
	m_bAllArguments = bAll;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	CTextViewLock  cLock(this);

	nArguments = m_nArguments;
	bAll = m_bAllArguments;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetListUpdateChecks(INT nCount)
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = m_nChecks = nCount, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			pItem->SetResult(TCAUTOMATICSTACKITEM_RESULT_NONE);
			continue;
		}
	}
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetListUpdateChecks(INT &nCount) CONST
{
	nCount = m_nChecks;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetMiscellaneousOptions(UINT nOptions)
{
	m_nMiscellaneousOptions = nOptions;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	nOptions = m_nMiscellaneousOptions;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CTextViewLock  cLock(this);

	m_tDefaultReleaseTimeWindow = tTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	CTextViewLock  cLock(this);

	tTimeWindow = m_tDefaultReleaseTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CTextViewLock  cLock(this);

	m_tDispatchTimeWindow = tTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	CTextViewLock  cLock(this);

	tTimeWindow = m_tDispatchTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::EnableFullViewMode(BOOL bEnable)
{
	INT  nColumn;
	INT  nColumns;
	CString  szColumn;
	CTextViewLock  cLock(this);

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), m_bFullViewMode = bEnable; nColumn < nColumns; nColumn++)
	{
		m_wndContentCtrl.m_nColumnsFormat.SetAtGrow(nColumn, (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCAUTOMATICSTACK_TITLEITEM_NUMBER || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_FLAGS || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS || LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT || !bEnable) ? (GetColumnFormat(nColumn) | DT_SINGLELINE | DT_END_ELLIPSIS) : (GetColumnFormat(nColumn) & ~(DT_SINGLELINE | DT_END_ELLIPSIS)));
		m_wndContentCtrl.m_bColumnsFormat.SetAtGrow(nColumn, TRUE);
	}
	RecalcContent();
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::IsFullViewModeEnabled() CONST
{
	return m_bFullViewMode;
}

BOOL CTCAutomaticStackPageTextView::EnableToolTipMode(BOOL bEnable)
{
	m_bToolTips = bEnable;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCAutomaticStackPageTextView::SetFilterMode(UINT nMode)
{
	m_nFilterMode[0] = nMode;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterMode(UINT &nMode) CONST
{
	nMode = m_nFilterMode[0];
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetFilterTelecommandName(LPCTSTR pszName)
{
	CTextViewLock  cLock(this);

	m_szFilterTelecommand[0] = pszName;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterTelecommandName(CString &szName) CONST
{
	CTextViewLock  cLock(this);

	szName = m_szFilterTelecommand[0];
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	CTextViewLock  cLock(this);

	m_szFilterTelecommand[1] = pszSequence;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	CTextViewLock  cLock(this);

	szSequence = m_szFilterTelecommand[1];
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	CTextViewLock  cLock(this);

	m_nFilterSubSystems.Copy(nSubSystems);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	CTextViewLock  cLock(this);

	nSubSystems.Copy(m_nFilterSubSystems);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetFilterLimitation(UINT nCount)
{
	m_nFilterLimitation = nCount;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterLimitation(UINT &nCount) CONST
{
	nCount = m_nFilterLimitation;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetFilterSortMode(UINT nMode)
{
	m_nFilterMode[1] = nMode;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetFilterSortMode(UINT &nMode) CONST
{
	nMode = m_nFilterMode[1];
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	CTextViewLock  cLock(this);

	m_pTCProcessEngine = pTCProcessEngine;
	m_pTCEnvironment = pTCEnvironment;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::StopTelecommanding()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackItems  pItems;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (m_nMiscellaneousOptions & TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT) ? (INT)m_pItems[0].GetSize() : 0, m_pTCProcessEngine = (CTCProcessEngine *)NULL, m_pTCEnvironment = (CTCEnvironment *)NULL; nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)))
		{
			if ((pItem[1] = new CTCAutomaticStackItem))
			{
				if (pItem[1]->Copy(pItem[0]))
				{
					ResetTelecommand(pItem[1]);
					if (pItems.Add(pItem[1]) >= 0) continue;
				}
				delete pItem[1];
			}
		}
	}
	if (pItems.GetSize() > 0) ReloadTelecommands(pItems);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetTelecommandingMode(UINT nMode)
{
	m_nTelecommandingMode = nMode;
	return TRUE;
}

UINT CTCAutomaticStackPageTextView::GetTelecommandingMode() CONST
{
	return m_nTelecommandingMode;
}

BOOL CTCAutomaticStackPageTextView::SetTelecommandingChecks(UINT nFlags)
{
	m_nTelecommandingFlags = nFlags;
	return TRUE;
}

UINT CTCAutomaticStackPageTextView::GetTelecommandingChecks() CONST
{
	return m_nTelecommandingFlags;
}

BOOL CTCAutomaticStackPageTextView::SetTelecommandingState(UINT nState)
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackItems  pItems;
	CTextViewLock  cLock(this);

	for (m_nTelecommandingState = nState & ~TCAUTOMATICSTACK_STATE_EMPTY; m_pItems[0].GetSize() > 0; )
	{
		if ((nState & TCAUTOMATICSTACK_STATE_DEFAULT) == TCAUTOMATICSTACK_STATE_DEFAULT)
		{
			if ((nState & TCAUTOMATICSTACK_STATE_DISABLED) != TCAUTOMATICSTACK_STATE_DISABLED)
			{
				for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
				{
					if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
					{
						if (pItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  pItem[0]->IsSelected())
						{
							pItem[0]->Select(FALSE);
							continue;
						}
					}
				}
				DispatchTelecommands();
				break;
			}
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED && ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && ((tReleaseTime[0] > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && pItem[0]->GetReleaseTime() > 0 && pItem[0]->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()))) || (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2])))
					{
						pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
						continue;
					}
				}
			}
			UpdateContent();
			break;
		}
		if (nState & TCAUTOMATICSTACK_STATE_SUSPENDED)
		{
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED && ((pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0 && ((tReleaseTime[0] > 0 && tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && pItem[0]->GetReleaseTime() > 0 && pItem[0]->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() < tReleaseTime[2].GetTimeInSeconds()))) || (pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0 && tReleaseTime[1] < tReleaseTime[2])))
					{
						pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
						continue;
					}
				}
			}
			UpdateContent();
			break;
		}
		if (nState & TCAUTOMATICSTACK_STATE_STOPPED)
		{
			for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
			{
				if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
				{
					if (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED)
					{
						if ((pItem[1] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
						{
							if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0)
							{
								ResetTelecommand(pItem[0]);
								continue;
							}
							delete pItem[1];
						}
						continue;
					}
					if (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK) break;
				}
			}
			if (pItems.GetSize() > 0) GetTCService()->DispatchTelecommands(pItems, TRUE);
			UpdateContent();
		}
		break;
	}
	return TRUE;
}

UINT CTCAutomaticStackPageTextView::GetTelecommandingState() CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nState;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nState = m_nTelecommandingState; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)
			{
				nItem = nItems;
				break;
			}
			if (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) break;
		}
	}
	return((nItem == nItems) ? (nState | TCAUTOMATICSTACK_STATE_EMPTY) : nState);
}

BOOL CTCAutomaticStackPageTextView::SetTelecommandingUplinkState(UINT nState)
{
	m_nTelecommandingUplinkState = nState;
	return TRUE;
}

UINT CTCAutomaticStackPageTextView::GetTelecommandingUplinkState() CONST
{
	return m_nTelecommandingUplinkState;
}

BOOL CTCAutomaticStackPageTextView::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	m_bTelecommandingInterlockMode = bEnable;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_bTelecommandingInterlockMode;
}

BOOL CTCAutomaticStackPageTextView::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	m_bTelecommandingReleaseWaitMode = bEnable;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_bTelecommandingReleaseWaitMode;
}

BOOL CTCAutomaticStackPageTextView::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	m_bTelecommandingAutoRejectionMode = bEnable;
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_bTelecommandingAutoRejectionMode;
}

BOOL CTCAutomaticStackPageTextView::SetTelecommands(CONST CTCSavedStack &pStack)
{
	INT  nOffset;
	INT  nItem[2];
	INT  nItems[2];
	INT  nIndex[2];
	INT  nCount[2];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nState;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCItem  *pStackItem;
	CTimeTag  tLoadTime;
	CUIntArray  nStackItemIDs;
	CTCAutomaticStackItem  *pItem;
	CTCAutomaticStackItems  pItems;
	CDatabaseTCPacket  *pPacket[2];
	CDatabaseTCFunction  *pFunction[2];
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCProcedure  *pProcedure;
	CDatabaseTCPacketParameter  *pPacketParameter[2];
	CDatabaseTCFunctionElement  *pFunctionElement[4];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (INT)pStack.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem = pStack.GetAt(nItem[0])) && pStackItem->GetLoadTime() == 0)
		{
			for (nItem[1] = 0, nItems[1] = pStack.Collect(nItem[0], nStackItemIDs); nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pStackItem = pStack.GetAt(nStackItemIDs.GetAt(nItem[1]))))
				{
					pStackItem->SetLoadTime(tLoadTime.GetTime());
					continue;
				}
			}
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem = pStack.GetAt(nItem[0])) != (CTCItem *)NULL)
		{
			for (pStackItem->SetInterlock((GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pStackItem->GetInterlock(), nState)) ? pStackItem->GetInterlock() : EMPTYSTRING), pStackItem->GetReleaseInterlock(szInterlock, bInterlock); !GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock, nState); )
			{
				pStackItem->SetReleaseInterlock(EMPTYSTRING);
				break;
			}
			if ((pFunction[0] = (pStackItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_FUNCTION) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pStackItem->GetName())) : (CDatabaseTCFunction *)NULL) && pFunction[0]->GetTCID() == pStackItem->GetTCID())
			{
				if ((pPacket[1] = ((pPacket[0] = new CDatabaseTCPacket) && pStackItem->GetTCPacket(pPacket[0])) ? GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pPacket[0]->GetTag())) : (CDatabaseTCPacket *)NULL) && pPacket[0]->GetAPID() == pPacket[1]->GetAPID())
				{
					for (nParameter = 0, nParameters = (INT)pPacket[0]->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pPacketParameter[0] = pPacket[0]->GetAt(nParameter)))
						{
							if ((pPacketParameter[1] = pPacket[1]->GetAt(nParameter)))
							{
								if (pPacketParameter[0]->GetTag() != pPacketParameter[1]->GetTag() || ((pPacketParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_AUTO | TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER)) != (pPacketParameter[1]->GetAttributes() & ~(TCPARAMETER_VTYPE_AUTO | TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER)) && ((pPacketParameter[0]->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 || (pPacketParameter[1]->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 || (pPacketParameter[0]->GetAttributes() & ~TCPARAMETER_VTYPE_RAW) != (pPacketParameter[1]->GetAttributes() & ~TCPARAMETER_VTYPE_RAW))) || pPacketParameter[0]->GetWidth() != pPacketParameter[1]->GetWidth()) break;
								continue;
							}
							break;
						}
					}
					for (nElement = 0, nElements = (INT)pFunction[0]->GetSize(), nOffset = 0; nElement < nElements; nElement++)
					{
						if ((pFunctionElement[1] = ((pFunctionElement[0] = pFunction[0]->GetAt(nElement))) ? pStackItem->GetAt(nElement + nOffset) : (CDatabaseTCFunctionElement *)NULL))
						{
							if ((pParameter = GetDatabase()->GetTCParameters()->GetAt(pFunctionElement[0]->GetRef())) && (pParameter->GetAttributes() & TCPARAMETER_VTYPE_COMMANDID))
							{
								if ((pFunction[1] = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(pFunctionElement[0]->GetConstValueAsText()))))
								{
									for (nIndex[0] = 0, nCount[0] = (INT)pFunction[1]->GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
									{
										if ((pFunctionElement[1] = pFunction[1]->GetAt(nIndex[0])))
										{
											if ((pFunctionElement[2] = pStackItem->GetAt(nElement + nOffset + nIndex[0])))
											{
												if (pFunctionElement[1]->GetName() != pFunctionElement[2]->GetName() || (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pFunctionElement[2]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) || pFunctionElement[1]->GetWidth() != pFunctionElement[2]->GetWidth())
												{
													for (nIndex[1] = 0; nIndex[0] - nIndex[1] - 1 >= 0; nIndex[1]++)
													{
														if ((pFunctionElement[2] = pFunction[1]->GetAt(nIndex[0] - nIndex[1] - 1)))
														{
															if (pFunctionElement[2]->GetGroupSize() > 0 && pFunctionElement[2]->GetGroupSize() == nIndex[1])
															{
																if ((pFunctionElement[3] = pStackItem->GetAt(nElement + nOffset + nIndex[0] + pFunctionElement[2]->GetGroupSize()*(nCount[1] = ((pFunctionElement[2]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT) ? (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[2]->GetAttributes(), pFunctionElement[2]->GetWidth(), pFunctionElement[2]->GetConstValue()) : (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[2]->GetAttributes(), pFunctionElement[2]->GetConstValue())))))
																{
																	if (pFunctionElement[1]->GetName() == pFunctionElement[3]->GetName() && (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == (pFunctionElement[3]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) && pFunctionElement[1]->GetWidth() == pFunctionElement[3]->GetWidth())
																	{
																		nOffset += pFunctionElement[2]->GetGroupSize()*nCount[1];
																		break;
																	}
																}
																nIndex[1] = nIndex[0];
																break;
															}
														}
													}
													if (nIndex[1] > nIndex[0] - 1) break;
												}
												continue;
											}
										}
										break;
									}
									if (nIndex[0] == nCount[0])
									{
										nOffset += nCount[0] - 1;
										continue;
									}
								}
								break;
							}
							if (pFunctionElement[0]->GetName() != pFunctionElement[1]->GetName() || (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pFunctionElement[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) || pFunctionElement[0]->GetWidth() != pFunctionElement[1]->GetWidth())
							{
								for (nIndex[1] = 0; nElement - nIndex[1] - 1 >= 0; nIndex[1]++)
								{
									if ((pFunctionElement[1] = pFunction[0]->GetAt(nElement - nIndex[1] - 1)))
									{
										if (pFunctionElement[1]->GetGroupSize() > 0 && pFunctionElement[1]->GetGroupSize() == nIndex[1])
										{
											if ((pFunctionElement[2] = pStackItem->GetAt(nElement + nOffset + pFunctionElement[1]->GetGroupSize()*(nCount[1] = ((pFunctionElement[1]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT) ? (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[1]->GetAttributes(), pFunctionElement[1]->GetWidth(), pFunctionElement[1]->GetConstValue()) : (INT)CDatabaseEngine::DecodeValue(GetDatabase()->GetType(), pFunctionElement[1]->GetAttributes(), pFunctionElement[1]->GetConstValue())))))
											{
												if (pFunctionElement[0]->GetName() == pFunctionElement[2]->GetName() && (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == (pFunctionElement[2]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) && pFunctionElement[0]->GetWidth() == pFunctionElement[2]->GetWidth())
												{
													nOffset += pFunctionElement[1]->GetGroupSize()*nCount[1];
													break;
												}
											}
											nIndex[1] = nElement;
											break;
										}
									}
								}
								if (nIndex[1] > nElement - 1) break;
							}
							continue;
						}
						break;
					}
					if (nParameter == nParameters  &&  nElement == nElements)
					{
						if ((pItem = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
						{
							if (pItem->CTCItem::Copy(pStackItem) && pItems.Add(pItem) >= 0)
							{
								delete pPacket[0];
								continue;
							}
							delete pItem;
						}
					}
				}
				delete pPacket[0];
			}
			if ((pProcedure = (pStackItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pStackItem->GetName())) : (CDatabaseTCProcedure *)NULL))
			{
				if ((pItem = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
				{
					if (pItem->CTCItem::Copy(pStackItem) && pItems.Add(pItem) >= 0) continue;
					delete pItem;
				}
			}
		}
		pItems.RemoveAll();
		break;
	}
	return LoadTelecommands(pItems);
}

BOOL CTCAutomaticStackPageTextView::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pStackItem;
	CTCAutomaticStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), pStack.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && ((pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED) || bAll))
		{
			if ((pItem[1] = new CTCAutomaticStackItem))
			{
				if ((pStackItem = new CTCItem))
				{
					if (pItem[1]->Copy(pItem[0]))
					{
						ResetTelecommand(pItem[1]);
						if (pStackItem->Copy(pItem[1]) && pStack.Add(pStackItem) >= 0)
						{
							delete pItem[1];
							continue;
						}
					}
					delete pStackItem;
				}
				delete pItem[1];
			}
			break;
		}
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::LoadTelecommands(CONST CTCAutomaticStackItems &pItems, BOOL bReload, BOOL bBefore, BOOL bAfter, BOOL bRedraw)
{
	return LoadTelecommands(pItems, -1, bReload, bBefore, bAfter, bRedraw);
}
BOOL CTCAutomaticStackPageTextView::LoadTelecommands(CONST CTCAutomaticStackItems &pItems, INT nIndex, BOOL bReload, BOOL bBefore, BOOL bAfter, BOOL bRedraw)
{
	INT  nItem[4];
	INT  nItems[4];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	UINT  nExecutionOBRT;
	BOOL  bArguments;
	BOOL  bAfterDispatch;
	BOOL  bLoadTelecommands;
	BOOL  bEarlierExecution;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CTimeTag  tArmTime;
	CTimeTag  tDispatchTime;
	CTimeTag  tStackLoadTime;
	CTimeTag  tReleaseTime[3];
	CTimeTag  tExecutionTime[2];
	CTimeSpan  tReleaseInterval;
	CUIntArray  nGroupItemsIDs;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem[4];
	CTCAutomaticStackItems  pStackItems[4];
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = (pStackItems[0].Copy(&pItems)) ? (INT)pStackItems[0].GetSize() : -1, bLoadTelecommands = TRUE; nItem[0] < nItems[0] && nIndex < 0 && bReload; nItem[0]++)
	{
		if ((pItem[1] = ((pItem[0] = pStackItems[0].GetAt(nItem[0]))) ? m_pItems[0].GetAt((nItem[1] = (nIndex < 0) ? m_pItems[0].Find(pItem[0]->GetComputerName(), pItem[0]->GetSourceType(), pItem[0]->GetName(), pItem[0]->GetMembership(), pItem[0]->GetMembershipID(), -1, pItem[0]->GetLoadTime()) : nIndex)) : (CTCAutomaticStackItem *)NULL) && pItem[0]->GetStatus() == pItem[1]->GetStatus())
		{
			nIndex = (nIndex >= 0) ? min(nItem[1], nIndex) : nItem[1];
			continue;
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0] && bReload; nItem[0]++)
	{
		for (nItem[1] = 0, nItems[1] = ((pItem[0] = pStackItems[0].GetAt(nItem[0]))) ? m_pItems[0].Collect(m_pItems[0].Find(pItem[0]->GetComputerName(), pItem[0]->GetSourceType(), pItem[0]->GetName(), pItem[0]->GetMembership(), pItem[0]->GetMembershipID(), -1, pItem[0]->GetLoadTime()), nGroupItemsIDs) : 0; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[1]) - nItem[1])))
			{
				DeleteTelecommand(nGroupItemsIDs.GetAt(nItem[1]) - nItem[1]);
				delete pItem[1];
			}
			nIndex = (nIndex > (INT)nGroupItemsIDs.GetAt(nItem[1]) - nItem[1]) ? (nIndex - 1) : nIndex;
		}
	}
	for (nItem[1] = 0, nItems[1] = (nIndex >= 0 && (bBefore || bAfter)) ? (INT)m_pItems[0].GetSize() : 0, nIndex = (nIndex < 0) ? (INT)m_pItems[0].GetSize() : nIndex; nItem[1] < nItems[1]; nItem[1]++)
	{
		if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) != (CTCAutomaticStackItem *)NULL  &&  pItem[1]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)
		{
			nIndex = (m_pItems[0].Collect(nIndex, nGroupItemsIDs) > 0) ? ((bBefore) ? max((INT)nGroupItemsIDs.GetAt(0), nItem[1]) : max((INT)nGroupItemsIDs.GetAt(nGroupItemsIDs.GetUpperBound()) + 1, nItem[1])) : nIndex;
			break;
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])))
		{
			if (((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) && (pItem[0]->GetReleaseTime() == 0 || bReload))
			{
				for (pItem[0]->SetReleaseTime((!pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem[0]->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval)) ? ((pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? (((pItem[1] = (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) ? pStackItems[0].GetAt(nItem[0] - 1) : (CTCAutomaticStackItem *)NULL) && pItem[1]->GetReleaseTime() > 0) ? (pItem[1]->GetReleaseTime() + 1000 * (TIMETAG)dwReleaseOffset) : ((pItem[0]->GetDispatchTime() > 0) ? (pItem[0]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset) : (tStackLoadTime.GetTime() + 1000 * (TIMETAG)dwReleaseOffset))) : tReleaseTime[2]) : tReleaseTime[0]); pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED; )
				{
					if (pItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_DISPATCHED)
					{
						pItem[0]->SetArmTime(tArmTime);
						pItem[0]->SetDispatchTime(tDispatchTime);
						pItem[0]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_DISPATCHED);
					}
					break;
				}
			}
			if (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED)
			{
				if (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)
				{
					if (!pItem[0]->GetExecutionTime(tExecutionTime[0]))
					{
						if (pItem[0]->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution))
						{
							pItem[0]->SetExecutionTime(((pItem[1] = (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? pStackItems[0].GetAt(nItem[0] - 1) : (CTCAutomaticStackItem *)NULL) && pItem[1]->GetExecutionTime(tExecutionTime[1])) ? ((!bEarlierExecution) ? (tExecutionTime[1].GetTime() + 1000 * (TIMETAG)dwExecutionOffset) : (tExecutionTime[1].GetTime() - 1000 * (TIMETAG)dwExecutionOffset)) : ((!bEarlierExecution) ? (pItem[0]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwExecutionOffset) : (pItem[0]->GetDispatchTime().GetTime() - 1000 * (TIMETAG)dwExecutionOffset)));
							continue;
						}
						if (pItem[0]->GetExecutionOBRT(nExecutionOBRT))
						{
							pItem[0]->SetExecutionTime((GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime[0])) ? tExecutionTime[0] : 0);
							continue;
						}
					}
				}
			}
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])) && pItem[0]->GetReleaseTime() > 0)
		{
			for (nElement = 0, nElements = (INT)pItem[0]->GetSize(), pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_NONE), pItem[0]->GetMembershipParameters(pParameters), bArguments = FALSE; nElement < nElements; nElement++)
			{
				if ((pFunctionElement[0] = pItem[0]->GetAt(nElement)))
				{
					if (!pFunctionElement[0]->GetConstValueAsText().IsEmpty())
					{
						if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
						{
							if (pFunctionElement[0]->GetAttributes() & (TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))
							{
								if ((pParameter = pParameters.GetAt(pParameters.Find(pFunctionElement[0]->GetConstValueSource()))))
								{
									if ((pFunctionElement[1] = new CDatabaseTCFunctionElement))
									{
										if (pFunctionElement[1]->Copy(pFunctionElement[0]))
										{
											pFunctionElement[1]->SetAttributes(pParameter->GetAttributes());
											pFunctionElement[1]->SetConstValueAsText(pParameter->GetConstValueAsText());
											if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[1], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
											{
												delete pFunctionElement[1];
												continue;
											}
										}
										delete pFunctionElement[1];
									}
								}
								break;
							}
							if (GetTCService()->CheckTCFunctionElementOolStatus(pFunctionElement[0], nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
					}
					if (pFunctionElement[0]->GetConstValueAsText().IsEmpty())
					{
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							bArguments = TRUE;
							continue;
						}
						if (pFunctionElement[0]->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
				}
				break;
			}
			for (nParameter = 0, nParameters = (pItem[0]->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : -1; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)))
				{
					if (!pPacketParameter->GetConstValueAsText().IsEmpty())
					{
						if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
						{
							if (GetTCService()->CheckTCPacketParameterOolStatus(pPacketParameter, nOolStatus) && nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
							break;
						}
						if (pPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
					}
					if (pPacketParameter->GetConstValueAsText().IsEmpty())
					{
						if (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							bArguments = TRUE;
							continue;
						}
						if (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
				}
				break;
			}
			if (nElement != nElements || nParameter != nParameters)
			{
				pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_ARGUMENTS_FAILURE));
				pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED);
				pItem[0]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
			}
			if (!CheckTelecommandReleaseWindow(tStackLoadTime, pItem[0]))
			{
				if (!pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASETIME_EXPIRED) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_EXPIRED));
					pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					pItem[0]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
				}
			}
			for (; !CheckTelecommandReleaseTime(tStackLoadTime, pItem[0]); )
			{
				pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_WARNING, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME, (pItem[0]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASETIME_OVERLAP) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_OVERLAP));
				break;
			}
			if (!CheckTelecommandExecutionTime(tStackLoadTime, pItem[0]))
			{
				pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME, (pItem[0]->GetExecutionTime(tExecutionTime[0]) && tExecutionTime[0] <= tExecutionTime[1]) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_EXPIRED) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTIONTIME_ILLEGAL));
				pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED);
				pItem[0]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
			}
			if (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED)
			{
				if ((pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem[0]->GetReleaseTime() == 0) || (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  GetTelecommandingState() != TCAUTOMATICSTACK_STATE_DEFAULT))
				{
					pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_DISPATCH_FAILURE));
					pItem[0]->SetFlags(pItem[0]->GetFlags() & ~TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED);
					pItem[0]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
				}
			}
			if (pItem[0]->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION, 0, (pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_FIRSTSTEP_INFORMATION) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_SECONDSTEP_INFORMATION));
			if (bArguments) pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION, 0, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_ARGUMENTS_INFORMATION));
		}
	}
	for (nItem[0] = 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = pStackItems[0].GetAt(nItem[0])))
		{
			for (nItem[2] = 0, nItems[2] = pStackItems[0].Collect(nItem[0], nGroupItemsIDs); nItem[2] < nItems[2]; nItem[2]++)
			{
				if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))) && pItem[2]->GetReleaseTime() > 0 && pItem[2]->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) break;
				continue;
			}
			if (((pItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) && nItem[2] == nItems[2])
			{
				for (nItem[1] = 0, nItems[1] = (INT)m_pItems[0].GetSize(); nItem[1] < nItems[1]; nItem[1]++)
				{
					if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) != (CTCAutomaticStackItem *)NULL)
					{
						if ((pItem[1]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED  &&  pItem[0]->GetReleaseTime() < pItem[1]->GetReleaseTime()) || pItem[1]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK) break;
						continue;
					}
				}
				if (((pItem[1] = m_pItems[0].GetAt(nItem[1])) && ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID()))) || nItem[1] == nItems[1])
				{
					for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
					{
						if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
						{
							if ((pItem[3] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
							{
								if (pItem[3]->Copy(pItem[2]) && InsertTelecommand(nItem[1] + nItem[2], pItem[3]))
								{
									for (pItem[3]->Select(FALSE); pItem[3]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_DISPATCHED; )
									{
										pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
										pItem[3]->SetDispatchTime((pItem[3]->GetReleaseTime() > 0) ? max(pItem[3]->GetLoadTime(), tStackLoadTime) : 0);
										pItem[3]->SetStatus((pItem[3]->GetReleaseTime() > 0) ? TCAUTOMATICSTACKITEM_STATUS_DISPATCHED : TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
										break;
									}
									if (pItem[3]->GetReleaseTime() > 0)
									{
										pStackItems[1].Add(pItem[3]);
										continue;
									}
									pStackItems[2].Add(pItem[3]);
									continue;
								}
								delete pItem[3];
							}
						}
						break;
					}
					while (nItem[2] < nItems[2] && --nItem[2] >= 0)
					{
						if ((pItem[3] = m_pItems[0].GetAt(nItem[1] + nItem[2])))
						{
							DeleteTelecommand(nItem[1] + nItem[2]);
							delete pItem[3];
						}
					}
					nItems[1] = (nItem[2] == nItems[2]) ? nItems[1] : -1;
				}
				if (nItems[1] < 0)
				{
					for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
					{
						if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
						{
							if ((pItem[3] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
							{
								if (pItem[3]->Copy(pItem[2]) && InsertTelecommand((INT)m_pItems[0].GetSize(), pItem[3]))
								{
									pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
									pItem[3]->SetArmTime((pItem[3]->GetArmTime().GetTime() == 0) ? pItem[3]->GetArmTime().GetTime() : 0);
									pItem[3]->SetDispatchTime((pItem[3]->GetDispatchTime() == 0) ? pItem[3]->GetDispatchTime() : 0);
									pItem[3]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
									pItem[3]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR);
									pItem[3]->Select(bReload);
									pStackItems[2].Add(pItem[3]);
									continue;
								}
								delete pItem[3];
							}
						}
						break;
					}
					bLoadTelecommands = FALSE;
				}
				for (nItem[3] = 0, nItems[3] = (INT)nGroupItemsIDs.GetSize(); nItem[3] < nItems[3]; nItem[3]++)
				{
					if ((pItem[3] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3])))
					{
						pStackItems[0].RemoveAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3]);
						delete pItem[3];
					}
				}
				nItems[0] -= nItems[3];
				nItem[0] = -1;
				continue;
			}
			for (nItem[2] = 0, nItems[2] = (INT)nGroupItemsIDs.GetSize(); nItem[2] < nItems[2]; nItem[2]++)
			{
				if ((pItem[2] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[2]))))
				{
					if ((pItem[3] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
					{
						if (pItem[3]->Copy(pItem[2]) && InsertTelecommand(nIndex, pItem[3]))
						{
							pItem[3]->SetLoadTime((pItem[3]->GetLoadTime() > 0) ? pItem[3]->GetLoadTime() : tStackLoadTime);
							pItem[3]->SetArmTime((pItem[3]->GetArmTime().GetTime() == 0) ? pItem[3]->GetArmTime().GetTime() : 0);
							pItem[3]->SetDispatchTime((pItem[3]->GetDispatchTime() == 0) ? pItem[3]->GetDispatchTime() : 0);
							pItem[3]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
							pItem[3]->Select(bReload);
							pStackItems[2].Add(pItem[3]);
							nIndex++;
							continue;
						}
						delete pItem[3];
					}
				}
				bLoadTelecommands = FALSE;
				break;
			}
			for (nItem[3] = 0, nItems[3] = (INT)nGroupItemsIDs.GetSize(); nItem[3] < nItems[3]; nItem[3]++)
			{
				if ((pItem[3] = pStackItems[0].GetAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3])))
				{
					pStackItems[0].RemoveAt(nGroupItemsIDs.GetAt(nItem[3]) - nItem[3]);
					delete pItem[3];
				}
			}
			nItems[0] -= nItems[3];
			nItem[0] = -1;
			continue;
		}
		break;
	}
	for (nItem[1] = 0, nItems[1] = (INT)m_pItems[0].GetSize(); nItem[1] < nItems[1]; nItem[1]++)
	{
		if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) && pItem[1]->GetReleaseTime() == 0 && pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && !bAfterDispatch)
		{
			if ((pItem[2] = (!pItem[1]->GetMembership().IsEmpty() && pItem[1]->GetMembershipID() > 0 && (pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID())) ? m_pItems[0].GetAt(m_pItems[0].Find(pItem[1]->GetMembership(), pItem[1]->GetLoadTime())) : m_pItems[0].GetAt(nItem[1] - 1)) && (pItem[2]->GetReleaseTime() > 0 || (pItem[2]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED  &&  pItem[2]->GetDispatchTime() > 0)))
			{
				dwReleaseOffset = ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED && ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem[1]->GetReleaseBlockID())) ? dwReleaseOffset : 0;
				pItem[1]->SetReleaseTime((pItem[2]->GetReleaseTime() > 0) ? (pItem[2]->GetReleaseTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset) : (pItem[2]->GetDispatchTime().GetTime() + 1000 * (TIMETAG)dwReleaseOffset));
				pItem[1]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
				continue;
			}
			if (!nItem[1])
			{
				pItem[1]->SetReleaseTime(tStackLoadTime.GetTime() + 1000 * (TIMETAG)dwReleaseOffset);
				pItem[1]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
				continue;
			}
		}
	}
	if (pStackItems[1].GetSize() > 0)
	{
		for (nItem[1] = 0, nItems[1] = (pStackItems[3].Copy(&pStackItems[1]) && !GetParentDisplay()->DispatchTelecommands(pStackItems[1])) ? (INT)pStackItems[3].GetSize() : 0; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = pStackItems[3].GetAt(nItem[1])) != (CTCAutomaticStackItem *)NULL)
			{
				for (nItem[2] = 0, nItems[2] = (INT)m_pItems[0].GetSize(); nItem[2] < nItems[2]; nItem[2]++)
				{
					if ((pItem[2] = m_pItems[0].GetAt(nItem[2])) && pItem[1]->IsIdentical(pItem[2]))
					{
						if (pItem[2]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED)
						{
							if (DeleteTelecommand(nItem[2])) delete pItem[2];
							break;
						}
					}
				}
				if ((pItem[2] = m_pItems[0].GetAt(m_pItems[0].Find(pItem[1]))))
				{
					pItem[2]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_STATUS, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_DISPATCH_FAILURE));
					pItem[2]->SetArmTime((pItem[2]->GetArmTime().GetTime() == 0) ? pItem[2]->GetArmTime().GetTime() : 0);
					pItem[2]->SetDispatchTime((pItem[2]->GetDispatchTime() == 0) ? pItem[2]->GetDispatchTime() : 0);
					pItem[2]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
				}
			}
		}
		pStackItems[1].CPtrArray::RemoveAll();
	}
	if (pStackItems[2].GetSize() > 0)
	{
		GetParentDisplay()->DispatchTelecommands(pStackItems[2], TRUE);
		pStackItems[2].CPtrArray::RemoveAll();
	}
	for (pStackItems[1].CPtrArray::RemoveAll(), pStackItems[2].CPtrArray::RemoveAll(), UpdateContent(FALSE, bRedraw); nItem[0] != nItems[0]; )
	{
		bLoadTelecommands = FALSE;
		break;
	}
	return bLoadTelecommands;
}

BOOL CTCAutomaticStackPageTextView::ReloadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CTCAutomaticStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	if ((pItem[0] = (pItems.GetSize() > 0) ? new CTCAutomaticStackItem : (CTCAutomaticStackItem *)NULL))
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nIndex = -1; nItem < nItems; nItem++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem)) && pItem[1]->IsSelected())
			{
				nIndex = nItem;
				break;
			}
		}
		if ((pItem[1] = m_pItems[0].GetAt((nIndex = (nIndex < 0) ? GetCurTelecommand() : nIndex))))
		{
			if (pItem[0]->Copy(pItem[1]) && LoadTelecommands(pItems, nIndex, TRUE, FALSE, FALSE, FALSE))
			{
				ActivateTelecommand(m_pItems[0].Find(pItem[0]));
				delete pItem[0];
				return TRUE;
			}
			delete pItem[0];
			return FALSE;
		}
		if (LoadTelecommands(pItems, -1, TRUE, FALSE, FALSE, TRUE))
		{
			delete pItem[0];
			return TRUE;
		}
		delete pItem[0];
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	INT  nItem[3];
	INT  nItems[3];
	INT  nIndex[2];
	CTCItem  *pItem;
	CPtrArray  pAlertItems;
	CTimeTag  tExecutionTime[2];
	CTCAutomaticStackItem  *pStackItem[2];
	CTCAutomaticStackItems  pStackItems;
	CTextViewLock  cLock(this);

	if (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
	{
		for (nItem[0] = 0, nItems[0] = (INT)pItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pItem = pItems.GetAt(nItem[0])) && pItem->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK  &&  pItem->IsHost())
			{
				if ((pStackItem[0] = (pItem->GetStatus() <= TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE) ? new CTCAutomaticStackItem : (CTCAutomaticStackItem *)NULL))
				{
					if (pStackItem[0]->CTCItem::Copy(pItem) && pStackItems.Add(pStackItem[0]) >= 0) continue;
					delete pStackItem[0];
				}
			}
		}
		if (pStackItems.GetSize() > 0 || bAll)
		{
			for (nItem[0] = 0, nItems[0] = (!bAll) ? (INT)pStackItems.GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
			{
				if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && (pStackItem[0]->GetStatus() < TCAUTOMATICSTACKITEM_STATUS_RELEASED || (pStackItem[0]->GetResult() & (TCITEM_RESULT_CEV_IDLE | TCITEM_RESULT_CEV_PENDING | TCITEM_RESULT_CEV_PASSED | TCITEM_RESULT_CEV_FAILED | TCITEM_RESULT_CEV_UNKNOWN | TCITEM_RESULT_CEV_UNVERIFIED)) != 0 || (pStackItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ALL))) break;
				continue;
			}
			for (nItem[1] = 0, nItems[1] = (nItem[0] == nItems[0] && m_pItems[1].Copy(&pStackItems)) ? (INT)m_pItems[1].GetSize() : 0; nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pStackItem[1] = m_pItems[1].GetAt(nItem[1])))
				{
					if (pStackItem[1]->GetMembershipSize() > (UINT)pStackItems.GetSize())
					{
						if (nItem[1] < nItems[1] - 1)
						{
							m_pItems[1].RemoveAt(nItem[1]);
							delete pStackItem[1];
							nItems[1]--;
							nItem[1]--;
							continue;
						}
						pStackItem[1]->SetMembership(EMPTYSTRING);
						pStackItem[1]->SetMembershipDescription(EMPTYSTRING);
						pStackItem[1]->SetMembershipSize(0);
						pStackItem[1]->SetMembershipID(-1);
					}
					ResetTelecommand(pStackItem[1]);
				}
			}
			for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
			{
				if ((pStackItem[1] = ((pStackItem[0] = pStackItems.GetAt(nItem[0]))) ? m_pItems[0].GetAt(m_pItems[0].Find(pStackItem[0])) : (CTCAutomaticStackItem *)NULL))
				{
					for (AdjustTelecommandAlerts(pStackItem[0], pStackItem[1], FALSE); (pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE) && pStackItem[1]->GetStatus() <= TCAUTOMATICSTACKITEM_STATUS_DISPATCHED; )
					{
						pAlertItems.Add(pStackItem[0]);
						break;
					}
					for (; pStackItem[0]->GetStatus() >= pStackItem[1]->GetStatus(); )
					{
						pStackItem[1]->CTCItem::Copy(pStackItem[0]);
						break;
					}
					pStackItem[0]->Copy(pStackItem[1]);
					continue;
				}
				if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && (pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE))
				{
					pAlertItems.Add(pStackItem[0]);
					continue;
				}
			}
			for (nItem[0] = 0, nItems[0] = (bAll) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
			{
				if ((pStackItem[0] = m_pItems[0].GetAt(nItem[0])) && pStackItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  pStackItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ARMED && (pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED || pStackItems.Find(pStackItem[0]) >= 0))
				{
					DeleteTelecommand(nItem[0]);
					delete pStackItem[0];
					nItems[0]--;
					nItem[0]--;
				}
			}
			for (nItem[0] = 0, nItems[0] = (bAll) ? (INT)pStackItems.GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
			{
				if ((pStackItem[0] = pStackItems.GetAt(nItem[0])) && pStackItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  pStackItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ARMED)
				{
					if ((pStackItem[1] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
					{
						for (pStackItem[1]->Copy(pStackItem[0]); !InsertTelecommand(nItem[0], pStackItem[1]); )
						{
							delete pStackItem[1];
							break;
						}
					}
				}
			}
			for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
			{
				if ((pStackItem[1] = ((pStackItem[0] = pStackItems.GetAt(nItem[0]))) ? m_pItems[0].GetAt((nIndex[0] = m_pItems[0].Find(pStackItem[0]))) : (CTCAutomaticStackItem *)NULL) && pStackItem[1]->Copy(pStackItem[0]))
				{
					if (pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED || ((pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE) && m_bTelecommandingAutoRejectionMode))
					{
						for (nItem[1] = 0, nItems[1] = (pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pStackItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE) ? (INT)pAlertItems.GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
						{
							if (pStackItem[0] == (CTCAutomaticStackItem *)pAlertItems.GetAt(nItem[1]))
							{
								GetParentDisplay()->Alert(pStackItem[0]);
								pAlertItems.RemoveAt(nItem[1]);
								break;
							}
						}
						if (nItem[1] < nItems[1] || nItems[1] < 0)
						{
							DeleteTelecommand(nIndex[0]);
							delete pStackItem[1];
						}
						continue;
					}
					for (nItem[1] = 0, nItems[1] = (INT)pAlertItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
					{
						if (pStackItem[0] == (CTCAutomaticStackItem *)pAlertItems.GetAt(nItem[1]))
						{
							for (; pStackItem[1]->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL; )
							{
								pStackItem[1]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_PTVRESULT, (pStackItem[1]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTION_FAILURE));
								break;
							}
							for (; pStackItem[1]->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO; )
							{
								pStackItem[1]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_PEVRESULT, (pStackItem[1]->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTION_FAILURE));
								break;
							}
							GetParentDisplay()->Alert(pStackItem[1]);
							break;
						}
					}
					continue;
				}
				for (nItem[1] = 0, nItems[1] = (INT)pAlertItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
				{
					if (pStackItem[0] == (CTCAutomaticStackItem *)pAlertItems.GetAt(nItem[1]))
					{
						pAlertItems.RemoveAt(nItem[1]);
						break;
					}
				}
			}
			for (; pAlertItems.GetSize() > 0; )
			{
				GetParentDisplay()->SetTelecommandingState((m_nTelecommandingState & TCAUTOMATICSTACK_STATE_DISABLED) | TCAUTOMATICSTACK_STATE_STOPPED, FALSE);
				break;
			}
			UpdateContent();
		}
		return TRUE;
	}
	if (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
	{
		for (nItem[0] = 0, nItems[0] = (INT)pItems.GetSize(), nIndex[0] = -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pItem = pItems.GetAt(nItem[0])) && (pItem->GetType() == TCITEM_TYPE_FUNCTION || pItem->GetType() == TCITEM_TYPE_PROCEDURE))
			{
				if ((pStackItem[0] = m_pItems[0].GetAt((nIndex[1] = m_pItems[0].Find(pItem)))))
				{
					if (!CheckTelecommandFilter(pItem))
					{
						m_pItems[0].RemoveAt(nIndex[1]);
						delete pStackItem[0];
						continue;
					}
					if ((((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME) || ((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) && (!pItem->GetExecutionTime(tExecutionTime[0]) || !pStackItem[0]->GetExecutionTime(tExecutionTime[1])))) && pItem->GetReleaseTime() == pStackItem[0]->GetReleaseTime()) || ((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) && pItem->GetExecutionTime(tExecutionTime[0]) && pStackItem[0]->GetExecutionTime(tExecutionTime[1]) && tExecutionTime[0] == tExecutionTime[1]))
					{
						if (AdjustTelecommandAlerts(pItem, pStackItem[0])) continue;
						break;
					}
					m_pItems[0].RemoveAt(nIndex[1]);
					delete pStackItem[0];
				}
				if (CheckTelecommandFilter(pItem))
				{
					if ((pStackItem[0] = new CTCAutomaticStackItem))
					{
						if (AdjustTelecommandAlerts(pItem, pStackItem[0]))
						{
							for (nItem[2] = 0, nItems[2] = (INT)m_pItems[0].GetSize(); nItem[2] < nItems[2]; nItem[2]++)
							{
								if ((pStackItem[1] = m_pItems[0].GetAt(nItem[2])) != (CTCAutomaticStackItem *)NULL)
								{
									if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST)
									{
										if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME)
										{
											if (abs(pStackItem[0]->GetReleaseTime().GetTime()) >= abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
											continue;
										}
										if (pStackItem[0]->GetExecutionTime(tExecutionTime[0]))
										{
											if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
											{
												if (tExecutionTime[0] >= tExecutionTime[1]) break;
												continue;
											}
											if (tExecutionTime[0] >= abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
											continue;
										}
										if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
										{
											if (tExecutionTime[1] <= abs(pStackItem[0]->GetReleaseTime().GetTime())) break;
											continue;
										}
										if (abs(pStackItem[0]->GetReleaseTime().GetTime()) >= abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
										continue;
									}
									if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME)
									{
										if (abs(pStackItem[0]->GetReleaseTime().GetTime()) < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
										continue;
									}
									if (pStackItem[0]->GetExecutionTime(tExecutionTime[0]))
									{
										if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
										{
											if (tExecutionTime[0] < tExecutionTime[1]) break;
											continue;
										}
										if (tExecutionTime[0] < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
										continue;
									}
									if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
									{
										if (tExecutionTime[1] > abs(pStackItem[0]->GetReleaseTime().GetTime())) break;
										continue;
									}
									if (abs(pStackItem[0]->GetReleaseTime().GetTime()) < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
								}
							}
							m_pItems[0].InsertAt((nIndex[0] = nItem[2]), pStackItem[0], 1);
							continue;
						}
						delete pStackItem[0];
					}
					break;
				}
			}
		}
		for (nItem[1] = 0, nItems[1] = (INT)pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem = pItems.GetAt(nItem[1])) && (pItem->GetType() == TCITEM_TYPE_FUNCTION || pItem->GetType() == TCITEM_TYPE_PROCEDURE))
			{
				if ((pStackItem[0] = m_pItems[1].GetAt((nIndex[1] = m_pItems[1].Find(pItem)))) != (CTCAutomaticStackItem *)NULL)
				{
					if ((((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME) || ((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) && (!pItem->GetExecutionTime(tExecutionTime[0]) || !pStackItem[0]->GetExecutionTime(tExecutionTime[1])))) && pItem->GetReleaseTime() == pStackItem[0]->GetReleaseTime()) || ((m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYEXECUTIONTIME) && pItem->GetExecutionTime(tExecutionTime[0]) && pStackItem[0]->GetExecutionTime(tExecutionTime[1]) && tExecutionTime[0] == tExecutionTime[1]))
					{
						if (AdjustTelecommandAlerts(pItem, pStackItem[0])) continue;
						break;
					}
					m_pItems[1].RemoveAt(nIndex[1]);
					delete pStackItem[0];
				}
				if ((pStackItem[0] = new CTCAutomaticStackItem))
				{
					if (AdjustTelecommandAlerts(pItem, pStackItem[0]))
					{
						for (nItem[2] = 0, nItems[2] = (INT)m_pItems[1].GetSize(); nItem[2] < nItems[2]; nItem[2]++)
						{
							if ((pStackItem[1] = m_pItems[1].GetAt(nItem[2])) != (CTCAutomaticStackItem *)NULL)
							{
								if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME)
								{
									if (abs(pStackItem[0]->GetReleaseTime().GetTime()) < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
									continue;
								}
								if (pStackItem[0]->GetExecutionTime(tExecutionTime[0]))
								{
									if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
									{
										if (tExecutionTime[0] < tExecutionTime[1]) break;
										continue;
									}
									if (tExecutionTime[0] < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
									continue;
								}
								if (pStackItem[1]->GetExecutionTime(tExecutionTime[1]))
								{
									if (tExecutionTime[1] > abs(pStackItem[0]->GetReleaseTime().GetTime())) break;
									continue;
								}
								if (abs(pStackItem[0]->GetReleaseTime().GetTime()) < abs(pStackItem[1]->GetReleaseTime().GetTime())) break;
							}
						}
						m_pItems[1].InsertAt(nItem[2], pStackItem[0], 1);
						continue;
					}
					delete pStackItem[0];
				}
				break;
			}
		}
		for (UpdateContent(); nIndex[0] >= 0; )
		{
			ScrollTo(nIndex[0]);
			break;
		}
		return((nItem[0] == nItems[0] && nItem[1] == nItems[1]) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCAutomaticStackPageTextView::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	BOOL  bUpdate;
	CPoint  ptToolTip;
	CString  szColumn;
	CString  szToolTip[3];
	CStringArray  szParameters;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate = GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
	{
		bUpdate |= UpdateTelecommand(nItem);
		continue;
	}
	for (nItems = (INT)m_pItems[0].GetSize(), szParameters.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetResult() != TCAUTOMATICSTACKITEM_RESULT_NONE)
			{
				pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
				pItem->SetResult(TCAUTOMATICSTACKITEM_RESULT_NONE);
				bUpdate = TRUE;
			}
		}
	}
	if (bUpdate)
	{
		if (m_wndToolTip.IsVisibleAtPoint(ptToolTip))
		{
			if ((pItem = (FindTextFromPoint(ptToolTip, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCAutomaticStackItem *)NULL))
			{
				for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
				{
					m_wndToolTip.Update(szToolTip[0], szToolTip[1]);
					break;
				}
			}
		}
		UpdateContent();
	}
	return((nItem == nItems) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackPageTextView::UpdateTelecommands()
{
	CTCAutomaticStackItems  pItems;

	return LoadTelecommands(pItems);
}

BOOL CTCAutomaticStackPageTextView::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	INT  nItem;
	INT  nItems;
	INT  nInterlock;
	INT  nInterlocks;
	BOOL  bUpdate;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCInterlock  *pInterlock[2];
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bUpdate = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pInterlocks.Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pItem->GetInterlock()) < 0)
			{
				pItem->SetInterlock(EMPTYSTRING);
				bUpdate = TRUE;
			}
			for (pItem->GetReleaseInterlock(szInterlock, bInterlock); pInterlocks.Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock) < 0; )
			{
				pItem->SetReleaseInterlock(EMPTYSTRING);
				bUpdate = TRUE;
				break;
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pItems[1].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[1].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
		{
			for (pItem->SetInterlock((pInterlocks.Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pItem->GetInterlock()) >= 0) ? pItem->GetInterlock() : EMPTYSTRING), pItem->GetReleaseInterlock(szInterlock, bInterlock); pInterlocks.Find(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock) < 0; )
			{
				pItem->SetReleaseInterlock(EMPTYSTRING);
				break;
			}
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[0] = pInterlocks.GetAt(nInterlock)) && pInterlock[0]->IsHost() && pInterlock[0]->GetSourceType() == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK)
		{
			if ((pInterlock[1] = m_pInterlocks.GetAt(m_pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()))))
			{
				for (; pInterlock[0]->GetState() == TCINTERLOCK_STATE_FAILURE && pInterlock[1]->GetState() != TCINTERLOCK_STATE_FAILURE; )
				{
					GetParentDisplay()->Alert(pInterlock[1]);
					break;
				}
				pInterlock[1]->Copy(pInterlock[0]);
				continue;
			}
			if ((pInterlock[1] = new CTCInterlock))
			{
				pInterlock[1]->Copy(pInterlock[0]);
				if (m_pInterlocks.Add(pInterlock[1]) >= 0) continue;
				delete pInterlock[1];
			}
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[0] = m_pInterlocks.GetAt(nInterlock)) && pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) < 0)
		{
			m_pInterlocks.RemoveAt(nInterlock);
			delete pInterlock[0];
			nInterlocks--;
			nInterlock--;
		}
	}
	for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate |= GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
	{
		bUpdate |= UpdateTelecommand(nItem);
		continue;
	}
	if (bUpdate) UpdateContent();
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::SetCurTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	return ActivateTelecommand(nIndex);
}

INT CTCAutomaticStackPageTextView::GetCurTelecommand() CONST
{
	return GetCurText();
}

BOOL CTCAutomaticStackPageTextView::SelectTelecommand(INT nIndex)
{
	CTextViewLock  cLock(this);

	if (m_nSearchIndex != nIndex)
	{
		ScrollTo((m_nSearchIndex = nIndex));
		UpdateContent();
		RecalcLayout();
	}
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::DoSelectAllTelecommands()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) || (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  !pItem->IsSelected())
		{
			pItem->Select();
			continue;
		}
	}
	DrawContent();
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::CanSelectAllTelecommands() CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) || (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  !pItem->IsSelected()) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::DoUnselectAllTelecommands()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), SetCurText(-1); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected())
		{
			pItem->Select(FALSE);
			continue;
		}
	}
	DrawContent();
	return TRUE;
}

INT CTCAutomaticStackPageTextView::EnumSelectedTelecommands(CTCAutomaticStackItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem[2];
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), pItems.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected())
		{
			if ((pItem[1] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
			{
				if (pItem[1]->Copy(pItem[0]) && pItems.Add(pItem[1]) >= 0) continue;
				delete pItem[1];
			}
			pItems.RemoveAll();
			break;
		}
	}
	return((INT)pItems.GetSize());
}

BOOL CTCAutomaticStackPageTextView::HasSelectedTelecommands(UINT nStatus) CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && (pItem->GetStatus() == nStatus || !nStatus)) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::DispatchTelecommands()
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tDispatchTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackItems  pItems[2];
	CTextViewLock  cLock(this);

	for (nItem[0] = 0, nItems[0] = ((m_nTelecommandingState & TCAUTOMATICSTACK_STATE_STOPPED) != TCAUTOMATICSTACK_STATE_STOPPED && (m_nTelecommandingState & TCAUTOMATICSTACK_STATE_DISABLED) != TCAUTOMATICSTACK_STATE_DISABLED) ? (INT)m_pItems[0].GetSize() : 0; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem[0])) && pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK && (CheckTelecommandReleaseWindow(pItem[0]) || pItem[0]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[0]->IsAlerted() == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE)
		{
			for (nItem[1] = 0, nItems[1] = (pItems[1].Find(pItem[0]) < 0) ? m_pItems[0].Collect(nItem[0], pItems[0]) : -1; nItem[1] < nItems[1]; nItem[1] = nItem[1] + 1)
			{
				if ((pItem[1] = pItems[0].GetAt(nItem[1])) && (CheckTelecommandReleaseWindow(pItem[1]) || pItem[1]->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) && pItem[1]->IsAlerted() == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) continue;
				break;
			}
			for (nItem[1] = (nItem[1] == nItems[1]) ? 0 : -1; nItem[1] < nItems[1] && nItem[1] >= 0; nItem[1]++)
			{
				if ((pItem[1] = pItems[0].GetAt(nItem[1])))
				{
					pItem[1]->SetDispatchTime(tDispatchTime);
					pItem[1]->SetStatus(TCAUTOMATICSTACKITEM_STATUS_DISPATCHED);
				}
			}
			if (nItems[1] >= 0)
			{
				if (nItem[1] == nItems[1])
				{
					pItems[1].CPtrArray::Append(pItems[0]);
					pItems[0].CPtrArray::RemoveAll();
					continue;
				}
				break;
			}
		}
	}
	return((pItems[1].GetSize() > 0) ? ((ReloadTelecommands(pItems[1])) ? (nItem[0] == nItems[0]) : FALSE) : (nItem[0] == nItems[0]));
}

UINT CTCAutomaticStackPageTextView::GetTelecommandCount() CONST
{
	CTextViewLock  cLock(this);

	return((UINT)m_pItems[0].GetSize());
}

BOOL CTCAutomaticStackPageTextView::DoCutTelecommand()
{
	CTextViewLock  cLock(this);

	if ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED)))
	{
		if (CopyToClipboard(TRUE))
		{
			UpdateTelecommands();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::CanCutTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return(((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) ? (GetClipboardFormat() != 0 && HasSelectedTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackPageTextView::DoCopyTelecommand()
{
	CTextViewLock  cLock(this);

	return((((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) || (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)) ? CopyToClipboard() : FALSE);
}

BOOL CTCAutomaticStackPageTextView::CanCopyTelecommand() CONST
{
	CTextViewLock  cLock(this);

	return((((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) || (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (GetClipboardFormat() != 0 && HasSelectedTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackPageTextView::DoPasteTelecommand()
{
	CTextViewLock  cLock(this);

	return(((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) ? PasteFromClipboard() : FALSE);
}

BOOL CTCAutomaticStackPageTextView::CanPasteTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItem  *pStackItem;
	CTCItems  pStackItems;
	CByteArray  nItemsData;
	COleDataObject  cOleDataObject;
	CTextViewLock  cLock(this);

	if ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED)))
	{
		if (GetClipboardFormat() != 0 && cOleDataObject.AttachClipboard() && cOleDataObject.IsDataAvailable(GetClipboardFormat()))
		{
			if ((hData = cOleDataObject.GetGlobalData(GetClipboardFormat())))
			{
				if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
				{
					for (nItemsData.SetSize(GlobalSize(hData)), CopyMemory(nItemsData.GetData(), pData, nItemsData.GetSize()); pStackItems.Unmap(nItemsData); )
					{
						for (nItem = 0, nItems = (INT)pStackItems.GetSize(); nItem < nItems; nItem++)
						{
							if ((pStackItem = (CTCItem *)pStackItems.GetAt(nItem)) != (CTCItem *)NULL)
							{
								if ((m_nPane & TCAUTOMATICSTACK_PAGE_NORMAL) && (pStackItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) continue;
								if ((m_nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) && (pStackItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)) continue;
							}
							break;
						}
						if (nItem == nItems)
						{
							GlobalUnlock(hData);
							return TRUE;
						}
						break;
					}
					GlobalUnlock(hData);
				}
			}
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::DoDeleteTelecommand()
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected())
		{
			DeleteTelecommand(nItem);
			delete pItem;
			nItems--;
			nItem--;
		}
	}
	UpdateTelecommands();
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::CanDeleteTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (m_nTelecommandingState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) ? (INT)m_pItems[0].GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE)) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::DoAcknowledgeTelecommand()
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CTCItems  pItems;
	CTCAutomaticStackItem  *pStackItem;
	CTextViewLock  cLock(this);

	if ((pStackItem = m_pItems[0].GetAt(GetCurTelecommand())) && pStackItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE)
	{
		pStackItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ANY);
		UpdateContent();
		return TRUE;
	}
	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pStackItem = m_pItems[0].GetAt(nItem)) && pStackItem->IsSelected() && pStackItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE)
		{
			if ((pItem = new CTCItem) && pItem->Copy(pStackItem) && pItems.Add(pItem) >= 0) continue;
			pItems.RemoveAll();
			delete pItem;
			break;
		}
	}
	GetTCService()->AcknowledgeTelecommands(pItems);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::CanAcknowledgeTelecommand() CONST
{
	INT  nItem;
	INT  nItems;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && pItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) break;
		continue;
	}
	return((nItem < nItems) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::ShowTelecommandProperties()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CUIntArray  nItemIDs;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackComposedItem  cComposedItem;
	CTextViewLock  cLock(this);

	if (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nIndex = GetCurTelecommand(); nItem < nItems; nItem++)
		{
			if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)
			{
				if ((pItem[1] = new CTCAutomaticStackItem) && pItem[1]->Copy(pItem[0]) && cComposedItem.Add(pItem[1]) >= 0)
				{
					nIndex = (nIndex < 0) ? nItem : nIndex;
					continue;
				}
				delete pItem[1];
				break;
			}
		}
		for (; nIndex >= 0; )
		{
			m_pItems[0].Collect(nIndex, nItemIDs);
			break;
		}
		cLock.Release();
		return((nItemIDs.GetSize() != cComposedItem.GetSize() && cComposedItem.GetSize() > 1) ? ShowTelecommandProperties(nIndex, &cComposedItem) : ShowTelecommandProperties(nIndex));
	}
	if (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected()) break;
			continue;
		}
		cLock.Release();
		return((nItem < nItems) ? ShowTelecommandProperties(nItem) : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::CanShowTelecommandProperties() CONST
{
	INT  nItem;
	INT  nItems;
	BOOL  bSelected;
	CString  szMembership;
	CTimeTag  tMembership;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), bSelected = FALSE; nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected() && ((m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) || ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)))
		{
			if ((pItem->GetMembership() == szMembership && ((pItem->GetMembership().IsEmpty() && ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) || !bSelected)) || pItem->GetLoadTime() == tMembership)) || !bSelected)
			{
				szMembership = (!bSelected) ? pItem->GetMembership() : szMembership;
				tMembership = (!bSelected) ? pItem->GetLoadTime() : tMembership;
				bSelected = TRUE;
				continue;
			}
			break;
		}
	}
	return((nItem == nItems) ? bSelected : FALSE);
}

BOOL CTCAutomaticStackPageTextView::IsShowingTelecommandProperties() CONST
{
	return m_bProperties;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByNumber(INT nNumber)
{
	CTextViewLock  cLock(this);

	if (nNumber <= m_pItems[0].GetSize())
	{
		SelectTelecommand(nNumber - 1);
		return TRUE;
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByName(LPCTSTR pszName, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetName() == pszName)
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByDescription(LPCTSTR pszDescription, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	INT  nIndex;
	INT  nCount;
	CString  szInfo[2];
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szInfo[0] = pszDescription; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL)
		{
			for (szInfo[1] = pItem->GetDescription(); !bCase; )
			{
				szInfo[0].MakeUpper();
				szInfo[1].MakeUpper();
				break;
			}
			if ((!bWord  &&  szInfo[1].Find(szInfo[0]) >= 0) || (bWord && (!szInfo[1].Find(szInfo[0] + SPACE) || szInfo[1].Find(SPACE + szInfo[0] + SPACE) > 0)))
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByCategory(LPCTSTR pszCategory, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	ULONGLONG  nCategory;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, nCategory = GetDatabase()->TranslateTCFunctionHazardousFlag(pszCategory, FALSE); (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetAttributes() & nCategory))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandBySubSystem(LPCTSTR pszSubSystem, BOOL bDown, BOOL bAll, BOOL bCase)
{
	INT  nIndex;
	INT  nCount;
	CString  szSubSystem[2];
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0, szSubSystem[0] = pszSubSystem; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL)
		{
			for (szSubSystem[1] = pItem->GetDestinationSubSystem(); !bCase; )
			{
				szSubSystem[0].MakeUpper();
				szSubSystem[1].MakeUpper();
				break;
			}
			if (szSubSystem[0] == szSubSystem[1])
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByArgument(LPCTSTR pszArgument, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacket  cPacket;
	CTCAutomaticStackItem  *pItem;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL)
		{
			for (nElement = 0, nElements = (INT)pItem->GetSize(); nElement < nElements; nElement++)
			{
				if ((pFunctionElement = pItem->GetAt(nElement)) && pFunctionElement->GetName() == pszArgument) break;
				continue;
			}
			for (nParameter = 0, nParameters = (pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0; nParameter < nParameters; nParameter++)
			{
				if ((pPacketParameter = cPacket.GetAt(nParameter)) && pPacketParameter->GetTag() == pszArgument) break;
				continue;
			}
			if (nElement < nElements || nParameter < nParameters)
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByFlags(BOOL bDown, BOOL bAll, BOOL bInterlocking, BOOL bInterlocked, BOOL bGrouped, BOOL bBlocked)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bInterlock;
	CString  szInterlock;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && ((bInterlocking  &&  !pItem->GetInterlock().IsEmpty()) || (!bInterlocking  &&  pItem->GetInterlock().IsEmpty())) && ((bInterlocked  &&  pItem->GetReleaseInterlock(szInterlock, bInterlock)) || (!bInterlocked  &&  !pItem->GetReleaseInterlock(szInterlock, bInterlock))) && ((bGrouped && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED)) || (!bGrouped && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED)) && ((bBlocked && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED)) || (!bBlocked && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByTCPacket(LPCTSTR pszPacket, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CDatabaseTCPacket  *pPacket;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pPacket = ((pItem = m_pItems[0].GetAt(nIndex))) ? GetDatabase()->GetTCPackets()->GetAt(pItem->GetTCPacketRef()) : (CDatabaseTCPacket *)NULL) && pPacket->GetTag() == pszPacket)
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByDispatchTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL  &&  pItem->GetDispatchTime() > 0)
		{
			if (bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  pItem->GetDispatchTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetDispatchTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByReleaseTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL  &&  pItem->GetReleaseTime() > 0)
		{
			if (bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  pItem->GetReleaseTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetReleaseTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByReleaseTimeOffset(DWORD dwOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && ((bMatch  &&  dwReleaseOffset == dwOffset) || (!bMatch  &&  max(1000 * (TIMETAG)dwReleaseOffset - 1000000 * tInterval.GetTotalSeconds(), 0) <= 1000 * (TIMETAG)dwOffset  &&  dwReleaseOffset + 1000 * (DWORD)tInterval.GetTotalSeconds() >= dwOffset)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByTransmissionTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  pItem->GetTransmissionTime() > 0)
		{
			if (bMatch  &&  pItem->GetTransmissionTime().GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  pItem->GetTransmissionTime().GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && pItem->GetTransmissionTime().GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByExecutionTime(CONST CTimeKey &tTime, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	UINT  nExecutionOBRT;
	CTimeTag  tExecutionTime;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetExecutionTime(tExecutionTime) || (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime))))
		{
			if (bMatch  &&  tExecutionTime.GetTimeInSeconds() == tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
			if (!bMatch  &&  tExecutionTime.GetTimeInSeconds() - tInterval.GetTotalSeconds() <= tTime.GetTime() && tExecutionTime.GetTimeInSeconds() + tInterval.GetTotalSeconds() >= tTime.GetTime())
			{
				SelectTelecommand(nIndex);
				return TRUE;
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByExecutionTimeOffset(CONST CTimeSpan &tOffset, CONST CTimeSpan &tInterval, BOOL bDown, BOOL bAll, BOOL bMatch)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && ((bMatch  &&  dwExecutionOffset / 1000 == abs(tOffset.GetTotalSeconds()) && ((!bEarlierExecution  &&  tOffset >= 0) || (bEarlierExecution  &&  tOffset < 0))) || (!bMatch  &&  dwExecutionOffset / 1000 - tInterval.GetTotalSeconds() <= tOffset.GetTotalSeconds() && dwExecutionOffset / 1000 + tInterval.GetTotalSeconds() >= tOffset.GetTotalSeconds())))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByAuthorization(UINT nAuthorization, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetFlags() & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED) == (nAuthorization & TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByPTVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL)
		{
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
			{
				if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
			{
				if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
			if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
			{
				if ((tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds()))
				{
					SelectTelecommand(nIndex);
					return TRUE;
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByPTVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV))) && nFlags == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV))) || (!nFlags && ((pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV)) == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV))))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByPTVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (pItem->GetResult() & (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT | TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL)) == (nResult & (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT | TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByPEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV))) && nFlags == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) && pItem->GetPreExeGroupRef() >= 0) || (!nFlags && ((nCheck != ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() >= 0 && ((pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)))) || (nCheck == ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) && pItem->GetPreExeGroupRef() < 0)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByPEVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & (TCAUTOMATICSTACKITEM_RESULT_PEV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO)) == (nResult & (TCAUTOMATICSTACKITEM_RESULT_PEV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByCEVTimeWindow(CONST CTimeKey &tTime, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bAfterDispatch;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	CTimeTag  tExecutionTime;
	CTimeTag  tReleaseTime[2];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow[3];
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)))
		{
			if (pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE)
			{
				for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) || pItem->GetExecutionTime(tExecutionTime); )
				{
					if (tTime.GetTime() >= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tExecutionTime.GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds())
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
					break;
				}
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
				{
					if ((tReleaseTime[0] > 0 && tReleaseTime[1] > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[0] == 0 && tTime.GetTime() <= tReleaseTime[1].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseTime[1] == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
				{
					if ((tReleaseTime[0] > 0 && tReleaseInterval > 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= tReleaseTime[0].GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= tReleaseTime[0].GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() > 0)
				{
					if ((pItem->GetReleaseTime() > 0 && tReleaseInterval > 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds() && tTime.GetTime() <= pItem->GetReleaseTime().GetTimeInSeconds() + tReleaseInterval.GetTotalSeconds() + tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) || (tReleaseInterval == 0 && tTime.GetTime() >= pItem->GetReleaseTime().GetTimeInSeconds() + tTimeWindow[0].GetTotalSeconds()))
					{
						SelectTelecommand(nIndex);
						return TRUE;
					}
				}
			}
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByCEVCheck(UINT nCheck, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	UINT  nFlags;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && (((nFlags = (m_nTelecommandingFlags & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV))) && nFlags == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) && pItem->GetExeVerGroupRef() >= 0) || ((!nFlags || pItem->GetExeVerGroupRef() < 0) && ((nCheck != ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() >= 0 && ((pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) == (nCheck & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)))) || (nCheck == ~(TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) && pItem->GetExeVerGroupRef() < 0)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByCEVResult(UINT nResult, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & (TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE | TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING | TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED | TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED | TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN | TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)) == (nResult & (TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE | TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING | TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED | TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED | TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN | TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SearchTelecommandByStatus(LPCTSTR pszStatus, BOOL bDown, BOOL bAll)
{
	INT  nIndex;
	INT  nCount;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	for (nIndex = ((nIndex = m_nSearchIndex) >= 0 && !bAll) ? ((!bDown) ? (nIndex - 1) : (nIndex + 1)) : ((!bDown) ? (GetTelecommandCount() - 1) : 0), nCount = (bDown) ? GetTelecommandCount() : 0; (bDown && nIndex < nCount) || (!bDown && nIndex >= nCount); nIndex = (bDown) ? (nIndex + 1) : (nIndex - 1))
	{
		if ((pItem = m_pItems[0].GetAt(nIndex)) && ((pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_ONSTACK))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_ARMED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_DISPATCHED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_RELEASED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_NOTRELEASED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDRELEASE))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SENT))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDSEND  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDSEND))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_UPLINKED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDUPLINK  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDUPLINK))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_EXECUTED  &&  pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_EXECUTED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTEXECUTED  &&  pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_NOTEXECUTED))) || (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDEXECUTION  &&  pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  !lstrcmp(pszStatus, STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDEXECUTION)))))
		{
			SelectTelecommand(nIndex);
			return TRUE;
		}
	}
	SelectTelecommand(-1);
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	INT  nItem;
	INT  nItems;
	UINT  nMode;
	UINT  nRange[2];
	CString  szItem;
	CTimeKey  tRange[2];
	CTCAutomaticStackItem  *pItem;
	CTextViewAttribute  *pAttribute;
	CTextViewLock  cLock(this);

	for (nItem = 0, nItems = (((pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_NORMALSTACK) && (m_nPane & TCAUTOMATICSTACK_PAGE_NORMAL)) || ((pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_TIMETAGGEDSTACK) && (m_nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED))) ? ((GetColumns(szColumns) && GetTitleFont(pTitleFont) && GetTextFont(pItemsFont)) ? (INT)m_pItems[0].GetSize() : -1) : 0, szContents.RemoveAll(), pAttributes.RemoveAll(), pSymbols.RemoveAll(), nSymbolIDs.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = m_pItems[0].GetAt(nItem)) && ((((nMode = pJobInfo->GetPrintMode()) & TCAUTOMATICSTACK_PRINT_ONSTACKITEMS) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK) || ((nMode & TCAUTOMATICSTACK_PRINT_DISPATCHEDITEMS) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) || ((nMode & TCAUTOMATICSTACK_PRINT_RELEASEDITEMS) && (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED)) || ((nMode & TCAUTOMATICSTACK_PRINT_NOTRELEASEDITEMS) && pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED) || ((nMode & TCAUTOMATICSTACK_PRINT_FAILEDRELEASEITEMS) && (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDSEND || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDUPLINK))) && (!pJobInfo->GetPrintRange(nRange[0], nRange[1]) || (nItem + 1 >= (INT)nRange[0] && nItem + 1 <= (INT)nRange[1])) && (!pJobInfo->GetPrintRange(tRange[0], tRange[1]) || (pItem->GetReleaseTime().GetTimeInSeconds() >= tRange[0].GetTime() && pItem->GetReleaseTime().GetTimeInSeconds() <= tRange[1].GetTime())))
		{
			if ((pAttribute = new CTextViewAttribute))
			{
				if (GetText(nItem, szItem, pAttribute))
				{
					pAttributes.Add(pAttribute);
					szContents.Add(szItem);
					continue;
				}
				delete pAttribute;
			}
			break;
		}
	}
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_GROUPED]);
	pSymbols.Add(m_pFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_BLOCKED]);
	pSymbols.Add(m_pCheckFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE]);
	pSymbols.Add(m_pCheckFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON]);
	pSymbols.Add(m_pCheckFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF]);
	pSymbols.Add(m_pCheckFlagSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN]);
	pSymbols.Add(m_pResultSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED]);
	pSymbols.Add(m_pAlertSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_INFORMATION]);
	pSymbols.Add(m_pAlertSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_WARNING]);
	pSymbols.Add(m_pAlertSymbols[TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_ERROR]);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINTERLOCK);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINTERLOCKIDLE);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINTERLOCKPENDING);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINTERLOCKSUCCESS);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINTERLOCKFAILURE);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKGROUPED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKBLOCKED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCHECKSNONE);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCHECKSON);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCHECKSOFF);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCHECKSDISABLED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKPTVGO);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKPTVWAIT);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKPTVFAIL);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKPEVGO);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKPEVNOGO);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVIDLE);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVPENDING);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVPASSED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVFAILED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVUNKNOWN);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKCEVUNVERIFIED);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKINFORMATION);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKWARNING);
	nSymbolIDs.Add(IDP_TCAUTOMATICSTACKERROR);
	return((nItem == nItems) ? TRUE : FALSE);
}

VOID CTCAutomaticStackPageTextView::UpdateContent(BOOL bFilter, BOOL bRedraw)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	INT  nDigits;
	UINT  nFormat;
	CPoint  ptToolTip;
	CString  szItem;
	CString  szNumber;
	CString  szColumn;
	CString  szToolTip[3];
	CTimeTag  tExecutionTime[2];
	CStringTools  cStringTools;
	CTextViewAttribute  cAttribute;
	CDatabaseTCFunctions  pBlockedItems;
	CTCAutomaticStackItem  *pItem[3];
	CTextViewLock  cLock(this);

	if (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
	{
		for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
		{
			UpdateTelecommand(nItem);
			continue;
		}
		for (nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem[0] = m_pItems[0].GetAt(nItem)) != (CTCAutomaticStackItem *)NULL)
			{
				if (pItem[0]->GetResult() != TCAUTOMATICSTACKITEM_RESULT_NONE)
				{
					pItem[0]->SetResult(TCAUTOMATICSTACKITEM_RESULT_NONE);
					continue;
				}
			}
		}
	}
	if ((m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) && bFilter)
	{
		for (nItem = 0, nItems = (INT)m_pItems[1].GetSize(), m_pItems[0].RemoveAll(); nItem < nItems; nItem++)
		{
			if ((pItem[0] = m_pItems[1].GetAt(nItem)) && CheckTelecommandFilter(pItem[0]))
			{
				for (nIndex = 0, nCount = (INT)m_pItems[0].GetSize(); nIndex < nCount; nIndex++)
				{
					if ((pItem[1] = m_pItems[0].GetAt(nIndex)) != (CTCAutomaticStackItem *)NULL)
					{
						if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST)
						{
							if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME)
							{
								if (abs(pItem[0]->GetReleaseTime().GetTime()) >= abs(pItem[1]->GetReleaseTime().GetTime())) break;
								continue;
							}
							if (pItem[0]->GetExecutionTime(tExecutionTime[0]))
							{
								if (pItem[1]->GetExecutionTime(tExecutionTime[1]))
								{
									if (tExecutionTime[0] >= tExecutionTime[1]) break;
									continue;
								}
								if (tExecutionTime[0] >= abs(pItem[1]->GetReleaseTime().GetTime())) break;
								continue;
							}
							if (pItem[1]->GetExecutionTime(tExecutionTime[1]))
							{
								if (tExecutionTime[1] <= abs(pItem[0]->GetReleaseTime().GetTime())) break;
								continue;
							}
							if (abs(pItem[0]->GetReleaseTime().GetTime()) >= abs(pItem[1]->GetReleaseTime().GetTime())) break;
							continue;
						}
						if (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME)
						{
							if (abs(pItem[0]->GetReleaseTime().GetTime()) < abs(pItem[1]->GetReleaseTime().GetTime())) break;
							continue;
						}
						if (pItem[0]->GetExecutionTime(tExecutionTime[0]))
						{
							if (pItem[1]->GetExecutionTime(tExecutionTime[1]))
							{
								if (tExecutionTime[0] < tExecutionTime[1]) break;
								continue;
							}
							if (tExecutionTime[0] < abs(pItem[1]->GetReleaseTime().GetTime())) break;
							continue;
						}
						if (pItem[1]->GetExecutionTime(tExecutionTime[1]))
						{
							if (tExecutionTime[1] > abs(pItem[0]->GetReleaseTime().GetTime())) break;
							continue;
						}
						if (abs(pItem[0]->GetReleaseTime().GetTime()) < abs(pItem[1]->GetReleaseTime().GetTime())) break;
					}
				}
				if ((pItem[2] = new CTCAutomaticStackItem))
				{
					if (pItem[2]->Copy(pItem[0]))
					{
						m_pItems[0].InsertAt(nIndex, pItem[2], 1);
						continue;
					}
					delete pItem[2];
				}
			}
		}
	}
	if (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
	{
		for (nItem = 0, nItems = ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYLIMITENTRIES) && m_nFilterLimitation < (UINT)m_pItems[0].GetSize()) ? (INT)(m_pItems[0].GetSize() - m_nFilterLimitation) : 0; nItem < nItems; nItem++)
		{
			if ((pItem[0] = m_pItems[0].GetAt((nIndex = (m_nFilterMode[1] & TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST) ? (INT)(m_pItems[0].GetSize() - nItem - 1) : nItem))))
			{
				m_pItems[0].RemoveAt(nIndex);
				delete pItem[0];
				nItems--;
				nItem--;
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), nColumn = FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)), nDigits = cStringTools.ConvertLongIntToString(m_pItems[0].GetSize()).GetLength(), nDigits = max(nDigits, 3), nCount = GetTextCount(); nItem < nItems; nItem++)
	{
		for (szNumber = cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits), szNumber += (m_nSearchIndex == nItem) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FIND_SYMBOL) : EMPTYSTRING; (pItem[0] = m_pItems[0].GetAt(nItem)) && TranslateTelecommand(pItem[0], &cAttribute); )
		{
			for (nFormat = GetColumnFormat((nIndex = FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION)))); pItem[0]->GetReleaseBlockedItems(pBlockedItems) > 0 && (nFormat & DT_SINGLELINE) && !m_bFullViewMode; )
			{
				cAttribute.SetColumnFormat(nIndex, nFormat & ~DT_SINGLELINE);
				break;
			}
			for (szItem = szNumber + TranslateTelecommand(pItem[0], (nItem == 0)); nItem >= nCount; )
			{
				InsertText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE);
				break;
			}
			if (nItem < nCount)
			{
				SetText(nItem, szItem, &cAttribute, (nItem == nItems - 1) ? bRedraw : FALSE);
				break;
			}
			break;
		}
	}
	for (nItem = (INT)m_pItems[0].GetSize(), nItems = nCount; nItem < nItems; nItem++)
	{
		DeleteText(nItem, (nItem == nItems - 1) ? bRedraw : FALSE);
		nItems--;
		nItem--;
	}
	if (bRedraw)
	{
		if (m_wndToolTip.IsVisibleAtPoint(ptToolTip))
		{
			if ((pItem[0] = (FindTextFromPoint(ptToolTip, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCAutomaticStackItem *)NULL))
			{
				for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem[0], ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
				{
					m_wndToolTip.Update(szToolTip[0], szToolTip[1]);
					break;
				}
			}
		}
		DrawContent();
	}
}

VOID CTCAutomaticStackPageTextView::RefreshContent()
{
	CTextViewLock  cLock(this);

	EnableFullViewMode(m_bFullViewMode);
	UpdateContent();
}

VOID CTCAutomaticStackPageTextView::DrawContent()
{
	CTextView::DrawContent();
}
VOID CTCAutomaticStackPageTextView::DrawContent(CDC *pDC)
{
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nHeight;
	CRect  rArea;
	CRect  rText[2];
	CRect  rContent;

	for (nItem = FindFirstVisibleText(), nItems = FindLastVisibleText() + 1, nItems = min(GetTextCount() - 1, nItems), m_wndContentCtrl.GetClientRect(rContent), rText[0] = m_wndContentCtrl.CalcTextRect(GetTextCount() - 1), nWidth = rContent.Width(), nHeight = m_wndContentCtrl.CalcTextLines(SPACE); nItem >= 0 && nItem <= nItems; nItem++)
	{
		DrawBackground(pDC, GetTextCount() + GetTextCount() % 2 + nItem % 2, -1, (rText[0].right < rContent.right) ? CRect(rText[0].right + m_wndContentCtrl.m_wTextIndent[1], max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rContent.top), rContent.right, (rText[1] = m_wndContentCtrl.CalcTextRect(nItem)).bottom + m_wndContentCtrl.m_wTextSpacing[1]) : CRect(0, 0, 0, 0));
		DrawText(pDC, nItem, m_wndContentCtrl.m_szContentText.GetAt(nItem));
	}
	for (rArea.SetRect(rContent.left, (GetTextCount() > 0) ? min(max(rText[0].bottom + m_wndContentCtrl.m_wTextSpacing[1], rContent.top), rContent.bottom) : rContent.top, rContent.right, rContent.bottom), nItem = GetTextCount(); rArea.top < rContent.bottom; rArea.DeflateRect(0, nHeight, 0, 0), nItem++)
	{
		DrawBackground(pDC, nItem, -1, CRect(rArea.left, rArea.top, rArea.right, rArea.top + nHeight));
		continue;
	}
}

VOID CTCAutomaticStackPageTextView::DrawText(INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, pszText);
}
VOID CTCAutomaticStackPageTextView::DrawText(CDC *pDC, INT nItem, LPCTSTR pszText)
{
	CTextView::DrawText(pDC, nItem, pszText);
}
VOID CTCAutomaticStackPageTextView::DrawText(INT nItem, INT nColumn, LPCTSTR pszText)
{
	CTextView::DrawText(nItem, nColumn, pszText);
}
VOID CTCAutomaticStackPageTextView::DrawText(CDC *pDC, INT nItem, INT nColumn, LPCTSTR pszText)
{
	CDC  cDC;
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	BOOL  bText;
	BOOL  bState;
	UINT  nFormat;
	UINT  nSymbol[4];
	CRect  rText[3];
	CFont  cTextFont;
	CFont  *pOldFont;
	CSize  sizeSymbol;
	CSize  sizeBitmap;
	CPoint  ptBitmap;
	CString  szStage;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	COLORREF  nColor[2];
	CStringArray  szStages;
	CTextViewAttribute  *pAttribute;

	for (m_wndContentCtrl.GetClientRect(rText[0]), rText[1] = m_wndContentCtrl.CalcTextRect(nItem, nColumn), sizeBitmap.cx = m_wndContentCtrl.m_wTextIndent[0] + rText[1].Width() + m_wndContentCtrl.m_wTextIndent[1], sizeBitmap.cy = m_wndContentCtrl.m_wTextSpacing[0] + rText[1].Height() + m_wndContentCtrl.m_wTextSpacing[1]; rText[2].IntersectRect(rText[0], CRect(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[1].right + m_wndContentCtrl.m_wTextIndent[1], rText[1].bottom + m_wndContentCtrl.m_wTextSpacing[1])); )
	{
		for (nFormat = GetColumnFormat(nItem, nColumn), nColor[0] = GetColumnColor(nItem, nColumn), bState = TRUE; (pAttribute = m_wndContentCtrl.m_pContentTextAttributes.GetAt(nItem)); )
		{
			bState = (pAttribute->GetColumnBlinkingState(nColumn, bState) || pAttribute->GetColumnBlinkingState(-1, bState)) ? bState : TRUE;
			break;
		}
		if (cDC.CreateCompatibleDC(pDC))
		{
			if (cBitmap.CreateCompatibleBitmap(pDC, sizeBitmap.cx, sizeBitmap.cy))
			{
				if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
				{
					for (cDC.SetBkMode(TRANSPARENT), cDC.SetTextColor(nColor[0]), DrawBackground(&cDC, nItem, nColumn, CRect(m_wndContentCtrl.m_wTextIndent[0] - rText[1].left, 0, sizeBitmap.cx, sizeBitmap.cy)), bText = FALSE; (pOldFont = (nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS)) && nColumn != FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT))) ? ((GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)) : (CFont *)NULL); )
					{
						cDC.DrawText(((nPos = (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER))) ? (INT)_tcscspn(pszText, CString(GetSymbolDelimiter())) : -1) >= 0) ? CString(pszText).Left(nPos) : pszText, CRect(m_wndContentCtrl.m_wTextIndent[0], m_wndContentCtrl.m_wTextSpacing[0], sizeBitmap.cx - m_wndContentCtrl.m_wTextIndent[0], sizeBitmap.cy - m_wndContentCtrl.m_wTextSpacing[0]), nFormat);
						cDC.SelectObject(pOldFont);
						bText = TRUE;
						break;
					}
					if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)) || !bText)
					{
						for (sizeSymbol.cx = sizeSymbol.cy = 0, nColor[1] = cDC.GetNearestColor(VGA_COLOR_WHITE), cTextFont.DeleteObject(); (pOldFont = (GetColumnFont(nItem, nColumn, &cTextFont)) ? cDC.SelectObject(&cTextFont) : cDC.SelectObject(&m_wndContentCtrl.m_cFont)); )
						{
							sizeSymbol.cx = sizeSymbol.cy = cDC.GetTextExtent(SPACE).cy;
							m_sizeCheckFlagSymbols = sizeSymbol;
							m_sizeResultSymbols = sizeSymbol;
							m_sizeAlertSymbols = sizeSymbol;
							m_sizeFlagSymbols = sizeSymbol;
							cDC.SelectObject(pOldFont);
							cTextFont.DeleteObject();
							break;
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)))
						{
							for (nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION))) ? ((!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING))) ? ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_ERROR : -1) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_WARNING) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_INFORMATION; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pAlertSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, pszText).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS)))
						{
							for (nIndex = 0, nCount = sizeof(nSymbol) / sizeof(UINT), nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK : -1, nSymbol[1] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE : ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING : ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS : ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE : -1))), nSymbol[2] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_GROUPED : -1, nSymbol[3] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_BLOCKED : -1; nIndex < nCount; nIndex++)
							{
								if (bState  &&  nSymbol[nIndex] != (UINT)-1) m_pFlagSymbols[nSymbol[nIndex]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, nCount, nIndex).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								continue;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT : nSymbol[0], nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)))
						{
							for (nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO : -1, nSymbol[0] = (_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS)))
						{
							nSymbol[0] = (!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE))) ? ((!_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED))) ? ((_tcsstr(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_DISABLED) : TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE;
							if (bState) m_pCheckFlagSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
						}
						else if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT)))
						{
							for (nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE : -1, nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN : nSymbol[0], nSymbol[0] = (!lstrcmp(pszText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED))) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED : nSymbol[0]; nSymbol[0] != (UINT)-1; )
							{
								if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, 1, 0).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
								break;
							}
							for (szStage = pszText, szStages.RemoveAll(); !szStage.IsEmpty() && nSymbol[0] == (UINT)-1; szStage = (nPos >= 0) ? (szStage.Mid(nPos + lstrlen(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
							{
								if ((nPos = szStage.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR))) >= 0)
								{
									szStages.Add(szStage.Left(nPos));
									continue;
								}
								szStages.Add(szStage);
							}
							for (nIndex = 0, nCount = (INT)szStages.GetSize(); nIndex < nCount; nIndex++)
							{
								for (nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE : -1, nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN : nSymbol[0], nSymbol[0] = (szStages.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNVERIFIED : nSymbol[0]; nSymbol[0] != (UINT)-1; )
								{
									if (bState) m_pResultSymbols[nSymbol[0]]->TransparentBlt(cDC.GetSafeHdc(), m_wndContentCtrl.m_wTextIndent[0] + CalcTelecommandSymbolPosition(nItem, nColumn, nCount, nIndex).left - rText[1].left, m_wndContentCtrl.m_wTextSpacing[0], sizeSymbol.cx, sizeSymbol.cy, nColor[1]);
									break;
								}
							}
						}
					}
					ptBitmap.x = max(rText[2].left - rText[1].left + m_wndContentCtrl.m_wTextIndent[0], 0);
					ptBitmap.y = max(rText[2].top - rText[1].top + m_wndContentCtrl.m_wTextSpacing[0], 0);
					pDC->BitBlt(max(rText[1].left - m_wndContentCtrl.m_wTextIndent[0], rText[2].left), max(rText[1].top - m_wndContentCtrl.m_wTextSpacing[0], rText[2].top), min(sizeBitmap.cx - ptBitmap.x, rText[2].Width()), min(sizeBitmap.cy - ptBitmap.y, rText[2].Height()), &cDC, ptBitmap.x, ptBitmap.y, SRCCOPY);
					cDC.SelectObject(pOldBitmap);
				}
				cBitmap.DeleteObject();
			}
			cDC.DeleteDC();
		}
		break;
	}
}

BOOL CTCAutomaticStackPageTextView::DrawBackground(CDC *pDC, INT nItem, INT nColumn, CONST RECT &rItem)
{
	CDC  cDC[2];
	INT  nWidth;
	INT  nHeight;
	BOOL  bBackground;
	CBitmap  cBitmap[2];
	CBitmap  *pOldBitmap[2];
	CTCAutomaticStackItem  *pItem;
	BLENDFUNCTION  sBlend;

	if (cDC[0].CreateCompatibleDC(pDC))
	{
		if (cDC[1].CreateCompatibleDC(pDC))
		{
			if (cBitmap[0].CreateCompatibleBitmap(pDC, (nWidth = rItem.right - rItem.left), (nHeight = rItem.bottom - rItem.top)))
			{
				if (cBitmap[1].CreateCompatibleBitmap(pDC, nWidth, nHeight))
				{
					if ((pOldBitmap[0] = cDC[0].SelectObject(&cBitmap[0])))
					{
						if ((pOldBitmap[1] = cDC[1].SelectObject(&cBitmap[1])))
						{
							for (sBlend.BlendFlags = 0, sBlend.BlendOp = AC_SRC_OVER, sBlend.AlphaFormat = 0, sBlend.SourceConstantAlpha = TCAUTOMATICSTACKPAGETEXTVIEW_COLUMNTRANSPARENCY; nWidth > 0 && nHeight > 0; )
							{
								for (cDC[0].FillSolidRect(0, 0, nWidth, nHeight, m_nBackgroundColor[nItem % 2]), cDC[1].FillSolidRect(0, 0, nWidth, nHeight, VGA_COLOR_WHITE), cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend); (pItem = m_pItems[0].GetAt(nItem)) && (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDSEND || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDUPLINK); )
								{
									cDC[0].FillSolidRect(0, 0, nWidth, nHeight, LookupStatusColor(pItem->GetResult(), pItem->GetStatus()));
									cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
									break;
								}
								for (sBlend.SourceConstantAlpha = 0xFF - 2 * sBlend.SourceConstantAlpha; (pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected(); )
								{
									for (cDC[0].SetTextColor(pDC->GetTextColor()); (bBackground = CTextView::DrawBackground(&cDC[0], -(nItem + 1), nColumn, CRect(0, 0, nWidth, nHeight))); )
									{
										cDC[1].AlphaBlend(0, 0, nWidth, nHeight, &cDC[0], 0, 0, nWidth, nHeight, sBlend);
										break;
									}
									for (pDC->SetTextColor(cDC[0].GetTextColor()); !bBackground; )
									{
										cDC[1].BitBlt(0, 0, nWidth, nHeight, &cDC[0], 0, 0, SRCCOPY);
										break;
									}
									break;
								}
								pDC->BitBlt(rItem.left, rItem.top, nWidth, nHeight, &cDC[1], 0, 0, SRCCOPY);
								break;
							}
							cDC[0].SelectObject(pOldBitmap[0]);
							cDC[1].SelectObject(pOldBitmap[1]);
							cBitmap[0].DeleteObject();
							cBitmap[1].DeleteObject();
							cDC[0].DeleteDC();
							cDC[1].DeleteDC();
							return TRUE;
						}
						cDC[0].SelectObject(pOldBitmap[0]);
					}
					cBitmap[1].DeleteObject();
				}
				cBitmap[0].DeleteObject();
			}
			cDC[1].DeleteDC();
		}
		cDC[0].DeleteDC();
	}
	return FALSE;
}

CTCAutomaticStackPageView *CTCAutomaticStackPageTextView::GetParent() CONST
{
	return((CTCAutomaticStackPageView *)CTextView::GetParent());
}

CTCAutomaticStackWnd *CTCAutomaticStackPageTextView::GetParentDisplay() CONST
{
	CTCAutomaticStackPageView  *pView;

	return(((pView = GetParent())) ? pView->GetParentDisplay() : (CTCAutomaticStackWnd *)NULL);
}

BOOL CTCAutomaticStackPageTextView::ShowTelecommandProperties(INT nIndex)
{
	INT  nItem;
	INT  nItems;
	BOOL  bResult;
	CTCAutomaticStackItem  *pItem[3];
	CTCAutomaticStackItems  pItems[2];
	CDatabaseTCParameters  pParameters;
	CTCAutomaticStackComposedItem  cComposedItem;
	CTCAutomaticStackItemPropertiesDialog  cTCFunctionPropertiesDialog;
	CTCAutomaticStackComposedItemPropertiesDialog  cTCSequencePropertiesDialog;
	CTCAutomaticStackHistoricalItemPropertiesDialog  cHistoricalTCFunctionPropertiesDialog;
	CTCAutomaticStackHistoricalComposedItemPropertiesDialog  cHistoricalTCSequencePropertiesDialog;

	if (Lock())
	{
		if ((pItem[0] = m_pItems[0].GetAt(nIndex)))
		{
			if ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)
			{
				if (m_pItems[0].Collect(nIndex, pItems[0]) > 0 && pItems[0].GetSize() == 1)
				{
					if (GetDatabase()->GetTCFunctionBlocks()->Find(pItem[0]->GetName()) < 0)
					{
						if ((pItem[1] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
						{
							for (ActivateTelecommand(nIndex), pItem[1]->Copy(pItem[0]), m_bProperties = TRUE, Unlock(); (bResult = (cTCFunctionPropertiesDialog.Create(GetParentDisplay(), pItem[1]) == IDOK)); )
							{
								if ((pItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP)
								{
									if (pItems[1].Add(pItem[1]) >= 0)
									{
										ReloadTelecommands(pItems[1]);
										break;
									}
									delete pItem[1];
									break;
								}
								if ((pItem[2] = new CTCAutomaticStackItem))
								{
									if (pItem[2]->Copy(pItem[1]))
									{
										pItem[2]->SetFlags((pItem[2]->GetFlags() & ~TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP) | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP);
										pItem[2]->SetAttributes((pItem[2]->GetAttributes() & ~TCFUNCTION_EXETYPE_FIRSTSTEP) | TCFUNCTION_EXETYPE_SECONDSTEP);
										pItem[2]->SetReleaseInterlock(EMPTYSTRING);
										pItem[2]->SetInterlock(EMPTYSTRING);
										if (pItems[1].Add(pItem[1]) >= 0)
										{
											if (pItems[1].Add(pItem[2]) >= 0)
											{
												ReloadTelecommands(pItems[1]);
												break;
											}
											delete pItem[2];
											break;
										}
									}
									delete pItem[2];
								}
								delete pItem[1];
								break;
							}
							for (ActivateTelecommand(nIndex), m_bProperties = FALSE; !bResult; )
							{
								delete pItem[1];
								break;
							}
							SetFocus();
							return TRUE;
						}
						Unlock();
						return FALSE;
					}
					if ((pItem[1] = pItems[0].GetAt((INT)pItems[0].GetUpperBound())))
					{
						pItem[1]->SetMembership(pItem[0]->GetName());
						pItem[1]->SetMembershipDescription(pItem[0]->GetDescription());
						pItem[1]->SetMembershipSize(1);
						pItem[1]->SetMembershipID(0);
					}
				}
				if ((pItem[1] = ((nItems = (INT)pItems[0].GetSize()) >= 1) ? pItems[0].GetAt(0) : (CTCAutomaticStackItem *)NULL))
				{
					for (ActivateTelecommand(nIndex), cComposedItem.SetName(pItem[1]->GetMembership()), cComposedItem.SetDescription(pItem[1]->GetMembershipDescription()), pItem[1]->GetMembershipParameters(pParameters), cComposedItem.SetParameters(pParameters), cComposedItem.CTCAutomaticStackItems::Copy(&pItems[0]), m_bProperties = TRUE, Unlock(); cTCSequencePropertiesDialog.Create(GetParentDisplay(), &cComposedItem) == IDOK; )
					{
						if ((pItem[1] = (pItems[1].Copy(&cComposedItem) && ReloadTelecommands(pItems[1]) && nItems == 1) ? pItems[0].GetAt(nItems - 1) : (CTCAutomaticStackItem *)NULL) != (CTCAutomaticStackItem *)NULL)
						{
							for (pItem[1]->SetMembership(EMPTYSTRING), pItem[1]->SetMembershipDescription(EMPTYSTRING), pItem[1]->SetMembershipSize(0), pItem[1]->SetMembershipID(-1); (pItem[2] = m_pItems[0].GetAt((nItem = m_pItems[0].Find(pItem[1])))); )
							{
								DeleteTelecommand(nItem);
								delete pItem[2];
								break;
							}
						}
						break;
					}
					ActivateTelecommand(nIndex);
					m_bProperties = FALSE;
					SetFocus();
					return TRUE;
				}
			}
			if (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
			{
				if (m_pItems[0].Collect(nIndex, pItems[0]) > 0)
				{
					for (m_bProperties = TRUE, Unlock(); pItems[0].GetSize() == 1; )
					{
						cHistoricalTCFunctionPropertiesDialog.Create(GetParentDisplay(), pItems[0].GetAt((INT)pItems[0].GetUpperBound()));
						break;
					}
					for (; pItems[0].GetSize() > 1; )
					{
						cHistoricalTCSequencePropertiesDialog.Create(GetParentDisplay(), pItems[0]);
						break;
					}
					m_bProperties = FALSE;
					return TRUE;
				}
			}
		}
		Unlock();
	}
	return FALSE;
}
BOOL CTCAutomaticStackPageTextView::ShowTelecommandProperties(INT nIndex, CTCAutomaticStackComposedItem *pItem)
{
	CTCAutomaticStackItems  pItems;
	CTCAutomaticStackItemReleaseConstraintsDialog  cReleaseConstraintsDialog;

	for (m_bProperties = TRUE; cReleaseConstraintsDialog.Create(GetParentDisplay(), pItem, nIndex) == IDOK; )
	{
		if (pItems.Copy(pItem) && ReloadTelecommands(pItems))
		{
			m_bProperties = FALSE;
			return TRUE;
		}
		break;
	}
	return((m_bProperties = FALSE));
}

BOOL CTCAutomaticStackPageTextView::InsertTelecommand(INT nIndex, CTCAutomaticStackItem *pItem)
{
	CTextViewAttribute  cAttribute;

	for (TranslateTelecommand(pItem, &cAttribute); InsertText(nIndex, TranslateTelecommand(pItem, (nIndex == 0)), &cAttribute, FALSE); )
	{
		m_pItems[0].InsertAt(nIndex, pItem, 1);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::UpdateTelecommand(INT nIndex)
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	UINT  nResult;
	BOOL  bForced;
	BOOL  bCheck[10];
	BOOL  bAfterDispatch;
	BOOL  bEarlierExecution;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime[2];
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tTimeWindow[3];
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tExecutionOffset[2];
	CStringArray  szParameters;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CTCAutomaticStackItem  *pItem;

	if ((pItem = m_pItems[0].GetAt(nIndex)))
	{
		if (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED)
		{
			for (bForced = ((m_nTelecommandingFlags & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)) || (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV))) ? TRUE : FALSE, bCheck[0] = /*((m_nTelecommandingUplinkState & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) == (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? TRUE:FALSE*/ TRUE, bCheck[1] = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED || pItem->GetReleaseTime() > 0) ? ((pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && pItem->GetReleaseTime() <= tReleaseTime[2] && tReleaseInterval > 0 && (pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() >= tReleaseTime[2].GetTime() || (tReleaseTime[0] == 0 && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)))) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && pItem->GetReleaseTime() <= tReleaseTime[2] && tReleaseTime[0] <= tReleaseTime[1] && tReleaseTime[1] >= tReleaseTime[2]) || (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pItem->GetReleaseTime() <= tReleaseTime[2] && (pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() >= tReleaseTime[2].GetTime() || tReleaseInterval == 0 || bAfterDispatch)) || (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseInterval == 0 && tReleaseTime[1] == 0 && tReleaseTime[0] <= tReleaseTime[2]) || (!pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))) : TRUE, bCheck[2] = (((!pItem->GetExecutionTime(tExecutionTime[0]) && !pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && (((pItem->GetExecutionTime(tExecutionTime[0]) && tExecutionTime[0] >= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() && tExecutionTime[0] <= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[1].GetTotalSeconds())) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) && GetTMService()->CheckTMStreamCorrelation())) && (!pItem->GetExecutionOBRT(nExecutionOBRT) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime[0]) && tExecutionTime[0] >= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() && tExecutionTime[0] <= tReleaseTime[2].GetTime() + 1000000 * tExecutionOffset[1].GetTotalSeconds()))) ? TRUE : FALSE, bCheck[3] = (GetTCService()->CheckTCInterlock(pItem) || !m_bTelecommandingInterlockMode || bForced) ? TRUE : FALSE, bCheck[4] = (GetTCService()->IsCommandSourceSubSystemEnabled(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, pItem) || bForced) ? TRUE : FALSE, bCheck[5] = ((pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_ONBOARDBUFFER) != TCAUTOMATICSTACKITEM_FAILURE_PTV_ONBOARDBUFFER || bForced) ? TRUE : FALSE, bCheck[6] = (m_bTelecommandingReleaseWaitMode || !bCheck[5]) ? TRUE : FALSE, bCheck[7] = (abs((INT)(tReleaseTime[2].GetTimeInSeconds() - pItem->GetReleaseTime().GetTimeInSeconds())) <= 1 || pItem->GetReleaseTime() == 0) ? TRUE : FALSE, bCheck[8] = (m_nTelecommandingState & TCAUTOMATICSTACK_STATE_DEFAULT) ? TRUE : FALSE, nResult = pItem->GetResult(); (bCheck[9] = bCheck[0] && (bCheck[1] && (bCheck[6] || bCheck[7])) && bCheck[2] && bCheck[3] && bCheck[4] && bCheck[5] && bCheck[8]); )
			{
				pItem->SetResult((pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT | TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL | TCAUTOMATICSTACKITEM_FAILURE_PTV_UPLINK | TCAUTOMATICSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW | TCAUTOMATICSTACKITEM_FAILURE_PTV_EXECUTIONTIME | TCAUTOMATICSTACKITEM_FAILURE_PTV_INTERLOCK | TCAUTOMATICSTACKITEM_FAILURE_PTV_SUBSYSTEM | TCAUTOMATICSTACKITEM_FAILURE_PTV_ONBOARDBUFFER)) | TCAUTOMATICSTACKITEM_RESULT_PTV_GO);
				break;
			}
			if (!bCheck[9])
			{
				pItem->SetResult((((!bCheck[1] || (!bCheck[6] && !bCheck[7])) && (!pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) || pItem->GetReleaseTime().GetTime() > 0 || bAfterDispatch) && pItem->GetReleaseTime() < tReleaseTime[2]) || !bCheck[2]) ? ((pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT)) | TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL) : ((pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL)) | TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT));
				pItem->SetResult((!bCheck[0]) ? (pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PTV_UPLINK) : (pItem->GetResult() & ~TCAUTOMATICSTACKITEM_FAILURE_PTV_UPLINK));
				pItem->SetResult((!bCheck[1]) ? (pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW) : (pItem->GetResult() & ~TCAUTOMATICSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW));
				pItem->SetResult((!bCheck[2]) ? (pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PTV_EXECUTIONTIME) : (pItem->GetResult() & ~TCAUTOMATICSTACKITEM_FAILURE_PTV_EXECUTIONTIME));
				pItem->SetResult((!bCheck[3]) ? (pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PTV_INTERLOCK) : (pItem->GetResult() & ~TCAUTOMATICSTACKITEM_FAILURE_PTV_INTERLOCK));
				pItem->SetResult((!bCheck[4]) ? (pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PTV_SUBSYSTEM) : (pItem->GetResult() & ~TCAUTOMATICSTACKITEM_FAILURE_PTV_SUBSYSTEM));
			}
			if ((pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) == 0 && (m_nTelecommandingFlags & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)) == 0)
			{
				for (pItem->SetResult(pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY | TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS)); (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) && !GetTCService()->CheckTCOnBoardBufferQueue(pItem); )
				{
					pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP);
					break;
				}
				if (pItem->GetPreExeGroupRef() >= 0 && !pItem->GetExecutionTime(tExecutionTime[0]) && !pItem->GetExecutionOBRT(nExecutionOBRT))
				{
					if (!GetTCService()->CheckTCFunctionPreexecutionParameterGroup(pItem->GetPreExeGroupRef(), szParameters))
					{
						pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
						pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS);
					}
					if (GetTMService()->CheckTMStreamInterruption()) pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY);
				}
				for (nElement = 0, nElements = ((!pItem->GetExecutionTime(tExecutionTime[0]) || pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution)) && !pItem->GetExecutionOBRT(nExecutionOBRT)) ? (INT)pItem->GetSize() : -1; nElement < nElements; nElement++)
				{
					if ((pFunctionElement = pItem->GetAt(nElement)) && (pFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)) break;
					continue;
				}
				for (nParameter = 0, nParameters = (nElement == nElements) ? ((pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0) : -1; nParameter < nParameters; nParameter++)
				{
					if ((pPacketParameter = cPacket.GetAt(nParameter)) && (pPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)) break;
					continue;
				}
				for (; (nElement != nElements || nParameter != nParameters) && !GetTMService()->CheckTMStreamCorrelation(); )
				{
					pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION);
					break;
				}
				if (pItem->GetResult() & (TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY | TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS))
				{
					pItem->SetResult((pItem->GetResult() & ~TCAUTOMATICSTACKITEM_RESULT_PEV_GO) | TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO);
					return((pItem->GetResult() != nResult) ? TRUE : FALSE);
				}
			}
			pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
			pItem->SetResult((pItem->GetResult() & ~TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO) | TCAUTOMATICSTACKITEM_RESULT_PEV_GO);
			return((pItem->GetResult() != nResult) ? TRUE : FALSE);
		}
		for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED) && pItem->GetExecutionTime(tExecutionTime[0]) && tExecutionTime[0].GetTime() + 1000000 * (tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()) >= tExecutionTime[1].GetTime(); )
		{
			for (nResult = pItem->GetResult(); (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV)) == 0; )
			{
				for (pItem->SetResult(pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS)); (pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP) && !GetTCService()->CheckTCOnBoardBufferQueue(pItem); )
				{
					pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP);
					break;
				}
				if (pItem->GetPreExeGroupRef() >= 0)
				{
					if (!GetTCService()->CheckTCFunctionPreexecutionParameterGroup(pItem->GetPreExeGroupRef(), szParameters))
					{
						pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
						pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS);
					}
					if (GetTMService()->CheckTMStreamInterruption()) pItem->SetResult(pItem->GetResult() | TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY);
				}
				if (pItem->GetResult() & (TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY | TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS))
				{
					pItem->SetResult((pItem->GetResult() & ~TCAUTOMATICSTACKITEM_RESULT_PEV_GO) | TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO);
					return((pItem->GetResult() != nResult) ? TRUE : FALSE);
				}
				break;
			}
			pItem->SetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters);
			pItem->SetResult((pItem->GetResult() & ~(TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO | TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY | TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION | TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP | TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS)) | TCAUTOMATICSTACKITEM_RESULT_PEV_GO);
			return((pItem->GetResult() != nResult) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::DeleteTelecommand(INT nIndex)
{
	m_pItems[0].RemoveAt(nIndex);
	return DeleteText(nIndex, FALSE);
}

BOOL CTCAutomaticStackPageTextView::ActivateTelecommand(INT nIndex, BOOL bActivate, BOOL bRedraw)
{
	INT  nItem[2];
	INT  nItems[2];
	BOOL  bKeys;
	BOOL  bToggle;
	BOOL  bSelected;
	CPtrArray  pItems;
	CTCAutomaticStackItem  *pItem[2];

	if ((((pItem[0] = m_pItems[0].GetAt(nIndex)) && (((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK || (pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED && (m_nTelecommandingState & TCAUTOMATICSTACK_STATE_SUSPENDED)) || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE)) || (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL))) || nIndex < 0) && SetCurText((bActivate  &&  nIndex >= 0 && pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK) ? nIndex : -1))
	{
		for (nItem[1] = 0, nItems[1] = ((bKeys = (!HIBYTE(GetKeyState(VK_SHIFT)) && !HIBYTE(GetKeyState(VK_CONTROL)))) || nIndex < 0 || pItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ONSTACK) ? (INT)m_pItems[0].GetSize() : 0, bSelected = (nIndex >= 0) ? pItem[0]->IsSelected() : FALSE, bToggle = (nIndex < 0 || pItem[0]->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_ONSTACK) ? TRUE : FALSE, m_nSearchIndex = -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem[1])))
			{
				if (nIndex < 0 || bKeys)
				{
					pItem[1]->Select(FALSE);
					continue;
				}
			}
		}
		for (nItem[1] = 0, nItems[1] = (HIBYTE(GetKeyState(VK_SHIFT))) ? (INT)m_pItems[0].GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pItem[1] = m_pItems[0].GetAt(nItem[1])) && pItem[1]->IsSelected()) break;
			continue;
		}
		for (nItem[0] = min(nIndex, (nItem[1] = (nItem[1] == nItems[1] || nItems[1] < 0) ? nIndex : nItem[1])), nItems[0] = max(nIndex, nItem[1]); nItem[0] <= nItems[0] && nItem[0] < m_pItems[0].GetSize() && nIndex >= 0; nItem[0]++)
		{
			for (nItem[1] = 0, nItems[1] = ((pItem[0] = m_pItems[0].GetAt(nItem[0]))) ? m_pItems[0].Collect(nItem[0], pItems) : 0; nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pItem[1] = (CTCAutomaticStackItem *)pItems.GetAt(nItem[1])) != (CTCAutomaticStackItem *)NULL)
				{
					pItem[1]->Select((bActivate) ? ((bToggle) ? !bSelected : TRUE) : FALSE);
					continue;
				}
			}
		}
		for (GetParentDisplay()->UpdateTelecommands(GetParent()); bRedraw; )
		{
			DrawContent();
			break;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::IsActivatedTelecommand(INT nIndex) CONST
{
	CTCAutomaticStackItem  *pItem;

	return((((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && nIndex == GetCurText()) || ((m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) && (pItem = m_pItems[0].GetAt(nIndex)) && pItem->IsSelected())) ? TRUE : FALSE);
}

VOID CTCAutomaticStackPageTextView::ResetTelecommand(CTCAutomaticStackItem *pItem) CONST
{
	UINT  nOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CUIntArray  nReleaseIDs;

	pItem->SetFlags(pItem->GetFlags() & ~(TCAUTOMATICSTACKITEM_CHECKFLAG_PREAUTHORIZED | TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ALL));
	pItem->SetArmTime(0);
	pItem->SetDispatchTime(0);
	pItem->SetTransmissionTime(0);
	pItem->SetReleaseTime(0);
	pItem->SetVerificationTime(0);
	pItem->SetVerificationStageState();
	pItem->SetReleaseIDs(nReleaseIDs);
	pItem->SetExecutionTime((pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && !pItem->GetExecutionOBRT(nOBRT)) ? tExecutionTime : 0);
	pItem->Alert((pItem->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION : TCAUTOMATICSTACKITEM_ALERTTYPE_NONE, (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? 0 : -1, (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP | TCAUTOMATICSTACKITEM_EXECUTIONFLAG_2NDSTEP)) ? ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_1STSTEP) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_FIRSTSTEP_INFORMATION) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_SECONDSTEP_INFORMATION)) : EMPTYSTRING);
	pItem->SetResult(TCAUTOMATICSTACKITEM_RESULT_NONE);
	pItem->SetStatus(TCAUTOMATICSTACKITEM_STATUS_ONSTACK);
}

CString CTCAutomaticStackPageTextView::TranslateTelecommand(CONST CTCAutomaticStackItem *pItem, BOOL bFirst) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nCategory;
	INT  nCategories;
	INT  nSubSystem;
	INT  nSubSystems;
	INT  nBlockItem;
	INT  nBlockItems;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	BOOL  bBlockItemPrefix;
	BOOL  bEarlierExecution;
	UINT  nInterlockState;
	UINT  nExecutionOBRT;
	UINT  nVerificationState;
	UINT  nVerificationReason;
	DWORD  dwExecutionOffset;
	DWORD  dwReleaseOffset;
	CString  szItem;
	CString  szName;
	CString  szFlags;
	CString  szAlert;
	CString  szStatus;
	CString  szColumn;
	CString  szCategory;
	CString  szArgument;
	CString  szTCPacket;
	CString  szSubSystem;
	CString  szChecks[3];
	CString  szResult[3];
	CString  szAuthorization;
	CString  szDispatchTime;
	CString  szReleaseTime[4];
	CString  szExecutionTime[4];
	CString  szTransmissionTime;
	CString  szVerificationTime;
	CString  szVerificationState;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tTransmissionTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CTimeSpan  tTimeWindow[3];
	CTCInterlock  cInterlock[2];
	CStringArray  szCategories;
	CStringArray  szSubSystems;
	CStringTools  cStringTools;
	CLongUIntArray  nCategoryIDs;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCFunctions  pBlockedItems;
	CDatabaseTCFunctionElement  *pFunctionElement;
	CDatabaseTCPacketParameter  *pPacketParameter;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn))) == TCAUTOMATICSTACK_TITLEITEM_NUMBER)
		{
			szAlert = (pItem->IsAlerted() == TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION || pItem->IsAlerted(0) == TCAUTOMATICSTACKITEM_ALERTTYPE_INFORMATION) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION)) : EMPTYSTRING;
			szAlert = (pItem->IsAlerted() == TCAUTOMATICSTACKITEM_ALERTTYPE_WARNING || pItem->IsAlerted(0) == TCAUTOMATICSTACKITEM_ALERTTYPE_WARNING) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING)) : szAlert;
			szAlert = (pItem->IsAlerted() == TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR || pItem->IsAlerted(0) == TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR) ? (CString(GetSymbolDelimiter()) + STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR)) : szAlert;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAlert) : szAlert;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_NAME)
		{
			szName.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_NAME_FORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership());
			szName = (pItem->GetMembership().IsEmpty()) ? pItem->GetName() : szName;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szName) : szName;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION)
		{
			for (nBlockItem = 0, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems), bBlockItemPrefix = TRUE; nBlockItem < nBlockItems; nBlockItem++)
			{
				if ((pFunction = pBlockedItems.GetAt(nBlockItem)) && !pFunction->GetDescription().IsEmpty())
				{
					if (_istspace(pFunction->GetDescription().GetAt(0)))
					{
						bBlockItemPrefix = FALSE;
						break;
					}
				}
			}
			for (nBlockItem = 0, szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDescription()) : pItem->GetDescription(); nBlockItem < nBlockItems; nBlockItem++)
			{
				if ((pFunction = pBlockedItems.GetAt(nBlockItem)) != (CDatabaseTCFunction *)NULL  &&  !pFunction->GetDescription().IsEmpty())
				{
					for (szItem += (!nBlockItem) ? STRING(IDS_TCAUTOMATICSTACK_LIST_DESCRIPTION_BLOCKTITLESIGN) : EMPTYSTRING; !bBlockItemPrefix; )
					{
						szItem += EOL + pFunction->GetDescription();
						break;
					}
					szItem += (bBlockItemPrefix) ? (EOL + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_DESCRIPTION_BLOCKITEMPREFIX)) + pFunction->GetDescription()) : EMPTYSTRING;
				}
			}
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CATEGORY)
		{
			for (nCategory = 0, nCategories = GetDatabase()->EnumTCFunctionHazardousFlags(szCategories, nCategoryIDs), szCategory.Empty(); nCategory < nCategories; nCategory++)
			{
				if (pItem->GetAttributes() & nCategoryIDs.GetAt(nCategory))
				{
					szCategory = szCategories.GetAt(nCategory);
					break;
				}
			}
			szItem += (nColumn > 0) ? (CString(GetColumnDelimiter()) + szCategory) : szCategory;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM)
		{
			for (szItem += (nColumn > 0) ? (GetColumnDelimiter() + pItem->GetDestinationSubSystem()) : pItem->GetDestinationSubSystem(); pItem->GetTCPacket(&cPacket); )
			{
				for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
				{
					if (GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)) == cPacket.GetAPID()) break;
					continue;
				}
				for (szSubSystem.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_SUBSYSTEM_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(cPacket.GetAPID(), max(cStringTools.ConvertUIntToString((szSubSystems.GetSize() > 0) ? GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(szSubSystems.GetUpperBound())) : 0, 16).GetLength(), 3), 16)); nSubSystem < nSubSystems; )
				{
					szItem += szSubSystem;
					break;
				}
				break;
			}
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS)
		{
			for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) != TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, nArgumentsCount = 0; nArgument[1] < nArguments[1] && (nArgumentsCount < m_nArguments || m_nArguments < 0); nArgument[1]++)
			{
				if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && ((pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0 || m_bAllArguments))
				{
					szArgument.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
					szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
					nArgumentsCount++;
				}
			}
			for (nBlockItem = -1, nBlockItems = pItem->GetReleaseBlockedItems(pBlockedItems); nBlockItem < nBlockItems; nBlockItem++)
			{
				for (nArgument[0] = 0, nArguments[0] = ((pFunction = pBlockedItems.GetAt(nBlockItem))) ? (INT)pFunction->GetSize() : (INT)pItem->GetSize(); nArgument[0] < nArguments[0] && (nArgumentsCount < m_nArguments || m_nArguments < 0); nArgument[0]++)
				{
					if ((pFunctionElement = (nBlockItem >= 0) ? pFunction->GetAt(nArgument[0]) : pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && ((pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0 || m_bAllArguments))
					{
						szArgument.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_FORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText());
						szItem += (nColumn > 0) ? ((nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : (GetColumnDelimiter() + szArgument)) : ((nArgumentsCount > 0) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_SEPARATOR) + szArgument) : szArgument);
						nArgumentsCount++;
					}
				}
			}
			szItem += (nColumn > 0) ? ((!nArgumentsCount) ? ((nArguments[0] + nArguments[1] == 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_NONE)) : CString(GetColumnDelimiter())) : EMPTYSTRING) : ((nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TCAUTOMATICSTACK_LIST_ARGUMENTS_NONE) : EMPTYSTRING);
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_FLAGS)
		{
			if (pItem->GetInterlock(&cInterlock[0]) && pItem->GetReleaseInterlock(&cInterlock[1]))
			{
				szFlags.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_FORMAT), STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK), (cInterlock[1].GetState() == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE) : ((cInterlock[1].GetState() == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING) : ((cInterlock[1].GetState() == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS) : STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE))), (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED) : EMPTYSTRING, (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED) : EMPTYSTRING);
				szItem += (nColumn > 0) ? (GetColumnDelimiter() + szFlags) : szFlags;
				continue;
			}
			szFlags.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_FORMAT), (!pItem->GetInterlock().IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK) : EMPTYSTRING, ((nInterlockState = CheckTelecommandReleaseInterlockState(pItem)) != TCINTERLOCK_STATE_NONE) ? ((nInterlockState == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE) : ((nInterlockState == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING) : ((nInterlockState == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS) : ((nInterlockState == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE) : EMPTYSTRING)))) : EMPTYSTRING, (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_GROUPED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED) : EMPTYSTRING, (pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED) : EMPTYSTRING);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szFlags) : szFlags;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_TCPACKET)
		{
			szTCPacket = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetTag() : EMPTYSTRING;
			szItem += (nColumn > 0) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? (CString(GetColumnDelimiter()) + STRING(IDS_TCAUTOMATICSTACK_LIST_TCPACKET_BLOCKED)) : (GetColumnDelimiter() + szTCPacket)) : (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? STRING(IDS_TCAUTOMATICSTACK_LIST_TCPACKET_BLOCKED) : szTCPacket);
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME)
		{
			szDispatchTime = (pItem->GetDispatchTime() > 0) ? pItem->GetDispatchTime().FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_DISPATCHTIME_FORMAT)) : EMPTYSTRING;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szDispatchTime) : szDispatchTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME)
		{
			for (szReleaseTime[0] = STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FAILEDFORMAT); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				szReleaseTime[0] = tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT));
				break;
			}
			if (!tReleaseTime[0].GetTime() && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_IMMEDIATE) : STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_ASPOSSIBLE)) : STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_WITHPREVIOUS);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET)
		{
			for (szReleaseTime[0].Empty(); pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
			{
				szReleaseTime[0] = (!pItem->GetReleaseBlockID() || pItem->GetReleaseBlockID() == (UINT)-1) ? CTimeSpan(dwReleaseOffset / 1000).Format((dwReleaseOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_OFFSETFORMAT)) : CTimeSpan(0).Format(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_OFFSETFORMAT));
				szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_AFTERDISPATCH), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[2].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_AFTERPREVIOUS), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[3].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_AFTERBEGIN), (LPCTSTR)szReleaseTime[0]);
				szReleaseTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? (((pItem->GetFlags() & TCAUTOMATICSTACKITEM_RELEASEFLAG_AFTERPREVIOUS) || (pItem->GetReleaseBlockID() > 0 && pItem->GetReleaseBlockID() != (UINT)-1)) ? (((bFirst && (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)) || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[2]) : (((bFirst && (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)) || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szReleaseTime[0] : szReleaseTime[3])) : szReleaseTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME)
		{
			for (szTransmissionTime.Empty(); (tTransmissionTime = (pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? pItem->GetTransmissionTime() : 0) > 0; )
			{
				szTransmissionTime = tTransmissionTime.FormatGmt((pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_TRANSMISSIONTIME_FORMAT) : STRING(IDS_TCAUTOMATICSTACK_LIST_TRANSMISSIONTIME_FAILEDFORMAT));
				break;
			}
			szTransmissionTime = (pItem->GetStatus() != TCAUTOMATICSTACKITEM_STATUS_UPLINKED || tTransmissionTime <= 0) ? STRING(IDS_TCAUTOMATICSTACK_LIST_TRANSMISSIONTIME_NONE) : szTransmissionTime;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szTransmissionTime) : szTransmissionTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME)
		{
			szExecutionTime[0] = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
			szExecutionTime[0] = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime[0];
			szExecutionTime[0] = (!pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && szExecutionTime[0].IsEmpty()) ? STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET)
		{
			for (szExecutionTime[0].Empty(); pItem->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution); )
			{
				szExecutionTime[0] = CTimeSpan((TIMEKEY)(dwExecutionOffset / 1000)).Format((dwExecutionOffset >= 1000 * SECONDSPERDAY) ? STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_LONGOFFSETFORMAT) : STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_OFFSETFORMAT));
				szExecutionTime[0] = (!bEarlierExecution) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_POSITIVEOFFSETPREFIX) + szExecutionTime[0]) : (STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_NEGATIVEOFFSETPREFIX) + szExecutionTime[0]);
				szExecutionTime[1].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_AFTERDISPATCH), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[2].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_AFTERPREVIOUS), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[3].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_AFTERBEGIN), (LPCTSTR)szExecutionTime[0]);
				szExecutionTime[0] = ((pItem->GetAttributes() & TCFUNCTION_DISPFLAG_AUTHORIZATION) == 0) ? ((pItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_AFTERPREVIOUS) ? (((bFirst && (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)) || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[2]) : (((bFirst && (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)) || (!pItem->GetMembership().IsEmpty() && !pItem->GetMembershipID())) ? szExecutionTime[0] : szExecutionTime[3])) : szExecutionTime[1];
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szExecutionTime[0]) : szExecutionTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION)
		{
			szAuthorization = STRING(IDS_TCAUTOMATICSTACK_LIST_AUTHORIZATION_AUTOMATIC);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szAuthorization) : szAuthorization;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW)
		{
			for (szReleaseTime[0].Empty(); (tReleaseTime[0] = pItem->GetReleaseTime()) > 0; )
			{
				if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch))
				{
					szReleaseTime[0].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
					szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)));
					szReleaseTime[0] = (tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[1];
				}
				break;
			}
			if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]))
			{
				szReleaseTime[0].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseTime[1].GetTimeInSeconds() - tReleaseTime[0].GetTimeInSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_IMMEDIATETIMEFORMAT), (LPCTSTR)tReleaseTime[1].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[2].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseTime[1] > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			else if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval))
			{
				szReleaseTime[0].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_FORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[1].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_IMMEDIATEOFFSETFORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tReleaseInterval.GetTotalSeconds()));
				szReleaseTime[2].Format(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDTIMEFORMAT), (LPCTSTR)tReleaseTime[0].FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_RELEASETIME_FORMAT)));
				szReleaseTime[0] = (tReleaseTime[0] > 0) ? ((tReleaseInterval > 0) ? szReleaseTime[0] : szReleaseTime[2]) : szReleaseTime[1];
			}
			for (; !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && !pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval); )
			{
				szReleaseTime[0] = STRING(IDS_TCAUTOMATICSTACK_LIST_PTVTIMEWINDOW_UNLIMITEDFORMAT);
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szReleaseTime[0]) : szReleaseTime[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)
		{
			szChecks[0] = (((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV) != TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPTV  &&  m_bTelecommandingInterlockMode) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPTV) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF) : STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON)) : STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[0]) : szChecks[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)
		{
			szResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_GO) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO) : EMPTYSTRING;
			szResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_WAIT) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT) : szResult[0];
			szResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL) : szResult[0];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[0]) : szResult[0];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)
		{
			szChecks[1] = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE || pItem->GetPreExeGroupRef() >= 0) ? ((((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) != TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLEPEV) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDEPEV) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF) : STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON)) : STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED)) : STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[1]) : szChecks[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)
		{
			szResult[1] = (pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PEV_GO)) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO) : EMPTYSTRING;
			szResult[1] = (pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO)) ? STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO) : szResult[1];
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[1]) : szResult[1];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW)
		{
			for (szVerificationTime.Empty(); (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) && (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) == 0; )
			{
				for (tTimeWindow[0] = pItem->CalcVerificationTimeWindowOffset(0), tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); (pItem->GetExecutionOBRT(nExecutionOBRT) && GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) || pItem->GetExecutionTime(tExecutionTime); )
				{
					szVerificationTime.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVTIMEWINDOW_TIMETAGGEDFORMAT), (LPCTSTR)CTimeTag(tExecutionTime.GetTime() + 1000000 * tTimeWindow[0].GetTotalSeconds()).FormatGmt(IDS_TCAUTOMATICSTACK_LIST_EXECUTIONTIME_FORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[1].GetTotalSeconds()));
					break;
				}
				if (szVerificationTime.IsEmpty())
				{
					if (pItem->GetExecutionOBRT(nExecutionOBRT))
					{
						szVerificationTime.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVTIMEWINDOW_OBRTFORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[1].GetTotalSeconds()));
						break;
					}
					szVerificationTime.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVTIMEWINDOW_SCHEDULEDFORMAT), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[0].GetTotalSeconds()), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[0].GetTotalSeconds() + tTimeWindow[1].GetTotalSeconds()));
				}
				break;
			}
			if (szVerificationTime.IsEmpty())
			{
				for (tTimeWindow[1] = pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow[2])) ? tTimeWindow[2] : 0); pItem->GetStatus() >= TCAUTOMATICSTACKITEM_STATUS_RELEASED && (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) == 0 && pItem->GetVerificationTime() > 0; )
				{
					szVerificationTime.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVTIMEWINDOW_HISTORICALFORMAT), (LPCTSTR)pItem->GetVerificationTime().FormatGmt(STRING(IDS_TCAUTOMATICSTACK_LIST_VERIFICATIONTIME_FORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(tTimeWindow[1].GetTotalSeconds()));
					break;
				}
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szVerificationTime) : szVerificationTime;
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS)
		{
			szChecks[2] = (pItem->GetType() == TCAUTOMATICSTACKITEM_TYPE_PROCEDURE || pItem->GetExeVerGroupRef() >= 0) ? ((((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) != TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV) ? (((pItem->GetFlags() | m_nTelecommandingFlags) & TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF) : STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON)) : STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED)) : STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE);
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szChecks[2]) : szChecks[2];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT)
		{
			for (szResult[2].Empty(); pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE; )
			{
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE), (nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START), (nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS), (nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION), nVerificationState, nVerificationReason))
				{
					szVerificationState.Format(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FORMAT), MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION), (nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) : ((nVerificationState == TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED) : EMPTYSTRING))))));
					szResult[2] += (!szResult[2].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR) + szVerificationState) : szVerificationState;
				}
				if (szResult[2].IsEmpty())
				{
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) : EMPTYSTRING;
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) : szResult[2];
					szResult[2] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED) : szResult[2];
				}
				break;
			}
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szResult[2]) : szResult[2];
			continue;
		}
		if (LookupColumnName(szColumn) == TCAUTOMATICSTACK_TITLEITEM_STATUS)
		{
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_ONSTACK) : EMPTYSTRING;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ARMED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_ARMED) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_DISPATCHED) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_RELEASED) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_NOTRELEASED) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_NOTEXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDRELEASE) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SENT) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDSEND) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDSEND) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_UPLINKED) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_EXECUTED)) : szStatus;
			szStatus = (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_FAILEDUPLINK) ? ((pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDUPLINK) : STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILEDEXECUTION)) : szStatus;
			if ((pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_RELEASED || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_SENT || pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_UPLINKED) && pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE && (pItem->GetFlags() & (TCAUTOMATICSTACKITEM_CHECKFLAG_OVERRIDECEV | TCAUTOMATICSTACKITEM_CHECKFLAG_DISABLECEV)) == 0 && pItem->GetExeVerGroupRef() >= 0)
			{
				szStatus += (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_VERIFYING))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SUCCESSFUL))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_FAILED))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_UNKNOWN))) : EMPTYSTRING;
				szStatus += (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_SEPARATOR)) + CString(STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_UNVERIFIED))) : EMPTYSTRING;
			}
			szStatus += (pItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED  &&  pItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE  &&  pItem->GetAuthorizationStatus() == TCAUTOMATICSTACKITEM_AUTHORIZATIONSTATUS_DENIED) ? (CString(SPACE) + STRING(IDS_TCAUTOMATICSTACK_LIST_STATUS_DENIED)) : EMPTYSTRING;
			szItem += (nColumn > 0) ? (GetColumnDelimiter() + szStatus) : szStatus;
			continue;
		}
	}
	return szItem;
}
BOOL CTCAutomaticStackPageTextView::TranslateTelecommand(CONST CTCAutomaticStackItem *pItem, CTextViewAttribute *pAttribute) CONST
{
	INT  nColumn;
	INT  nColumns;
	INT  nColumnID;
	UINT  nAlertType;
	BOOL  bAlertFlag;
	CTextViewAttribute  cAttribute;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(), pAttribute->Copy(&cAttribute); nColumn < nColumns; nColumn++)
	{
		pAttribute->SetColumnColor(nColumn, LookupColumnColor(nColumn));
		continue;
	}
	for (nColumnID = (pItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE); nColumnID & TCAUTOMATICSTACK_TITLEITEMS_ALL; nColumnID <<= 1)
	{
		if (pItem->IsAlerted(nColumnID) != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE  &&  FindColumnIndex(LookupColumnName(nColumnID)) < 0)
		{
			pAttribute->SetColumnBlinking(-1, TRUE);
			return TRUE;
		}
	}
	for (nColumn = 0, nColumns = (pItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) ? (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize() : 0, bAlertFlag = FALSE; nColumn < nColumns; nColumn++)
	{
		if ((nAlertType = pItem->IsAlerted(LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))) != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE)
		{
			pAttribute->SetColumnColor(nColumn, LookupAlertColor(nColumn, nAlertType));
			pAttribute->SetColumnBlinking(nColumn, TRUE);
			bAlertFlag = TRUE;
			continue;
		}
		pAttribute->SetColumnColor(nColumn, LookupColumnColor(nColumn));
		pAttribute->SetColumnBlinking(nColumn, FALSE);
	}
	if (pItem->IsAlerted() != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE  &&  pItem->IsAlerted(0) == TCAUTOMATICSTACKITEM_ALERTTYPE_NONE  &&  !bAlertFlag) pAttribute->SetColumnBlinking(-1, TRUE);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::AdjustTelecommandAlerts(CONST CTCItem *pAlertItem, CTCAutomaticStackItem *pItem, BOOL bAlert) CONST
{
	UINT  nResult[2];
	CTimeTag  tAcknowledgeTime;

	if (pAlertItem->GetFlags() & TCITEM_ACKNOWLEDGEFLAG_ALL)
	{
		for (tAcknowledgeTime = pItem->GetAcknowledgeTime(); !bAlert || pItem->CTCItem::Copy(pAlertItem); )
		{
			for (pItem->SetFlags(pItem->GetFlags() & ~TCAUTOMATICSTACKITEM_ACKNOWLEDGEFLAG_ALL); pItem->GetAcknowledgeTime() != tAcknowledgeTime || tAcknowledgeTime == 0; )
			{
				pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ANY);
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	if (bAlert)
	{
		if (pAlertItem->GetStatus() != TCITEM_STATUS_RELEASED  &&  pAlertItem->GetStatus() != TCITEM_STATUS_SENT  &&  pAlertItem->GetStatus() != TCITEM_STATUS_UPLINKED  &&  pAlertItem->GetStatus() != TCITEM_STATUS_EXECUTED)
		{
			if (((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PTV_FAIL)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL))) || ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PEV_NOGO)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO)))) pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME, (pAlertItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTION_FAILURE));
			if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PTV_FAIL)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PTV_FAIL))) pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_PTVRESULT, (pAlertItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTION_FAILURE));
			if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_PEV_NOGO)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_PEV_NOGO))) pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_PEVRESULT, (pAlertItem->GetType() != TCAUTOMATICSTACKITEM_TYPE_PROCEDURE) ? STRING(IDS_TCAUTOMATICSTACK_MESSAGE_RELEASE_FAILURE) : STRING(IDS_TCAUTOMATICSTACK_MESSAGE_EXECUTION_FAILURE));
		}
		if ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_FAILED)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED))) pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_CEVRESULT, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_VERIFICATION_FAILURE), FALSE);
		if (((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_UNKNOWN)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN))) || ((nResult[0] = (pAlertItem->GetResult() & TCITEM_RESULT_CEV_UNVERIFIED)) && nResult[0] != (nResult[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)))) pItem->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR, TCAUTOMATICSTACK_TITLEITEM_CEVRESULT, STRING(IDS_TCAUTOMATICSTACK_MESSAGE_VERIFICATION_ILLEGAL), FALSE);
		return pItem->CTCItem::Copy(pAlertItem);
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::CheckTelecommandFilter(CONST CTCItem *pItem) CONST
{
	INT  nIndex;
	INT  nCount;
	BOOL  bStage;
	UINT  nState;
	UINT  nReason;
	UINT  nSubSystemID;
	CDatabaseTCPacket  cPacket;

	if (pItem->GetStatus() == TCITEM_STATUS_RELEASED || pItem->GetStatus() == TCITEM_STATUS_NOTRELEASED || pItem->GetStatus() == TCITEM_STATUS_FAILEDRELEASE || pItem->GetStatus() == TCITEM_STATUS_SENT || pItem->GetStatus() == TCITEM_STATUS_FAILEDSEND || pItem->GetStatus() == TCITEM_STATUS_UPLINKED || pItem->GetStatus() == TCITEM_STATUS_FAILEDUPLINK)
	{
		if ((pItem->GetFlags() & TCITEM_LINKAGEFLAG_BLOCKED) != TCITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID())
		{
			if (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMAND) && pItem->GetType() != TCITEM_TYPE_FUNCTION) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDITEM) && pItem->GetName() != m_szFilterTelecommand[0]) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSEQUENCE) && pItem->GetMembership() != m_szFilterTelecommand[1])) return FALSE;
			if (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPEIMMEDIATE) && (pItem->GetFlags() & TCITEM_EXECUTIONFLAG_IMMEDIATE) != TCITEM_EXECUTIONFLAG_IMMEDIATE) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPETIMETAGGED) && (pItem->GetFlags() & TCITEM_EXECUTIONFLAG_TIMETAGGED) != TCITEM_EXECUTIONFLAG_TIMETAGGED) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE1STSTEP) && (pItem->GetFlags() & TCITEM_EXECUTIONFLAG_1STSTEP) != TCITEM_EXECUTIONFLAG_1STSTEP) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDTYPE2NDSTEP) && (pItem->GetFlags() & TCITEM_EXECUTIONFLAG_2NDSTEP) != TCITEM_EXECUTIONFLAG_2NDSTEP)) return FALSE;
			for (nIndex = 0, nCount = (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYTELECOMMANDSUBSYSTEMS) ? (INT)m_nFilterSubSystems.GetSize() : -1, nSubSystemID = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetAPID() : -1; nIndex < nCount; nIndex++)
			{
				if (m_nFilterSubSystems.GetAt(nIndex) == nSubSystemID) break;
				continue;
			}
			if (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONPASSED) && (pItem->GetResult() & (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_GO)) != (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_GO)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGETRANSMISSIONFAILED) && (pItem->GetResult() & (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_GO)) == (TCAUTOMATICSTACKITEM_RESULT_PTV_GO | TCAUTOMATICSTACKITEM_RESULT_PEV_GO))) return FALSE;
			if ((((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED)) && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) != TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) || (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED)) && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) != TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) || (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN)) && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) != TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) || (((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED) || (m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED)) && (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) != TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)) return FALSE;
			for (bStage = pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE), nState, nReason); ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEPASSED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEFAILED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNKNOWN) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEACCEPTANCEUNVERIFIED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)); ) return FALSE;
			for (bStage = pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START), nState, nReason); ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTPASSED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTFAILED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNKNOWN) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGESTARTUNVERIFIED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)); ) return FALSE;
			for (bStage = pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS), nState, nReason); ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSPASSED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSFAILED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNKNOWN) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGEPROGRESSUNVERIFIED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)); ) return FALSE;
			for (bStage = pItem->GetVerificationStageState(MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION), nState, nReason); ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONPASSED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONFAILED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNKNOWN) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN)) || ((m_nFilterMode[0] & TCAUTOMATICSTACK_FILTERMODE_BYVERIFICATIONSTAGECOMPLETIONUNVERIFIED) && (!bStage || nState != TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)); ) return FALSE;
			return((nIndex < nCount || nCount < 0) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::CheckTelecommandReleaseWindow(CONST CTCAutomaticStackItem *pItem) CONST
{
	CTimeTag  tTime;

	return CheckTelecommandReleaseWindow(tTime, pItem);
}
BOOL CTCAutomaticStackPageTextView::CheckTelecommandReleaseWindow(CONST CTimeTag &tTime, CONST CTCAutomaticStackItem *pItem) CONST
{
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeTag  tReleaseTime[3];
	CTimeSpan  tReleaseInterval;

	if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseInterval) && tReleaseInterval > 0)
	{
		if (tReleaseTime[0] > 0 && tReleaseTime[0].GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		if (tReleaseTime[0] == 0 && (!pItem->GetReleaseTime().GetTime() || pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime())) return TRUE;
		return FALSE;
	}
	if (pItem->GetReleaseTimeWindow(tReleaseTime[0], tReleaseTime[1]) && tReleaseTime[1] > 0)
	{
		if (tReleaseTime[1].GetTime() > tReleaseTime[2].GetTime()) return TRUE;
		return FALSE;
	}
	if (pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && tReleaseInterval > 0)
	{
		if (pItem->GetReleaseTime() > 0 && pItem->GetReleaseTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		if (pItem->GetReleaseTime() == 0 && pItem->GetDispatchTime() > 0 && pItem->GetDispatchTime().GetTime() + 1000000 * tReleaseInterval.GetTotalSeconds() > tReleaseTime[2].GetTime()) return TRUE;
		return FALSE;
	}
	return((pItem->GetReleaseTime() > 0 || !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::CheckTelecommandReleaseTime(CONST CTimeTag &tTime, CONST CTCAutomaticStackItem *pItem) CONST
{
	INT  nItem;
	INT  nItems;
	BOOL  bAfterDispatch;
	DWORD  dwReleaseOffset;
	CTimeSpan  tReleaseInterval;
	CTCAutomaticStackItem  *pStackItem;

	for (nItem = (nItems = (pItem->GetStatus() <= TCAUTOMATICSTACKITEM_STATUS_ONSTACK) ? (INT)m_pItems[0].GetSize() : 0) - 1; nItem >= 0; nItem--)
	{
		if ((pStackItem = m_pItems[0].GetAt(nItem)) && pStackItem->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_DISPATCHED)
		{
			nItem = ((pItem->GetReleaseTime() > 0 && pItem->GetReleaseTime() >= pStackItem->GetReleaseTime()) || (pItem->GetReleaseTime() == 0 && ((pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && ((pStackItem->GetReleaseTime() <= tTime.GetTime() + 1000 * (TIMETAG)dwReleaseOffset  &&  bAfterDispatch) || !bAfterDispatch))) || (!pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch) && pStackItem->GetReleaseTime() <= tTime))) ? (nItem - nItem - 1) : nItem;
			break;
		}
	}
	return((nItem < 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackPageTextView::CheckTelecommandExecutionTime(CONST CTCAutomaticStackItem *pItem) CONST
{
	CTimeTag  tTime;

	return CheckTelecommandExecutionTime(tTime, pItem);
}
BOOL CTCAutomaticStackPageTextView::CheckTelecommandExecutionTime(CONST CTimeTag &tTime, CONST CTCAutomaticStackItem *pItem) CONST
{
	UINT  nExecutionOBRT;
	CTimeTag  tExecutionTime;
	CTimeSpan  tExecutionOffset[2];

	return(((!pItem->GetExecutionTime(tExecutionTime) && !pItem->GetExecutionOBRT(nExecutionOBRT)) || (GetTCService()->GetTCFunctionExecutionTimeOffsets(tExecutionOffset[0], tExecutionOffset[1]) && (!pItem->GetExecutionOBRT(nExecutionOBRT) || GetTCService()->ConvertOBRTToTime(nExecutionOBRT, tExecutionTime)) && tTime.GetTime() + 1000000 * tExecutionOffset[0].GetTotalSeconds() <= tExecutionTime.GetTime() && tTime.GetTime() + 1000000 * (TIMETAG)tExecutionOffset[1].GetTotalSeconds() >= tExecutionTime.GetTime())) ? TRUE : FALSE);
}

UINT CTCAutomaticStackPageTextView::CheckTelecommandReleaseInterlockState(CONST CTCAutomaticStackItem *pItem) CONST
{
	CString  szInterlock;
	UINT  nInterlockState;
	BOOL  bInterlock;

	return((pItem->GetReleaseInterlock(szInterlock, bInterlock) && GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlock, nInterlockState)) ? nInterlockState : TCINTERLOCK_STATE_NONE);
}

CString CTCAutomaticStackPageTextView::LookupColumnName(UINT nColumn) CONST
{
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NUMBER) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NAME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CATEGORY) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_FLAGS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TCPACKET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT);
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_STATUS) return STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS);
	return EMPTYSTRING;
}
UINT CTCAutomaticStackPageTextView::LookupColumnName(LPCTSTR pszColumn) CONST
{
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER))) return TCAUTOMATICSTACK_TITLEITEM_NUMBER;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME))) return TCAUTOMATICSTACK_TITLEITEM_NAME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION))) return TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY))) return TCAUTOMATICSTACK_TITLEITEM_CATEGORY;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM))) return TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS))) return TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS))) return TCAUTOMATICSTACK_TITLEITEM_FLAGS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET))) return TCAUTOMATICSTACK_TITLEITEM_TCPACKET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME))) return TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME))) return TCAUTOMATICSTACK_TITLEITEM_RELEASETIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET))) return TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME))) return TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME))) return TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET))) return TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION))) return TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW))) return TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS))) return TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT))) return TCAUTOMATICSTACK_TITLEITEM_PTVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS))) return TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT))) return TCAUTOMATICSTACK_TITLEITEM_PEVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW))) return TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS))) return TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT))) return TCAUTOMATICSTACK_TITLEITEM_CEVRESULT;
	if (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS))) return TCAUTOMATICSTACK_TITLEITEM_STATUS;
	return 0;
}

INT CTCAutomaticStackPageTextView::LookupColumnsName(CONST CUIntArray &nColumns, CStringArray &szColumns) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)nColumns.GetSize(), szColumns.RemoveAll(); nIndex < nCount; nIndex++)
	{
		szColumns.Add(LookupColumnName(nColumns.GetAt(nIndex)));
		continue;
	}
	return((nCount == szColumns.GetSize()) ? (INT)szColumns.GetSize() : 0);
}

COLORREF CTCAutomaticStackPageTextView::LookupColumnColor(UINT nColumn) CONST
{
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NUMBER) return GetDatabase()->GetTCAutomaticStackNumberColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_NAME) return GetDatabase()->GetTCAutomaticStackNameColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) return GetDatabase()->GetTCAutomaticStackDescriptionColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CATEGORY) return GetDatabase()->GetTCAutomaticStackCategoryColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) return GetDatabase()->GetTCAutomaticStackSubSystemColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) return GetDatabase()->GetTCAutomaticStackArgumentsColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_FLAGS) return GetDatabase()->GetTCAutomaticStackFlagsColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TCPACKET) return GetDatabase()->GetTCAutomaticStackTCPacketColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) return GetDatabase()->GetTCAutomaticStackDispatchTimeColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) return GetDatabase()->GetTCAutomaticStackReleaseTimeColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) return GetDatabase()->GetTCAutomaticStackReleaseTimeOffsetColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) return GetDatabase()->GetTCAutomaticStackTransmissionTimeColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) return GetDatabase()->GetTCAutomaticStackExcutionTimeColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) return GetDatabase()->GetTCAutomaticStackExcutionTimeOffsetColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) return GetDatabase()->GetTCAutomaticStackAuthorizationColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) return GetDatabase()->GetTCAutomaticStackPTVTimeWindowColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) return GetDatabase()->GetTCAutomaticStackPTVChecksColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) return GetDatabase()->GetTCAutomaticStackPTVResultColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) return GetDatabase()->GetTCAutomaticStackPEVChecksColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) return GetDatabase()->GetTCAutomaticStackPEVResultColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) return GetDatabase()->GetTCAutomaticStackCEVTimeWindowColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) return GetDatabase()->GetTCAutomaticStackCEVChecksColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) return GetDatabase()->GetTCAutomaticStackCEVResultColumnColor();
	if (nColumn == TCAUTOMATICSTACK_TITLEITEM_STATUS) return GetDatabase()->GetTCAutomaticStackStatusColumnColor();
	return GetSysColor(COLOR_WINDOWTEXT);
}

COLORREF CTCAutomaticStackPageTextView::LookupStatusColor(UINT nResult, UINT nStatus) CONST
{
	return((nStatus == TCAUTOMATICSTACKITEM_STATUS_RELEASED || nStatus == TCAUTOMATICSTACKITEM_STATUS_NOTRELEASED || nStatus == TCAUTOMATICSTACKITEM_STATUS_FAILEDRELEASE || nStatus == TCAUTOMATICSTACKITEM_STATUS_SENT || nStatus == TCAUTOMATICSTACKITEM_STATUS_FAILEDSEND || nStatus == TCAUTOMATICSTACKITEM_STATUS_UPLINKED || nStatus == TCAUTOMATICSTACKITEM_STATUS_FAILEDUPLINK) ? ((nStatus == TCAUTOMATICSTACKITEM_STATUS_RELEASED || nStatus == TCAUTOMATICSTACKITEM_STATUS_SENT || nStatus == TCAUTOMATICSTACKITEM_STATUS_UPLINKED) ? ((nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_PASSED) : ((nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_PENDING) : ((nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_IDLE) : (((nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) || (nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) || (nResult & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED)) ? m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_NOTPASSED) : m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_NONE))))) : m_nStatusColors[1].GetAt(TCAUTOMATICSTACKITEM_STATUSCOLOR_NOTPASSED)) : ((nStatus < (UINT)m_nStatusColors[0].GetSize()) ? m_nStatusColors[0].GetAt(nStatus) : m_nStatusColors[0].GetAt(TCAUTOMATICSTACKITEM_STATUS_NONE)));
}

COLORREF CTCAutomaticStackPageTextView::LookupAlertColor(UINT nColumn, UINT nAlertType) CONST
{
	return((nAlertType < (UINT)m_nAlertColors.GetSize()) ? m_nAlertColors.GetAt(nAlertType) : LookupColumnColor(nColumn));
}

INT CTCAutomaticStackPageTextView::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn).Compare(pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCAutomaticStackPageTextView::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	INT  nDxChar;
	UINT  nColumn;
	CFont  cFont[2];
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((nColumn = LookupColumnName(pszColumn)) == 0)
		{
			for (GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[1])); )
			{
				nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
				pDC->SelectObject(pOldFont);
				break;
			}
			ReleaseDC(pDC);
			return nWidth;
		}
		for (GetTitleFont(&cFont[0]), GetTextFont(&cFont[1]), nWidth = 0; (pOldFont = pDC->SelectObject(&cFont[0])); )
		{
			nWidth = LOWORD(GetTextIndents()) + pDC->GetTextExtent(pszColumn).cx + HIWORD(GetTextIndents());
			pDC->SelectObject(pOldFont);
			break;
		}
		if ((pOldFont = pDC->SelectObject(&cFont[1])))
		{
			if ((nDxChar = (pDC->GetTextMetrics(&tmFont) > 0) ? (4 * tmFont.tmAveCharWidth / 3) : 0) > 0)
			{
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_NUMBER) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackNumberColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_NAME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackNameColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackDescriptionColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CATEGORY) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackCategoryColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackSubSystemColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackArgumentsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_FLAGS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackFlagsColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_TCPACKET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackTCPacketColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackDispatchTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackReleaseTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackReleaseTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackTransmissionTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackExecutionTimeColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackExecutionTimeOffsetColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackAuthorizationColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackPTVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackPTVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackPTVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackPEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackPEVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackCEVTimeWindowColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackCEVChecksColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_CEVRESULT) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackCEVResultColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
				nWidth = (nColumn == TCAUTOMATICSTACK_TITLEITEM_STATUS) ? max(LOWORD(GetTextIndents()) + GetDatabase()->GetTCAutomaticStackStatusColumnCharWidth()*nDxChar + HIWORD(GetTextIndents()), nWidth) : nWidth;
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		return nWidth;
	}
	return 0;
}

INT CTCAutomaticStackPageTextView::CalcColumnsWidth(CONST CUIntArray &nColumns, CUIntArray &nWidths)
{
	INT  nWidth;
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (INT)nColumns.GetSize(), nWidths.RemoveAll(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_wndHeaderCtrl.m_szColumnsText.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (nColumns.GetAt(nIndex[0]) == LookupColumnName(m_wndHeaderCtrl.m_szColumnsText.GetAt(nIndex[1])))
			{
				nWidth = (nIndex[1] > 0) ? (m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]) - m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1] - 1)) : m_wndHeaderCtrl.m_nColumnsWidth.GetAt(nIndex[1]);
				nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + nWidth) : nWidth);
				break;
			}
		}
		if (nIndex[1] == nCount[1])
		{
			nWidths.Add((nIndex[0] > 0) ? (nWidths.GetAt(nIndex[0] - 1) + CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0])))) : CalcColumnWidth(LookupColumnName(nColumns.GetAt(nIndex[0]))));
			continue;
		}
	}
	return((nCount[0] == nWidths.GetSize()) ? (INT)nWidths.GetSize() : 0);
}

CRect CTCAutomaticStackPageTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, LPCTSTR pszText) CONST
{
	INT  nPos;
	CRect  rText;
	CRect  rSymbol;
	CFont  *pOldFont;
	CString  szText;
	CClientDC  cDC(NULL);

	for (szText = ((nPos = (szText = pszText).Find(GetSymbolDelimiter())) >= 0) ? szText.Left(nPos) : szText, rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), rSymbol.SetRectEmpty(); (pOldFont = (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)) && !rText.IsRectEmpty()) ? cDC.SelectObject((CFont *)&m_wndContentCtrl.m_cFont) : (CFont *)NULL); )
	{
		rSymbol.SetRect(rText.left + cDC.GetTextExtent(szText + SPACE).cx, rText.top, rText.left + cDC.GetTextExtent(szText + SPACE).cx + m_sizeAlertSymbols.cx, rText.top + m_sizeAlertSymbols.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		cDC.SelectObject(pOldFont);
		break;
	}
	return rSymbol;
}
CRect CTCAutomaticStackPageTextView::CalcTelecommandSymbolPosition(INT nRow, INT nColumn, INT nCount, INT nIndex) CONST
{
	CRect  rText;
	CRect  rSymbol;
	CSize  sizeSymbol;

	for (rText = m_wndContentCtrl.CalcTextRect(nRow, nColumn), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS))) ? m_sizeFlagSymbols : CSize(0, 0), sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)) || nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS))) ? m_sizeCheckFlagSymbols : sizeSymbol, sizeSymbol = (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)) || nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)) || nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT))) ? m_sizeResultSymbols : sizeSymbol, rSymbol.SetRectEmpty(); sizeSymbol.cx > 0 && sizeSymbol.cy > 0 && !rText.IsRectEmpty(); )
	{
		rSymbol.SetRect(rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx), rText.top, rText.left + (rText.Width() - (nCount*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx))) / 2 + nIndex*((m_wndContentCtrl.m_wTextIndent[0] + m_wndContentCtrl.m_wTextIndent[1]) / 4 + sizeSymbol.cx) + sizeSymbol.cx, rText.top + sizeSymbol.cy);
		rSymbol.SetRect(min(max(rText.left, rSymbol.left), rText.right), rSymbol.top, max(min(rText.right, rSymbol.right), rText.left), rSymbol.bottom);
		rSymbol.InflateRect(0, 0, 1, 1);
		break;
	}
	return rSymbol;
}

TCHAR CTCAutomaticStackPageTextView::GetSymbolDelimiter()
{
	return SPACE[0];
}

CString CTCAutomaticStackPageTextView::ConstructToolTipTitle(CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nRow;
	INT  nColumn;
	CString  szTitle;

	switch (nTip)
	{
	case TCAUTOMATICSTACK_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_ALERTINFORMATION);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_ALERTWARNING);
		break;
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_ALERTERROR);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_GROUPEDTITLE);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_BLOCKEDTITLE);
			break;
		}
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSTITLE);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVRESULTTITLE);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVRESULTTITLE);
		break;
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_CEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED)))
	{
		szTitle = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTTITLE);
		break;
	}
	break;
	}
	}
	return szTitle;
}

CString CTCAutomaticStackPageTextView::ConstructToolTipText(CONST CTCAutomaticStackItem *pItem, CONST POINT &ptTip, LPCTSTR pszTip, UINT nTip) CONST
{
	INT  nPos;
	INT  nRow;
	INT  nColumn;
	INT  nIndex;
	INT  nCount;
	INT  nParameter;
	INT  nParameters;
	UINT  nStageID;
	UINT  nStage;
	UINT  nScope;
	UINT  nState;
	UINT  nReason;
	BOOL  bSuccess;
	CString  szText;
	CString  szAlert;
	CString  szStages;
	CString  szCheckState[2];
	CString  szCheckResult[6];
	CString  szCheckReason[2];
	CString  szInterlockName;
	CString  szInterlockStage;
	CString  szInterlockState;
	CString  szInterlockScope[2];
	CTimeSpan  tTimeWindow;
	CStringArray  szStageIDs;
	CStringArray  szParameters;
	CStringTools  cStringTools;
	CDatabaseTCPreExeGroup  *pTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pTCExeVerGroup;
	CDatabaseTCPreExeGroupParameter  *pTCPreExeGroupParameter;
	CDatabaseTCExeVerGroupParameter  *pTCExeVerGroupParameter;

	switch (nTip)
	{
	case TCAUTOMATICSTACK_TITLEITEM_NUMBER:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR)))
	{
		for (szText = (pItem->IsAlerted(-1, szText) != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE || pItem->IsAlerted(0, szText) != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE) ? szText : EMPTYSTRING; (nCount = pItem->GetAlertCount(TCAUTOMATICSTACKITEM_ALERTTYPE_ERROR)) > 1; )
		{
			szAlert.Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_ALERTCOUNT), nCount);
			szText += CString(EOL) + szAlert;
			break;
		}
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_FLAGS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptTip))
		{
			if (GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, pItem->GetInterlock(), nScope, nStage, nState))
			{
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKTEXT), (LPCTSTR)pItem->GetInterlock(), (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptTip))
		{
			if (pItem->GetReleaseInterlock(szInterlockName, bSuccess) && GetTCService()->CheckTCInterlock(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK, szInterlockName, nScope, nStage, nState))
			{
				szInterlockState = (nState == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTATEIDLE) : EMPTYSTRING;
				szInterlockState = (nState == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTATEPENDING) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTATESUCCESS) : szInterlockState;
				szInterlockState = (nState == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTATEFAILURE) : szInterlockState;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPELOCAL) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPELOCALNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEM) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szInterlockScope[0];
				szInterlockScope[0] = (TCINTERLOCKSCOPEFROMCODE(nScope) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSCOPECOMMANDS) : szInterlockScope[0];
				szInterlockScope[1].Format(szInterlockScope[0], (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(nScope)));
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGETRANSMISSION) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGEACCEPTANCE) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGESTART) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGEPROGRESS) : szInterlockStage;
				szInterlockStage = (nStage == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKSTAGECOMPLETION) : szInterlockStage;
				szText.Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKEDTEXT), (LPCTSTR)szInterlockName, (bSuccess) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKWAITSTATESUCCESS) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_INTERLOCKWAITSTATEFAILURE), (LPCTSTR)szInterlockState, (LPCTSTR)szInterlockScope[1], (LPCTSTR)szInterlockStage);
			}
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_GROUPEDTEXT);
			break;
		}
	}
	if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED)))
	{
		if (FindTextFromPoint(ptTip, nRow, nColumn) && CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptTip))
		{
			szText = STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_BLOCKEDTEXT);
			break;
		}
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVCHECKSSTATEOFF) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVCHECKSSTATEDISABLED) : szCheckState[0];
		szCheckState[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVCHECKSTEXT), (LPCTSTR)szCheckState[0]);
		szText = szCheckState[1];
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSSTATENONE) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCPreExeGroup = GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED)))
	{
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSSTATENONE) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSSTATEON);
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSSTATEOFF) : szCheckState[0];
		szCheckState[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSSTATEDISABLED) : szCheckState[0];
		if ((pTCExeVerGroup = GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef())))
		{
			szText.Format(szCheckState[0], (LPCTSTR)pTCExeVerGroup->GetName());
			break;
		}
		for (nPos = (szCheckState[0] == STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVCHECKSSTATEON)) ? (szCheckState[0].GetLength() - 1) : -1; nPos >= 0; nPos--)
		{
			if (_istspace(szCheckState[0].GetAt(nPos)))
			{
				szCheckState[0] = szCheckState[0].Left(nPos);
				break;
			}
		}
		szText = szCheckState[0];
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PTVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL)))
	{
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVRESULTSTATEGO) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVRESULTSTATEFAIL);
		szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVRESULTSTATEWAIT) : szCheckResult[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_UPLINK) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONUPLINK) : EMPTYSTRING;
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_RELEASETIMEWINDOW) ? ((!szCheckReason[0].IsEmpty()) ? ((pItem->GetReleaseTime().GetTimeInSeconds() > CTime::GetCurrentTime().GetTime()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONRELEASETIMEWINDOW)) : (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONEXPIREDRELEASETIMEWINDOW))) : ((pItem->GetReleaseTime().GetTimeInSeconds() > CTime::GetCurrentTime().GetTime()) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONRELEASETIMEWINDOW) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONEXPIREDRELEASETIMEWINDOW))) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_EXECUTIONTIME) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONEXECUTIONTIME)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONEXECUTIONTIME)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_INTERLOCK) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONINTERLOCK)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONINTERLOCK)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_SUBSYSTEM) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSUBSYSTEM)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSUBSYSTEM)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_ONBOARDBUFFER) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONONBOARDBUFFER)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONONBOARDBUFFER)) : szCheckReason[0];
		szCheckReason[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PTV_ENCODING) ? ((!szCheckReason[0].IsEmpty()) ? (szCheckReason[0] + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONSEPARATOR) + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONENCODING)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONENCODING)) : szCheckReason[0];
		szCheckResult[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVRESULTTEXT), (LPCTSTR)szCheckResult[0]);
		szCheckReason[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PTVREASONTEXT), (LPCTSTR)szCheckReason[0]);
		szText = (!szCheckReason[0].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_PEVRESULT:
	{ if (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO)) || _tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO)))
	{
		for (szCheckResult[0] = (_tcsstr(pszTip, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVRESULTSTATENOGO) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVRESULTSTATEGO), szCheckResult[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVRESULTTEXT), (LPCTSTR)szCheckResult[0]), szCheckReason[0].Empty(); (pTCPreExeGroup = ((pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PEV_PARAMETERS) && pItem->GetVerificationStageParameters(TCVERIFICATIONSTAGE_NONE, szParameters) > 0) ? GetDatabase()->GetTCPreExeGroups()->GetAt(pItem->GetPreExeGroupRef()) : (CDatabaseTCPreExeGroup *)NULL); )
		{
			for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pTCPreExeGroupParameter = pTCPreExeGroup->GetAt(pTCPreExeGroup->Find(szParameters.GetAt(nParameter)))))
				{
					szCheckReason[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETERFORMAT), (LPCTSTR)pTCPreExeGroupParameter->GetTag());
					szCheckReason[0] += (!szCheckReason[0].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETERSEPARATOR) + szCheckReason[1]) : szCheckReason[1];
					if (szCheckReason[0].GetLength() > lstrlen(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETERS)))
					{
						szCheckReason[0] += STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETERELLIPSIS);
						break;
					}
					continue;
				}
				szParameters.RemoveAt(nParameter);
				nParameters--;
				nParameter--;
			}
			szCheckReason[1].Format((szParameters.GetSize() > 0) ? ((szParameters.GetSize() > 1) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETERS) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONPARAMETER)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONEXPRESSION), (LPCTSTR)szCheckReason[0], (LPCTSTR)pTCPreExeGroup->GetID());
			break;
		}
		szCheckReason[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PEV_2NDSTEP) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONEXTRA2NDSTEP)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASON2NDSTEP)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PEV_TELEMETRY) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONEXTRATELEMETRY)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONTELEMETRY)) : szCheckReason[1];
		szCheckReason[1] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_FAILURE_PEV_CORRELATION) ? ((!szCheckReason[1].IsEmpty()) ? (szCheckReason[1] + EOL + STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONEXTRACORRELATION)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_PEVREASONCORRELATION)) : szCheckReason[1];
		szText = (!szCheckReason[1].IsEmpty()) ? (szCheckResult[1] + EOL + szCheckReason[1]) : szCheckResult[1];
	}
	break;
	}
	case TCAUTOMATICSTACK_TITLEITEM_CEVRESULT:
	{ if (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE)) || !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPENDING)) || !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPASSED)) || !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEFAILED)) || !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNKNOWN)) || !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNVERIFIED)))
	{
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPENDING))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPASSED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEFAILED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNKNOWN))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[0];
		szCheckResult[0] = (!lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNVERIFIED))) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[0];
		szCheckResult[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTVERIFICATIONTIME), (LPCTSTR)pItem->GetVerificationTime().FormatGmt(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTTIMEFORMAT)), (LPCTSTR)cStringTools.ConvertLongIntToStructuredString(pItem->CalcVerificationTimeWindowSize(0, (GetTCService()->GetCommandHandlerVerificationUncertaintyTimeWindow(tTimeWindow)) ? tTimeWindow : 0).GetTotalSeconds()));
		for (szCheckResult[2].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTOVERALLSTATE), (LPCTSTR)szCheckResult[0]); !lstrcmp(pszTip, STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE)); )
		{
			szCheckResult[2] += CString(EOL) + szCheckResult[1];
			break;
		}
		szText = szCheckResult[2];
		break;
	}
	for (szStages = (FindTextFromPoint(ptTip, nRow, nColumn)) ? pszTip : EMPTYSTRING, szStageIDs.RemoveAll(); !szStages.IsEmpty(); szStages = (nPos >= 0) ? (szStages.Mid(nPos + lstrlen(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
	{
		if ((nPos = szStages.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR))) >= 0)
		{
			szStageIDs.Add(szStages.Left(nPos));
			continue;
		}
		szStageIDs.Add(szStages);
	}
	for (nIndex = 0, nCount = (INT)szStageIDs.GetSize(); nIndex < nCount; nIndex++)
	{
		if (CalcTelecommandSymbolPosition(nRow, nColumn, nCount, nIndex).PtInRect(ptTip))
		{
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_IDLE) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PENDING) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_PASSED) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_FAILED) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNKNOWN) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[0];
			szCheckResult[0] = (pItem->GetResult() & TCAUTOMATICSTACKITEM_RESULT_CEV_UNVERIFIED) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[0];
			szCheckResult[1] = ((nStageID = (UINT)_ttoi(szStageIDs.GetAt(nIndex))) == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_ACCEPTANCE)) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTAGEACCEPTANCE) : EMPTYSTRING;
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_START)) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTAGESTART) : szCheckResult[1];
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_PROGRESS)) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTAGEPROGRESS) : szCheckResult[1];
			szCheckResult[1] = (nStageID == MAKETCEXEVEROVERALLSTAGEID(TCVERIFICATIONSTAGE_COMPLETION)) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTAGECOMPLETION) : szCheckResult[1];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEIDLE) : EMPTYSTRING;
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPENDING) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEPASSED) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEFAILED) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNKNOWN) : szCheckResult[2];
			szCheckResult[2] = (szStageIDs.GetAt(nIndex).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATEUNVERIFIED) : szCheckResult[2];
			for (szCheckResult[3].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTOVERALLSTATE), (LPCTSTR)szCheckResult[0]), szCheckResult[4].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTAGE), (LPCTSTR)szCheckResult[1]), szCheckResult[5].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVRESULTSTATE), (LPCTSTR)szCheckResult[2]), szCheckReason[0].Empty(); (pTCExeVerGroup = (pItem->GetVerificationStageState(nStageID, nState, nReason) && (nReason & TCHISTORYITEM_FAILURE_CEV_PARAMETERS) && pItem->GetVerificationStageParameters(nStageID, szParameters) > 0) ? GetDatabase()->GetTCExeVerGroups()->GetAt(pItem->GetExeVerGroupRef()) : (CDatabaseTCExeVerGroup *)NULL); )
			{
				for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pTCExeVerGroupParameter = pTCExeVerGroup->GetAt(pTCExeVerGroup->Find(szParameters.GetAt(nParameter), MAKETCEXEVERSTAGEFROMID(nStageID)))))
					{
						szCheckReason[1].Format(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETERFORMAT), (LPCTSTR)pTCExeVerGroupParameter->GetTag());
						szCheckReason[0] += (!szCheckReason[0].IsEmpty()) ? (STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETERSEPARATOR) + szCheckReason[1]) : szCheckReason[1];
						if (szCheckReason[0].GetLength() > lstrlen(STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETERS)))
						{
							szCheckReason[0] += STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETERELLIPSIS);
							break;
						}
						continue;
					}
					szParameters.RemoveAt(nParameter);
					nParameters--;
					nParameter--;
				}
				szCheckReason[1].Format((szParameters.GetSize() > 0) ? ((szParameters.GetSize() > 1) ? STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETERS) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONPARAMETER)) : STRING(IDS_TCAUTOMATICSTACK_TOOLTIP_CEVREASONEXPRESSION), (LPCTSTR)szCheckReason[0], (LPCTSTR)pTCExeVerGroup->GetID());
				break;
			}
			szText = (!szCheckReason[1].IsEmpty()) ? (szCheckResult[3] + EOL + szCheckResult[4] + EOL + szCheckResult[5] + EOL + szCheckReason[1]) : (szCheckResult[3] + EOL + szCheckResult[4] + EOL + szCheckResult[5]);
			break;
		}
	}
	break;
	}
	default: break;
	}
	return szText;
}

BOOL CTCAutomaticStackPageTextView::SetClipboardFormat(UINT nFormat)
{
	return(((m_nClipboardFormat = nFormat) > 0) ? TRUE : FALSE);
}

UINT CTCAutomaticStackPageTextView::GetClipboardFormat() CONST
{
	return m_nClipboardFormat;
}

BOOL CTCAutomaticStackPageTextView::CopyToClipboard(BOOL bCut)
{
	INT  nItem;
	INT  nItems;
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItems  pStackItems;
	CByteArray  nItemsData;
	CTCAutomaticStackItem  *pItem[2];

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem[0] = m_pItems[0].GetAt(nItem)) && pItem[0]->IsSelected() && pItem[0]->GetStatus() == TCAUTOMATICSTACKITEM_STATUS_ONSTACK)
		{
			if ((pItem[1] = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
			{
				if (pItem[1]->Copy(pItem[0]) && pStackItems.Add(pItem[1]) >= 0)
				{
					if (!bCut) continue;
					DeleteTelecommand(nItem);
					delete pItem[0];
					nItems--;
					nItem--;
					continue;
				}
				delete pItem[1];
			}
			break;
		}
	}
	if (OpenClipboard())
	{
		if (EmptyClipboard())
		{
			if (pStackItems.GetSize() > 0 && pStackItems.Map(nItemsData))
			{
				if ((hData = GlobalAlloc(GHND, nItemsData.GetSize())) != (HGLOBAL)NULL)
				{
					if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
					{
						CopyMemory(pData, nItemsData.GetData(), nItemsData.GetSize());
						SetClipboardData(GetClipboardFormat(), hData);
						GlobalUnlock(hData);
						CloseClipboard();
						return TRUE;
					}
					GlobalFree(hData);
				}
			}
		}
		CloseClipboard();
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::PasteFromClipboard(INT nIndex, BOOL bAfter)
{
	INT  nItem[3];
	INT  nItems[3];
	BOOL  bDispatch;
	DWORD  dwOffset;
	LPBYTE  pData;
	HGLOBAL  hData;
	CTCItem  *pStackItem;
	CTCItems  pStackItems;
	CTimeTag  tLoadTime;
	CTimeSpan  tInterval;
	CByteArray  nItemsData;
	CTCInterlock  *pInterlock[2];
	CTCInterlocks  pInterlocks;
	CTCAutomaticStackItem  *pItem[2];
	CTCAutomaticStackItems  pItems;
	COleDataObject  cOleDataObject;
	CComputerToken  cComputerToken;

	if (cOleDataObject.AttachClipboard())
	{
		if ((hData = cOleDataObject.GetGlobalData(GetClipboardFormat())))
		{
			if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
			{
				for (nItemsData.SetSize(GlobalSize(hData)), CopyMemory(nItemsData.GetData(), pData, nItemsData.GetSize()); pStackItems.Unmap(nItemsData); )
				{
					for (nItem[0] = 0, nItems[0] = (INT)pStackItems.GetSize(); nItem[0] < nItems[0]; nItem[0]++)
					{
						if ((pStackItem = pStackItems.GetAt(nItem[0])))
						{
							if ((pItem[0] = new CTCAutomaticStackItem))
							{
								if (pItem[0]->CTCItem::Copy(pStackItem))
								{
									for (pItem[0]->SetComputerName(cComputerToken.GetComputerName()), pItem[0]->SetSourceType(TCITEM_SOURCETYPE_AUTOMATICSTACK), pItem[0]->SetLoadTime(tLoadTime.GetTime()); pItem[0]->GetReleaseTimeWindow(dwOffset, tInterval, bDispatch); )
									{
										for (pItem[0]->SetReleaseTime(0); pItem[0]->IsAlerted(TCAUTOMATICSTACK_TITLEITEM_RELEASETIME) != TCAUTOMATICSTACKITEM_ALERTTYPE_NONE; )
										{
											pItem[0]->Alert(TCAUTOMATICSTACKITEM_ALERTTYPE_NONE, TCAUTOMATICSTACK_TITLEITEM_RELEASETIME);
											break;
										}
										break;
									}
									if (!pItem[0]->GetInterlock().IsEmpty())
									{
										for (GetTCService()->GetTCInterlocks(pInterlocks), pItem[0]->SetInterlock(EMPTYSTRING); (pInterlock[0] = pInterlocks.GetAt(pInterlocks.Find(pStackItem->GetComputerName(), pStackItem->GetSourceType(), pStackItem->GetInterlock()))); )
										{
											if ((pInterlock[1] = new CTCInterlock))
											{
												pInterlock[1]->Copy(pInterlock[0]);
												pInterlock[1]->SetSourceType(TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK);
												if (pInterlocks.Find(pInterlock[1]) < 0)
												{
													if (pInterlocks.Add(pInterlock[1]) < 0)
													{
														delete pInterlock[1];
														break;
													}
													pItem[0]->SetInterlock(pInterlock[1]->GetName());
													GetTCService()->SetTCInterlocks(pInterlocks);
													break;
												}
												pItem[0]->SetInterlock(pInterlock[1]->GetName());
												delete pInterlock[1];
											}
											break;
										}
									}
									if (pItem[0]->GetInterlock().IsEmpty() == pStackItem->GetInterlock().IsEmpty() && pItems.Add(pItem[0]) >= 0) continue;
								}
								delete pItem[0];
							}
						}
						break;
					}
					if (nItem[0] == nItems[0])
					{
						if (LoadTelecommands(pItems, nIndex, FALSE, !bAfter, bAfter, TRUE))
						{
							for (nItem[1] = 0, nItems[1] = (INT)pItems.GetSize(); nItem[1] < nItems[1]; nItem[1]++)
							{
								if ((pItem[0] = ((pItem[1] = pItems.GetAt(nItem[1]))) ? m_pItems[0].GetAt((nItem[2] = m_pItems[0].Find(pItem[1]))) : (CTCAutomaticStackItem *)NULL))
								{
									if (!nItem[1]) ActivateTelecommand(nItem[2]);
									pItem[0]->Select();
								}
							}
							GlobalUnlock(hData);
							DrawContent();
							return TRUE;
						}
					}
					break;
				}
				GlobalUnlock(hData);
			}
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::LoadTelecommandSymbols()
{
	INT  nSymbol[4];
	INT  nSymbols[4];
	ULONG  cbSymbol;
	HRSRC  hResource;
	LPVOID  pResource;
	HMODULE  hModule;
	HGLOBAL  hMemResource[2];
	LPSTREAM  pIStream;

	for (nSymbol[0] = 0, nSymbols[0] = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOLS; nSymbol[0] < nSymbols[0]; nSymbol[0]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCK) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINTERLOCK) : ((nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKIDLE) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINTERLOCKIDLE) : ((nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKPENDING) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINTERLOCKPENDING) : ((nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKSUCCESS) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINTERLOCKSUCCESS) : ((nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_INTERLOCKFAILURE) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINTERLOCKFAILURE) : ((nSymbol[0] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOL_GROUPED) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKGROUPED) : MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKBLOCKED)))))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pFlagSymbols[nSymbol[0]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pFlagSymbols[nSymbol[0]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pFlagSymbols[nSymbol[0]];
									m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[0] > 0)
		{
			delete m_pFlagSymbols[--nSymbol[0]];
			m_pFlagSymbols[nSymbol[0]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[1] = 0, nSymbols[1] = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol[1] < nSymbols[1]; nSymbol[1]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[1] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_NONE) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCHECKSNONE) : ((nSymbol[1] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_ON) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCHECKSON) : ((nSymbol[1] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOL_OFF) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCHECKSOFF) : MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCHECKSDISABLED))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pCheckFlagSymbols[nSymbol[1]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pCheckFlagSymbols[nSymbol[1]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pCheckFlagSymbols[nSymbol[1]];
									m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[1] > 0)
		{
			delete m_pCheckFlagSymbols[--nSymbol[1]];
			m_pCheckFlagSymbols[nSymbol[1]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[2] = 0, nSymbols[2] = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOLS; nSymbol[2] < nSymbols[2]; nSymbol[2]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_GO) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKPTVGO) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_WAIT) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKPTVWAIT) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PTV_FAIL) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKPTVFAIL) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_GO) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKPEVGO) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_PEV_NOGO) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKPEVNOGO) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_IDLE) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVIDLE) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PENDING) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVPENDING) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_PASSED) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVPASSED) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_FAILED) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVFAILED) : ((nSymbol[2] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOL_CEV_UNKNOWN) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVUNKNOWN) : MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKCEVUNVERIFIED)))))))))), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pResultSymbols[nSymbol[2]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pResultSymbols[nSymbol[2]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pResultSymbols[nSymbol[2]];
									m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[2] > 0)
		{
			delete m_pResultSymbols[--nSymbol[2]];
			m_pResultSymbols[nSymbol[2]] = (CImage *)NULL;
		}
		break;
	}
	for (nSymbol[3] = 0, nSymbols[3] = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOLS; nSymbol[3] < nSymbols[3]; nSymbol[3]++)
	{
		if ((hResource = FindResource((hModule = GetModuleHandle((LPCTSTR)NULL)), (nSymbol[3] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_INFORMATION) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKINFORMATION) : ((nSymbol[3] == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOL_WARNING) ? MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKWARNING) : MAKEINTRESOURCE(IDP_TCAUTOMATICSTACKERROR)), STRING(IDS_RESOURCETYPE_PICTURE))))
		{
			if ((hMemResource[0] = LoadResource(hModule, hResource)))
			{
				if ((pResource = LockResource(hMemResource[0])))
				{
					if ((hMemResource[1] = GlobalAlloc(GMEM_MOVEABLE, 0)))
					{
						if (SUCCEEDED(CreateStreamOnHGlobal(hMemResource[1], TRUE, &pIStream)))
						{
							if (SUCCEEDED(pIStream->Write(pResource, SizeofResource(hModule, hResource), &cbSymbol)))
							{
								if ((m_pAlertSymbols[nSymbol[3]] = new CImage) != (CImage *)NULL)
								{
									if (SUCCEEDED(m_pAlertSymbols[nSymbol[3]]->Load(pIStream)))
									{
										pIStream->Release();
										continue;
									}
									delete m_pAlertSymbols[nSymbol[3]];
									m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
								}
							}
							pIStream->Release();
						}
					}
				}
			}
		}
		while (nSymbol[3] > 0)
		{
			delete m_pAlertSymbols[--nSymbol[3]];
			m_pAlertSymbols[nSymbol[3]] = (CImage *)NULL;
		}
		break;
	}
	return((nSymbol[0] == nSymbols[0] && nSymbol[1] == nSymbols[1] && nSymbol[2] == nSymbols[2] && nSymbol[3] == nSymbols[3]) ? TRUE : FALSE);
}

VOID CTCAutomaticStackPageTextView::FreeTelecommandSymbols()
{
	INT  nSymbol;
	INT  nSymbols;

	for (nSymbol = 0, nSymbols = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pFlagSymbols[nSymbol]->Destroy();
			delete m_pFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDCHECKFLAGSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pCheckFlagSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pCheckFlagSymbols[nSymbol]->Destroy();
			delete m_pCheckFlagSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDRESULTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pResultSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pResultSymbols[nSymbol]->Destroy();
			delete m_pResultSymbols[nSymbol];
		}
	}
	for (nSymbol = 0, nSymbols = TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDALERTSYMBOLS; nSymbol < nSymbols; nSymbol++)
	{
		if (m_pAlertSymbols[nSymbol] != (CImage *)NULL)
		{
			m_pAlertSymbols[nSymbol]->Destroy();
			delete m_pAlertSymbols[nSymbol];
		}
	}
}

BOOL CTCAutomaticStackPageTextView::LoadToolTipCursor()
{
	return(((m_hToolTipCursor = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TOOLTIPCURSOR), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR))) ? TRUE : FALSE);
}

HCURSOR CTCAutomaticStackPageTextView::GetToolTipCursor() CONST
{
	return((!m_hToolTipCursor) ? (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR) : m_hToolTipCursor);
}

BOOL CTCAutomaticStackPageTextView::FreeToolTipCursor()
{
	if (m_hToolTipCursor)
	{
		DestroyCursor(m_hToolTipCursor);
		m_hToolTipCursor = (HCURSOR)NULL;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::SetLayoutInfo(CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	SetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::GetLayoutInfo(SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	GetScrollInfo(pHorzScrollInfo, pVertScrollInfo);
	return TRUE;
}

BOOL CTCAutomaticStackPageTextView::Lock()
{
	CTCAutomaticStackWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (pParentWnd->Lock() && CTextView::Lock()) : CTextView::Lock());
}

BOOL CTCAutomaticStackPageTextView::Unlock()
{
	CTCAutomaticStackWnd  *pParentWnd;

	return(((pParentWnd = GetParentDisplay())) ? (CTextView::Unlock() && pParentWnd->Unlock()) : CTextView::Unlock());
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackPageTextView, CTextView)
	//{{AFX_MSG_MAP(CTCAutomaticStackPageTextView)
	ON_WM_CREATE()
	ON_WM_SETCURSOR()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPageTextView message handlers

int CTCAutomaticStackPageTextView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CTextViewLock  cLock(this);

	if (CTextView::OnCreate(lpCreateStruct) != -1 && LoadTelecommandSymbols() && LoadToolTipCursor())
	{
		for (SetClipboardFormat(RegisterClipboardFormat(STRING(IDS_TELECOMMAND_CLIPBOARD_FORMAT))); m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED; )
		{
			SetTimer(TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDUPDATE_TIMERID, TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDUPDATE_TIMEOUT, NULL);
			break;
		}
		return 0;
	}
	return -1;
}

BOOL CTCAutomaticStackPageTextView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	INT  nPos;
	INT  nRow;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	CPoint  ptCursor;
	CString  szText;
	CString  szStage;
	CStringArray  szStages;
	CTextViewLock  cLock(this);

	for (GetCursorPos(&ptCursor), m_wndContentCtrl.ScreenToClient(&ptCursor); IsToolTipModeEnabled() && FindTextFromPoint(ptCursor, nRow, nColumn, TRUE) && GetText(nRow, nColumn, szText); )
	{
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, szText).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 1).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 2).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 4, 3).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT)))
		{
			if (_tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO)) || _tcsstr(szText, STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO)))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
			break;
		}
		if (nColumn == FindColumnIndex(STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT)))
		{
			if (szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE) || szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING) || szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED) || szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED) || szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN) || szText == STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED))
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, 1, 0).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
				break;
			}
			for (szStage = szText, szStages.RemoveAll(); !szStage.IsEmpty(); szStage = (nPos >= 0) ? (szStage.Mid(nPos + lstrlen(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR)))) : EMPTYSTRING)
			{
				if ((nPos = szStage.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_SEPARATOR))) >= 0)
				{
					szStages.Add(szStage.Left(nPos));
					continue;
				}
				szStages.Add(szStage);
			}
			for (nIndex = 0, nCount = (INT)szStages.GetSize(); nIndex < nCount; nIndex++)
			{
				if (CalcTelecommandSymbolPosition(nRow, nColumn, nCount, nIndex).PtInRect(ptCursor))
				{
					SetCursor(GetToolTipCursor());
					return TRUE;
				}
			}
		}
		break;
	}
	return CTextView::OnSetCursor(pWnd, nHitTest, message);
}

BOOL CTCAutomaticStackPageTextView::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nRow;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nHeight;
	CRect  rContent;
	CFont  cFont[2];
	CPoint  ptMenu;
	CPoint  ptToolTip;
	LOGFONT  lfFont[2];
	CString  szColumn;
	CString  szToolTip[3];
	CLocaleMenu  cMenu;
	CMFCPopupMenu  *pFloatingMenu;
	CTCAutomaticStackItem  *pItem;
	CTextViewLock  cLock(this);

	if (message == WM_KEYDOWN)
	{
		if (wParam == VK_UP || wParam == VK_DOWN)
		{
			if (m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
			{
				for (nIndex = GetCurTelecommand(); wParam == VK_UP && (nIndex > 0 || (nIndex < 0 && GetTelecommandCount() > 0)); )
				{
					ActivateTelecommand((nIndex = (nIndex < 0) ? (GetTelecommandCount() - 1) : (nIndex - 1)));
					ScrollTo(nIndex);
					return TRUE;
				}
				if (wParam == VK_DOWN && (nIndex < (INT)GetTelecommandCount() - 1 || (nIndex < 0 && GetTelecommandCount() > 0)))
				{
					ActivateTelecommand((nIndex = (nIndex >= 0) ? (nIndex + 1) : 0));
					ScrollTo(nIndex);
					return TRUE;
				}
			}
			if (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
			{
				for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
				{
					if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected()) break;
					continue;
				}
				if (wParam == VK_UP  &&  nItem > 0)
				{
					ActivateTelecommand((nItem = nItem - 1));
					ScrollTo(nItem);
					return TRUE;
				}
				if (wParam == VK_DOWN && (nItem < nItems - 1 || nItem == nItems))
				{
					ActivateTelecommand((nItem = (nItem < nItems - 1) ? (nItem + 1) : 0));
					ScrollTo(nItem);
					return TRUE;
				}
			}
		}
		if (wParam == VK_PRIOR || wParam == VK_NEXT)
		{
			for (nItem = nIndex = GetCurTelecommand(), nItems = GetTelecommandCount(), m_wndContentCtrl.GetClientRect(rContent), nHeight = (nItems > 0) ? ((nItem > 0) ? (m_wndContentCtrl.m_nContentTextPos.GetAt(nItem) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem - 1)) : m_wndContentCtrl.m_nContentTextPos.GetAt(0)) : 0; nItem >= 0 && nItem < nItems; nItem = (wParam == VK_NEXT) ? (nItem + 1) : (nItem - 1))
			{
				if (abs((INT)(m_wndContentCtrl.m_nContentTextPos.GetAt(nIndex) - m_wndContentCtrl.m_nContentTextPos.GetAt(nItem))) >= rContent.Height() - nHeight) break;
				continue;
			}
			if ((nItem = (nIndex >= 0) ? max(min(nItem, nItems - 1), 0) : ((wParam == VK_PRIOR) ? (nItems - 1) : 0)) != nIndex)
			{
				ActivateTelecommand(nItem);
				ScrollTo(nItem);
			}
			return TRUE;
		}
		if (wParam == VK_RETURN)
		{
			for (cLock.Release(); GetCurTelecommand() >= 0; )
			{
				ShowTelecommandProperties();
				break;
			}
			return FALSE;
		}
		if (wParam == VK_ESCAPE)
		{
			ActivateTelecommand(-1);
			return FALSE;
		}
		if (wParam == VK_TAB) GetParent()->SetFocus();
		return FALSE;
	}
	if (message == WM_LBUTTONDOWN)
	{
		if (ActivateTelecommand(FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))
		{
			m_wndContentCtrl.SetFocus();
			return TRUE;
		}
		return FALSE;
	}
	if (message == WM_LBUTTONDBLCLK)
	{
		for (cLock.Release(); IsActivatedTelecommand((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) || ActivateTelecommand(nIndex); )
		{
			ShowTelecommandProperties();
			break;
		}
		return FALSE;
	}
	if (message == WM_RBUTTONDOWN)
	{
		if (GetCursor() != GetToolTipCursor() && (((pItem = m_pItems[0].GetAt(FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))))) && pItem->IsSelected()) || ((nIndex = FindTextFromPoint((ptMenu = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))))) >= 0 && ActivateTelecommand(nIndex)) || ((m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && nIndex < 0 && ActivateTelecommand(nIndex))))
		{
			for (m_wndContentCtrl.ClientToScreen(&ptMenu), cLock.Release(); (pFloatingMenu = (cMenu.LoadMenu(IDR_TCAUTOMATICSTACKFLOATINGMENU)) ? new CMFCPopupMenu : (CMFCPopupMenu *)NULL); )
			{
				pFloatingMenu->Create(GetParentFrame(), ptMenu.x, ptMenu.y, cMenu.Detach());
				return FALSE;
			}
		}
		if ((pItem = (GetCursor() == GetToolTipCursor() && FindTextFromPoint((ptToolTip = CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam))), nRow, nColumn, TRUE) && GetText(nRow, nColumn, szToolTip[2])) ? m_pItems[0].GetAt(nRow) : (CTCAutomaticStackItem *)NULL))
		{
			for (szToolTip[0] = ConstructToolTipTitle(ptToolTip, szToolTip[2], LookupColumnName((szColumn = m_wndHeaderCtrl.m_szColumnsText.GetAt(nColumn)))), szToolTip[1] = ConstructToolTipText(pItem, ptToolTip, szToolTip[2], LookupColumnName(szColumn)); !szToolTip[0].IsEmpty() || !szToolTip[1].IsEmpty(); )
			{
				for (GetTextFont(&lfFont[0]), GetTextFont(&lfFont[1]), lfFont[0].lfWeight = FW_BOLD, lfFont[1].lfWeight = FW_NORMAL; cFont[0].CreateFontIndirect(&lfFont[0]) && cFont[1].CreateFontIndirect(&lfFont[1]); )
				{
					m_wndToolTip.SetTitleFont(&cFont[0]);
					m_wndToolTip.SetTextFont(&cFont[1]);
					break;
				}
				m_wndToolTip.Create(&m_wndContentCtrl, ptToolTip, szToolTip[0], szToolTip[1]);
				break;
			}
		}
		return FALSE;
	}
	if (message == WM_SETFOCUS || message == WM_KILLFOCUS)
	{
		for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(), m_wndContentCtrl.m_bFocused = (message == WM_SETFOCUS) ? TRUE : FALSE; nItem < nItems; nItem++)
		{
			if ((pItem = m_pItems[0].GetAt(nItem)) && pItem->IsSelected())
			{
				DrawText(nItem, m_wndContentCtrl.m_szContentText.GetAt(nItem));
				continue;
			}
		}
	}
	if (message == WM_RBUTTONUP) m_wndToolTip.Destroy();
	return FALSE;
}

BOOL CTCAutomaticStackPageTextView::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szColumn;
	CStringArray  szColumns;
	NMHEADER  *pNotifyInfo = (NMHEADER *)lParam;

	if (pNotifyInfo->hdr.code == HDN_ITEMCLICK)
	{
		for (szColumn = (GetColumns(szColumns) && pNotifyInfo->iItem < szColumns.GetSize()) ? szColumns.GetAt(pNotifyInfo->iItem) : EMPTYSTRING; !szColumn.IsEmpty(); )
		{
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER))
			{
				ReportEvent((!m_dlgSearchNumber.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NAME))
			{
				ReportEvent((!m_dlgSearchName.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION))
			{
				ReportEvent((!m_dlgSearchDescription.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CATEGORY))
			{
				ReportEvent((!m_dlgSearchCategory.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_SUBSYSTEM))
			{
				ReportEvent((!m_dlgSearchSubSystem.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS))
			{
				ReportEvent((!m_dlgSearchArguments.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS))
			{
				ReportEvent((!m_dlgSearchFlags.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TCPACKET))
			{
				ReportEvent((!m_dlgSearchTCPacket.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_DISPATCHTIME))
			{
				ReportEvent((!m_dlgSearchDispatchTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIME))
			{
				ReportEvent((!m_dlgSearchReleaseTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchReleaseTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_TRANSMISSIONTIME))
			{
				ReportEvent((!m_dlgSearchTransmissionTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME))
			{
				ReportEvent((!m_dlgSearchExecutionTime.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET))
			{
				ReportEvent((!m_dlgSearchExecutionTimeOffset.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION))
			{
				ReportEvent((!m_dlgSearchAuthorization.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchPTVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS))
			{
				ReportEvent((!m_dlgSearchPTVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT))
			{
				ReportEvent((!m_dlgSearchPTVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS))
			{
				ReportEvent((!m_dlgSearchPEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT))
			{
				ReportEvent((!m_dlgSearchPEVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVTIMEWINDOW))
			{
				ReportEvent((!m_dlgSearchCEVTimeWindow.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS))
			{
				ReportEvent((!m_dlgSearchCEVCheck.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT))
			{
				ReportEvent((!m_dlgSearchCEVResult.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			if (szColumn == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_STATUS))
			{
				ReportEvent((!m_dlgSearchStatus.Create(this, (m_nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) ? TRUE : FALSE)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
				break;
			}
			break;
		}
	}
	return CTextView::OnNotify(wParam, lParam, pResult);
}

void CTCAutomaticStackPageTextView::OnTimer(UINT_PTR nEventID)
{
	INT  nItem;
	INT  nItems;
	BOOL  bUpdate;
	CTextViewLock  cLock(this);

	if (nEventID == TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDUPDATE_TIMERID)
	{
		for (nItem = 0, nItems = (INT)min(m_pItems[0].GetSize(), m_nChecks), bUpdate = GetTCService()->CheckTCOnBoardBufferQueues(m_pItems[0], m_nChecks); nItem < nItems; nItem++)
		{
			bUpdate |= UpdateTelecommand(nItem);
			continue;
		}
		if (bUpdate) UpdateContent();
		return;
	}
	CTextView::OnTimer(nEventID);
}

void CTCAutomaticStackPageTextView::OnDestroy()
{
	CTextViewLock  cLock(this);

	for (FreeToolTipCursor(), FreeTelecommandSymbols(); m_nPane & TCAUTOMATICSTACK_PANE_SCHEDULED; )
	{
		KillTimer(TCAUTOMATICSTACKPAGETEXTVIEW_COMMANDUPDATE_TIMERID);
		break;
	}
	CTextView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPageView view

IMPLEMENT_DYNCREATE(CTCAutomaticStackPageView, CView)

CTCAutomaticStackPageView::CTCAutomaticStackPageView() : CView()
{
	m_pwndList = new CTCAutomaticStackPageTextView;
	m_pParentWnd = (CWnd *)NULL;
}

CTCAutomaticStackPageView::~CTCAutomaticStackPageView()
{
	delete m_pwndList;
}

BOOL CTCAutomaticStackPageView::SetLayout(UINT nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCAutomaticStackPageView::SetLayout(CONST CUIntArray &nColumns)
{
	return m_pwndList->SetLayout(nColumns);
}
BOOL CTCAutomaticStackPageView::SetLayout(CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_pwndList->SetLayout(nColumns, nWidths);
}

BOOL CTCAutomaticStackPageView::GetLayout(UINT &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCAutomaticStackPageView::GetLayout(CUIntArray &nColumns) CONST
{
	return m_pwndList->GetLayout(nColumns);
}
BOOL CTCAutomaticStackPageView::GetLayout(CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_pwndList->GetLayout(nColumns, nWidths);
}

BOOL CTCAutomaticStackPageView::SetListTitleFont(CFont *pFont)
{
	return m_pwndList->SetListTitleFont(pFont);
}
BOOL CTCAutomaticStackPageView::SetListTitleFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListTitleFont(plfFont);
}

BOOL CTCAutomaticStackPageView::GetListTitleFont(CFont *pFont) CONST
{
	return m_pwndList->GetListTitleFont(pFont);
}
BOOL CTCAutomaticStackPageView::GetListTitleFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListTitleFont(plfFont);
}

BOOL CTCAutomaticStackPageView::SetListItemsFont(CFont *pFont)
{
	return m_pwndList->SetListItemsFont(pFont);
}
BOOL CTCAutomaticStackPageView::SetListItemsFont(CONST LOGFONT *plfFont)
{
	return m_pwndList->SetListItemsFont(plfFont);
}

BOOL CTCAutomaticStackPageView::GetListItemsFont(CFont *pFont) CONST
{
	return m_pwndList->GetListItemsFont(pFont);
}
BOOL CTCAutomaticStackPageView::GetListItemsFont(LOGFONT *plfFont) CONST
{
	return m_pwndList->GetListItemsFont(plfFont);
}

BOOL CTCAutomaticStackPageView::SetGridBackgroundColor(COLORREF nColor)
{
	return m_pwndList->SetGridBackgroundColor(nColor);
}

BOOL CTCAutomaticStackPageView::GetGridBackgroundColor(COLORREF &nColor) CONST
{
	return m_pwndList->GetGridBackgroundColor(nColor);
}

BOOL CTCAutomaticStackPageView::SetAlertColors(CONST CUIntArray &nColors)
{
	return m_pwndList->SetAlertColors(nColors);
}

BOOL CTCAutomaticStackPageView::GetAlertColors(CUIntArray &nColors) CONST
{
	return m_pwndList->GetAlertColors(nColors);
}

BOOL CTCAutomaticStackPageView::SetListOptions(INT nArguments, BOOL bAll)
{
	return m_pwndList->SetListOptions(nArguments, bAll);
}

BOOL CTCAutomaticStackPageView::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return m_pwndList->GetListOptions(nArguments, bAll);
}

BOOL CTCAutomaticStackPageView::SetListUpdateChecks(INT nCount)
{
	return m_pwndList->SetListUpdateChecks(nCount);
}

BOOL CTCAutomaticStackPageView::GetListUpdateChecks(INT &nCount) CONST
{
	return m_pwndList->GetListUpdateChecks(nCount);
}

BOOL CTCAutomaticStackPageView::SetMiscellaneousOptions(UINT nOptions)
{
	return m_pwndList->SetMiscellaneousOptions(nOptions);
}

BOOL CTCAutomaticStackPageView::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return m_pwndList->GetMiscellaneousOptions(nOptions);
}

BOOL CTCAutomaticStackPageView::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return m_pwndList->SetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackPageView::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pwndList->GetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackPageView::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return m_pwndList->SetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackPageView::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_pwndList->GetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackPageView::EnableFullViewMode(BOOL bEnable)
{
	return m_pwndList->EnableFullViewMode(bEnable);
}

BOOL CTCAutomaticStackPageView::IsFullViewModeEnabled() CONST
{
	return m_pwndList->IsFullViewModeEnabled();
}

BOOL CTCAutomaticStackPageView::EnableToolTipMode(BOOL bEnable)
{
	return m_pwndList->EnableToolTipMode(bEnable);
}

BOOL CTCAutomaticStackPageView::IsToolTipModeEnabled() CONST
{
	return m_pwndList->IsToolTipModeEnabled();
}

BOOL CTCAutomaticStackPageView::SetFilterMode(UINT nMode)
{
	return m_pwndList->SetFilterMode(nMode);
}

BOOL CTCAutomaticStackPageView::GetFilterMode(UINT &nMode) CONST
{
	return m_pwndList->GetFilterMode(nMode);
}

BOOL CTCAutomaticStackPageView::SetFilterTelecommandName(LPCTSTR pszName)
{
	return m_pwndList->SetFilterTelecommandName(pszName);
}

BOOL CTCAutomaticStackPageView::GetFilterTelecommandName(CString &szName) CONST
{
	return m_pwndList->GetFilterTelecommandName(szName);
}

BOOL CTCAutomaticStackPageView::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	return m_pwndList->SetFilterTelecommandSequence(pszSequence);
}

BOOL CTCAutomaticStackPageView::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	return m_pwndList->GetFilterTelecommandSequence(szSequence);
}

BOOL CTCAutomaticStackPageView::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	return m_pwndList->SetFilterTelecommandSubSystems(nSubSystems);
}

BOOL CTCAutomaticStackPageView::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	return m_pwndList->GetFilterTelecommandSubSystems(nSubSystems);
}

BOOL CTCAutomaticStackPageView::SetFilterLimitation(UINT nCount)
{
	return m_pwndList->SetFilterLimitation(nCount);
}

BOOL CTCAutomaticStackPageView::GetFilterLimitation(UINT &nCount) CONST
{
	return m_pwndList->GetFilterLimitation(nCount);
}

BOOL CTCAutomaticStackPageView::SetFilterSortMode(UINT nMode)
{
	return m_pwndList->SetFilterSortMode(nMode);
}

BOOL CTCAutomaticStackPageView::GetFilterSortMode(UINT &nMode) CONST
{
	return m_pwndList->GetFilterSortMode(nMode);
}

BOOL CTCAutomaticStackPageView::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	return m_pwndList->StartTelecommanding(pTCProcessEngine, pTCEnvironment);
}

BOOL CTCAutomaticStackPageView::StopTelecommanding()
{
	return m_pwndList->StopTelecommanding();
}

BOOL CTCAutomaticStackPageView::SetTelecommandingMode(UINT nMode)
{
	return m_pwndList->SetTelecommandingMode(nMode);
}

UINT CTCAutomaticStackPageView::GetTelecommandingMode() CONST
{
	return m_pwndList->GetTelecommandingMode();
}

BOOL CTCAutomaticStackPageView::SetTelecommandingChecks(UINT nFlags)
{
	return m_pwndList->SetTelecommandingChecks(nFlags);
}

UINT CTCAutomaticStackPageView::GetTelecommandingChecks() CONST
{
	return m_pwndList->GetTelecommandingChecks();
}

BOOL CTCAutomaticStackPageView::SetTelecommandingState(UINT nState)
{
	return m_pwndList->SetTelecommandingState(nState);
}

UINT CTCAutomaticStackPageView::GetTelecommandingState() CONST
{
	return m_pwndList->GetTelecommandingState();
}

BOOL CTCAutomaticStackPageView::SetTelecommandingUplinkState(UINT nState)
{
	return m_pwndList->SetTelecommandingUplinkState(nState);
}

UINT CTCAutomaticStackPageView::GetTelecommandingUplinkState() CONST
{
	return m_pwndList->GetTelecommandingUplinkState();
}

BOOL CTCAutomaticStackPageView::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	return m_pwndList->EnableTelecommandingInterlockMode(bEnable);
}

BOOL CTCAutomaticStackPageView::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_pwndList->IsTelecommandingInterlockModeEnabled();
}

BOOL CTCAutomaticStackPageView::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	return m_pwndList->EnableTelecommandingReleaseWaitMode(bEnable);
}

BOOL CTCAutomaticStackPageView::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_pwndList->IsTelecommandingReleaseWaitModeEnabled();
}

BOOL CTCAutomaticStackPageView::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	return m_pwndList->EnableTelecommandingAutoRejectionMode(bEnable);
}

BOOL CTCAutomaticStackPageView::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_pwndList->IsTelecommandingAutoRejectionModeEnabled();
}

BOOL CTCAutomaticStackPageView::SetTelecommands(CONST CTCSavedStack &pStack)
{
	return m_pwndList->SetTelecommands(pStack);
}

BOOL CTCAutomaticStackPageView::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	return m_pwndList->GetTelecommands(pStack, bAll);
}

BOOL CTCAutomaticStackPageView::LoadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	return m_pwndList->LoadTelecommands(pItems);
}

BOOL CTCAutomaticStackPageView::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	return m_pwndList->UpdateTelecommands(pItems, bAll);
}
BOOL CTCAutomaticStackPageView::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return m_pwndList->UpdateTelecommands(pTMEnvironment);
}

BOOL CTCAutomaticStackPageView::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return m_pwndList->UpdateTelecommandInterlocks(pInterlocks);
}

BOOL CTCAutomaticStackPageView::SetCurTelecommand(INT nIndex)
{
	return m_pwndList->SetCurTelecommand(nIndex);
}

INT CTCAutomaticStackPageView::GetCurTelecommand() CONST
{
	return m_pwndList->GetCurTelecommand();
}

BOOL CTCAutomaticStackPageView::SelectTelecommand(INT nIndex)
{
	return m_pwndList->SelectTelecommand(nIndex);
}

BOOL CTCAutomaticStackPageView::DoSelectAllTelecommands()
{
	return m_pwndList->DoSelectAllTelecommands();
}

BOOL CTCAutomaticStackPageView::CanSelectAllTelecommands() CONST
{
	return m_pwndList->CanSelectAllTelecommands();
}

BOOL CTCAutomaticStackPageView::DoUnselectAllTelecommands()
{
	return m_pwndList->DoUnselectAllTelecommands();
}

INT CTCAutomaticStackPageView::EnumSelectedTelecommands(CTCAutomaticStackItems &pItems) CONST
{
	return m_pwndList->EnumSelectedTelecommands(pItems);
}

BOOL CTCAutomaticStackPageView::HasSelectedTelecommands(UINT nStatus) CONST
{
	return m_pwndList->HasSelectedTelecommands(nStatus);
}

UINT CTCAutomaticStackPageView::GetTelecommandCount() CONST
{
	return m_pwndList->GetTelecommandCount();
}

BOOL CTCAutomaticStackPageView::DoCutTelecommand()
{
	return m_pwndList->DoCutTelecommand();
}

BOOL CTCAutomaticStackPageView::CanCutTelecommand() CONST
{
	return m_pwndList->CanCutTelecommand();
}

BOOL CTCAutomaticStackPageView::DoCopyTelecommand()
{
	return m_pwndList->DoCopyTelecommand();
}

BOOL CTCAutomaticStackPageView::CanCopyTelecommand() CONST
{
	return m_pwndList->CanCopyTelecommand();
}

BOOL CTCAutomaticStackPageView::DoPasteTelecommand()
{
	return m_pwndList->DoPasteTelecommand();
}

BOOL CTCAutomaticStackPageView::CanPasteTelecommand() CONST
{
	return m_pwndList->CanPasteTelecommand();
}

BOOL CTCAutomaticStackPageView::DoDeleteTelecommand()
{
	return m_pwndList->DoDeleteTelecommand();
}

BOOL CTCAutomaticStackPageView::CanDeleteTelecommand() CONST
{
	return m_pwndList->CanDeleteTelecommand();
}

BOOL CTCAutomaticStackPageView::DoAcknowledgeTelecommand()
{
	return m_pwndList->DoAcknowledgeTelecommand();
}

BOOL CTCAutomaticStackPageView::CanAcknowledgeTelecommand() CONST
{
	return m_pwndList->CanAcknowledgeTelecommand();
}

BOOL CTCAutomaticStackPageView::ShowTelecommandProperties()
{
	return m_pwndList->ShowTelecommandProperties();
}

BOOL CTCAutomaticStackPageView::CanShowTelecommandProperties() CONST
{
	return m_pwndList->CanShowTelecommandProperties();
}

BOOL CTCAutomaticStackPageView::IsShowingTelecommandProperties() CONST
{
	return m_pwndList->IsShowingTelecommandProperties();
}

BOOL CTCAutomaticStackPageView::SetLayoutInfo(CONST SCROLLINFO *pHorzScrollInfo, CONST SCROLLINFO *pVertScrollInfo)
{
	return m_pwndList->SetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCAutomaticStackPageView::GetLayoutInfo(SCROLLINFO *pHorzScrollInfo, SCROLLINFO *pVertScrollInfo) CONST
{
	return m_pwndList->GetLayoutInfo(pHorzScrollInfo, pVertScrollInfo);
}

BOOL CTCAutomaticStackPageView::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szColumns, CStringArray &szContents, CTextViewAttributes &pAttributes, LOGFONT *pTitleFont, LOGFONT *pItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_pwndList->GetPrintProperties(pJobInfo, szColumns, szContents, pAttributes, pTitleFont, pItemsFont, pSymbols, nSymbolIDs);
}

VOID CTCAutomaticStackPageView::UpdateContent(BOOL bFilter, BOOL bRedraw)
{
	m_pwndList->UpdateContent(bFilter, bRedraw);
}

VOID CTCAutomaticStackPageView::SetTrackSize(CONST SIZE &size)
{
	m_pwndList->SetTrackSize(size);
}

CSize CTCAutomaticStackPageView::GetTrackSize() CONST
{
	return m_pwndList->GetTrackSize();
}

CTCAutomaticStackWnd *CTCAutomaticStackPageView::GetParentDisplay() CONST
{
	return((CTCAutomaticStackWnd *)m_pParentWnd);
}

BOOL CTCAutomaticStackPageView::Lock()
{
	return m_pwndList->Lock();
}

BOOL CTCAutomaticStackPageView::Unlock()
{
	return m_pwndList->Unlock();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackPageView, CView)
	//{{AFX_MSG_MAP(CTCAutomaticStackPageView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPageView drawing

void CTCAutomaticStackPageView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackPageView message handlers

int CTCAutomaticStackPageView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) != -1 && m_pwndList->Create(this, (IsKindOf(RUNTIME_CLASS(CTCAutomaticStackNormalPageScheduledView))) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : ((IsKindOf(RUNTIME_CLASS(CTCAutomaticStackNormalPageHistoricalView))) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL) : ((IsKindOf(RUNTIME_CLASS(CTCAutomaticStackTimeTaggedPageScheduledView))) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))), CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy), TVS_HEADER | TVS_TOP | TVS_BUTTONS | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		m_pParentWnd = GetParent()->GetParent()->GetParent();
		return 0;
	}
	return -1;
}

void CTCAutomaticStackPageView::OnSize(UINT nType, int cx, int cy)
{
	m_pwndList->MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCAutomaticStackPageView::OnEraseBkgnd(CDC *pDC)
{
	return TRUE;
}

void CTCAutomaticStackPageView::OnSetFocus(CWnd *pOldWnd)
{
	CWnd  *pWnd;

	if (IsWindow(pOldWnd->GetSafeHwnd()))
	{
		if ((pWnd = (!IsChild(pOldWnd)) ? m_pwndList : GetParent()))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPageScheduledView view

IMPLEMENT_DYNCREATE(CTCAutomaticStackNormalPageScheduledView, CTCAutomaticStackPageView)

CTCAutomaticStackNormalPageScheduledView::CTCAutomaticStackNormalPageScheduledView() : CTCAutomaticStackPageView()
{
	return;
}

CTCAutomaticStackNormalPage *CTCAutomaticStackNormalPageScheduledView::GetParent() CONST
{
	return((CTCAutomaticStackNormalPage *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackNormalPageScheduledView, CTCAutomaticStackPageView)
	//{{AFX_MSG_MAP(CTCAutomaticStackNormalPageScheduledView)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPageScheduledView message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPageHistoricalView view

IMPLEMENT_DYNCREATE(CTCAutomaticStackNormalPageHistoricalView, CTCAutomaticStackPageView)

CTCAutomaticStackNormalPageHistoricalView::CTCAutomaticStackNormalPageHistoricalView() : CTCAutomaticStackPageView()
{
	return;
}

CTCAutomaticStackNormalPage *CTCAutomaticStackNormalPageHistoricalView::GetParent() CONST
{
	return((CTCAutomaticStackNormalPage *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackNormalPageHistoricalView, CTCAutomaticStackPageView)
	//{{AFX_MSG_MAP(CTCAutomaticStackNormalPageHistoricalView)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPageHistoricalView message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPage

IMPLEMENT_DYNCREATE(CTCAutomaticStackNormalPage, CSplitterWndEx)

CTCAutomaticStackNormalPage::CTCAutomaticStackNormalPage() : CSplitterWndEx()
{
	m_pScheduledView = (CTCAutomaticStackNormalPageScheduledView *)NULL;
	m_pHistoricalView = (CTCAutomaticStackNormalPageHistoricalView *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCAutomaticStackNormalPage::Create(CWnd *pParentWnd, CONST CUIntArray &nScheduledPaneColumns, CONST CUIntArray &nScheduledPaneColumnWidths, CONST SIZE &sizeScheduledPaneList, CONST CUIntArray &nHistoricalPaneColumns, CONST CUIntArray &nHistoricalPaneColumnWidths, CONST SIZE &sizeHistoricalPaneList, BOOL bVisible)
{
	CRect  rPanes;
	CSize  sizePanes[2];
	CCreateContext  cContext;

	if (CreateStatic((m_pParentWnd = pParentWnd), 2, 1))
	{
		for (GetParent()->GetClientRect(rPanes), GetParent()->AdjustRect(FALSE, rPanes), cContext.m_pCurrentDoc = new CTCAutomaticStackDocument; CreateView(0, 0, RUNTIME_CLASS(CTCAutomaticStackNormalPageScheduledView), (sizePanes[0] = CSize(rPanes.Width(), (2 * rPanes.Height()) / 3)), &cContext) && CreateView(1, 0, RUNTIME_CLASS(CTCAutomaticStackNormalPageHistoricalView), (sizePanes[1] = CSize(rPanes.Width(), rPanes.Height() / 3)), &cContext); )
		{
			for (m_pScheduledView = (CTCAutomaticStackNormalPageScheduledView *)GetPane(0, 0), m_pHistoricalView = (CTCAutomaticStackNormalPageHistoricalView *)GetPane(1, 0); (m_pScheduledView->SetLayout(nScheduledPaneColumns, nScheduledPaneColumnWidths) || m_pScheduledView->SetLayout(TCAUTOMATICSTACK_TITLEITEM_NUMBER | TCAUTOMATICSTACK_TITLEITEM_NAME | TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION | TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS | TCAUTOMATICSTACK_TITLEITEM_FLAGS | TCAUTOMATICSTACK_TITLEITEM_RELEASETIME | TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET | TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION | TCAUTOMATICSTACK_TITLEITEM_STATUS)) && (m_pHistoricalView->SetLayout(nHistoricalPaneColumns, nHistoricalPaneColumnWidths) || m_pHistoricalView->SetLayout(TCAUTOMATICSTACK_TITLEITEM_NUMBER | TCAUTOMATICSTACK_TITLEITEM_NAME | TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION | TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS | TCAUTOMATICSTACK_TITLEITEM_FLAGS | TCAUTOMATICSTACK_TITLEITEM_RELEASETIME | TCAUTOMATICSTACK_TITLEITEM_RELEASETIMEOFFSET | TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS | TCAUTOMATICSTACK_TITLEITEM_CEVRESULT | TCAUTOMATICSTACK_TITLEITEM_STATUS)); )
			{
				SetRowInfo(0, (sizeScheduledPaneList.cy > 0) ? sizeScheduledPaneList.cy : max(sizePanes[0].cy, 0), 0);
				SetRowInfo(1, (sizeHistoricalPaneList.cy > 0) ? sizeHistoricalPaneList.cy : max(sizePanes[1].cy, 0), 0);
				ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				MoveWindow(rPanes);
				return TRUE;
			}
			break;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackNormalPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetLayout(nColumns) : m_pHistoricalView->SetLayout(nColumns)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetLayout(nColumns, nWidths) : m_pHistoricalView->SetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizeList)
{
	if (SetLayout(nPane, nColumns, nWidths))
	{
		SetRowInfo((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? 0 : 1, max(sizeList.cy, 0), 0);
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackNormalPage::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetLayout(nColumns) : m_pHistoricalView->GetLayout(nColumns)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetLayout(nColumns, nWidths) : m_pHistoricalView->GetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizeList) CONST
{
	INT  nPaneHeight[2];

	if (GetLayout(nPane, nColumns, nWidths))
	{
		GetRowInfo((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? 0 : 1, nPaneHeight[0], nPaneHeight[1]);
		sizeList.cx = (sizeList.cy = nPaneHeight[0]) - nPaneHeight[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackNormalPage::SetListTitleFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListTitleFont(pFont) : m_pHistoricalView->SetListTitleFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::SetListTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListTitleFont(plfFont) : m_pHistoricalView->SetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetListTitleFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListTitleFont(pFont) : m_pHistoricalView->GetListTitleFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::GetListTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListTitleFont(plfFont) : m_pHistoricalView->GetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetListItemsFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListItemsFont(pFont) : m_pHistoricalView->SetListItemsFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::SetListItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListItemsFont(plfFont) : m_pHistoricalView->SetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetListItemsFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListItemsFont(pFont) : m_pHistoricalView->GetListItemsFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::GetListItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListItemsFont(plfFont) : m_pHistoricalView->GetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetGridBackgroundColor(UINT nPane, COLORREF nColor)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetGridBackgroundColor(nColor) : m_pHistoricalView->SetGridBackgroundColor(nColor)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetGridBackgroundColor(nColor) : m_pHistoricalView->GetGridBackgroundColor(nColor)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetAlertColors(UINT nPane, CONST CUIntArray &nColors)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetAlertColors(nColors) : m_pHistoricalView->SetAlertColors(nColors)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetAlertColors(UINT nPane, CUIntArray &nColors) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetAlertColors(nColors) : m_pHistoricalView->GetAlertColors(nColors)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetListOptions(INT nArguments, BOOL bAll)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetListOptions(nArguments, bAll) && m_pHistoricalView->SetListOptions(nArguments, bAll)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetListOptions(nArguments, bAll) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetListUpdateChecks(INT nCount)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetListUpdateChecks(nCount) && m_pHistoricalView->SetListUpdateChecks(nCount)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetListUpdateChecks(INT &nCount) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->SetListUpdateChecks(nCount) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetMiscellaneousOptions(UINT nOptions)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetMiscellaneousOptions(nOptions) && m_pHistoricalView->SetMiscellaneousOptions(nOptions)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetMiscellaneousOptions(nOptions) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetDefaultReleaseTimeWindow(tTimeWindow) && m_pHistoricalView->SetDefaultReleaseTimeWindow(tTimeWindow)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetDefaultReleaseTimeWindow(tTimeWindow) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetDispatchTimeWindow(tTimeWindow) && m_pHistoricalView->SetDispatchTimeWindow(tTimeWindow)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetDispatchTimeWindow(tTimeWindow) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::EnableFullViewMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableFullViewMode(bEnable) && m_pHistoricalView->EnableFullViewMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsFullViewModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsFullViewModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackNormalPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableToolTipMode(bEnable) && m_pHistoricalView->EnableToolTipMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsToolTipModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterMode(UINT &nMode) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterTelecommandName(LPCTSTR pszName)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandName(pszName) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterTelecommandName(CString &szName) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandName(szName) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandSequence(pszSequence) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandSequence(szSequence) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandSubSystems(nSubSystems) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandSubSystems(nSubSystems) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterLimitation(UINT nCount)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterLimitation(nCount) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterLimitation(UINT &nCount) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterLimitation(nCount) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetFilterSortMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterSortMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetFilterSortMode(UINT &nMode) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterSortMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->StartTelecommanding(pTCProcessEngine, pTCEnvironment) && m_pHistoricalView->StartTelecommanding(pTCProcessEngine, pTCEnvironment)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::StopTelecommanding()
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->StopTelecommanding() && m_pHistoricalView->StopTelecommanding()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetTelecommandingMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingMode(nMode) && m_pHistoricalView->SetTelecommandingMode(nMode)) : FALSE);
}

UINT CTCAutomaticStackNormalPage::GetTelecommandingMode() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingMode() : 0);
}

BOOL CTCAutomaticStackNormalPage::SetTelecommandingChecks(UINT nFlags)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingChecks(nFlags) && m_pHistoricalView->SetTelecommandingChecks(nFlags)) : FALSE);
}

UINT CTCAutomaticStackNormalPage::GetTelecommandingChecks() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingChecks() : 0);
}

BOOL CTCAutomaticStackNormalPage::SetTelecommandingState(UINT nState)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingState(nState) && m_pHistoricalView->SetTelecommandingState(nState)) : FALSE);
}

UINT CTCAutomaticStackNormalPage::GetTelecommandingState() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingState() : 0);
}

BOOL CTCAutomaticStackNormalPage::SetTelecommandingUplinkState(UINT nState)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingUplinkState(nState) && m_pHistoricalView->SetTelecommandingUplinkState(nState)) : FALSE);
}

UINT CTCAutomaticStackNormalPage::GetTelecommandingUplinkState() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingUplinkState() : 0);
}

BOOL CTCAutomaticStackNormalPage::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingInterlockMode(bEnable) && m_pHistoricalView->EnableTelecommandingInterlockMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsTelecommandingInterlockModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingInterlockModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackNormalPage::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingReleaseWaitMode(bEnable) && m_pHistoricalView->EnableTelecommandingReleaseWaitMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingReleaseWaitModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackNormalPage::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingAutoRejectionMode(bEnable) && m_pHistoricalView->EnableTelecommandingAutoRejectionMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingAutoRejectionModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetTelecommands(CONST CTCSavedStack &pStack)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->SetTelecommands(pStack) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommands(pStack) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::LoadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->LoadTelecommands(pItems) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->UpdateTelecommands(pItems, bAll) && m_pHistoricalView->UpdateTelecommands(pItems, bAll)) : FALSE);
}
BOOL CTCAutomaticStackNormalPage::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->UpdateTelecommands(pTMEnvironment) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->UpdateTelecommandInterlocks(pInterlocks) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetCurTelecommand(UINT nPane, INT nIndex)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetCurTelecommand(nIndex) : FALSE) : FALSE);
}

INT CTCAutomaticStackNormalPage::GetCurTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetCurTelecommand() : -1) : -1);
}

BOOL CTCAutomaticStackNormalPage::SelectTelecommand(UINT nPane, INT nIndex)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SelectTelecommand(nIndex) : m_pHistoricalView->SelectTelecommand(nIndex)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoSelectAllTelecommands(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoSelectAllTelecommands() : m_pHistoricalView->DoSelectAllTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanSelectAllTelecommands(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanSelectAllTelecommands() : m_pHistoricalView->CanSelectAllTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoUnselectAllTelecommands(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoUnselectAllTelecommands() : m_pHistoricalView->DoUnselectAllTelecommands()) : FALSE);
}

INT CTCAutomaticStackNormalPage::EnumSelectedTelecommands(UINT nPane, CTCAutomaticStackItems &pItems) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->EnumSelectedTelecommands(pItems) : m_pHistoricalView->EnumSelectedTelecommands(pItems)) : 0);
}

BOOL CTCAutomaticStackNormalPage::HasSelectedTelecommands(UINT nPane, UINT nStatus) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->HasSelectedTelecommands(nStatus) : m_pHistoricalView->HasSelectedTelecommands(nStatus)) : FALSE);
}

UINT CTCAutomaticStackNormalPage::GetTelecommandCount(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetTelecommandCount() : m_pHistoricalView->GetTelecommandCount()) : 0);
}

BOOL CTCAutomaticStackNormalPage::DoCutTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoCutTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanCutTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanCutTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoCopyTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoCopyTelecommand() : m_pHistoricalView->DoCopyTelecommand()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanCopyTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanCopyTelecommand() : m_pHistoricalView->CanCopyTelecommand()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoPasteTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoPasteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanPasteTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanPasteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoDeleteTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoDeleteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanDeleteTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanDeleteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::DoAcknowledgeTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) != TCAUTOMATICSTACK_PANE_SCHEDULED || m_pScheduledView->DoAcknowledgeTelecommand()) && ((nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) != TCAUTOMATICSTACK_PANE_HISTORICAL || m_pHistoricalView->DoAcknowledgeTelecommand())) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::CanAcknowledgeTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && m_pScheduledView->CanAcknowledgeTelecommand()) || ((nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) && m_pHistoricalView->CanAcknowledgeTelecommand())) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::ShowTelecommandProperties()
{
	if (IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd()))
	{
		if (m_pScheduledView->CanShowTelecommandProperties()) return m_pScheduledView->ShowTelecommandProperties();
		if (m_pHistoricalView->CanShowTelecommandProperties()) return m_pHistoricalView->ShowTelecommandProperties();
	}
	return FALSE;
}

BOOL CTCAutomaticStackNormalPage::CanShowTelecommandProperties() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->CanShowTelecommandProperties() || m_pHistoricalView->CanShowTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::IsShowingTelecommandProperties() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->IsShowingTelecommandProperties() || m_pHistoricalView->IsShowingTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::SetLayoutInfo(CONST SCROLLINFO *pScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pScheduledPaneVertScrollInfo, CONST SCROLLINFO *pHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pHistoricalPaneVertScrollInfo)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetLayoutInfo(pScheduledPaneHorzScrollInfo, pScheduledPaneVertScrollInfo) && m_pHistoricalView->SetLayoutInfo(pHistoricalPaneHorzScrollInfo, pHistoricalPaneVertScrollInfo)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetLayoutInfo(SCROLLINFO *pScheduledPaneHorzScrollInfo, SCROLLINFO *pScheduledPaneVertScrollInfo, SCROLLINFO *pHistoricalPaneHorzScrollInfo, SCROLLINFO *pHistoricalPaneVertScrollInfo) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->GetLayoutInfo(pScheduledPaneHorzScrollInfo, pScheduledPaneVertScrollInfo) && m_pHistoricalView->GetLayoutInfo(pHistoricalPaneHorzScrollInfo, pHistoricalPaneVertScrollInfo)) : FALSE);
}

BOOL CTCAutomaticStackNormalPage::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szNormalStackScheduledColumns, CStringArray &szNormalStackScheduledContents, CTextViewAttributes &pNormalStackScheduledAttributes, LOGFONT *pNormalStackScheduledTitleFont, LOGFONT *pNormalStackScheduledItemsFont, CStringArray &szNormalStackHistoricalColumns, CStringArray &szNormalStackHistoricalContents, CTextViewAttributes &pNormalStackHistoricalAttributes, LOGFONT *pNormalStackHistoricalTitleFont, LOGFONT *pNormalStackHistoricalItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->GetPrintProperties(pJobInfo, szNormalStackScheduledColumns, szNormalStackScheduledContents, pNormalStackScheduledAttributes, pNormalStackScheduledTitleFont, pNormalStackScheduledItemsFont, pSymbols, nSymbolIDs) && m_pHistoricalView->GetPrintProperties(pJobInfo, szNormalStackHistoricalColumns, szNormalStackHistoricalContents, pNormalStackHistoricalAttributes, pNormalStackHistoricalTitleFont, pNormalStackHistoricalItemsFont, pSymbols, nSymbolIDs)) : FALSE);
}

VOID CTCAutomaticStackNormalPage::UpdateContents(BOOL bFilter, BOOL bRedraw)
{
	if (IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd()))
	{
		m_pScheduledView->UpdateContent(bFilter, bRedraw);
		m_pHistoricalView->UpdateContent(bFilter, bRedraw);
	}
}

void CTCAutomaticStackNormalPage::StartTracking(int ht)
{
	CSplitterWndEx::StartTracking(ht);
	m_rectLimit.top += m_pScheduledView->GetTrackSize().cy;
}

VOID CTCAutomaticStackNormalPage::SetTrackSize(CONST SIZE &size)
{
	m_pScheduledView->SetTrackSize(size);
	m_pHistoricalView->SetTrackSize(size);
}

CSize CTCAutomaticStackNormalPage::GetTrackSize() CONST
{
	return m_pScheduledView->GetTrackSize();
}

CTCAutomaticStackNormalPageScheduledView *CTCAutomaticStackNormalPage::GetScheduledView() CONST
{
	return m_pScheduledView;
}

CTCAutomaticStackNormalPageHistoricalView *CTCAutomaticStackNormalPage::GetHistoricalView() CONST
{
	return m_pHistoricalView;
}

CTCAutomaticStackView *CTCAutomaticStackNormalPage::GetParent() CONST
{
	return((CTCAutomaticStackView *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackNormalPage, CSplitterWndEx)
	//{{AFX_MSG_MAP(CTCAutomaticStackNormalPage)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackNormalPage message handlers

void CTCAutomaticStackNormalPage::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent())
	{
		if (GetScheduledView()->GetCurTelecommand() < 0 && !GetScheduledView()->HasSelectedTelecommands()) GetScheduledView()->SetCurTelecommand(0);
		GetScheduledView()->SetFocus();
		return;
	}
	if (pOldWnd == GetScheduledView())
	{
		if (GetHistoricalView()->GetCurTelecommand() < 0 && !GetHistoricalView()->HasSelectedTelecommands()) GetHistoricalView()->SetCurTelecommand(0);
		GetHistoricalView()->SetFocus();
		return;
	}
	if (pOldWnd == GetHistoricalView())
	{
		GetParent()->SetFocus();
		return;
	}
	CSplitterWndEx::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPageScheduledView view

IMPLEMENT_DYNCREATE(CTCAutomaticStackTimeTaggedPageScheduledView, CTCAutomaticStackPageView)

CTCAutomaticStackTimeTaggedPageScheduledView::CTCAutomaticStackTimeTaggedPageScheduledView() : CTCAutomaticStackPageView()
{
	return;
}

CTCAutomaticStackTimeTaggedPage *CTCAutomaticStackTimeTaggedPageScheduledView::GetParent() CONST
{
	return((CTCAutomaticStackTimeTaggedPage *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackTimeTaggedPageScheduledView, CTCAutomaticStackPageView)
	//{{AFX_MSG_MAP(CTCAutomaticStackTimeTaggedPageScheduledView)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPageScheduledView message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPageHistoricalView view

IMPLEMENT_DYNCREATE(CTCAutomaticStackTimeTaggedPageHistoricalView, CTCAutomaticStackPageView)

CTCAutomaticStackTimeTaggedPageHistoricalView::CTCAutomaticStackTimeTaggedPageHistoricalView() : CTCAutomaticStackPageView()
{
	return;
}

CTCAutomaticStackTimeTaggedPage *CTCAutomaticStackTimeTaggedPageHistoricalView::GetParent() CONST
{
	return((CTCAutomaticStackTimeTaggedPage *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackTimeTaggedPageHistoricalView, CTCAutomaticStackPageView)
	//{{AFX_MSG_MAP(CTCAutomaticStackTimeTaggedPageHistoricalView)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPageHistoricalView message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPage

IMPLEMENT_DYNCREATE(CTCAutomaticStackTimeTaggedPage, CSplitterWndEx)

CTCAutomaticStackTimeTaggedPage::CTCAutomaticStackTimeTaggedPage() : CSplitterWndEx()
{
	m_pScheduledView = (CTCAutomaticStackTimeTaggedPageScheduledView *)NULL;
	m_pHistoricalView = (CTCAutomaticStackTimeTaggedPageHistoricalView *)NULL;
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCAutomaticStackTimeTaggedPage::Create(CWnd *pParentWnd, CONST CUIntArray &nScheduledPaneColumns, CONST CUIntArray &nScheduledPaneColumnWidths, CONST SIZE &sizeScheduledPaneList, CONST CUIntArray &nHistoricalPaneColumns, CONST CUIntArray &nHistoricalPaneColumnWidths, CONST SIZE &sizeHistoricalPaneList, BOOL bVisible)
{
	CRect  rPanes;
	CSize  sizePanes[2];
	CCreateContext  cContext;

	if (CreateStatic((m_pParentWnd = pParentWnd), 2, 1))
	{
		for (GetParent()->GetClientRect(rPanes), GetParent()->AdjustRect(FALSE, rPanes), cContext.m_pCurrentDoc = new CTCAutomaticStackDocument; CreateView(0, 0, RUNTIME_CLASS(CTCAutomaticStackTimeTaggedPageScheduledView), (sizePanes[0] = CSize(rPanes.Width(), (2 * rPanes.Height()) / 3)), &cContext) && CreateView(1, 0, RUNTIME_CLASS(CTCAutomaticStackTimeTaggedPageHistoricalView), (sizePanes[1] = CSize(rPanes.Width(), rPanes.Height() / 3)), &cContext); )
		{
			for (m_pScheduledView = (CTCAutomaticStackTimeTaggedPageScheduledView *)GetPane(0, 0), m_pHistoricalView = (CTCAutomaticStackTimeTaggedPageHistoricalView *)GetPane(1, 0); (m_pScheduledView->SetLayout(nScheduledPaneColumns, nScheduledPaneColumnWidths) || m_pScheduledView->SetLayout(TCAUTOMATICSTACK_TITLEITEM_NUMBER | TCAUTOMATICSTACK_TITLEITEM_NAME | TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION | TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS | TCAUTOMATICSTACK_TITLEITEM_FLAGS | TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME | TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET | TCAUTOMATICSTACK_TITLEITEM_AUTHORIZATION | TCAUTOMATICSTACK_TITLEITEM_STATUS)) && (m_pHistoricalView->SetLayout(nHistoricalPaneColumns, nHistoricalPaneColumnWidths) || m_pHistoricalView->SetLayout(TCAUTOMATICSTACK_TITLEITEM_NUMBER | TCAUTOMATICSTACK_TITLEITEM_NAME | TCAUTOMATICSTACK_TITLEITEM_DESCRIPTION | TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS | TCAUTOMATICSTACK_TITLEITEM_FLAGS | TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIME | TCAUTOMATICSTACK_TITLEITEM_EXECUTIONTIMEOFFSET | TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS | TCAUTOMATICSTACK_TITLEITEM_CEVRESULT | TCAUTOMATICSTACK_TITLEITEM_STATUS)); )
			{
				SetRowInfo(0, (sizeScheduledPaneList.cy > 0) ? sizeScheduledPaneList.cy : max(sizePanes[0].cy, 0), 0);
				SetRowInfo(1, (sizeHistoricalPaneList.cy > 0) ? sizeHistoricalPaneList.cy : max(sizePanes[1].cy, 0), 0);
				ShowWindow((bVisible) ? SW_SHOW : SW_HIDE);
				MoveWindow(rPanes);
				return TRUE;
			}
			break;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackTimeTaggedPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetLayout(nColumns) : m_pHistoricalView->SetLayout(nColumns)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetLayout(nColumns, nWidths) : m_pHistoricalView->SetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizeList)
{
	if (SetLayout(nPane, nColumns, nWidths))
	{
		SetRowInfo((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? 0 : 1, max(sizeList.cy, 0), 0);
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackTimeTaggedPage::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetLayout(nColumns) : m_pHistoricalView->GetLayout(nColumns)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetLayout(nColumns, nWidths) : m_pHistoricalView->GetLayout(nColumns, nWidths)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizeList) CONST
{
	INT  nPaneHeight[2];

	if (GetLayout(nPane, nColumns, nWidths))
	{
		GetRowInfo((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? 0 : 1, nPaneHeight[0], nPaneHeight[1]);
		sizeList.cx = (sizeList.cy = nPaneHeight[0]) - nPaneHeight[0];
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackTimeTaggedPage::SetListTitleFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListTitleFont(pFont) : m_pHistoricalView->SetListTitleFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::SetListTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListTitleFont(plfFont) : m_pHistoricalView->SetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetListTitleFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListTitleFont(pFont) : m_pHistoricalView->GetListTitleFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::GetListTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListTitleFont(plfFont) : m_pHistoricalView->GetListTitleFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetListItemsFont(UINT nPane, CFont *pFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListItemsFont(pFont) : m_pHistoricalView->SetListItemsFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::SetListItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetListItemsFont(plfFont) : m_pHistoricalView->SetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetListItemsFont(UINT nPane, CFont *pFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListItemsFont(pFont) : m_pHistoricalView->GetListItemsFont(pFont)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::GetListItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetListItemsFont(plfFont) : m_pHistoricalView->GetListItemsFont(plfFont)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetGridBackgroundColor(UINT nPane, COLORREF nColor)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetGridBackgroundColor(nColor) : m_pHistoricalView->SetGridBackgroundColor(nColor)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetGridBackgroundColor(nColor) : m_pHistoricalView->GetGridBackgroundColor(nColor)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetAlertColors(UINT nPane, CONST CUIntArray &nColors)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetAlertColors(nColors) : m_pHistoricalView->SetAlertColors(nColors)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetAlertColors(UINT nPane, CUIntArray &nColors) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetAlertColors(nColors) : m_pHistoricalView->GetAlertColors(nColors)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetListOptions(INT nArguments, BOOL bAll)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetListOptions(nArguments, bAll) && m_pHistoricalView->SetListOptions(nArguments, bAll)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetListOptions(nArguments, bAll) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetListUpdateChecks(INT nCount)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetListUpdateChecks(nCount) && m_pHistoricalView->SetListUpdateChecks(nCount)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetListUpdateChecks(INT &nCount) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->SetListUpdateChecks(nCount) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetMiscellaneousOptions(UINT nOptions)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetMiscellaneousOptions(nOptions) && m_pHistoricalView->SetMiscellaneousOptions(nOptions)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetMiscellaneousOptions(nOptions) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetDefaultReleaseTimeWindow(tTimeWindow) && m_pHistoricalView->SetDefaultReleaseTimeWindow(tTimeWindow)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetDefaultReleaseTimeWindow(tTimeWindow) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetDispatchTimeWindow(tTimeWindow) && m_pHistoricalView->SetDispatchTimeWindow(tTimeWindow)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetDispatchTimeWindow(tTimeWindow) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::EnableFullViewMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableFullViewMode(bEnable) && m_pHistoricalView->EnableFullViewMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsFullViewModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsFullViewModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::EnableToolTipMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableToolTipMode(bEnable) && m_pHistoricalView->EnableToolTipMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsToolTipModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsToolTipModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterMode(UINT &nMode) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterTelecommandName(LPCTSTR pszName)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandName(pszName) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterTelecommandName(CString &szName) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandName(szName) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandSequence(pszSequence) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandSequence(szSequence) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterTelecommandSubSystems(nSubSystems) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterTelecommandSubSystems(nSubSystems) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterLimitation(UINT nCount)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterLimitation(nCount) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterLimitation(UINT &nCount) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterLimitation(nCount) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetFilterSortMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->SetFilterSortMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetFilterSortMode(UINT &nMode) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pHistoricalView->GetFilterSortMode(nMode) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->StartTelecommanding(pTCProcessEngine, pTCEnvironment) && m_pHistoricalView->StartTelecommanding(pTCProcessEngine, pTCEnvironment)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::StopTelecommanding()
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->StopTelecommanding() && m_pHistoricalView->StopTelecommanding()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetTelecommandingMode(UINT nMode)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingMode(nMode) && m_pHistoricalView->SetTelecommandingMode(nMode)) : FALSE);
}

UINT CTCAutomaticStackTimeTaggedPage::GetTelecommandingMode() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingMode() : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetTelecommandingChecks(UINT nFlags)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingChecks(nFlags) && m_pHistoricalView->SetTelecommandingChecks(nFlags)) : FALSE);
}

UINT CTCAutomaticStackTimeTaggedPage::GetTelecommandingChecks() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingChecks() : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetTelecommandingState(UINT nState)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingState(nState) && m_pHistoricalView->SetTelecommandingState(nState)) : FALSE);
}

UINT CTCAutomaticStackTimeTaggedPage::GetTelecommandingState() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingState() : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetTelecommandingUplinkState(UINT nState)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetTelecommandingUplinkState(nState) && m_pHistoricalView->SetTelecommandingUplinkState(nState)) : FALSE);
}

UINT CTCAutomaticStackTimeTaggedPage::GetTelecommandingUplinkState() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommandingUplinkState() : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingInterlockMode(bEnable) && m_pHistoricalView->EnableTelecommandingInterlockMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsTelecommandingInterlockModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingInterlockModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingReleaseWaitMode(bEnable) && m_pHistoricalView->EnableTelecommandingReleaseWaitMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingReleaseWaitModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->EnableTelecommandingAutoRejectionMode(bEnable) && m_pHistoricalView->EnableTelecommandingAutoRejectionMode(bEnable)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->IsTelecommandingAutoRejectionModeEnabled() : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetTelecommands(CONST CTCSavedStack &pStack)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->SetTelecommands(pStack) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->GetTelecommands(pStack) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::LoadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->LoadTelecommands(pItems) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->UpdateTelecommands(pItems, bAll) && m_pHistoricalView->UpdateTelecommands(pItems, bAll)) : FALSE);
}
BOOL CTCAutomaticStackTimeTaggedPage::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->UpdateTelecommands(pTMEnvironment) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? m_pScheduledView->UpdateTelecommandInterlocks(pInterlocks) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetCurTelecommand(UINT nPane, INT nIndex)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SetCurTelecommand(nIndex) : FALSE) : FALSE);
}

INT CTCAutomaticStackTimeTaggedPage::GetCurTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetCurTelecommand() : -1) : -1);
}

BOOL CTCAutomaticStackTimeTaggedPage::SelectTelecommand(UINT nPane, INT nIndex)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->SelectTelecommand(nIndex) : m_pHistoricalView->SelectTelecommand(nIndex)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoSelectAllTelecommands(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoSelectAllTelecommands() : m_pHistoricalView->DoSelectAllTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanSelectAllTelecommands(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanSelectAllTelecommands() : m_pHistoricalView->CanSelectAllTelecommands()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoUnselectAllTelecommands(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoUnselectAllTelecommands() : m_pHistoricalView->DoUnselectAllTelecommands()) : FALSE);
}

INT CTCAutomaticStackTimeTaggedPage::EnumSelectedTelecommands(UINT nPane, CTCAutomaticStackItems &pItems) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->EnumSelectedTelecommands(pItems) : m_pHistoricalView->EnumSelectedTelecommands(pItems)) : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::HasSelectedTelecommands(UINT nPane, UINT nStatus) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->HasSelectedTelecommands(nStatus) : m_pHistoricalView->HasSelectedTelecommands(nStatus)) : FALSE);
}

UINT CTCAutomaticStackTimeTaggedPage::GetTelecommandCount(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->GetTelecommandCount() : m_pHistoricalView->GetTelecommandCount()) : 0);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoCutTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoCutTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanCutTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanCutTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoCopyTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoCopyTelecommand() : m_pHistoricalView->DoCopyTelecommand()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanCopyTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanCopyTelecommand() : m_pHistoricalView->CanCopyTelecommand()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoPasteTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoPasteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanPasteTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanPasteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoDeleteTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->DoDeleteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanDeleteTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? ((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) ? m_pScheduledView->CanDeleteTelecommand() : FALSE) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::DoAcknowledgeTelecommand(UINT nPane)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && m_pScheduledView->DoAcknowledgeTelecommand()) || ((nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) && m_pHistoricalView->DoAcknowledgeTelecommand())) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::CanAcknowledgeTelecommand(UINT nPane) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (((nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) && m_pScheduledView->CanAcknowledgeTelecommand()) || ((nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) && m_pHistoricalView->CanAcknowledgeTelecommand())) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::ShowTelecommandProperties()
{
	if (IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd()))
	{
		if (m_pScheduledView->CanShowTelecommandProperties()) return m_pScheduledView->ShowTelecommandProperties();
		if (m_pHistoricalView->CanShowTelecommandProperties()) return m_pHistoricalView->ShowTelecommandProperties();
	}
	return FALSE;
}

BOOL CTCAutomaticStackTimeTaggedPage::CanShowTelecommandProperties() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->CanShowTelecommandProperties() || m_pHistoricalView->CanShowTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::IsShowingTelecommandProperties() CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->IsShowingTelecommandProperties() || m_pHistoricalView->IsShowingTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::SetLayoutInfo(CONST SCROLLINFO *pScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pScheduledPaneVertScrollInfo, CONST SCROLLINFO *pHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pHistoricalPaneVertScrollInfo)
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->SetLayoutInfo(pScheduledPaneHorzScrollInfo, pScheduledPaneVertScrollInfo) && m_pHistoricalView->SetLayoutInfo(pHistoricalPaneHorzScrollInfo, pHistoricalPaneVertScrollInfo)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetLayoutInfo(SCROLLINFO *pScheduledPaneHorzScrollInfo, SCROLLINFO *pScheduledPaneVertScrollInfo, SCROLLINFO *pHistoricalPaneHorzScrollInfo, SCROLLINFO *pHistoricalPaneVertScrollInfo) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->GetLayoutInfo(pScheduledPaneHorzScrollInfo, pScheduledPaneVertScrollInfo) && m_pHistoricalView->GetLayoutInfo(pHistoricalPaneHorzScrollInfo, pHistoricalPaneVertScrollInfo)) : FALSE);
}

BOOL CTCAutomaticStackTimeTaggedPage::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szTimeTaggedStackScheduledColumns, CStringArray &szTimeTaggedStackScheduledContents, CTextViewAttributes &pTimeTaggedStackScheduledAttributes, LOGFONT *pTimeTaggedStackScheduledTitleFont, LOGFONT *pTimeTaggedStackScheduledItemsFont, CStringArray &szTimeTaggedStackHistoricalColumns, CStringArray &szTimeTaggedStackHistoricalContents, CTextViewAttributes &pTimeTaggedStackHistoricalAttributes, LOGFONT *pTimeTaggedStackHistoricalTitleFont, LOGFONT *pTimeTaggedStackHistoricalItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return((IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd())) ? (m_pScheduledView->GetPrintProperties(pJobInfo, szTimeTaggedStackScheduledColumns, szTimeTaggedStackScheduledContents, pTimeTaggedStackScheduledAttributes, pTimeTaggedStackScheduledTitleFont, pTimeTaggedStackScheduledItemsFont, pSymbols, nSymbolIDs) && m_pHistoricalView->GetPrintProperties(pJobInfo, szTimeTaggedStackHistoricalColumns, szTimeTaggedStackHistoricalContents, pTimeTaggedStackHistoricalAttributes, pTimeTaggedStackHistoricalTitleFont, pTimeTaggedStackHistoricalItemsFont, pSymbols, nSymbolIDs)) : FALSE);
}

VOID CTCAutomaticStackTimeTaggedPage::UpdateContents(BOOL bFilter, BOOL bRedraw)
{
	if (IsWindow(m_pScheduledView->GetSafeHwnd()) && IsWindow(m_pHistoricalView->GetSafeHwnd()))
	{
		m_pScheduledView->UpdateContent(bFilter, bRedraw);
		m_pHistoricalView->UpdateContent(bFilter, bRedraw);
	}
}

void CTCAutomaticStackTimeTaggedPage::StartTracking(int ht)
{
	CSplitterWndEx::StartTracking(ht);
	m_rectLimit.top += m_pScheduledView->GetTrackSize().cy;
}

VOID CTCAutomaticStackTimeTaggedPage::SetTrackSize(CONST SIZE &size)
{
	m_pScheduledView->SetTrackSize(size);
	m_pHistoricalView->SetTrackSize(size);
}

CSize CTCAutomaticStackTimeTaggedPage::GetTrackSize() CONST
{
	return m_pScheduledView->GetTrackSize();
}

CTCAutomaticStackTimeTaggedPageScheduledView *CTCAutomaticStackTimeTaggedPage::GetScheduledView() CONST
{
	return m_pScheduledView;
}

CTCAutomaticStackTimeTaggedPageHistoricalView *CTCAutomaticStackTimeTaggedPage::GetHistoricalView() CONST
{
	return m_pHistoricalView;
}

CTCAutomaticStackView *CTCAutomaticStackTimeTaggedPage::GetParent() CONST
{
	return((CTCAutomaticStackView *)m_pParentWnd);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackTimeTaggedPage, CSplitterWndEx)
	//{{AFX_MSG_MAP(CTCAutomaticStackTimeTaggedPage)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackTimeTaggedPage message handlers

void CTCAutomaticStackTimeTaggedPage::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent())
	{
		if (GetScheduledView()->GetCurTelecommand() < 0 && !GetScheduledView()->HasSelectedTelecommands()) GetScheduledView()->SetCurTelecommand(0);
		GetScheduledView()->SetFocus();
		return;
	}
	if (pOldWnd == GetScheduledView())
	{
		if (GetHistoricalView()->GetCurTelecommand() < 0 && !GetHistoricalView()->HasSelectedTelecommands()) GetHistoricalView()->SetCurTelecommand(0);
		GetHistoricalView()->SetFocus();
		return;
	}
	if (pOldWnd == GetHistoricalView())
	{
		GetParent()->SetFocus();
		return;
	}
	CSplitterWndEx::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackView

IMPLEMENT_DYNCREATE(CTCAutomaticStackView, CTabCtrl)

CTCAutomaticStackView::CTCAutomaticStackView() : CTabCtrl()
{
	m_nIndex = 0;
	m_nChecks = 0;
	m_nArguments = -1;
	m_bToolTips = TRUE;
	m_bProperties = FALSE;
	m_bAllArguments = FALSE;
	m_bFullViewMode = FALSE;
	m_nFilterMode[0] = 0;
	m_nFilterMode[1] = 0;
	m_nFilterLimitation = 0;
	m_nMiscellaneousOptions = 0;
	m_tDefaultReleaseTimeWindow = 0;
	m_sizeList[0][0].cx = 0;
	m_sizeList[0][0].cy = 0;
	m_sizeList[0][1].cx = 0;
	m_sizeList[0][1].cy = 0;
	m_sizeList[1][0].cx = 0;
	m_sizeList[1][0].cy = 0;
	m_sizeList[1][1].cx = 0;
	m_sizeList[1][1].cy = 0;
	m_sizeTabMargins.cx = 0;
	m_sizeTabMargins.cy = 0;
	m_nTelecommandingMode = 0;
	m_nTelecommandingFlags = 0;
	m_nTelecommandingState = 0;
	m_nTelecommandingUplinkState = 0;
	m_bTelecommandingInterlockMode = TRUE;
	m_bTelecommandingReleaseWaitMode = FALSE;
	m_bTelecommandingAutoRejectionMode = TRUE;
	m_nBackgroundColor[0][0] = VGA_COLOR_GRAY;
	m_nBackgroundColor[1][0] = VGA_COLOR_GRAY;
	m_nBackgroundColor[0][1] = VGA_COLOR_GRAY;
	m_nBackgroundColor[1][1] = VGA_COLOR_GRAY;
	ZeroMemory(&m_lfTitleFont[0][0], sizeof(LOGFONT));
	ZeroMemory(&m_lfTitleFont[0][1], sizeof(LOGFONT));
	ZeroMemory(&m_lfTitleFont[1][0], sizeof(LOGFONT));
	ZeroMemory(&m_lfTitleFont[1][1], sizeof(LOGFONT));
	ZeroMemory(&m_lfItemsFont[0][0], sizeof(LOGFONT));
	ZeroMemory(&m_lfItemsFont[0][1], sizeof(LOGFONT));
	ZeroMemory(&m_lfItemsFont[1][0], sizeof(LOGFONT));
	ZeroMemory(&m_lfItemsFont[1][1], sizeof(LOGFONT));
	m_pNormalPage = (CTCAutomaticStackNormalPage *)NULL;
	m_pTimeTaggedPage = (CTCAutomaticStackTimeTaggedPage *)NULL;
}

BOOL CTCAutomaticStackView::Create(CWnd *pParentWnd, DWORD dwStyle)
{
	INT  nChecks;
	INT  nArguments;
	UINT  nOptions;
	UINT  nFilterMode[2];
	UINT  nFilterLimitation;
	BOOL  bAllArguments;
	CRect  rPageTabs[2];
	CString  szFilterTelecommand[2];
	LOGFONT  lfTitleFont[2][2];
	LOGFONT  lfItemsFont[2][2];
	COLORREF  nGridColor[2][2];
	CTimeSpan  tTimeWindow[2];
	CUIntArray  nAlertColors[2][2];
	CUIntArray  nFilterSubSystems;
	CTCAutomaticStackNormalPage  *pNormalPage;
	CTCAutomaticStackTimeTaggedPage  *pTimeTaggedPage;

	for (pParentWnd->GetClientRect(rPageTabs[0]); CTabCtrl::Create(dwStyle, rPageTabs[0], pParentWnd, 0); )
	{
		if ((pNormalPage = new CTCAutomaticStackNormalPage) != (CTCAutomaticStackNormalPage *)NULL)
		{
			if ((pTimeTaggedPage = new CTCAutomaticStackTimeTaggedPage) != (CTCAutomaticStackTimeTaggedPage *)NULL)
			{
				if (pNormalPage->Create(this, m_nColumns[0][0], m_nColumnWidths[0][0], m_sizeList[0][0], m_nColumns[0][1], m_nColumnWidths[0][1], m_sizeList[0][1], TRUE))
				{
					if (pTimeTaggedPage->Create(this, m_nColumns[1][0], m_nColumnWidths[1][0], m_sizeList[1][0], m_nColumns[1][1], m_nColumnWidths[1][1], m_sizeList[1][1], FALSE))
					{
						if (GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfTitleFont[0][0]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfTitleFont[0][1]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfTitleFont[1][0]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfTitleFont[1][1]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfItemsFont[0][0]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfItemsFont[0][1]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfItemsFont[1][0]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfItemsFont[1][1]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nGridColor[0][0]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nGridColor[0][1]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nGridColor[1][0]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nGridColor[1][1]) && GetAlertColors(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nAlertColors[0][0]) && GetAlertColors(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nAlertColors[0][1]) && GetAlertColors(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nAlertColors[1][0]) && GetAlertColors(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nAlertColors[1][1]) && GetListOptions(nArguments, bAllArguments) && GetListUpdateChecks(nChecks) && GetMiscellaneousOptions(nOptions) && GetDefaultReleaseTimeWindow(tTimeWindow[0]) && GetDispatchTimeWindow(tTimeWindow[1]))
						{
							for (GetFilterMode(nFilterMode[0]), GetFilterTelecommandName(szFilterTelecommand[0]), GetFilterTelecommandSequence(szFilterTelecommand[1]), GetFilterTelecommandSubSystems(nFilterSubSystems), GetFilterLimitation(nFilterLimitation), GetFilterSortMode(nFilterMode[1]); pNormalPage->SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfTitleFont[0][0]) && pNormalPage->SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfTitleFont[0][1]) && pTimeTaggedPage->SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfTitleFont[1][0]) && pTimeTaggedPage->SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfTitleFont[1][1]) && pNormalPage->SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfItemsFont[0][0]) && pNormalPage->SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfItemsFont[0][1]) && pTimeTaggedPage->SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &lfItemsFont[1][0]) && pTimeTaggedPage->SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &lfItemsFont[1][1]) && pNormalPage->SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nGridColor[0][0]) && pNormalPage->SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nGridColor[0][1]) && pTimeTaggedPage->SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nGridColor[1][0]) && pTimeTaggedPage->SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nGridColor[1][1]) && pNormalPage->SetAlertColors(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nAlertColors[0][0]) && pNormalPage->SetAlertColors(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nAlertColors[0][1]) && pTimeTaggedPage->SetAlertColors(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nAlertColors[1][0]) && pTimeTaggedPage->SetAlertColors(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nAlertColors[1][1]) && pNormalPage->SetListOptions(nArguments, bAllArguments) && pTimeTaggedPage->SetListOptions(nArguments, bAllArguments) && pNormalPage->SetListUpdateChecks(nChecks) && pTimeTaggedPage->SetListUpdateChecks(nChecks) && pNormalPage->SetMiscellaneousOptions(nOptions) && pTimeTaggedPage->SetMiscellaneousOptions(nOptions) && pNormalPage->SetDefaultReleaseTimeWindow(tTimeWindow[0]) && pTimeTaggedPage->SetDefaultReleaseTimeWindow(tTimeWindow[0]) && pNormalPage->SetDispatchTimeWindow(tTimeWindow[1]) && pTimeTaggedPage->SetDispatchTimeWindow(tTimeWindow[1]) && pNormalPage->EnableFullViewMode(IsFullViewModeEnabled()) && pTimeTaggedPage->EnableFullViewMode(IsFullViewModeEnabled()) && pNormalPage->EnableToolTipMode(IsToolTipModeEnabled()) && pTimeTaggedPage->EnableToolTipMode(IsToolTipModeEnabled()) && pNormalPage->SetTelecommandingMode(GetTelecommandingMode()) && pTimeTaggedPage->SetTelecommandingMode(GetTelecommandingMode()) && pNormalPage->SetTelecommandingState(GetTelecommandingState()) && pTimeTaggedPage->SetTelecommandingState(GetTelecommandingState()) && pNormalPage->SetTelecommandingChecks(GetTelecommandingChecks()) && pTimeTaggedPage->SetTelecommandingChecks(GetTelecommandingChecks()) && pNormalPage->EnableTelecommandingInterlockMode(IsTelecommandingInterlockModeEnabled()) && pTimeTaggedPage->EnableTelecommandingInterlockMode(IsTelecommandingInterlockModeEnabled()) && pNormalPage->EnableTelecommandingReleaseWaitMode(IsTelecommandingReleaseWaitModeEnabled()) && pTimeTaggedPage->EnableTelecommandingReleaseWaitMode(IsTelecommandingReleaseWaitModeEnabled()) && pNormalPage->EnableTelecommandingAutoRejectionMode(IsTelecommandingAutoRejectionModeEnabled()) && pTimeTaggedPage->EnableTelecommandingAutoRejectionMode(IsTelecommandingAutoRejectionModeEnabled()) && pNormalPage->SetFilterMode(nFilterMode[0]) && pTimeTaggedPage->SetFilterMode(nFilterMode[0]) && pNormalPage->SetFilterTelecommandName(szFilterTelecommand[0]) && pTimeTaggedPage->SetFilterTelecommandName(szFilterTelecommand[0]) && pNormalPage->SetFilterTelecommandSequence(szFilterTelecommand[1]) && pTimeTaggedPage->SetFilterTelecommandSequence(szFilterTelecommand[1]) && pNormalPage->SetFilterTelecommandSubSystems(nFilterSubSystems) && pTimeTaggedPage->SetFilterTelecommandSubSystems(nFilterSubSystems) && pNormalPage->SetFilterLimitation(nFilterLimitation) && pTimeTaggedPage->SetFilterLimitation(nFilterLimitation) && pNormalPage->SetFilterSortMode(nFilterMode[1]) && pTimeTaggedPage->SetFilterSortMode(nFilterMode[1]); )
							{
								m_sizeTabMargins = (GetItemRect(0, rPageTabs[1])) ? CSize(rPageTabs[1].left, rPageTabs[1].top) : m_sizeTabMargins;
								m_pTimeTaggedPage = pTimeTaggedPage;
								m_pNormalPage = pNormalPage;
								return TRUE;
							}
						}
						pTimeTaggedPage->DestroyWindow();
					}
					pNormalPage->DestroyWindow();
				}
				delete pTimeTaggedPage;
			}
			delete pNormalPage;
		}
		break;
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nColumns[0][0].Copy(nColumns);
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nColumns[0][1].Copy(nColumns);
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetLayout(nPane, nColumns)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nColumns[1][0].Copy(nColumns);
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nColumns[1][1].Copy(nColumns);
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetLayout(nPane, nColumns)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCAutomaticStackView::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			m_nColumns[0][0].Copy(nColumns);
			m_nColumnWidths[0][0].Copy(nWidths);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			m_nColumns[0][1].Copy(nColumns);
			m_nColumnWidths[0][1].Copy(nWidths);
		}
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetLayout(nPane, nColumns)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			m_nColumns[1][0].Copy(nColumns);
			m_nColumnWidths[1][0].Copy(nWidths);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			m_nColumns[1][1].Copy(nColumns);
			m_nColumnWidths[1][1].Copy(nWidths);
		}
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetLayout(nPane, nColumns)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCAutomaticStackView::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizeList)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			m_nColumns[0][0].Copy(nColumns);
			m_nColumnWidths[0][0].Copy(nWidths);
			m_sizeList[0][0] = sizeList;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			m_nColumns[0][1].Copy(nColumns);
			m_nColumnWidths[0][1].Copy(nWidths);
			m_sizeList[0][1] = sizeList;
		}
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			m_nColumns[1][0].Copy(nColumns);
			m_nColumnWidths[1][0].Copy(nWidths);
			m_sizeList[1][0] = sizeList;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			m_nColumns[1][1].Copy(nColumns);
			m_nColumnWidths[1][1].Copy(nWidths);
			m_sizeList[1][1] = sizeList;
		}
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[0][0]);
			return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->GetLayout(nPane, nColumns)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[0][1]);
			return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->GetLayout(nPane, nColumns)) ? TRUE : FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[1][0]);
			return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[1][1]);
			return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns)) ? TRUE : FALSE);
		}
	}
	return FALSE;
}
BOOL CTCAutomaticStackView::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[0][0]);
			nWidths.Copy(m_nColumnWidths[0][0]);
			return(((!IsWindow(m_pNormalPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pNormalPage->GetLayout(nPane, nColumns, nWidths)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[0][1]);
			nWidths.Copy(m_nColumnWidths[0][1]);
			return(((!IsWindow(m_pNormalPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pNormalPage->GetLayout(nPane, nColumns, nWidths)) ? TRUE : FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[1][0]);
			nWidths.Copy(m_nColumnWidths[1][0]);
			return(((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns, nWidths)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[1][1]);
			nWidths.Copy(m_nColumnWidths[1][1]);
			return(((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns, nWidths)) ? TRUE : FALSE);
		}
	}
	return FALSE;
}
BOOL CTCAutomaticStackView::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizeList) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[0][0]);
			nWidths.Copy(m_nColumnWidths[0][0]);
			sizeList = m_sizeList[0][0];
			return(((!IsWindow(m_pNormalPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pNormalPage->GetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[0][1]);
			nWidths.Copy(m_nColumnWidths[0][1]);
			sizeList = m_sizeList[0][1];
			return(((!IsWindow(m_pNormalPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pNormalPage->GetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColumns.Copy(m_nColumns[1][0]);
			nWidths.Copy(m_nColumnWidths[1][0]);
			sizeList = m_sizeList[1][0];
			return(((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColumns.Copy(m_nColumns[1][1]);
			nWidths.Copy(m_nColumnWidths[1][1]);
			sizeList = m_sizeList[1][1];
			return(((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) && nColumns.GetSize() == nWidths.GetSize()) || m_pTimeTaggedPage->GetLayout(nPane, nColumns, nWidths, sizeList)) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetListTitleFont(UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0 && SetListTitleFont(nPane, &lfFont)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackView::SetListTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) CopyMemory(&m_lfTitleFont[0][0], plfFont, sizeof(LOGFONT));
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) CopyMemory(&m_lfTitleFont[0][1], plfFont, sizeof(LOGFONT));
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetListTitleFont(nPane, plfFont)) ? TRUE : FALSE);
	}
	for (; nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED; )
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) CopyMemory(&m_lfTitleFont[1][0], plfFont, sizeof(LOGFONT));
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) CopyMemory(&m_lfTitleFont[1][1], plfFont, sizeof(LOGFONT));
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetListTitleFont(nPane, plfFont)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetListTitleFont(UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetListTitleFont(nPane, &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackView::GetListTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	CFontTools  cFontTools;

	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			if (lstrlen(m_lfTitleFont[0][0].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfTitleFont[0][0], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			if (lstrlen(m_lfTitleFont[0][1].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfTitleFont[0][1], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			if (lstrlen(m_lfTitleFont[1][0].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfTitleFont[1][0], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			if (lstrlen(m_lfTitleFont[1][1].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfTitleFont[1][1], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetListItemsFont(UINT nPane, CFont *pFont)
{
	LOGFONT  lfFont;

	return((pFont->GetLogFont(&lfFont) > 0 && SetListItemsFont(nPane, &lfFont)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackView::SetListItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) CopyMemory(&m_lfItemsFont[0][0], plfFont, sizeof(LOGFONT));
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) CopyMemory(&m_lfItemsFont[0][1], plfFont, sizeof(LOGFONT));
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetListItemsFont(nPane, plfFont)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) CopyMemory(&m_lfItemsFont[1][0], plfFont, sizeof(LOGFONT));
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) CopyMemory(&m_lfItemsFont[1][1], plfFont, sizeof(LOGFONT));
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetListItemsFont(nPane, plfFont)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetListItemsFont(UINT nPane, CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((GetListItemsFont(nPane, &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}
BOOL CTCAutomaticStackView::GetListItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	CFontTools  cFontTools;

	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			if (lstrlen(m_lfItemsFont[0][0].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfItemsFont[0][0], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			if (lstrlen(m_lfItemsFont[0][1].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfItemsFont[0][1], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			if (lstrlen(m_lfItemsFont[1][0].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfItemsFont[1][0], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			if (lstrlen(m_lfItemsFont[1][1].lfFaceName) > 0)
			{
				CopyMemory(plfFont, &m_lfItemsFont[1][1], sizeof(LOGFONT));
				return TRUE;
			}
			return cFontTools.QueryDefaultFont(plfFont);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetGridBackgroundColor(UINT nPane, COLORREF nColor)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nBackgroundColor[0][0] = nColor;
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nBackgroundColor[0][1] = nColor;
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetGridBackgroundColor(nPane, nColor)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nBackgroundColor[1][0] = nColor;
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nBackgroundColor[1][1] = nColor;
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetGridBackgroundColor(nPane, nColor)) ? TRUE : FALSE);
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColor = m_nBackgroundColor[0][0];
			return TRUE;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColor = m_nBackgroundColor[0][1];
			return TRUE;
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColor = m_nBackgroundColor[1][0];
			return TRUE;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColor = m_nBackgroundColor[1][1];
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetAlertColors(UINT nPane, CONST CUIntArray &nColors)
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nAlertColors[0][0].Copy(nColors);
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nAlertColors[0][1].Copy(nColors);
		return((!IsWindow(m_pNormalPage->GetSafeHwnd()) || m_pNormalPage->SetAlertColors(nPane, nColors)) ? TRUE : FALSE);
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED) m_nAlertColors[1][0].Copy(nColors);
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL) m_nAlertColors[1][1].Copy(nColors);
		return((!IsWindow(m_pTimeTaggedPage->GetSafeHwnd()) || m_pTimeTaggedPage->SetAlertColors(nPane, nColors)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetAlertColors(UINT nPane, CUIntArray &nColors) CONST
{
	if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColors.Copy(m_nAlertColors[0][0]);
			return TRUE;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColors.Copy(m_nAlertColors[0][1]);
			return TRUE;
		}
	}
	if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED)
	{
		if (nPane & TCAUTOMATICSTACK_PANE_SCHEDULED)
		{
			nColors.Copy(m_nAlertColors[1][0]);
			return TRUE;
		}
		if (nPane & TCAUTOMATICSTACK_PANE_HISTORICAL)
		{
			nColors.Copy(m_nAlertColors[1][1]);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::SetListOptions(INT nArguments, BOOL bAll)
{
	for (m_nArguments = nArguments, m_bAllArguments = bAll; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetListOptions(nArguments, bAll) && m_pTimeTaggedPage->SetListOptions(nArguments, bAll));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	nArguments = m_nArguments;
	bAll = m_bAllArguments;
	return TRUE;
}

BOOL CTCAutomaticStackView::SetListUpdateChecks(INT nCount)
{
	for (m_nChecks = nCount; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetListUpdateChecks(nCount) && m_pTimeTaggedPage->SetListUpdateChecks(nCount));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetListUpdateChecks(INT &nCount) CONST
{
	nCount = m_nChecks;
	return TRUE;
}

BOOL CTCAutomaticStackView::SetMiscellaneousOptions(UINT nOptions)
{
	for (m_nMiscellaneousOptions = nOptions; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetMiscellaneousOptions(nOptions) && m_pTimeTaggedPage->SetMiscellaneousOptions(nOptions));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	nOptions = m_nMiscellaneousOptions;
	return TRUE;
}

BOOL CTCAutomaticStackView::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	for (m_tDefaultReleaseTimeWindow = tTimeWindow; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetDefaultReleaseTimeWindow(tTimeWindow) && m_pTimeTaggedPage->SetDefaultReleaseTimeWindow(tTimeWindow));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDefaultReleaseTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackView::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	for (m_tDispatchTimeWindow = tTimeWindow; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetDispatchTimeWindow(tTimeWindow) && m_pTimeTaggedPage->SetDispatchTimeWindow(tTimeWindow));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	tTimeWindow = m_tDispatchTimeWindow;
	return TRUE;
}

BOOL CTCAutomaticStackView::EnableFullViewMode(BOOL bEnable)
{
	for (m_bFullViewMode = bEnable; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->EnableFullViewMode(bEnable) && m_pTimeTaggedPage->EnableFullViewMode(bEnable));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::IsFullViewModeEnabled() CONST
{
	return m_bFullViewMode;
}

BOOL CTCAutomaticStackView::EnableToolTipMode(BOOL bEnable)
{
	for (m_bToolTips = bEnable; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->EnableToolTipMode(bEnable) && m_pTimeTaggedPage->EnableToolTipMode(bEnable));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::IsToolTipModeEnabled() CONST
{
	return m_bToolTips;
}

BOOL CTCAutomaticStackView::SetFilterMode(UINT nMode)
{
	for (m_nFilterMode[0] = nMode; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterMode(nMode) && m_pTimeTaggedPage->SetFilterMode(nMode));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterMode(UINT &nMode) CONST
{
	nMode = m_nFilterMode[0];
	return TRUE;
}

BOOL CTCAutomaticStackView::SetFilterTelecommandName(LPCTSTR pszName)
{
	for (m_szFilterTelecommand[0] = pszName; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterTelecommandName(pszName) && m_pTimeTaggedPage->SetFilterTelecommandName(pszName));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterTelecommandName(CString &szName) CONST
{
	szName = m_szFilterTelecommand[0];
	return TRUE;
}

BOOL CTCAutomaticStackView::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	for (m_szFilterTelecommand[1] = pszSequence; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterTelecommandSequence(pszSequence) && m_pTimeTaggedPage->SetFilterTelecommandSequence(pszSequence));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	szSequence = m_szFilterTelecommand[1];
	return TRUE;
}

BOOL CTCAutomaticStackView::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	for (m_nFilterSubSystems.Copy(nSubSystems); IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterTelecommandSubSystems(nSubSystems) && m_pTimeTaggedPage->SetFilterTelecommandSubSystems(nSubSystems));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	nSubSystems.Copy(m_nFilterSubSystems);
	return TRUE;
}

BOOL CTCAutomaticStackView::SetFilterLimitation(UINT nCount)
{
	for (m_nFilterLimitation = nCount; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterLimitation(nCount) && m_pTimeTaggedPage->SetFilterLimitation(nCount));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterLimitation(UINT &nCount) CONST
{
	nCount = m_nFilterLimitation;
	return TRUE;
}

BOOL CTCAutomaticStackView::SetFilterSortMode(UINT nMode)
{
	for (m_nFilterMode[1] = nMode; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		return(m_pNormalPage->SetFilterSortMode(nMode) && m_pTimeTaggedPage->SetFilterSortMode(nMode));
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::GetFilterSortMode(UINT &nMode) CONST
{
	nMode = m_nFilterMode[1];
	return TRUE;
}

BOOL CTCAutomaticStackView::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->StartTelecommanding(pTCProcessEngine, pTCEnvironment) && m_pTimeTaggedPage->StartTelecommanding(pTCProcessEngine, pTCEnvironment)) : FALSE);
}

BOOL CTCAutomaticStackView::StopTelecommanding()
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->StopTelecommanding() && m_pTimeTaggedPage->StopTelecommanding()) : FALSE);
}

BOOL CTCAutomaticStackView::SetTelecommandingMode(UINT nMode)
{
	for (m_nTelecommandingMode = nMode; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->SetTelecommandingMode(nMode) && m_pTimeTaggedPage->SetTelecommandingMode(nMode)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackView::GetTelecommandingMode() CONST
{
	return m_nTelecommandingMode;
}

BOOL CTCAutomaticStackView::SetTelecommandingChecks(UINT nFlags)
{
	for (m_nTelecommandingFlags = nFlags; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->SetTelecommandingChecks(nFlags) && m_pTimeTaggedPage->SetTelecommandingChecks(nFlags)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackView::GetTelecommandingChecks() CONST
{
	return m_nTelecommandingFlags;
}

BOOL CTCAutomaticStackView::SetTelecommandingState(UINT nState)
{
	for (m_nTelecommandingState = nState; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->SetTelecommandingState(nState) && m_pTimeTaggedPage->SetTelecommandingState(nState)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackView::GetTelecommandingState() CONST
{
	UINT  nState;

	for (nState = m_nTelecommandingState; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		nState = (nState & ~TCAUTOMATICSTACK_STATE_EMPTY) | ((m_pNormalPage->GetTelecommandingState() & TCAUTOMATICSTACK_STATE_EMPTY) & (m_pTimeTaggedPage->GetTelecommandingState() & TCAUTOMATICSTACK_STATE_EMPTY));
		break;
	}
	return nState;
}

BOOL CTCAutomaticStackView::SetTelecommandingUplinkState(UINT nState)
{
	for (m_nTelecommandingUplinkState = nState; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->SetTelecommandingUplinkState(nState) && m_pTimeTaggedPage->SetTelecommandingUplinkState(nState)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackView::GetTelecommandingUplinkState() CONST
{
	return m_nTelecommandingUplinkState;
}

BOOL CTCAutomaticStackView::EnableTelecommandingInterlockMode(BOOL bEnable)
{
	for (m_bTelecommandingInterlockMode = bEnable; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->EnableTelecommandingInterlockMode(bEnable) && m_pTimeTaggedPage->EnableTelecommandingInterlockMode(bEnable)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_bTelecommandingInterlockMode;
}

BOOL CTCAutomaticStackView::EnableTelecommandingReleaseWaitMode(BOOL bEnable)
{
	for (m_bTelecommandingReleaseWaitMode = bEnable; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->EnableTelecommandingReleaseWaitMode(bEnable) && m_pTimeTaggedPage->EnableTelecommandingReleaseWaitMode(bEnable)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_bTelecommandingReleaseWaitMode;
}

BOOL CTCAutomaticStackView::EnableTelecommandingAutoRejectionMode(BOOL bEnable)
{
	for (m_bTelecommandingAutoRejectionMode = bEnable; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->EnableTelecommandingAutoRejectionMode(bEnable) && m_pTimeTaggedPage->EnableTelecommandingAutoRejectionMode(bEnable)) return TRUE;
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackView::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_bTelecommandingAutoRejectionMode;
}

BOOL CTCAutomaticStackView::SetTelecommands(CONST CTCSavedStack &pStack)
{
	INT  nItem[2];
	INT  nItems[2];
	CTCItem  *pStackItem;
	CTCSavedStack  pStackItems[2];

	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		for (nItem[0] = 0, nItems[0] = (pStackItems[0].Copy(&pStack)) ? (INT)pStackItems[0].GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			if ((pStackItem = pStackItems[0].GetAt(nItem[0])) && (pStackItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED))
			{
				pStackItems[0].RemoveAt(nItem[0]);
				delete pStackItem;
				nItems[0]--;
				nItem[0]--;
			}
		}
		for (nItem[1] = 0, nItems[1] = (pStackItems[1].Copy(&pStack)) ? (INT)pStackItems[1].GetSize() : -1; nItem[1] < nItems[1]; nItem[1]++)
		{
			if ((pStackItem = pStackItems[1].GetAt(nItem[1])) && (pStackItem->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)
			{
				pStackItems[1].RemoveAt(nItem[1]);
				delete pStackItem;
				nItems[1]--;
				nItem[1]--;
			}
		}
		return((nItem[0] == nItems[0] && nItem[1] == nItems[1]) ? (m_pNormalPage->SetTelecommands(pStackItems[0]) && m_pTimeTaggedPage->SetTelecommands(pStackItems[1])) : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	CTCSavedStack  pStackItems[2];

	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (m_pNormalPage->GetTelecommands(pStackItems[0]) && m_pTimeTaggedPage->GetTelecommands(pStackItems[1]))
		{
			pStack.CPtrArray::Copy(pStackItems[0]);
			pStack.CPtrArray::Append(pStackItems[1]);
			pStackItems[0].CPtrArray::RemoveAll();
			pStackItems[1].CPtrArray::RemoveAll();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::LoadTelecommands(CONST CTCItems &pItems)
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;
	CTCAutomaticStackItem  *pStackItem;
	CTCAutomaticStackItems  pStackItems;

	for (nItem = 0, nItems = (INT)pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = pItems.GetAt(nItem)) && pItem->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK  &&  pItem->IsHost())
		{
			if ((pStackItem = new CTCAutomaticStackItem) != (CTCAutomaticStackItem *)NULL)
			{
				if (pStackItem->CTCItem::Copy(pItem) && pStackItems.Add(pStackItem) >= 0) continue;
				delete pStackItem;
			}
			break;
		}
	}
	return((nItem == nItems) ? LoadTelecommands(pStackItems) : FALSE);
}
BOOL CTCAutomaticStackView::LoadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	INT  nItem[2];
	INT  nItems[2];
	UINT  nExecutionOBRT;
	BOOL  bEarlierExecution;
	DWORD  dwExecutionOffset;
	CTimeTag  tExecutionTime;
	CTCAutomaticStackItem  *pStackItem[2];
	CTCAutomaticStackItems  pStackItems[3];

	for (nItem[0] = 0, nItems[0] = (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (INT)pItems.GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem[0] = pItems.GetAt(nItem[0])) && pStackItems[0].Find(pStackItem[0]) < 0 && pStackItems[1].Find(pStackItem[0]) < 0)
		{
			for (nItem[1] = 0, nItems[1] = pItems.Collect(nItem[0], pStackItems[2]); nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pStackItem[1] = pStackItems[2].GetAt(nItem[1])) != (CTCAutomaticStackItem *)NULL)
				{
					if ((pStackItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != (pStackItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)) break;
					if ((pStackItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) && !pStackItem[1]->GetExecutionTime(tExecutionTime) && !pStackItem[1]->GetExecutionTimeOffset(dwExecutionOffset, bEarlierExecution) && !pStackItem[1]->GetExecutionOBRT(nExecutionOBRT)) break;
					continue;
				}
				break;
			}
			if (nItem[1] == nItems[1])
			{
				if ((pStackItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)
				{
					pStackItems[0].CPtrArray::Append(pStackItems[2]);
					pStackItems[2].CPtrArray::RemoveAll();
					continue;
				}
				pStackItems[1].CPtrArray::Append(pStackItems[2]);
				pStackItems[2].CPtrArray::RemoveAll();
				continue;
			}
			break;
		}
	}
	return((nItem[0] == nItems[0]) ? ((!pStackItems[0].GetSize() || m_pNormalPage->LoadTelecommands(pStackItems[0])) && (!pStackItems[1].GetSize() || m_pTimeTaggedPage->LoadTelecommands(pStackItems[1]))) : FALSE);
}

BOOL CTCAutomaticStackView::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	INT  nItem[2];
	INT  nItems[2];
	CTCItem  *pStackItem[2];
	CTCItems  pStackItems[3];

	for (nItem[0] = 0, nItems[0] = (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (INT)pItems.GetSize() : -1; nItem[0] < nItems[0]; nItem[0]++)
	{
		if ((pStackItem[0] = pItems.GetAt(nItem[0])) && pStackItem[0]->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK  &&  pStackItem[0]->IsHost() && pStackItems[0].Find(pStackItem[0]) < 0 && pStackItems[1].Find(pStackItem[0]) < 0)
		{
			for (nItem[1] = 0, nItems[1] = pItems.Collect(nItem[0], pStackItems[2]); nItem[1] < nItems[1]; nItem[1]++)
			{
				if ((pStackItem[1] = pStackItems[2].GetAt(nItem[1])) != (CTCItem *)NULL)
				{
					if ((pStackItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != (pStackItem[1]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)) break;
					continue;
				}
				break;
			}
			if (nItem[1] == nItems[1])
			{
				if ((pStackItem[0]->GetFlags() & TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED) != TCAUTOMATICSTACKITEM_EXECUTIONFLAG_TIMETAGGED)
				{
					pStackItems[0].CPtrArray::Append(pStackItems[2]);
					pStackItems[2].CPtrArray::RemoveAll();
					continue;
				}
				pStackItems[1].CPtrArray::Append(pStackItems[2]);
				pStackItems[2].CPtrArray::RemoveAll();
				continue;
			}
			break;
		}
	}
	return((nItem[0] == nItems[0]) ? (((!pStackItems[0].GetSize() && !bAll) || m_pNormalPage->UpdateTelecommands(pStackItems[0], bAll)) && ((!pStackItems[1].GetSize() && !bAll) || m_pTimeTaggedPage->UpdateTelecommands(pStackItems[1], bAll))) : FALSE);
}
BOOL CTCAutomaticStackView::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->UpdateTelecommands(pTMEnvironment) && m_pTimeTaggedPage->UpdateTelecommands(pTMEnvironment)) : FALSE);
}
BOOL CTCAutomaticStackView::UpdateTelecommands(CView *pView)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (pView == (CView *)m_pNormalPage->GetScheduledView())
		{
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			return TRUE;
		}
		if (pView == (CView *)m_pNormalPage->GetHistoricalView())
		{
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			return TRUE;
		}
		if (pView == (CView *)m_pTimeTaggedPage->GetScheduledView())
		{
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			return TRUE;
		}
		if (pView == (CView *)m_pTimeTaggedPage->GetHistoricalView())
		{
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			m_pNormalPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_HISTORICAL);
			m_pTimeTaggedPage->DoUnselectAllTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->UpdateTelecommandInterlocks(pInterlocks) && m_pTimeTaggedPage->UpdateTelecommandInterlocks(pInterlocks)) : FALSE);
}

BOOL CTCAutomaticStackView::SetCurTelecommand(UINT nPane, INT nIndex)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->SetCurTelecommand(nPane, nIndex);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->SetCurTelecommand(nPane, nIndex);
		return((!m_nIndex) ? m_pNormalPage->SetCurTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED), nIndex) : m_pTimeTaggedPage->SetCurTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED), nIndex));
	}
	return FALSE;
}

INT CTCAutomaticStackView::GetCurTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->GetCurTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->GetCurTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->GetCurTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED)) : m_pTimeTaggedPage->GetCurTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED)));
	}
	return -1;
}

BOOL CTCAutomaticStackView::SelectTelecommand(UINT nPane, INT nIndex)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->SelectTelecommand(nPane, nIndex);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->SelectTelecommand(nPane, nIndex);
		return((!m_nIndex) ? m_pNormalPage->SelectTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED), nIndex) : m_pTimeTaggedPage->SelectTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED), nIndex));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::DoSelectAllTelecommands(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoSelectAllTelecommands(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoSelectAllTelecommands(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoSelectAllTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED)) : m_pTimeTaggedPage->DoSelectAllTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED)));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanSelectAllTelecommands(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanSelectAllTelecommands(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanSelectAllTelecommands(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanSelectAllTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED)) : m_pTimeTaggedPage->CanSelectAllTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED)));
	}
	return 0;
}

INT CTCAutomaticStackView::EnumSelectedTelecommands(UINT nPane, CTCAutomaticStackItems &pItems) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->EnumSelectedTelecommands(nPane, pItems);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->EnumSelectedTelecommands(nPane, pItems);
		return((!m_nIndex) ? m_pNormalPage->EnumSelectedTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED), pItems) : m_pTimeTaggedPage->EnumSelectedTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED), pItems));
	}
	return 0;
}

BOOL CTCAutomaticStackView::HasSelectedTelecommands(UINT nPane, UINT nStatus) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->HasSelectedTelecommands(nPane, nStatus);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->HasSelectedTelecommands(nPane, nStatus);
		return((!m_nIndex) ? m_pNormalPage->HasSelectedTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED), nStatus) : m_pTimeTaggedPage->HasSelectedTelecommands((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED), nStatus));
	}
	return FALSE;
}

UINT CTCAutomaticStackView::GetTelecommandCount(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->GetTelecommandCount(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->GetTelecommandCount(nPane);
		return((!m_nIndex) ? m_pNormalPage->GetTelecommandCount((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED)) : m_pTimeTaggedPage->GetTelecommandCount((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED)));
	}
	return 0;
}

BOOL CTCAutomaticStackView::DoCutTelecommand(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoCutTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoCutTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoCutTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->DoCutTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanCutTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanCutTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanCutTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanCutTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->CanCutTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::DoCopyTelecommand(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoCopyTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoCopyTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoCopyTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->DoCopyTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanCopyTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanCopyTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanCopyTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanCopyTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->CanCopyTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::DoPasteTelecommand(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoPasteTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoPasteTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoPasteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->DoPasteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanPasteTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanPasteTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanPasteTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanPasteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->CanPasteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::DoDeleteTelecommand(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoDeleteTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoDeleteTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoDeleteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->DoDeleteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanDeleteTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanDeleteTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanDeleteTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanDeleteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pNormalPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL))) : m_pTimeTaggedPage->CanDeleteTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : ((!m_pTimeTaggedPage->GetHistoricalView()->IsChild(GetFocus())) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL))));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::DoAcknowledgeTelecommand(UINT nPane)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->DoAcknowledgeTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->DoAcknowledgeTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->DoAcknowledgeTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) : m_pTimeTaggedPage->DoAcknowledgeTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanAcknowledgeTelecommand(UINT nPane) CONST
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (nPane & TCAUTOMATICSTACK_PAGE_NORMAL) return m_pNormalPage->CanAcknowledgeTelecommand(nPane);
		if (nPane & TCAUTOMATICSTACK_PAGE_TIMETAGGED) return m_pTimeTaggedPage->CanAcknowledgeTelecommand(nPane);
		return((!m_nIndex) ? m_pNormalPage->CanAcknowledgeTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_NORMAL | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) : m_pTimeTaggedPage->CanAcknowledgeTelecommand((nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)) ? (TCAUTOMATICSTACK_PAGE_TIMETAGGED | (nPane & (TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL))) : (TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED | TCAUTOMATICSTACK_PANE_HISTORICAL)));
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::ShowTelecommandProperties()
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		if (m_pNormalPage->CanShowTelecommandProperties()) return m_pNormalPage->ShowTelecommandProperties();
		if (m_pTimeTaggedPage->CanShowTelecommandProperties()) return m_pTimeTaggedPage->ShowTelecommandProperties();
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::CanShowTelecommandProperties() CONST
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->CanShowTelecommandProperties() || m_pTimeTaggedPage->CanShowTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackView::IsShowingTelecommandProperties() CONST
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->IsShowingTelecommandProperties() || m_pTimeTaggedPage->IsShowingTelecommandProperties()) : FALSE);
}

BOOL CTCAutomaticStackView::SetLayoutInfo(INT nPage, CONST SCROLLINFO *pNormalScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pNormalScheduledPaneVertScrollInfo, CONST SCROLLINFO *pNormalHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pNormalHistoricalPaneVertScrollInfo, CONST SCROLLINFO *pTimeTaggedScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pTimeTaggedScheduledPaneVertScrollInfo, CONST SCROLLINFO *pTimeTaggedHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pTimeTaggedHistoricalPaneVertScrollInfo)
{
	for (SetCurSel((m_nIndex = nPage)); IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->SetLayoutInfo(pNormalScheduledPaneHorzScrollInfo, pNormalScheduledPaneVertScrollInfo, pNormalHistoricalPaneHorzScrollInfo, pNormalHistoricalPaneVertScrollInfo) && m_pTimeTaggedPage->SetLayoutInfo(pTimeTaggedScheduledPaneHorzScrollInfo, pTimeTaggedScheduledPaneVertScrollInfo, pTimeTaggedHistoricalPaneHorzScrollInfo, pTimeTaggedHistoricalPaneVertScrollInfo))
		{
			m_pNormalPage->ShowWindow((!nPage) ? SW_SHOW : SW_HIDE);
			m_pTimeTaggedPage->ShowWindow((nPage > 0) ? SW_SHOW : SW_HIDE);
			return TRUE;
		}
		break;
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetLayoutInfo(INT &nPage, SCROLLINFO *pNormalScheduledPaneHorzScrollInfo, SCROLLINFO *pNormalScheduledPaneVertScrollInfo, SCROLLINFO *pNormalHistoricalPaneHorzScrollInfo, SCROLLINFO *pNormalHistoricalPaneVertScrollInfo, SCROLLINFO *pTimeTaggedScheduledPaneHorzScrollInfo, SCROLLINFO *pTimeTaggedScheduledPaneVertScrollInfo, SCROLLINFO *pTimeTaggedHistoricalPaneHorzScrollInfo, SCROLLINFO *pTimeTaggedHistoricalPaneVertScrollInfo) CONST
{
	for (nPage = m_nIndex; IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		if (m_pNormalPage->GetLayoutInfo(pNormalScheduledPaneHorzScrollInfo, pNormalScheduledPaneVertScrollInfo, pNormalHistoricalPaneHorzScrollInfo, pNormalHistoricalPaneVertScrollInfo) && m_pTimeTaggedPage->GetLayoutInfo(pTimeTaggedScheduledPaneHorzScrollInfo, pTimeTaggedScheduledPaneVertScrollInfo, pTimeTaggedHistoricalPaneHorzScrollInfo, pTimeTaggedHistoricalPaneVertScrollInfo)) return TRUE;
		break;
	}
	return FALSE;
}

BOOL CTCAutomaticStackView::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szNormalStackScheduledColumns, CStringArray &szNormalStackScheduledContents, CTextViewAttributes &pNormalStackScheduledAttributes, LOGFONT *pNormalStackScheduledTitleFont, LOGFONT *pNormalStackScheduledItemsFont, CStringArray &szNormalStackHistoricalColumns, CStringArray &szNormalStackHistoricalContents, CTextViewAttributes &pNormalStackHistoricalAttributes, LOGFONT *pNormalStackHistoricalTitleFont, LOGFONT *pNormalStackHistoricalItemsFont, CStringArray &szTimeTaggedStackScheduledColumns, CStringArray &szTimeTaggedStackScheduledContents, CTextViewAttributes &pTimeTaggedStackScheduledAttributes, LOGFONT *pTimeTaggedStackScheduledTitleFont, LOGFONT *pTimeTaggedStackScheduledItemsFont, CStringArray &szTimeTaggedStackHistoricalColumns, CStringArray &szTimeTaggedStackHistoricalContents, CTextViewAttributes &pTimeTaggedStackHistoricalAttributes, LOGFONT *pTimeTaggedStackHistoricalTitleFont, LOGFONT *pTimeTaggedStackHistoricalItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return((IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd())) ? (m_pNormalPage->GetPrintProperties(pJobInfo, szNormalStackScheduledColumns, szNormalStackScheduledContents, pNormalStackScheduledAttributes, pNormalStackScheduledTitleFont, pNormalStackScheduledItemsFont, szNormalStackHistoricalColumns, szNormalStackHistoricalContents, pNormalStackHistoricalAttributes, pNormalStackHistoricalTitleFont, pNormalStackHistoricalItemsFont, pSymbols, nSymbolIDs) && m_pTimeTaggedPage->GetPrintProperties(pJobInfo, szTimeTaggedStackScheduledColumns, szTimeTaggedStackScheduledContents, pTimeTaggedStackScheduledAttributes, pTimeTaggedStackScheduledTitleFont, pTimeTaggedStackScheduledItemsFont, szTimeTaggedStackHistoricalColumns, szTimeTaggedStackHistoricalContents, pTimeTaggedStackHistoricalAttributes, pTimeTaggedStackHistoricalTitleFont, pTimeTaggedStackHistoricalItemsFont, pSymbols, nSymbolIDs)) : FALSE);
}

VOID CTCAutomaticStackView::UpdateContents(BOOL bFilter, BOOL bRedraw)
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		m_pNormalPage->UpdateContents(bFilter, bRedraw);
		m_pTimeTaggedPage->UpdateContents(bFilter, bRedraw);
	}
}

VOID CTCAutomaticStackView::SetTrackSize(CONST SIZE &size)
{
	m_pNormalPage->SetTrackSize(size);
	m_pTimeTaggedPage->SetTrackSize(size);
}

CSize CTCAutomaticStackView::GetTrackSize() CONST
{
	CRect  rPage;

	return((GetItemCount() > 0 && GetItemRect(0, rPage)) ? CSize(max(m_pNormalPage->GetTrackSize().cx, m_pTimeTaggedPage->GetTrackSize().cx), m_pNormalPage->GetTrackSize().cy + rPage.Height()) : CSize(max(m_pNormalPage->GetTrackSize().cx, m_pTimeTaggedPage->GetTrackSize().cx), m_pNormalPage->GetTrackSize().cy));
}

CSize CTCAutomaticStackView::GetMargins() CONST
{
	return m_sizeTabMargins;
}

CTCAutomaticStackNormalPage *CTCAutomaticStackView::GetNormalPage() CONST
{
	return m_pNormalPage;
}

CTCAutomaticStackTimeTaggedPage *CTCAutomaticStackView::GetTimeTaggedPage() CONST
{
	return m_pTimeTaggedPage;
}

CTCAutomaticStackWnd *CTCAutomaticStackView::GetParent() CONST
{
	return((CTCAutomaticStackWnd *)CTabCtrl::GetParent());
}

VOID CTCAutomaticStackView::RecalcLayout()
{
	CWnd  *pWnd;
	CRect  rWnd;
	CRect  rView;

	if (CThread::IsSameThread(this))
	{
		for (pWnd = GetParent()->GetWindow(GW_CHILD), GetParent()->GetClientRect(rView); pWnd != (CWnd *)NULL; pWnd = pWnd->GetNextWindow())
		{
			if (pWnd->GetSafeHwnd() != GetSafeHwnd())
			{
				pWnd->GetWindowRect(rWnd);
				GetParent()->ScreenToClient(rWnd);
				rWnd.left = rView.left;
				rWnd.right = rView.right;
				rView.SubtractRect(rView, rWnd);
			}
		}
		MoveWindow(rView);
	}
}

void CTCAutomaticStackView::PostNcDestroy()
{
	m_nColumns[0][0].RemoveAll();
	m_nColumns[0][1].RemoveAll();
	m_nColumns[1][0].RemoveAll();
	m_nColumns[1][1].RemoveAll();
	m_nColumnWidths[0][0].RemoveAll();
	m_nColumnWidths[0][1].RemoveAll();
	m_nColumnWidths[1][0].RemoveAll();
	m_nColumnWidths[1][1].RemoveAll();
	m_nAlertColors[0][0].RemoveAll();
	m_nAlertColors[0][1].RemoveAll();
	m_nAlertColors[1][0].RemoveAll();
	m_nAlertColors[1][1].RemoveAll();
	m_nFilterSubSystems.RemoveAll();
	CTabCtrl::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackView, CTabCtrl)
	//{{AFX_MSG_MAP(CTCAutomaticStackView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_KEYDOWN()
	ON_WM_DESTROY()
	ON_NOTIFY_REFLECT(TCN_SELCHANGE, OnSelchangePage)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackView message handlers

int CTCAutomaticStackView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	TCITEM  sTabItem[2];
	CFontTools  cFontTools;

	if (CTabCtrl::OnCreate(lpCreateStruct) != -1)
	{
		for (sTabItem[0].mask = sTabItem[1].mask = TCIF_TEXT, sTabItem[0].pszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_PAGE_NORMAL), sTabItem[1].pszText = (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_PAGE_TIMETAGGED), EnableToolTips(); cFontTools.QueryDefaultFont(&m_cTabFont); )
		{
			SetFont(&m_cTabFont);
			break;
		}
		return((InsertItem(0, &sTabItem[0]) >= 0 && InsertItem(1, &sTabItem[1]) >= 0) ? 0 : -1);
	}
	return -1;
}

void CTCAutomaticStackView::OnSize(UINT nType, int cx, int cy)
{
	CRect  rPage;

	for (GetClientRect(rPage), AdjustRect(FALSE, rPage); IsWindow(m_pNormalPage->GetSafeHwnd()); )
	{
		m_pNormalPage->MoveWindow(rPage);
		break;
	}
	for (; IsWindow(m_pTimeTaggedPage->GetSafeHwnd()); )
	{
		m_pTimeTaggedPage->MoveWindow(rPage);
		break;
	}
	CTabCtrl::OnSize(nType, cx, cy);
}

BOOL CTCAutomaticStackView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rPage;

	GetClientRect(rPage);
	AdjustRect(FALSE, rPage);
	pDC->ExcludeClipRect(rPage);
	return CTabCtrl::OnEraseBkgnd(pDC);
}

void CTCAutomaticStackView::OnSelchangePage(NMHDR *pNotifyStruct, LRESULT *pResult)
{
	if ((m_nIndex = max(TabCtrl_GetCurSel(GetSafeHwnd()), 0)) == 0)
	{
		if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
		{
			m_pNormalPage->ShowWindow(SW_SHOW);
			m_pTimeTaggedPage->ShowWindow(SW_HIDE);
			*pResult = TRUE;
			return;
		}
		*pResult = FALSE;
		return;
	}
	if (IsWindow(m_pNormalPage->GetSafeHwnd()) && IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		m_pTimeTaggedPage->ShowWindow(SW_SHOW);
		m_pNormalPage->ShowWindow(SW_HIDE);
		*pResult = TRUE;
		return;
	}
	*pResult = FALSE;
}

void CTCAutomaticStackView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_DOWN)
	{
		if (!m_nIndex) m_pNormalPage->SetFocus();
		else  m_pTimeTaggedPage->SetFocus();
		return;
	}
	if (nChar == VK_UP)
	{
		GetParent()->SetFocus();
		return;
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCAutomaticStackView::OnDestroy()
{
	if (IsWindow(m_pNormalPage->GetSafeHwnd()))
	{
		m_pNormalPage->DestroyWindow();
		delete m_pNormalPage;
	}
	if (IsWindow(m_pTimeTaggedPage->GetSafeHwnd()))
	{
		m_pTimeTaggedPage->DestroyWindow();
		delete m_pTimeTaggedPage;
	}
	m_pNormalPage = (CTCAutomaticStackNormalPage *)NULL;
	m_pTimeTaggedPage = (CTCAutomaticStackTimeTaggedPage *)NULL;
	m_cTabFont.DeleteObject();
	CTabCtrl::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackWnd

IMPLEMENT_DYNAMIC(CTCAutomaticStackWnd, CDisplayWnd)

CTCAutomaticStackWnd::CTCAutomaticStackWnd() : CDisplayWnd()
{
	SetType(DISPLAY_TYPE_TCAUTOMATICSTACK);
	SetTelecommandingMode(TCAUTOMATICSTACK_MODE_DEFAULT);
	SetTelecommandingState(TCAUTOMATICSTACK_STATE_DEFAULT);
	SetTelecommandingChecks(TCAUTOMATICSTACK_CHECKS_DEFAULT);
	EnableTelecommandingInterlockMode(TRUE);
	EnableTelecommandingReleaseWaitMode(FALSE);
	EnableTelecommandingAutoRejectionMode(TRUE);
	SetTelecommandingUplinkState(TCSERVICE_COMMANDHANDLERSTATE_NONE);
	SetListUpdateChecks(TCAUTOMATICSTACK_UPDATELISTCHECKS_DEFAULTCOUNT);
	SetDefaultReleaseTimeWindow(TCAUTOMATICSTACK_RELEASETIMEWINDOW_DEFAULTINTERVAL);
	SetDispatchTimeWindow(TCAUTOMATICSTACK_DISPATCHTIMEWINDOW_DEFAULTINTERVAL);
	SetFilterSortMode(TCAUTOMATICSTACK_SORTMODE_BYRELEASETIME | TCAUTOMATICSTACK_SORTMODE_BYLATESTFIRST);
	SetFilterMode(TCAUTOMATICSTACK_FILTERMODE_NONE);
	SetMiscellaneousOptions();
	SetPlanningOptions();
	SetLoggingOptions();
	SetSubSystemChecks();
	SetUserPermissions();
}

BOOL CTCAutomaticStackWnd::Create(CMDIFrameWnd *pParentWnd, LPCTSTR pszTitle, PDISPLAYINFO pDefaultInfo, BOOL bDefault)
{
	if (CDisplayWnd::Create(pParentWnd, (!AfxIsValidString(pszTitle) || !_tcsstr(pszTitle, STRING(IDS_DISPLAY_TITLE_TCAUTOMATICSTACK))) ? STRING(IDS_DISPLAY_TITLE_TCAUTOMATICSTACK) : pszTitle, pDefaultInfo->rWnd, IDR_TCAUTOMATICSTACKFRAME))
	{
		if (SetScope(pDefaultInfo->nScope) && SetMode(pDefaultInfo->nMode) && Customize(bDefault)) return TRUE;
		DestroyWindow();
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns)
{
	return m_wndView.SetLayout(nPane, nColumns);
}
BOOL CTCAutomaticStackWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths)
{
	return m_wndView.SetLayout(nPane, nColumns, nWidths);
}
BOOL CTCAutomaticStackWnd::SetLayout(UINT nPane, CONST CUIntArray &nColumns, CONST CUIntArray &nWidths, CONST SIZE &sizeList)
{
	return m_wndView.SetLayout(nPane, nColumns, nWidths, sizeList);
}

BOOL CTCAutomaticStackWnd::GetLayout(UINT nPane, CUIntArray &nColumns) CONST
{
	return m_wndView.GetLayout(nPane, nColumns);
}
BOOL CTCAutomaticStackWnd::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths) CONST
{
	return m_wndView.GetLayout(nPane, nColumns, nWidths);
}
BOOL CTCAutomaticStackWnd::GetLayout(UINT nPane, CUIntArray &nColumns, CUIntArray &nWidths, CSize &sizeList) CONST
{
	return m_wndView.GetLayout(nPane, nColumns, nWidths, sizeList);
}

BOOL CTCAutomaticStackWnd::SetListTitleFont(UINT nPane, CFont *pFont)
{
	return m_wndView.SetListTitleFont(nPane, pFont);
}
BOOL CTCAutomaticStackWnd::SetListTitleFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetListTitleFont(nPane, plfFont);
}

BOOL CTCAutomaticStackWnd::GetListTitleFont(UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetListTitleFont(nPane, pFont);
}
BOOL CTCAutomaticStackWnd::GetListTitleFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetListTitleFont(nPane, plfFont);
}

BOOL CTCAutomaticStackWnd::SetListItemsFont(UINT nPane, CFont *pFont)
{
	return m_wndView.SetListItemsFont(nPane, pFont);
}
BOOL CTCAutomaticStackWnd::SetListItemsFont(UINT nPane, CONST LOGFONT *plfFont)
{
	return m_wndView.SetListItemsFont(nPane, plfFont);
}

BOOL CTCAutomaticStackWnd::GetListItemsFont(UINT nPane, CFont *pFont) CONST
{
	return m_wndView.GetListItemsFont(nPane, pFont);
}
BOOL CTCAutomaticStackWnd::GetListItemsFont(UINT nPane, LOGFONT *plfFont) CONST
{
	return m_wndView.GetListItemsFont(nPane, plfFont);
}

BOOL CTCAutomaticStackWnd::SetGridBackgroundColor(UINT nPane, COLORREF nColor)
{
	return m_wndView.SetGridBackgroundColor(nPane, nColor);
}

BOOL CTCAutomaticStackWnd::GetGridBackgroundColor(UINT nPane, COLORREF &nColor) CONST
{
	return m_wndView.GetGridBackgroundColor(nPane, nColor);
}

BOOL CTCAutomaticStackWnd::SetAlertColors(UINT nPane, CONST CUIntArray &nColors)
{
	return m_wndView.SetAlertColors(nPane, nColors);
}

BOOL CTCAutomaticStackWnd::GetAlertColors(UINT nPane, CUIntArray &nColors) CONST
{
	return m_wndView.GetAlertColors(nPane, nColors);
}

BOOL CTCAutomaticStackWnd::SetSearchFilters(UINT nType, CONST CTCAutomaticStackSearchFilters &pFilters)
{
	CTCServiceLock  cLock(this);

	return m_pSearchFilters[nType - 1].Copy(&pFilters);
}

BOOL CTCAutomaticStackWnd::GetSearchFilters(UINT nType, CTCAutomaticStackSearchFilters &pFilters) CONST
{
	CTCServiceLock  cLock(this);

	return pFilters.Copy(&m_pSearchFilters[nType - 1]);
}

BOOL CTCAutomaticStackWnd::SetItemTemplates(CONST CTCAutomaticStackItemTemplates &pTemplates)
{
	CTCServiceLock  cLock(this);

	return m_pItemTemplates.Copy(&pTemplates);
}
BOOL CTCAutomaticStackWnd::SetItemTemplates(CONST CTCAutomaticStackComposedItemTemplates &pTemplates)
{
	CTCServiceLock  cLock(this);

	return m_pComposedItemTemplates.Copy(&pTemplates);
}

BOOL CTCAutomaticStackWnd::GetItemTemplates(CTCAutomaticStackItemTemplates &pTemplates) CONST
{
	CTCServiceLock  cLock(this);

	return pTemplates.Copy(&m_pItemTemplates);
}
BOOL CTCAutomaticStackWnd::GetItemTemplates(CTCAutomaticStackComposedItemTemplates &pTemplates) CONST
{
	CTCServiceLock  cLock(this);

	return pTemplates.Copy(&m_pComposedItemTemplates);
}

BOOL CTCAutomaticStackWnd::SetListOptions(INT nArguments, BOOL bAll)
{
	INT  nArgumentCount;
	BOOL  bAllArguments;
	CTCServiceLock  cLock(this);

	for (GetListOptions(nArgumentCount, bAllArguments), m_wndView.SetListOptions(nArguments, bAll); nArguments != nArgumentCount || bAll != bAllArguments; )
	{
		LogListOptions(nArguments, bAll);
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetListOptions(INT &nArguments, BOOL &bAll) CONST
{
	return m_wndView.GetListOptions(nArguments, bAll);
}

BOOL CTCAutomaticStackWnd::SetListUpdateChecks(INT nCount)
{
	INT  nUpdateCount;
	CTCServiceLock  cLock(this);

	for (GetListUpdateChecks(nUpdateCount), m_wndView.SetListUpdateChecks(nCount); nCount != nUpdateCount; )
	{
		LogListUpdateChecks(nCount);
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetListUpdateChecks(INT &nCount) CONST
{
	return m_wndView.GetListUpdateChecks(nCount);
}

BOOL CTCAutomaticStackWnd::SetMiscellaneousOptions(UINT nOptions)
{
	UINT  nMiscellaneousOptions;
	CTCServiceLock  cLock(this);

	for (GetMiscellaneousOptions(nMiscellaneousOptions), m_wndView.SetMiscellaneousOptions(nOptions); nOptions != nMiscellaneousOptions; )
	{
		LogMiscellaneousOptions(nOptions);
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetMiscellaneousOptions(UINT &nOptions) CONST
{
	return m_wndView.GetMiscellaneousOptions(nOptions);
}

BOOL CTCAutomaticStackWnd::SetDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CComputerToken  cComputerToken;

	return SetDefaultReleaseTimeWindow(cComputerToken.GetComputerName(), tTimeWindow);
}
BOOL CTCAutomaticStackWnd::SetDefaultReleaseTimeWindow(LPCTSTR pszOriginator, CONST CTimeSpan &tTimeWindow)
{
	CTimeSpan  tInterval;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (GetDefaultReleaseTimeWindow(tInterval), m_wndView.SetDefaultReleaseTimeWindow(tTimeWindow); tTimeWindow != tInterval; )
	{
		for (LogDefaultReleaseTimeWindow(tTimeWindow.GetTotalSeconds()); cComputerToken.IsHost(); )
		{
			GetTCService()->SetDefaultReleaseTimeWindow(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, tTimeWindow);
			break;
		}
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetDefaultReleaseTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_wndView.GetDefaultReleaseTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackWnd::SetDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CComputerToken  cComputerToken;

	return SetDispatchTimeWindow(cComputerToken.GetComputerName(), tTimeWindow);
}
BOOL CTCAutomaticStackWnd::SetDispatchTimeWindow(LPCTSTR pszOriginator, CONST CTimeSpan &tTimeWindow)
{
	CTimeSpan  tInterval;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (GetDispatchTimeWindow(tInterval), m_wndView.SetDispatchTimeWindow(tTimeWindow); tTimeWindow != tInterval; )
	{
		for (LogDispatchTimeWindow(tTimeWindow.GetTotalSeconds()); cComputerToken.IsHost(); )
		{
			GetTCService()->SetDispatchTimeWindow(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, tTimeWindow);
			break;
		}
		break;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetDispatchTimeWindow(CTimeSpan &tTimeWindow) CONST
{
	return m_wndView.GetDispatchTimeWindow(tTimeWindow);
}

BOOL CTCAutomaticStackWnd::EnableFullViewMode(BOOL bEnable)
{
	return m_wndView.EnableFullViewMode(bEnable);
}

BOOL CTCAutomaticStackWnd::IsFullViewModeEnabled() CONST
{
	return m_wndView.IsFullViewModeEnabled();
}

BOOL CTCAutomaticStackWnd::EnableToolTipMode(BOOL bEnable)
{
	return m_wndView.EnableToolTipMode(bEnable);
}

BOOL CTCAutomaticStackWnd::IsToolTipModeEnabled() CONST
{
	return m_wndView.IsToolTipModeEnabled();
}

BOOL CTCAutomaticStackWnd::SetFilterMode(UINT nMode)
{
	return m_wndView.SetFilterMode(nMode);
}

BOOL CTCAutomaticStackWnd::GetFilterMode(UINT &nMode) CONST
{
	return m_wndView.GetFilterMode(nMode);
}

BOOL CTCAutomaticStackWnd::SetFilterTelecommandName(LPCTSTR pszName)
{
	return m_wndView.SetFilterTelecommandName(pszName);
}

BOOL CTCAutomaticStackWnd::GetFilterTelecommandName(CString &szName) CONST
{
	return m_wndView.GetFilterTelecommandName(szName);
}

BOOL CTCAutomaticStackWnd::SetFilterTelecommandSequence(LPCTSTR pszSequence)
{
	return m_wndView.SetFilterTelecommandSequence(pszSequence);
}

BOOL CTCAutomaticStackWnd::GetFilterTelecommandSequence(CString &szSequence) CONST
{
	return m_wndView.GetFilterTelecommandSequence(szSequence);
}

BOOL CTCAutomaticStackWnd::SetFilterTelecommandSubSystems(CONST CUIntArray &nSubSystems)
{
	return m_wndView.SetFilterTelecommandSubSystems(nSubSystems);
}

BOOL CTCAutomaticStackWnd::GetFilterTelecommandSubSystems(CUIntArray &nSubSystems) CONST
{
	return m_wndView.GetFilterTelecommandSubSystems(nSubSystems);
}

BOOL CTCAutomaticStackWnd::SetFilterLimitation(UINT nCount)
{
	return m_wndView.SetFilterLimitation(nCount);
}

BOOL CTCAutomaticStackWnd::GetFilterLimitation(UINT &nCount) CONST
{
	return m_wndView.GetFilterLimitation(nCount);
}

BOOL CTCAutomaticStackWnd::SetFilterSortMode(UINT nMode)
{
	return m_wndView.SetFilterSortMode(nMode);
}

BOOL CTCAutomaticStackWnd::GetFilterSortMode(UINT &nMode) CONST
{
	return m_wndView.GetFilterSortMode(nMode);
}

BOOL CTCAutomaticStackWnd::StartTelecommanding(CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment)
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;
	CTCServiceLock  cLock(this);

	if (m_wndView.StartTelecommanding(pTCProcessEngine, pTCEnvironment))
	{
		for (nSubSystem = 0, nSubSystems = (!m_nSubSystemIDs.GetSize()) ? GetTCService()->EnumTCSubSystems(szSubSystems, FALSE) : 0, m_wndView.SetTelecommands(m_cSavedStack); nSubSystem < nSubSystems; nSubSystem++)
		{
			m_nSubSystemIDs.Add(GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)));
			m_szSubSystemEvents[0].Add(EMPTYSTRING);
			m_szSubSystemEvents[1].Add(EMPTYSTRING);
			m_nSubSystemStatus.Add(MAKEWORD(TRUE, TRUE));
		}
		for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs.GetSize(); nSubSystem < nSubSystems; nSubSystem++)
		{
			m_nSubSystemStatus.SetAt(nSubSystem, MAKEWORD(LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem)), (LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem))) ? !GetTMService()->CheckTelemetryEvent(m_szSubSystemEvents[1].GetAt(nSubSystem)) : FALSE));
			continue;
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::UpdateTelecommanding(LPCTSTR pszOriginator, CONST CTCProcessCommandSourceInfo *pCommandSourceInfo)
{
	INT  nSubSystem;
	INT  nSubSystems;
	CUIntArray  nSubSystemIDs;
	CUIntArray  nSubSystemStatus;
	CStringArray  szSubSystemEvents[2];
	CTCServiceLock  cLock(this);

	SetTelecommandingMode(pszOriginator, pCommandSourceInfo->GetTelecommandingMode());
	SetTelecommandingState(pszOriginator, pCommandSourceInfo->GetTelecommandingState());
	SetTelecommandingChecks(pszOriginator, pCommandSourceInfo->GetTelecommandingChecks());
	EnableTelecommandingInterlockMode(pszOriginator, pCommandSourceInfo->IsTelecommandingInterlockModeEnabled());
	EnableTelecommandingReleaseWaitMode(pszOriginator, pCommandSourceInfo->IsTelecommandingReleaseWaitModeEnabled());
	EnableTelecommandingAutoRejectionMode(pszOriginator, pCommandSourceInfo->IsTelecommandingAutoRejectionModeEnabled());
	for (nSubSystem = 0, nSubSystems = pCommandSourceInfo->GetSubSystemChecks(nSubSystemIDs, szSubSystemEvents[0], szSubSystemEvents[1], nSubSystemStatus), m_nSubSystemIDs.Copy(nSubSystemIDs), m_szSubSystemEvents[0].Copy(szSubSystemEvents[0]), m_szSubSystemEvents[1].Copy(szSubSystemEvents[1]); nSubSystem < nSubSystems; nSubSystem++)
	{
		m_nSubSystemStatus.SetAtGrow(nSubSystem, MAKEWORD(LOBYTE(nSubSystemStatus.GetAt(nSubSystem)), (nSubSystem < m_nSubSystemStatus.GetSize()) ? HIBYTE(m_nSubSystemStatus.GetAt(nSubSystem)) : LOBYTE(nSubSystemStatus.GetAt(nSubSystem))));
		continue;
	}
	SetDefaultReleaseTimeWindow(pszOriginator, pCommandSourceInfo->GetDefaultReleaseTimeWindow());
	SetDispatchTimeWindow(pszOriginator, pCommandSourceInfo->GetDispatchTimeWindow());
	UpdateContents();
	return TRUE;
}
BOOL CTCAutomaticStackWnd::UpdateTelecommanding(LPCTSTR pszEvent)
{
	INT  nSubSystem;
	INT  nSubSystems;
	CTCServiceLock  cLock(this);

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs.GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		if (((!m_szSubSystemEvents[0].GetAt(nSubSystem).Compare(pszEvent) && !HIBYTE(m_nSubSystemStatus.GetAt(nSubSystem))) || (!m_szSubSystemEvents[1].GetAt(nSubSystem).Compare(pszEvent) && HIBYTE(m_nSubSystemStatus.GetAt(nSubSystem)))) && LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem)))
		{
			m_nSubSystemStatus.SetAt(nSubSystem, MAKEWORD(LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem)), !HIBYTE(m_nSubSystemStatus.GetAt(nSubSystem))));
			continue;
		}
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::StopTelecommanding()
{
	return m_wndView.StopTelecommanding();
}

BOOL CTCAutomaticStackWnd::SetTelecommandingMode(UINT nMode, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingMode(cComputerToken.GetComputerName(), nMode, bUser);
}
BOOL CTCAutomaticStackWnd::SetTelecommandingMode(LPCTSTR pszOriginator, UINT nMode, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	if (nMode != GetTelecommandingMode())
	{
		if (m_wndView.SetTelecommandingMode(nMode) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingMode(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, nMode) >= 0))
		{
			LogTelecommandingMode(pszOriginator, nMode, bUser);
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackWnd::GetTelecommandingMode() CONST
{
	return m_wndView.GetTelecommandingMode();
}

BOOL CTCAutomaticStackWnd::SetTelecommandingChecks(UINT nFlags, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingChecks(cComputerToken.GetComputerName(), nFlags, bUser);
}
BOOL CTCAutomaticStackWnd::SetTelecommandingChecks(LPCTSTR pszOriginator, UINT nFlags, BOOL bUser)
{
	UINT  nOldFlags;
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; (nOldFlags = GetTelecommandingChecks()) != nFlags; )
	{
		if (m_wndView.SetTelecommandingChecks(nFlags) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingChecks(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, nFlags) >= 0))
		{
			if ((nFlags & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)) != (nOldFlags & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)) == 0) ? ~(TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE) : (nFlags & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)), bUser);
			if ((nFlags & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)) != (nOldFlags & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)) == 0) ? ~(TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE) : (nFlags & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)), bUser);
			if ((nFlags & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)) != (nOldFlags & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE))) LogTelecommandingChecks(pszOriginator, ((nFlags & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)) == 0) ? ~(TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE) : (nFlags & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)), bUser);
			UpdateBars();
			break;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackWnd::GetTelecommandingChecks() CONST
{
	return m_wndView.GetTelecommandingChecks();
}

BOOL CTCAutomaticStackWnd::SetTelecommandingState(UINT nState, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return SetTelecommandingState(cComputerToken.GetComputerName(), nState, bUser);
}
BOOL CTCAutomaticStackWnd::SetTelecommandingState(LPCTSTR pszOriginator, UINT nState, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; nState != (GetTelecommandingState() & ~TCAUTOMATICSTACK_STATE_EMPTY); )
	{
		if (m_wndView.SetTelecommandingState(nState) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->SetCommandSourceTelecommandingState(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, nState) >= 0))
		{
			LogTelecommandingState(pszOriginator, nState, bUser);
			UpdateBars();
			break;
		}
		return FALSE;
	}
	return TRUE;
}

UINT CTCAutomaticStackWnd::GetTelecommandingState() CONST
{
	return m_wndView.GetTelecommandingState();
}

BOOL CTCAutomaticStackWnd::SetTelecommandingUplinkState(UINT nState)
{
	CTCServiceLock  cLock(this);

	if (nState != GetTelecommandingUplinkState())
	{
		m_wndView.SetTelecommandingUplinkState(nState);
		UpdateBars();
	}
	return TRUE;
}

UINT CTCAutomaticStackWnd::GetTelecommandingUplinkState() CONST
{
	return m_wndView.GetTelecommandingUplinkState();
}

BOOL CTCAutomaticStackWnd::EnableTelecommandingInterlockMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingInterlockMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCAutomaticStackWnd::EnableTelecommandingInterlockMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingInterlockModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingInterlockMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingInterlockMode(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, bEnable) >= 0))
		{
			LogTelecommandingInterlockMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::IsTelecommandingInterlockModeEnabled() CONST
{
	return m_wndView.IsTelecommandingInterlockModeEnabled();
}

BOOL CTCAutomaticStackWnd::EnableTelecommandingReleaseWaitMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingReleaseWaitMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCAutomaticStackWnd::EnableTelecommandingReleaseWaitMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingReleaseWaitModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingReleaseWaitMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingReleaseWaitMode(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, bEnable) >= 0))
		{
			LogTelecommandingReleaseWaitMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::IsTelecommandingReleaseWaitModeEnabled() CONST
{
	return m_wndView.IsTelecommandingReleaseWaitModeEnabled();
}

BOOL CTCAutomaticStackWnd::EnableTelecommandingAutoRejectionMode(BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken;

	return EnableTelecommandingAutoRejectionMode(cComputerToken.GetComputerName(), bEnable, bUser);
}
BOOL CTCAutomaticStackWnd::EnableTelecommandingAutoRejectionMode(LPCTSTR pszOriginator, BOOL bEnable, BOOL bUser)
{
	CComputerToken  cComputerToken(pszOriginator);
	CTCServiceLock  cLock(this);

	for (; bEnable != IsTelecommandingAutoRejectionModeEnabled(); )
	{
		if (m_wndView.EnableTelecommandingAutoRejectionMode(bEnable) && (!cComputerToken.IsHost() || !lstrlen(pszOriginator) || GetTCService()->EnableCommandSourceTelecommandingAutoRejectionMode(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, bEnable) >= 0))
		{
			LogTelecommandingAutoRejectionMode(pszOriginator, bEnable, bUser);
			break;
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::IsTelecommandingAutoRejectionModeEnabled() CONST
{
	return m_wndView.IsTelecommandingAutoRejectionModeEnabled();
}

BOOL CTCAutomaticStackWnd::SetTelecommands(CONST CTCSavedStack &pStack)
{
	if (m_wndView.SetTelecommands(pStack))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::GetTelecommands(CTCSavedStack &pStack, BOOL bAll) CONST
{
	return m_wndView.GetTelecommands(pStack, bAll);
}

BOOL CTCAutomaticStackWnd::LoadTelecommands(CONST CTCItems &pItems)
{
	if (m_wndView.LoadTelecommands(pItems))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}
BOOL CTCAutomaticStackWnd::LoadTelecommands(CONST CTCAutomaticStackItems &pItems)
{
	if (m_wndView.LoadTelecommands(pItems))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DispatchTelecommands(CTCAutomaticStackItems &pItems, BOOL bUndo)
{
	if (GetTCService()->DispatchTelecommands(pItems, bUndo))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::UpdateTelecommands(CONST CTCItems &pItems, BOOL bAll)
{
	return m_wndView.UpdateTelecommands(pItems, bAll);
}
BOOL CTCAutomaticStackWnd::UpdateTelecommands(CONST CTMEnvironment *pTMEnvironment)
{
	return m_wndView.UpdateTelecommands(pTMEnvironment);
}
BOOL CTCAutomaticStackWnd::UpdateTelecommands(CView *pView)
{
	return m_wndView.UpdateTelecommands(pView);
}

BOOL CTCAutomaticStackWnd::UpdateTelecommandInterlocks(CONST CTCInterlocks &pInterlocks)
{
	return m_wndView.UpdateTelecommandInterlocks(pInterlocks);
}

BOOL CTCAutomaticStackWnd::SetCurTelecommand(UINT nPane, INT nIndex)
{
	return m_wndView.SetCurTelecommand(nPane, nIndex);
}

INT CTCAutomaticStackWnd::GetCurTelecommand(UINT nPane) CONST
{
	return m_wndView.GetCurTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::SelectTelecommand(UINT nPane, INT nIndex)
{
	return m_wndView.SelectTelecommand(nPane, nIndex);
}

BOOL CTCAutomaticStackWnd::DoSelectAllTelecommands(UINT nPane)
{
	return m_wndView.DoSelectAllTelecommands(nPane);
}

BOOL CTCAutomaticStackWnd::CanSelectAllTelecommands(UINT nPane) CONST
{
	return m_wndView.CanSelectAllTelecommands(nPane);
}

INT CTCAutomaticStackWnd::EnumSelectedTelecommands(UINT nPane, CTCAutomaticStackItems &pItems) CONST
{
	return m_wndView.EnumSelectedTelecommands(nPane, pItems);
}

BOOL CTCAutomaticStackWnd::HasSelectedTelecommands(UINT nPane, UINT nStatus) CONST
{
	return m_wndView.HasSelectedTelecommands(nPane, nStatus);
}

UINT CTCAutomaticStackWnd::GetTelecommandCount(UINT nPane) CONST
{
	return m_wndView.GetTelecommandCount(nPane);
}

BOOL CTCAutomaticStackWnd::DoCutTelecommand(UINT nPane)
{
	if (m_wndView.DoCutTelecommand(nPane))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanCutTelecommand(UINT nPane) CONST
{
	return m_wndView.CanCutTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::DoCopyTelecommand(UINT nPane)
{
	if (m_wndView.DoCopyTelecommand(nPane))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanCopyTelecommand(UINT nPane) CONST
{
	return m_wndView.CanCopyTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::DoPasteTelecommand(UINT nPane)
{
	if (m_wndView.DoPasteTelecommand(nPane))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanPasteTelecommand(UINT nPane) CONST
{
	return m_wndView.CanPasteTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::DoDeleteTelecommand(UINT nPane)
{
	if (m_wndView.DoDeleteTelecommand(nPane))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanDeleteTelecommand(UINT nPane) CONST
{
	return m_wndView.CanDeleteTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::DoAcknowledgeTelecommand(UINT nPane)
{
	if (m_wndView.DoAcknowledgeTelecommand(nPane))
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanAcknowledgeTelecommand(UINT nPane) CONST
{
	return m_wndView.CanAcknowledgeTelecommand(nPane);
}

BOOL CTCAutomaticStackWnd::ShowTelecommandProperties()
{
	return m_wndView.ShowTelecommandProperties();
}

BOOL CTCAutomaticStackWnd::CanShowTelecommandProperties() CONST
{
	return m_wndView.CanShowTelecommandProperties();
}

BOOL CTCAutomaticStackWnd::IsShowingTelecommandProperties() CONST
{
	return m_wndView.IsShowingTelecommandProperties();
}

BOOL CTCAutomaticStackWnd::DoResetInterlocks()
{
	CTCInterlocks  pInterlocks;

	if (m_dlgInterlocks.Create(this, pInterlocks) == IDOK)
	{
		LogResetInterlocks(pInterlocks);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanResetInterlocks() CONST
{
	return GetTCService()->CheckTCInterlocks(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, TCINTERLOCK_STATE_SUCCESS) || GetTCService()->CheckTCInterlocks(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, TCINTERLOCK_STATE_FAILURE);
}

BOOL CTCAutomaticStackWnd::DoCheckSubSystems()
{
	CUIntArray  nSubSystemsID;
	CByteArray  bSubSystemsStatus;

	if (m_dlgSubSystems.Create(this, nSubSystemsID, bSubSystemsStatus) == IDOK)
	{
		LogCheckSubSystems(nSubSystemsID, bSubSystemsStatus);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanCheckSubSystems() CONST
{
	CStringArray  szSubSystems;

	return((GetTCService()->EnumTCSubSystems(szSubSystems, FALSE) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::DoCommandingState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCAUTOMATICSTACK_STATE_DISABLED) | TCAUTOMATICSTACK_STATE_DEFAULT);
}

BOOL CTCAutomaticStackWnd::CanCommandingState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingUplinkState() & TCSERVICE_COMMANDHANDLERSTATE_RUNNING) && (GetTelecommandingState() & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::DoSuspendedState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCAUTOMATICSTACK_STATE_DISABLED) | TCAUTOMATICSTACK_STATE_SUSPENDED);
}

BOOL CTCAutomaticStackWnd::CanSuspendedState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingState() & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED)) == 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::DoStoppedState()
{
	CTCServiceLock  cLock(this);

	return SetTelecommandingState((GetTelecommandingState() & TCAUTOMATICSTACK_STATE_DISABLED) | TCAUTOMATICSTACK_STATE_STOPPED);
}

BOOL CTCAutomaticStackWnd::CanStoppedState() CONST
{
	CTCServiceLock  cLock(this);

	return(((GetTelecommandingState() & TCAUTOMATICSTACK_STATE_STOPPED) == 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::Start()
{
	Initialize(TRUE);
	UpdateAllPanes();
	return TRUE;
}

BOOL CTCAutomaticStackWnd::Prepare(BOOL bDialog)
{
	return TRUE;
}

BOOL CTCAutomaticStackWnd::Check() CONST
{
	return((CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::Update()
{
	if (!Check())
	{
		if (IsWindowVisible())
		{
			ReportEvent(USER_INFORMATIONAL_DISPLAY_ACCESS_VIOLATION);
			ActivateFrame(SW_HIDE);
			return;
		}
	}
	UpdateAllPanes();
	CDisplayWnd::Update();
}

BOOL CTCAutomaticStackWnd::Stop()
{
	Initialize(FALSE);
	return TRUE;
}

BOOL CTCAutomaticStackWnd::SaveInfo(INT nPage, INT nDisplay, LPCTSTR pszTitle, CONST PDISPLAYINFO pDisplayInfo)
{
	INT  nArgs;
	INT  nChecks;
	BOOL  bArgs;
	BOOL  bEvent;
	UINT  nCount;
	UINT  nLimit;
	UINT  nPolicy;
	UINT  nMode[2];
	UINT  nOptions[3];
	UINT  nPermissions;
	CSize  size[2][2];
	CString  szAudition;
	CString  szFileName[2];
	CString  szNotification;
	CString  szTelecommand[2];
	CString  szComputer[2][2];
	LOGFONT  sFontInfo[2][2][2];
	COLORREF  nColor[2][2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CTimeSpan  tPeriod;
	CTimeSpan  tTimeWindow[2];
	CUIntArray  nColumns[2][2];
	CUIntArray  nWidths[2][2];
	CUIntArray  nIDs[2];
	CUIntArray  nTypes;
	CUIntArray  nStatus;
	CByteArray  nFilters;
	CByteArray  nTemplates[2];
	CByteArray  nContentsData;
	CByteArray  nPrintInfo;
	CByteArray  bAcks;
	CDWordArray  nColors;
	CStringArray  szAuditions;
	CStringArray  szNotifications;
	CStringArray  szEvents[2];
	CProfile  cProfile;

	return((CDisplayWnd::SaveInfo(nPage, nDisplay, pszTitle, pDisplayInfo) && (nPage > 0 || (GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[0][0], nWidths[0][0], size[0][0]) && GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[0][1], nWidths[0][1], size[0][1]) && GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[1][0], nWidths[1][0], size[1][0]) && GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[1][1], nWidths[1][1], size[1][1]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[0][0][0]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[0][1][0]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[1][0][0]) && GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[1][1][0]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[0][0][1]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[0][1][1]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[1][0][1]) && GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[1][1][1]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[0][0]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[0][1]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[1][0]) && GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[1][1]) && GetListOptions(nArgs, bArgs) && GetListUpdateChecks(nChecks) && GetMiscellaneousOptions(nOptions[0]) && GetDefaultReleaseTimeWindow(tTimeWindow[0]) && GetDispatchTimeWindow(tTimeWindow[1]) && GetContents(nContentsData) && GetFilterMode(nMode[0]) && GetFilterTelecommandName(szTelecommand[0]) && GetFilterTelecommandSequence(szTelecommand[1]) && GetFilterTelecommandSubSystems(nIDs[0]) && GetFilterLimitation(nLimit) && GetFilterSortMode(nMode[1]) && GetSearchFilters(nFilters) && GetItemTemplates(nTemplates[0], nTemplates[1]) && GetSubSystemChecks(nIDs[1], szEvents[0], szEvents[1], nStatus) && GetAlertOptions(nTypes, szAuditions, szNotifications, nColors, bAcks) && GetPlanningOptions(szComputer[0][0], szComputer[0][1], nOptions[1], tPeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[2]) && GetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && GetPrintJobs(nPrintInfo) && GetUserPermissions(nPermissions) && cProfile.SetTCAutomaticStackLayoutInfo(nPage, nDisplay, nColumns[0][0], nWidths[0][0], size[0][0], nColor[0][0], nColumns[0][1], nWidths[0][1], size[0][1], nColor[0][1], nColumns[1][0], nWidths[1][0], size[1][0], nColor[1][0], nColumns[1][1], nWidths[1][1], size[1][1], nColor[1][1], IsToolTipModeEnabled()) && cProfile.SetTCAutomaticStackFontsInfo(nPage, nDisplay, &sFontInfo[0][0][0], &sFontInfo[0][0][1], &sFontInfo[0][1][0], &sFontInfo[0][1][1], &sFontInfo[1][0][0], &sFontInfo[1][0][1], &sFontInfo[1][1][0], &sFontInfo[1][1][1]) && cProfile.SetTCAutomaticStackOperationsInfo(nPage, nDisplay, GetTelecommandingMode(), GetTelecommandingState(), GetTelecommandingChecks(), IsTelecommandingInterlockModeEnabled(), IsTelecommandingReleaseWaitModeEnabled(), IsTelecommandingAutoRejectionModeEnabled(), nChecks, nArgs, bArgs, nOptions[0], tTimeWindow[0], tTimeWindow[1], nPermissions) && cProfile.SetTCAutomaticStackContentsInfo(nPage, nDisplay, nContentsData) && cProfile.SetTCAutomaticStackFilterInfo(nPage, nDisplay, nMode[0], szTelecommand[0], szTelecommand[1], nIDs[0], nLimit, nMode[1]) && cProfile.SetTCAutomaticStackSearchInfo(nPage, nDisplay, nFilters) && cProfile.SetTCAutomaticStackTemplatesInfo(nPage, nDisplay, nTemplates[0], nTemplates[1]) && cProfile.SetTCAutomaticStackSubSystemsInfo(nPage, nDisplay, nIDs[1], szEvents[0], szEvents[1], nStatus) && cProfile.SetTCAutomaticStackAlertInfo(nPage, nDisplay, nTypes, szAuditions, szNotifications, nColors, bAcks) && cProfile.SetTCAutomaticStackPlanningInfo(nPage, nDisplay, szComputer[0][0], szComputer[0][1], nOptions[1], tPeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[2]) && cProfile.SetTCAutomaticStackLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.SetTCAutomaticStackPrintInfo(nPage, nDisplay, nPrintInfo)))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::LoadInfo(INT nPage, INT nDisplay, CString &szTitle, PDISPLAYINFO pDisplayInfo)
{
	INT  nArgs;
	INT  nChecks;
	BOOL  bArgs;
	BOOL  bEvent;
	BOOL  bMode[3];
	BOOL  bToolTips;
	UINT  nCount;
	UINT  nLimit;
	UINT  nPolicy;
	UINT  nMode[2];
	UINT  nFlags[3];
	UINT  nOptions[3];
	UINT  nPermissions;
	CSize  size[2][2];
	CString  szAudition;
	CString  szFileName[2];
	CString  szNotification;
	CString  szTelecommand[2];
	CString  szComputer[2][2];
	LOGFONT  sFontInfo[2][2][2];
	COLORREF  nColor[2][2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;
	CTimeSpan  tPeriod;
	CTimeSpan  tTimeWindow[2];
	CUIntArray  nColumns[2][2];
	CUIntArray  nWidths[2][2];
	CUIntArray  nIDs[2];
	CUIntArray  nTypes;
	CUIntArray  nStatus;
	CByteArray  nFilters;
	CByteArray  nTemplates[2];
	CByteArray  nContentsData;
	CByteArray  nPrintInfo;
	CByteArray  bAcks;
	CDWordArray  nColors;
	CStringArray  szAuditions;
	CStringArray  szNotifications;
	CStringArray  szEvents[2];
	CProfile  cProfile;

	return((CDisplayWnd::LoadInfo(nPage, nDisplay, szTitle, pDisplayInfo) && (nPage > 0 || (cProfile.GetTCAutomaticStackLayoutInfo(nPage, nDisplay, nColumns[0][0], nWidths[0][0], size[0][0], nColor[0][0], nColumns[0][1], nWidths[0][1], size[0][1], nColor[0][1], nColumns[1][0], nWidths[1][0], size[1][0], nColor[1][0], nColumns[1][1], nWidths[1][1], size[1][1], nColor[1][1], bToolTips) && cProfile.GetTCAutomaticStackFontsInfo(nPage, nDisplay, &sFontInfo[0][0][0], &sFontInfo[0][0][1], &sFontInfo[0][1][0], &sFontInfo[0][1][1], &sFontInfo[1][0][0], &sFontInfo[1][0][1], &sFontInfo[1][1][0], &sFontInfo[1][1][1]) && cProfile.GetTCAutomaticStackOperationsInfo(nPage, nDisplay, nFlags[0], nFlags[1], nFlags[2], bMode[0], bMode[1], bMode[2], nChecks, nArgs, bArgs, nOptions[0], tTimeWindow[0], tTimeWindow[1], nPermissions) && cProfile.GetTCAutomaticStackContentsInfo(nPage, nDisplay, nContentsData) && cProfile.GetTCAutomaticStackFilterInfo(nPage, nDisplay, nMode[0], szTelecommand[0], szTelecommand[1], nIDs[0], nLimit, nMode[1]) && cProfile.GetTCAutomaticStackSearchInfo(nPage, nDisplay, nFilters) && cProfile.GetTCAutomaticStackTemplatesInfo(nPage, nDisplay, nTemplates[0], nTemplates[1]) && cProfile.GetTCAutomaticStackSubSystemsInfo(nPage, nDisplay, nIDs[1], szEvents[0], szEvents[1], nStatus) && cProfile.GetTCAutomaticStackAlertInfo(nPage, nDisplay, nTypes, szAuditions, szNotifications, nColors, bAcks) && cProfile.GetTCAutomaticStackPlanningInfo(nPage, nDisplay, szComputer[0][0], szComputer[0][1], nOptions[1], tPeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[2]) && cProfile.GetTCAutomaticStackLoggingInfo(nPage, nDisplay, nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && cProfile.GetTCAutomaticStackPrintInfo(nPage, nDisplay, nPrintInfo) && SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[0][0], nWidths[0][0], size[0][0]) && SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[0][1], nWidths[0][1], size[0][1]) && SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[1][0], nWidths[1][0], size[1][0]) && SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[1][1], nWidths[1][1], size[1][1]) && SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[0][0][0]) && SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[0][1][0]) && SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[1][0][0]) && SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[1][1][0]) && SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[0][0][1]) && SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[0][1][1]) && SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &sFontInfo[1][0][1]) && SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &sFontInfo[1][1][1]) && SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[0][0]) && SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[0][1]) && SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[1][0]) && SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[1][1]) && SetTelecommandingMode(nFlags[0]) && SetTelecommandingState(nFlags[1]) && SetTelecommandingChecks(nFlags[2]) && EnableTelecommandingInterlockMode(bMode[0]) && EnableTelecommandingReleaseWaitMode(bMode[1]) && EnableTelecommandingAutoRejectionMode(bMode[2]) && SetListOptions(nArgs, bArgs) && SetListUpdateChecks(nChecks) && SetMiscellaneousOptions(nOptions[0]) && SetDefaultReleaseTimeWindow(tTimeWindow[0]) && SetDispatchTimeWindow(tTimeWindow[1]) && SetContents(nContentsData) && SetFilterMode(nMode[0]) && SetFilterTelecommandName(szTelecommand[0]) && SetFilterTelecommandSequence(szTelecommand[1]) && SetFilterTelecommandSubSystems(nIDs[0]) && SetFilterLimitation(nLimit) && SetFilterSortMode(nMode[1]) && SetSearchFilters(nFilters) && SetItemTemplates(nTemplates[0], nTemplates[1]) && SetSubSystemChecks(nIDs[1], szEvents[0], szEvents[1], nStatus) && SetAlertOptions(nTypes, szAuditions, szNotifications, nColors, bAcks) && SetPlanningOptions(szComputer[0][0], szComputer[0][1], nOptions[1], tPeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[2]) && SetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nCount, bEvent) && SetPrintJobs(nPrintInfo) && SetUserPermissions(nPermissions) && EnableToolTipMode(bToolTips)))) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::SetLayoutInfo(LPCVOID pData)
{
	INT  cbData;
	DATA  sData;
	CUIntArray  nColumns[2][2];
	CUIntArray  nWidths[2][2];
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		for (CopyMemory(&sData, pData, ((cbData = (INT)GlobalSize((HGLOBAL)pData)) >= sizeof(DATA)) ? sizeof(DATA) : 0); cbData >= sizeof(DATA) && sData.cbSize == sizeof(DATA) + sData.cbColumns[0][0][0] + sData.cbColumns[0][0][1] + sData.cbColumns[0][1][0] + sData.cbColumns[0][1][1] + sData.cbColumns[1][0][0] + sData.cbColumns[1][0][1] + sData.cbColumns[1][1][0] + sData.cbColumns[1][1][1] && sData.cbColumns[0][0][0] >= 0 && sData.cbColumns[0][0][1] >= 0 && sData.cbColumns[0][1][0] >= 0 && sData.cbColumns[0][1][1] >= 0 && sData.cbColumns[1][0][0] >= 0 && sData.cbColumns[1][0][1] >= 0 && sData.cbColumns[1][1][0] >= 0 && sData.cbColumns[1][1][1] >= 0; )
		{
			for (nColumns[0][0].SetSize(sData.cbColumns[0][0][0] / sizeof(UINT)), nWidths[0][0].SetSize(sData.cbColumns[0][0][1] / sizeof(UINT)), nColumns[0][1].SetSize(sData.cbColumns[0][1][0] / sizeof(UINT)), nWidths[0][1].SetSize(sData.cbColumns[0][1][1] / sizeof(UINT)), nColumns[1][0].SetSize(sData.cbColumns[1][0][0] / sizeof(UINT)), nWidths[1][0].SetSize(sData.cbColumns[1][0][1] / sizeof(UINT)), nColumns[1][1].SetSize(sData.cbColumns[1][1][0] / sizeof(UINT)), nWidths[1][1].SetSize(sData.cbColumns[1][1][1] / sizeof(UINT)), CopyMemory(nColumns[0][0].GetData(), (LPBYTE)pData + (cbData = sizeof(DATA)), sData.cbColumns[0][0][0]), CopyMemory(nWidths[0][0].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0][0][0]), sData.cbColumns[0][0][1]), CopyMemory(nColumns[0][1].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0][0][1]), sData.cbColumns[0][1][0]), CopyMemory(nWidths[0][1].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0][1][0]), sData.cbColumns[0][1][1]), CopyMemory(nColumns[1][0].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[0][1][1]), sData.cbColumns[1][0][0]), CopyMemory(nWidths[1][0].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[1][0][0]), sData.cbColumns[1][0][1]), CopyMemory(nColumns[1][1].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[1][0][1]), sData.cbColumns[1][1][0]), CopyMemory(nWidths[1][1].GetData(), (LPBYTE)pData + (cbData = cbData + sData.cbColumns[1][1][0]), sData.cbColumns[1][1][1]); SetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns[0][0], nWidths[0][0], sData.sizePanes[0][0], nColumns[0][1], nWidths[0][1], sData.sizePanes[0][1], nColumns[1][0], nWidths[1][0], sData.sizePanes[1][0], nColumns[1][1], nWidths[1][1], sData.sizePanes[1][1], &sData.sFont[0][0][0], &sData.sFont[0][0][1], &sData.sFont[0][1][0], &sData.sFont[0][1][1], &sData.sFont[1][0][0], &sData.sFont[1][0][1], &sData.sFont[1][1][0], &sData.sFont[1][1][1], sData.nPage, &sData.sScrollInfo[0][0][0], &sData.sScrollInfo[0][0][1], &sData.sScrollInfo[0][1][0], &sData.sScrollInfo[0][1][1], &sData.sScrollInfo[1][0][0], &sData.sScrollInfo[1][0][1], &sData.sScrollInfo[1][1][0], &sData.sScrollInfo[1][1][1]); ) return TRUE;
			break;
		}
		return FALSE;
	}
	return TRUE;
}

INT CTCAutomaticStackWnd::GetLayoutInfo(LPVOID *pData) CONST
{
	INT  cbData;
	DATA  sData;
	LPVOID  pBlock;
	CSize  sizePanes[2][2];
	CUIntArray  nColumns[2][2];
	CUIntArray  nWidths[2][2];
	CTCServiceLock  cLock(this);

	if (GetScope() == DISPLAY_SCOPE_GLOBAL)
	{
		if (GetLayoutInfo(sData.rToolBar[0], sData.rToolBar[1], nColumns[0][0], nWidths[0][0], sizePanes[0][0], nColumns[0][1], nWidths[0][1], sizePanes[0][1], nColumns[1][0], nWidths[1][0], sizePanes[1][0], nColumns[1][1], nWidths[1][1], sizePanes[1][1], &sData.sFont[0][0][0], &sData.sFont[0][0][1], &sData.sFont[0][1][0], &sData.sFont[0][1][1], &sData.sFont[1][0][0], &sData.sFont[1][0][1], &sData.sFont[1][1][0], &sData.sFont[1][1][1], sData.nPage, &sData.sScrollInfo[0][0][0], &sData.sScrollInfo[0][0][1], &sData.sScrollInfo[0][1][0], &sData.sScrollInfo[0][1][1], &sData.sScrollInfo[1][0][0], &sData.sScrollInfo[1][0][1], &sData.sScrollInfo[1][1][0], &sData.sScrollInfo[1][1][1]))
		{
			for (sData.cbColumns[0][0][0] = (INT)(nColumns[0][0].GetSize()*sizeof(UINT)), sData.cbColumns[0][0][1] = (INT)(nWidths[0][0].GetSize()*sizeof(UINT)), sData.cbColumns[0][1][0] = (INT)(nColumns[0][1].GetSize()*sizeof(UINT)), sData.cbColumns[0][1][1] = (INT)(nWidths[0][1].GetSize()*sizeof(UINT)), sData.cbColumns[1][0][0] = (INT)(nColumns[1][0].GetSize()*sizeof(UINT)), sData.cbColumns[1][0][1] = (INT)(nWidths[1][0].GetSize()*sizeof(UINT)), sData.cbColumns[1][1][0] = (INT)(nColumns[1][1].GetSize()*sizeof(UINT)), sData.cbColumns[1][1][1] = (INT)(nWidths[1][1].GetSize()*sizeof(UINT)), sData.sizePanes[0][0].cx = sizePanes[0][0].cx, sData.sizePanes[0][0].cy = sizePanes[0][0].cy, sData.sizePanes[0][1].cx = sizePanes[0][1].cx, sData.sizePanes[0][1].cy = sizePanes[0][1].cy, sData.sizePanes[1][0].cx = sizePanes[1][0].cx, sData.sizePanes[1][0].cy = sizePanes[1][0].cy, sData.sizePanes[1][1].cx = sizePanes[1][1].cx, sData.sizePanes[1][1].cy = sizePanes[1][1].cy, sData.cbSize = sizeof(DATA) + sData.cbColumns[0][0][0] + sData.cbColumns[0][0][1] + sData.cbColumns[0][1][0] + sData.cbColumns[0][1][1] + sData.cbColumns[1][0][0] + sData.cbColumns[1][0][1] + sData.cbColumns[1][1][0] + sData.cbColumns[1][1][1]; (pBlock = (AfxIsValidAddress(pData, sizeof(DATA))) ? (LPVOID)GlobalReAlloc(*pData, sData.cbSize, GMEM_MOVEABLE | GMEM_ZEROINIT) : (LPVOID)NULL); )
			{
				CopyMemory(pData, &pBlock, sizeof(LPVOID));
				CopyMemory(pBlock, &sData, sizeof(DATA));
				CopyMemory((LPBYTE)pBlock + (cbData = sizeof(DATA)), nColumns[0][0].GetData(), sData.cbColumns[0][0][0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0][0][0]), nWidths[0][0].GetData(), sData.cbColumns[0][0][1]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0][0][1]), nColumns[0][1].GetData(), sData.cbColumns[0][1][0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0][1][0]), nWidths[0][1].GetData(), sData.cbColumns[0][1][1]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[0][1][1]), nColumns[1][0].GetData(), sData.cbColumns[1][0][0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[1][0][0]), nWidths[1][0].GetData(), sData.cbColumns[1][0][1]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[1][0][1]), nColumns[1][1].GetData(), sData.cbColumns[1][1][0]);
				CopyMemory((LPBYTE)pBlock + (cbData = cbData + sData.cbColumns[1][1][0]), nWidths[1][1].GetData(), sData.cbColumns[1][1][1]);
				break;
			}
			return sData.cbSize;
		}
	}
	return 0;
}

BOOL CTCAutomaticStackWnd::QueryDefaultInfo(PDISPLAYINFO pDefaultInfo) CONST
{
	pDefaultInfo->ptWnd.x = 0;
	pDefaultInfo->ptWnd.y = 0;
	pDefaultInfo->nNumber = -1;
	pDefaultInfo->rWnd = rectDefault;
	pDefaultInfo->nScope = DISPLAY_SCOPE_GLOBAL;
	pDefaultInfo->nMode = DISPLAY_MODE_REALTIME;
	pDefaultInfo->pData = (LPVOID)NULL;
	pDefaultInfo->nShow = SW_SHOWNORMAL;
	pDefaultInfo->bShow = TRUE;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::QueryDefaultMenu(CLocaleMenu &cMenu, CImageList &cImages, CUIntArray &nImageIDs) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  iImage;
	UINT  nButtonID;
	UINT  nButtonStyle;
	CBitmap  cBitmap[3];
	BITMAP  sBitmap;

	for (cImages.DeleteImageList(), nImageIDs.RemoveAll(); cBitmap[0].LoadBitmap(IDB_TCAUTOMATICSTACKFRAMEPROPERTIESSMALLIMAGES) && cBitmap[1].LoadBitmap(IDB_TCAUTOMATICSTACKFRAMEOPERATIONSSMALLIMAGES) && cBitmap[2].LoadBitmap(IDB_TCAUTOMATICSTACKFRAMEEXTRAIMAGES) && cBitmap[0].GetBitmap(&sBitmap); )
	{
		for (nIndex = 0, nCount = (cImages.Create(sBitmap.bmHeight, sBitmap.bmHeight, ILC_COLOR32, sBitmap.bmWidth / sBitmap.bmHeight, 1) && cImages.Add(&cBitmap[0], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[0].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[0].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		for (nIndex = 0, nCount = (nCount > 0 && cImages.Add(&cBitmap[1], RGB(0, 0, 0)) >= 0) ? m_wndToolBar[1].GetCount() : 0; nIndex < nCount; nIndex++)
		{
			for (m_wndToolBar[1].GetButtonInfo(nIndex, nButtonID, nButtonStyle, iImage); nButtonID != 0 && nButtonID != (UINT)-1; )
			{
				nImageIDs.Add(nButtonID);
				break;
			}
		}
		if (nCount > 0 && cImages.Add(&cBitmap[2], RGB(0, 0, 0)) >= 0)
		{
			nImageIDs.Add(IDM_TCAUTOMATICSTACKCOPY);
			nImageIDs.Add(IDM_TCAUTOMATICSTACKPASTE);
		}
		cBitmap[0].DeleteObject();
		cBitmap[1].DeleteObject();
		cBitmap[2].DeleteObject();
		break;
	}
	return cMenu.LoadMenu(IDR_TCAUTOMATICSTACKFRAME);
}

VOID CTCAutomaticStackWnd::UpdateBars()
{
	CTCServiceLock  cLock(this);

	UpdateMessagePane();
	UpdateUplinkPane();
	UpdatePretransmissionVerificationPane();
	UpdatePreexecutionVerificationPane();
	UpdateExecutionVerificationPane();
	UpdateStatePane();
	UpdateModePane();
}

BOOL CTCAutomaticStackWnd::Print(PRINTDLG *pPrintInfo)
{
	INT  nJob;
	INT  nJobs;
	CTCAutomaticStackPrintJobs  pJobs;
	CTCAutomaticStackPrintJobInfo  *pJobInfo;
	CTCServiceLock  cLock(this);

	for (nJob = 0, nJobs = (GetPrintJobs(pJobs)) ? (INT)pJobs.GetSize() : 0; nJob < nJobs; nJob++)
	{
		if ((pJobInfo = pJobs.GetAt(nJob)) && pJobInfo->GetName() == STRING(IDS_PRINTJOB_DEFAULTNAME))
		{
			if (Print(pJobInfo, pPrintInfo)) break;
			continue;
		}
	}
	if (nJob < nJobs)
	{
		if (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS)
		{
			pJobInfo->SetPrintMode(pJobInfo->GetPrintMode() & ~TCAUTOMATICSTACK_PRINT_CLEARCOMMENTS);
			pJobInfo->SetComments(EMPTYSTRING);
			SetPrintJobs(pJobs);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CanPrint() CONST
{
	CTCServiceLock  cLock(this);

	return((GetTelecommandCount(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED) + GetTelecommandCount(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL) + GetTelecommandCount(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED) + GetTelecommandCount(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL) > 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::SetSubSystemChecks()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;
	CTCServiceLock  cLock(this);

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE), m_nSubSystemIDs.RemoveAll(), m_szSubSystemEvents[0].RemoveAll(), m_szSubSystemEvents[1].RemoveAll(), m_nSubSystemStatus.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
	{
		m_nSubSystemIDs.Add(GetTCService()->TranslateTCSubSystemToID(szSubSystems.GetAt(nSubSystem)));
		m_szSubSystemEvents[0].Add(EMPTYSTRING);
		m_szSubSystemEvents[1].Add(EMPTYSTRING);
		m_nSubSystemStatus.Add(MAKEWORD(TRUE, TRUE));
	}
	return TRUE;
}
BOOL CTCAutomaticStackWnd::SetSubSystemChecks(CONST CUIntArray &nSubSystemIDs, CONST CStringArray &szEnablingEvents, CONST CStringArray &szDisablingEvents, CONST CUIntArray &nStatus)
{
	INT  nSubSystem;
	INT  nSubSystems;
	CTCServiceLock  cLock(this);

	if (IsInitialized())
	{
		for (nSubSystem = 0, nSubSystems = (INT)nSubSystemIDs.GetSize(), m_nSubSystemIDs.Copy(nSubSystemIDs), m_szSubSystemEvents[0].Copy(szEnablingEvents), m_szSubSystemEvents[1].Copy(szDisablingEvents), m_nSubSystemStatus.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
		{
			m_nSubSystemStatus.SetAtGrow(nSubSystem, MAKEWORD(LOBYTE(nStatus.GetAt(nSubSystem)), (LOBYTE(nStatus.GetAt(nSubSystem))) ? !GetTMService()->CheckTelemetryEvent(szDisablingEvents.GetAt(nSubSystem)) : FALSE));
			continue;
		}
		return GetTCService()->SetCommandSourceSubSystemChecks(TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK, m_nSubSystemIDs, m_szSubSystemEvents[0], m_szSubSystemEvents[1], m_nSubSystemStatus);
	}
	for (nSubSystem = 0, nSubSystems = (INT)nSubSystemIDs.GetSize(), m_nSubSystemIDs.Copy(nSubSystemIDs), m_szSubSystemEvents[0].Copy(szEnablingEvents), m_szSubSystemEvents[1].Copy(szDisablingEvents), m_nSubSystemStatus.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
	{
		m_nSubSystemStatus.SetAtGrow(nSubSystem, MAKEWORD(LOBYTE(nStatus.GetAt(nSubSystem)), LOBYTE(nStatus.GetAt(nSubSystem))));
		continue;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetSubSystemChecks(CUIntArray &nSubSystemIDs, CStringArray &szEnablingEvents, CStringArray &szDisablingEvents, CUIntArray &nStatus) CONST
{
	INT  nSubSystem;
	INT  nSubSystems;
	CTCServiceLock  cLock(this);

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs.GetSize(), nSubSystemIDs.Copy(m_nSubSystemIDs), szEnablingEvents.Copy(m_szSubSystemEvents[0]), szDisablingEvents.Copy(m_szSubSystemEvents[1]), nStatus.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
	{
		nStatus.SetAtGrow(nSubSystem, MAKEWORD(LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem)), (IsInitialized()) ? ((LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem))) ? !GetTMService()->CheckTelemetryEvent(szDisablingEvents.GetAt(nSubSystem)) : FALSE) : LOBYTE(m_nSubSystemStatus.GetAt(nSubSystem))));
		continue;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::SetPlanningOptions()
{
	CTCServiceLock  cLock(this);

	m_szPlanningComputer[0][0].Empty();
	m_szPlanningComputer[1][0].Empty();
	m_szPlanningComputer[0][1].Empty();
	m_szPlanningComputer[1][1].Empty();
	m_nPlanningOptions[0] = TCAUTOMATICSTACK_PLANNINGOPTION_MANUALIMPORT | TCAUTOMATICSTACK_PLANNINGOPTION_REPORTNOTHING;
	m_nPlanningOptions[1] = TCAUTOMATICSTACK_PLANNINGOPTION_ALLOWMANUALSYNCHRONIZATION;
	m_tPlanningPeriod = 0;
	m_szPlanningAudition.Empty();
	m_szPlanningNotification.Empty();
	return TRUE;
}
BOOL CTCAutomaticStackWnd::SetPlanningOptions(LPCTSTR pszMissionPlanningComputer, LPCTSTR pszMissionPlanningBackupComputer, UINT nMissionPlanningOptions, CONST CTimeSpan &tMissionPlanningPeriod, LPCTSTR pszMissionPlanningAudition, LPCTSTR pszMissionPlanningNotification, LPCTSTR pszFlightDynamicsComputer, LPCTSTR pszFlightDynamicsBackupComputer, UINT nFlightDynamicsOptions)
{
	CTCServiceLock  cLock(this);

	m_szPlanningComputer[0][0] = pszMissionPlanningComputer;
	m_szPlanningComputer[0][1] = pszMissionPlanningBackupComputer;
	m_szPlanningComputer[1][0] = pszFlightDynamicsComputer;
	m_szPlanningComputer[1][1] = pszFlightDynamicsBackupComputer;
	m_nPlanningOptions[0] = nMissionPlanningOptions;
	m_nPlanningOptions[1] = nFlightDynamicsOptions;
	m_tPlanningPeriod = tMissionPlanningPeriod;
	m_szPlanningAudition = pszMissionPlanningAudition;
	m_szPlanningNotification = pszMissionPlanningNotification;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetPlanningOptions(CString &szMissionPlanningComputer, CString &szMissionPlanningBackupComputer, UINT &nMissionPlanningOptions, CTimeSpan &tMissionPlanningPeriod, CString &szMissionPlanningAudition, CString &szMissionPlanningNotification, CString &szFlightDynamicsComputer, CString &szFlightDynamicsBackupComputer, UINT &nFlightDynamicsOptions) CONST
{
	CTCServiceLock  cLock(this);

	szMissionPlanningComputer = m_szPlanningComputer[0][0];
	szMissionPlanningBackupComputer = m_szPlanningComputer[0][1];
	szFlightDynamicsComputer = m_szPlanningComputer[1][0];
	szFlightDynamicsBackupComputer = m_szPlanningComputer[1][1];
	nMissionPlanningOptions = m_nPlanningOptions[0];
	nFlightDynamicsOptions = m_nPlanningOptions[1];
	tMissionPlanningPeriod = m_tPlanningPeriod;
	szMissionPlanningAudition = m_szPlanningAudition;
	szMissionPlanningNotification = m_szPlanningNotification;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::SetLoggingOptions()
{
	CString  szFileName;
	CEventLog  cEventLog;
	CFileFindEx  cFileFind;
	CLogicalDrives  cDrives;
	CTCServiceLock  cLock(this);

	if (cEventLog.SetOwner(GetAccountComputerName(), GetAccountSpacecraftName(), GetAccountUserName()))
	{
		if (cEventLog.QuerySpacecraftLogFileName(szFileName) && cFileFind.FindFile(szFileName) && !cFileFind.FindNextFile())
		{
			m_szLoggingFileName[0] = m_szLoggingFileName[1] = (cFileFind.GetRoot().Right(1).GetAt(0) != cDrives.GetPathDelimiter()) ? (cFileFind.GetRoot() + cDrives.GetPathDelimiter() + STRING(IDS_TCAUTOMATICSTACK_LOGFILE_DEFAULTFILENAME)) : (cFileFind.GetRoot() + STRING(IDS_TCAUTOMATICSTACK_LOGFILE_DEFAULTFILENAME));
			m_nLoggingPolicy = LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
			m_tLoggingRetention = DAYSPERWEEK*SECONDSPERDAY;
			m_dwLoggingRetention = 0;
			m_nLoggingReloadCount = 0;
			m_bLoggingAsEvent = FALSE;
			cFileFind.Close();
			return TRUE;
		}
	}
	return FALSE;
}
BOOL CTCAutomaticStackWnd::SetLoggingOptions(UINT nArchivalPolicy, LPCTSTR pszArchivalFileName, DWORDLONG dwArchivalRetention, CONST CTimeSpan &tArchivalRetention, LPCTSTR pszRetrievalFileName, UINT nRetrievalReloadCount, BOOL bShowAsEvent)
{
	CTCServiceLock  cLock(this);

	m_nLoggingPolicy = nArchivalPolicy;
	m_szLoggingFileName[0] = pszArchivalFileName;
	m_szLoggingFileName[1] = pszRetrievalFileName;
	m_dwLoggingRetention = dwArchivalRetention;
	m_tLoggingRetention = tArchivalRetention;
	m_nLoggingReloadCount = nRetrievalReloadCount;
	m_bLoggingAsEvent = bShowAsEvent;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	CTCServiceLock  cLock(this);

	nArchivalPolicy = m_nLoggingPolicy;
	szArchivalFileName = m_szLoggingFileName[0];
	szRetrievalFileName = m_szLoggingFileName[1];
	dwArchivalRetention = m_dwLoggingRetention;
	tArchivalRetention = m_tLoggingRetention;
	nRetrievalReloadCount = m_nLoggingReloadCount;
	bShowAsEvent = m_bLoggingAsEvent;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::SetAlertOptions(CONST CUIntArray &nTypes, CONST CStringArray &szAuditions, CONST CStringArray &szNotifications, CONST CDWordArray &nAcknowledgeColors, CONST CByteArray &bAcknowledgments)
{
	INT  nIndex[2];
	INT  nCount[2];
	CUIntArray  nLogTypes;
	CUIntArray  nLogActions;
	CTCServiceLock  cLock(this);

	for (nIndex[0] = 0, nCount[0] = (INT)nTypes.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)m_nAlertTypes.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (m_nAlertTypes.GetAt(nIndex[1]) == nTypes.GetAt(nIndex[0])) break;
			continue;
		}
		if (nIndex[1] < nCount[1])
		{
			if (m_szAlertAuditions.GetAt(nIndex[1]) != szAuditions.GetAt(nIndex[0]) || m_szAlertNotifications.GetAt(nIndex[1]) != szNotifications.GetAt(nIndex[0]) || m_nAlertAcknowledgeColors.GetAt(nIndex[1]) != nAcknowledgeColors.GetAt(nIndex[0]) || m_nAlertAcknowledgeColors.GetAt(nIndex[1]) != nAcknowledgeColors.GetAt(nIndex[0]) || m_bAlertAcknowledgments.GetAt(nIndex[1]) != bAcknowledgments.GetAt(nIndex[0]))
			{
				nLogTypes.Add(nTypes.GetAt(nIndex[0]));
				nLogActions.Add(FALSE);
			}
			continue;
		}
		nLogTypes.Add(nTypes.GetAt(nIndex[0]));
		nLogActions.Add(TRUE);
	}
	for (nIndex[0] = 0, nCount[0] = (INT)m_nAlertTypes.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = (INT)nTypes.GetSize(); nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (m_nAlertTypes.GetAt(nIndex[0]) == nTypes.GetAt(nIndex[1])) break;
			continue;
		}
		if (nIndex[1] == nCount[1])
		{
			nLogTypes.Add(m_nAlertTypes.GetAt(nIndex[0]));
			nLogActions.Add(-TRUE);
		}
	}
	m_nAlertTypes.Copy(nTypes);
	m_szAlertAuditions.Copy(szAuditions);
	m_szAlertNotifications.Copy(szNotifications);
	m_nAlertAcknowledgeColors.Copy(nAcknowledgeColors);
	m_bAlertAcknowledgments.Copy(bAcknowledgments);
	LogAlerts(nLogTypes, nLogActions);
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetAlertOptions(CUIntArray &nTypes, CStringArray &szAuditions, CStringArray &szNotifications, CDWordArray &nAcknowledgeColors, CByteArray &bAcknowledgments) CONST
{
	CTCServiceLock  cLock(this);

	nTypes.Copy(m_nAlertTypes);
	szAuditions.Copy(m_szAlertAuditions);
	szNotifications.Copy(m_szAlertNotifications);
	nAcknowledgeColors.Copy(m_nAlertAcknowledgeColors);
	bAcknowledgments.Copy(m_bAlertAcknowledgments);
	return TRUE;
}

BOOL CTCAutomaticStackWnd::Alert(CONST CTCAutomaticStackItem *pItem)
{
	INT  nPos;
	INT  nType;
	INT  nTypes;
	WORD  wVoiceGender;
	WORD  wVoiceAge;
	DWORD  dwVolume;
	DWORD  dwPitch;
	DWORD  dwPlayback;
	CString  szAdapter;
	CString  szSpeaker;
	CString  szMessage[2];
	CString  szNotifications;
	CEventObject  *pEvent;
	CStringTools  cStringTools;
	CAuditionProfiles  pAuditionProfiles;
	CAuditionProfileInfo  *pAuditionProfileInfo;
	CTCServiceLock  cLock(this);

	for (nType = 0, nTypes = (INT)m_nAlertTypes.GetSize(); nType < nTypes; nType++)
	{
		if (m_nAlertTypes.GetAt(nType) == TCAUTOMATICSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE) break;
		continue;
	}
	if (nType < nTypes)
	{
		for (szMessage[0].Format(STRING(IDS_TCAUTOMATICSTACK_ALERTMESSAGE_MEMBERSHIPFORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership(), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(pItem->GetMembershipID(), max(cStringTools.ConvertUIntToString(pItem->GetMembershipSize()).GetLength(), 3))), szMessage[1].Format(STRING(IDS_TCAUTOMATICSTACK_ALERTMESSAGE_TELECOMMANDRELEASEFAILUREFORMAT), (pItem->GetMembership().IsEmpty()) ? (LPCTSTR)pItem->GetName() : (LPCTSTR)szMessage[0]); (pAuditionProfileInfo = (GetAuditionProfiles(pAuditionProfiles)) ? pAuditionProfiles.GetAt(pAuditionProfiles.Find(m_szAlertAuditions.GetAt(nType))) : (CAuditionProfileInfo *)NULL); )
		{
			for (pAuditionProfileInfo->GetAdapterInfo(szAdapter, dwVolume, dwPitch, dwPlayback), pAuditionProfileInfo->GetVoiceSound(szSpeaker, wVoiceGender, wVoiceAge); (pEvent = new CEventObject); )
			{
				pEvent->SetCategory(EVENT_CATEGORY_SYSTEM);
				pEvent->SetType(STRING(IDS_TCAUTOMATICSTACK_ALERTTYPE_DEFAULT));
				pEvent->SetSubtype(STRING(IDS_TCAUTOMATICSTACK_ALERTSUBTYPE_DEFAULT));
				pEvent->SetAudition(pAuditionProfileInfo->GetAudition());
				pEvent->SetAudioInfo(szAdapter, dwVolume, dwPitch, dwPlayback);
				pEvent->SetAuditBeep(pAuditionProfileInfo->GetBeepSound());
				pEvent->SetAuditWave(pAuditionProfileInfo->GetWaveSound());
				pEvent->SetAuditVoice(szSpeaker, wVoiceGender, wVoiceAge);
				pEvent->SetAuditTime(CTime::GetCurrentTime().GetTime());
				pEvent->SetAuditColor(m_nAlertAcknowledgeColors.GetAt(nType));
				pEvent->Acknowledge(!m_bAlertAcknowledgments.GetAt(nType));
				pEvent->SetUser(GetAccountUserName());
				pEvent->SetMessage(szMessage[1]);
				pEvent->Show(TRUE);
				ReportEvent(pEvent);
				break;
			}
			break;
		}
		for (szNotifications = m_szAlertNotifications.GetAt(nType); !szNotifications.IsEmpty(); szNotifications = (nPos >= 0) ? szNotifications.Mid(nPos + 1) : EMPTYSTRING)
		{
			DoNotification(((nPos = szNotifications.Find(TAB)) >= 0) ? szNotifications.Left(nPos) : szNotifications, szMessage[1]);
			continue;
		}
	}
	return TRUE;
}
BOOL CTCAutomaticStackWnd::Alert(CONST CTCInterlock *pInterlock)
{
	INT  nPos;
	INT  nType;
	INT  nTypes;
	WORD  wVoiceGender;
	WORD  wVoiceAge;
	DWORD  dwVolume;
	DWORD  dwPitch;
	DWORD  dwPlayback;
	CString  szAdapter;
	CString  szSpeaker;
	CString  szMessage;
	CString  szNotifications;
	CEventObject  *pEvent;
	CAuditionProfiles  pAuditionProfiles;
	CAuditionProfileInfo  *pAuditionProfileInfo;
	CTCServiceLock  cLock(this);

	for (nType = 0, nTypes = (INT)m_nAlertTypes.GetSize(); nType < nTypes; nType++)
	{
		if (m_nAlertTypes.GetAt(nType) == TCAUTOMATICSTACK_ALERTTYPE_INTERLOCKFAILURE) break;
		continue;
	}
	if (nType < nTypes)
	{
		for (szMessage.Format(STRING(IDS_TCAUTOMATICSTACK_ALERTMESSAGE_INTERLOCKFAILUREFORMAT), (LPCTSTR)pInterlock->GetName()); (pAuditionProfileInfo = (GetAuditionProfiles(pAuditionProfiles)) ? pAuditionProfiles.GetAt(pAuditionProfiles.Find(m_szAlertAuditions.GetAt(nType))) : (CAuditionProfileInfo *)NULL); )
		{
			for (pAuditionProfileInfo->GetAdapterInfo(szAdapter, dwVolume, dwPitch, dwPlayback), pAuditionProfileInfo->GetVoiceSound(szSpeaker, wVoiceGender, wVoiceAge); (pEvent = new CEventObject); )
			{
				pEvent->SetCategory(EVENT_CATEGORY_SYSTEM);
				pEvent->SetType(STRING(IDS_TCAUTOMATICSTACK_ALERTTYPE_DEFAULT));
				pEvent->SetSubtype(STRING(IDS_TCAUTOMATICSTACK_ALERTSUBTYPE_DEFAULT));
				pEvent->SetAudition(pAuditionProfileInfo->GetAudition());
				pEvent->SetAudioInfo(szAdapter, dwVolume, dwPitch, dwPlayback);
				pEvent->SetAuditBeep(pAuditionProfileInfo->GetBeepSound());
				pEvent->SetAuditWave(pAuditionProfileInfo->GetWaveSound());
				pEvent->SetAuditVoice(szSpeaker, wVoiceGender, wVoiceAge);
				pEvent->SetAuditTime(CTime::GetCurrentTime().GetTime());
				pEvent->SetAuditColor(m_nAlertAcknowledgeColors.GetAt(nType));
				pEvent->Acknowledge(!m_bAlertAcknowledgments.GetAt(nType));
				pEvent->SetUser(GetAccountUserName());
				pEvent->SetMessage(szMessage);
				pEvent->Show(TRUE);
				ReportEvent(pEvent);
				break;
			}
			break;
		}
		for (szNotifications = m_szAlertNotifications.GetAt(nType); !szNotifications.IsEmpty(); szNotifications = (nPos >= 0) ? szNotifications.Mid(nPos + 1) : EMPTYSTRING)
		{
			DoNotification(((nPos = szNotifications.Find(TAB)) >= 0) ? szNotifications.Left(nPos) : szNotifications, szMessage);
			continue;
		}
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::SetPrintJobs(CONST CTCAutomaticStackPrintJobs &pPrintJobs)
{
	CTCServiceLock  cLock(this);

	return m_pPrintJobs.Copy(&pPrintJobs);
}

BOOL CTCAutomaticStackWnd::GetPrintJobs(CTCAutomaticStackPrintJobs &pPrintJobs) CONST
{
	CTCServiceLock  cLock(this);

	return pPrintJobs.Copy(&m_pPrintJobs);
}

BOOL CTCAutomaticStackWnd::SetUserPermissions(UINT nPermissions)
{
	CTCServiceLock  cLock(this);

	if (m_nUserPermissions != nPermissions)
	{
		LogUserPermissions(nPermissions, m_nUserPermissions^nPermissions);
		m_nUserPermissions = nPermissions;
	}
	return TRUE;
}

BOOL CTCAutomaticStackWnd::GetUserPermissions(UINT &nPermissions) CONST
{
	nPermissions = m_nUserPermissions;
	return TRUE;
}

BOOL CTCAutomaticStackWnd::Print(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, PRINTDLG *pPrintInfo)
{
	CDC  cDC;
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	LOGFONT  lfFont[4][2];
	DEVMODE  *pDevMode;
	DEVNAMES  *pDevNames;
	CPtrArray  pSymbols;
	CUIntArray  nSymbolIDs;
	CStringArray  szColumns[4];
	CStringArray  szContents[4];
	CPrintProfiles  cPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;
	CTextViewAttributes  pAttributes[4];

	if ((pPrintProfileInfo = (GetPrintProfiles(cPrintProfiles)) ? cPrintProfiles.GetAt(cPrintProfiles.Find(pJobInfo->GetProfile())) : (CPrintProfileInfo *)NULL) && pPrintProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		if (GetPrintProperties(pJobInfo, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], szColumns[2], szContents[2], pAttributes[2], &lfFont[2][0], &lfFont[2][1], szColumns[3], szContents[3], pAttributes[3], &lfFont[3][0], &lfFont[3][1], pSymbols, nSymbolIDs))
		{
			if (!AfxIsValidAddress(pPrintInfo, sizeof(PRINTDLG)))
			{
				if (CreatePrinterDC(pPrintProfileInfo, cDC))
				{
					if (PrintJob(cDC, pJobInfo, pPrintProfileInfo->GetPrinterName(), 0, 0, rtMargin[0], bMetric, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], szColumns[2], szContents[2], pAttributes[2], &lfFont[2][0], &lfFont[2][1], szColumns[3], szContents[3], pAttributes[3], &lfFont[3][0], &lfFont[3][1], pSymbols, nSymbolIDs))
					{
						cDC.DeleteDC();
						return TRUE;
					}
					cDC.DeleteDC();
				}
				return FALSE;
			}
			if ((pDevNames = (DEVNAMES *)GlobalLock(pPrintInfo->hDevNames)))
			{
				if ((pDevMode = (DEVMODE *)GlobalLock(pPrintInfo->hDevMode)))
				{
					if (CreatePrinterDC(pPrintInfo->hDevNames, pPrintInfo->hDevMode, cDC))
					{
						if (PrintJob(cDC, pJobInfo, (LPCTSTR)pDevMode->dmDeviceName, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nFromPage : 0, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nToPage : 0, rtMargin[0], bMetric, szColumns[0], szContents[0], pAttributes[0], &lfFont[0][0], &lfFont[0][1], szColumns[1], szContents[1], pAttributes[1], &lfFont[1][0], &lfFont[1][1], szColumns[2], szContents[2], pAttributes[2], &lfFont[2][0], &lfFont[2][1], szColumns[3], szContents[3], pAttributes[3], &lfFont[3][0], &lfFont[3][1], pSymbols, nSymbolIDs))
						{
							GlobalUnlock(pPrintInfo->hDevNames);
							GlobalUnlock(pPrintInfo->hDevMode);
							cDC.DeleteDC();
							return TRUE;
						}
						cDC.DeleteDC();
					}
					GlobalUnlock(pPrintInfo->hDevMode);
				}
				GlobalUnlock(pPrintInfo->hDevNames);
			}
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogActivity(CONST CTCLogEntry *pEntry)
{
	CString  szLog[2];
	CString  szMessage;
	CLogFile  cLogFile;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CEventObject  *pEvent;
	CTCServiceLock  cLock(this);

	if (m_bLoggingAsEvent)
	{
		for (szLog[0].Format(STRING(IDS_TCAUTOMATICSTACK_LOGEVENTMESSAGE_FORMAT), STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE), (LPCTSTR)pEntry->GetDescription(), (LPCTSTR)pEntry->GetActivity()), szLog[1].Format(STRING(IDS_TCAUTOMATICSTACK_LOGSHORTEVENTMESSAGE_FORMAT), STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE), (pEntry->GetActivity().IsEmpty()) ? (LPCTSTR)pEntry->GetDescription() : (LPCTSTR)pEntry->GetActivity()), szMessage = (!pEntry->GetDescription().IsEmpty() && !pEntry->GetActivity().IsEmpty()) ? szLog[0] : szLog[1]; (pEvent = new CEventObject); )
		{
			pEvent->SetCategory(EVENT_CATEGORY_USER);
			pEvent->SetType(STRING(IDS_EVENTTYPE_INFORMATIONAL));
			pEvent->SetSubtype(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE));
			pEvent->SetMessage(szMessage);
			pEvent->SetComments(EMPTYSTRING);
			pEvent->SetUser(pEntry->GetUser());
			pEvent->SetAuditTime(pEntry->GetTime());
			pEvent->SetAuditColor(VGA_COLOR_BLACK);
			pEvent->Acknowledge();
			pEvent->Show(TRUE);
			ReportEvent(pEvent);
			break;
		}
	}
	if ((m_nLoggingPolicy & LOGFILE_POLICY_DISABLED) != LOGFILE_POLICY_DISABLED)
	{
		if (cLogFile.Open(m_szLoggingFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			if (pEntry->Map(nLogData) && cLogFile.Write(tLogTime, nLogData))
			{
				cLogFile.Close();
				return TRUE;
			}
			cLogFile.Close();
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CreateToolBars()
{
	if (m_wndToolBar[0].CreateEx(this, TBSTYLE_FLAT, CBRS_ALIGN_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCAUTOMATICSTACK_TOOLBAR_PROPERTIES) && m_wndToolBar[0].LoadToolBar(IDB_TCAUTOMATICSTACKFRAMEPROPERTIESLARGEIMAGES, 0, IDB_TCAUTOMATICSTACKFRAMEPROPERTIESSMALLIMAGES, TRUE))
	{
		if (m_wndToolBar[1].CreateEx(this, TBSTYLE_FLAT, CBRS_ALIGN_TOP | CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_VISIBLE, CRect(0, 0, 0, 0), ID_TCAUTOMATICSTACK_TOOLBAR_OPERATIONS) && m_wndToolBar[1].LoadToolBar(IDB_TCAUTOMATICSTACKFRAMEOPERATIONSLARGEIMAGES, 0, IDB_TCAUTOMATICSTACKFRAMEOPERATIONSSMALLIMAGES, TRUE))
		{
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKSETTINGS), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKOPEN), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKSAVE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKIMPORT), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKSYNCHRONIZE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKPROPERTIES), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKDELETE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKFULLVIEWMODE), TBBS_DISABLED);
			m_wndToolBar[0].SetButtonStyle(m_wndToolBar[0].CommandToIndex(IDM_TCAUTOMATICSTACKPRINT), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKSTART), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKSUSPEND), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKSTOP), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKACKNOWLEDGE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKRESETINTERLOCKS), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKINTERLOCKCHECKS), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKSUBSYSTEMCHECKS), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKRELEASEWAITMODE), TBBS_DISABLED);
			m_wndToolBar[1].SetButtonStyle(m_wndToolBar[1].CommandToIndex(IDM_TCAUTOMATICSTACKAUTOREJECTIONMODE), TBBS_DISABLED);
			m_wndToolBar[0].EnableDocking(CBRS_ALIGN_TOP);
			m_wndToolBar[1].EnableDocking(CBRS_ALIGN_TOP);
			DockPane(&m_wndToolBar[0]);
			DockPane(&m_wndToolBar[1]);
			RecalcLayout();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CreateStatusBar()
{
	if (m_wndStatusBar.Create(this, CBRS_BOTTOM | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndStatusBar.SetIndicators(nTCAutomaticStackStatusBarIndicators, 1))
	{
		m_wndStatusBar.EnableToolTips();
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::CreateView()
{
	if (m_wndView.Create(this, TCS_TABS | TCS_SINGLELINE | TCS_TOOLTIPS | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE))
	{
		RecalcLayout();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::Customize(BOOL bDefault)
{
	CByteArray  nPrintInfo;

	return(((!bDefault  &&  GetPrintJobs(nPrintInfo) && nPrintInfo.GetSize() > 0) || SetPrintJobs(nPrintInfo)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::UpdateAllPanes()
{
	INT  nPane;
	INT  nPanes;

	for (nPane = 0, nPanes = sizeof(nTCAutomaticStackStatusBarIndicators) / sizeof(UINT); nPane < nPanes; nPane++)
	{
		if (m_wndStatusBar.CommandToIndex(nTCAutomaticStackStatusBarIndicators[nPane]) != nPane) break;
		continue;
	}
	if (nPane < nPanes)
	{
		if (m_wndStatusBar.SetIndicators(nTCAutomaticStackStatusBarIndicators, sizeof(nTCAutomaticStackStatusBarIndicators) / sizeof(UINT)))
		{
			UpdateBars();
			return TRUE;
		}
		return FALSE;
	}
	UpdateBars();
	return TRUE;
}

VOID CTCAutomaticStackWnd::UpdateMessagePane()
{
	UINT  nCount;
	CString  szMessage;

	szMessage.Format(((nCount = GetTelecommandCount()) > 0) ? ((nCount > 1) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_UPDATEMESSAGE) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_DATAMESSAGE)) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_NODATAMESSAGE), nCount);
	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE, szMessage);
}

VOID CTCAutomaticStackWnd::UpdateUplinkPane()
{
	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE, ((GetTelecommandingUplinkState() & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) == (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_UPLINK_OK) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_UPLINK_NOTOK), ((GetTelecommandingUplinkState() & (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) != (TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTENDLINK_GOOD | TCSERVICE_COMMANDHANDLERSTATE_FRONTEND_OK)) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdatePretransmissionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_PTVPANE, (((nFlags = GetTelecommandingChecks()) & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PTV_ON) : (((nFlags & TCAUTOMATICSTACK_CHECKS_PTV_DISABLE) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PTV_OVERRIDE) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PTV_OFF)), (GetTelecommandingChecks() & (TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdatePreexecutionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE, (((nFlags = GetTelecommandingChecks()) & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PEV_ON) : (((nFlags & TCAUTOMATICSTACK_CHECKS_PEV_DISABLE) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PEV_OVERRIDE) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_PEV_OFF)), (GetTelecommandingChecks() & (TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdateExecutionVerificationPane()
{
	UINT  nFlags;

	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE, (((nFlags = GetTelecommandingChecks()) & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_CEV_ON) : (((nFlags & TCAUTOMATICSTACK_CHECKS_CEV_DISABLE) == 0) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_CEV_OVERRIDE) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_CEV_OFF)), (GetTelecommandingChecks() & (TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdateStatePane()
{
	UINT  nState;

	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE, (((nState = GetTelecommandingState()) & TCAUTOMATICSTACK_STATE_DEFAULT) != TCAUTOMATICSTACK_STATE_DEFAULT) ? ((nState & TCAUTOMATICSTACK_STATE_DISABLED) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_DISABLED) : ((nState & TCAUTOMATICSTACK_STATE_SUSPENDED) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_SUSPENDED) : ((nState & TCAUTOMATICSTACK_STATE_STOPPED) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_STOPPED) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_ILLEGAL)))) : ((nState & TCAUTOMATICSTACK_STATE_DISABLED) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_DISABLED) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_STATE_DEFAULT)), (((nState = GetTelecommandingState()) & TCAUTOMATICSTACK_STATE_DEFAULT) != TCAUTOMATICSTACK_STATE_DEFAULT || (nState & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED | TCAUTOMATICSTACK_STATE_DISABLED))) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdateModePane()
{
	m_wndStatusBar.SetPaneText(ID_TCAUTOMATICSTACK_STATUSBAR_MODEPANE, (GetTelecommandingMode() & TCAUTOMATICSTACK_MODE_MASTERMANUAL) ? STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_MODE_MASTERMANUAL) : STRING(IDS_TCAUTOMATICSTACK_STATUSBAR_MODE_DEFAULT), (GetTelecommandingMode() & TCAUTOMATICSTACK_MODE_MASTERMANUAL) ? TRUE : FALSE);
}

VOID CTCAutomaticStackWnd::UpdateContents(BOOL bFilter)
{
	m_wndView.UpdateContents(bFilter);
}

BOOL CTCAutomaticStackWnd::SetSearchFilters(CONST CByteArray &nSearchFilters)
{
	INT  nType;
	INT  nTypes;
	INT  nFilter;
	INT  nFilters;
	CTCAutomaticStackSearchFilter  *pFilter[2];
	CTCAutomaticStackSearchFilters  pSearchFilters;

	for (nType = 0, nTypes = TCAUTOMATICSTACKSEARCHFILTER_TYPES; nType < nTypes; nType++)
	{
		m_pSearchFilters[nType].RemoveAll();
		continue;
	}
	for (nFilter = 0, nFilters = (pSearchFilters.Unmap(nSearchFilters)) ? (INT)nSearchFilters.GetSize() : -1; nFilter < nFilters; nFilter++)
	{
		if ((pFilter[0] = new CTCAutomaticStackSearchFilter))
		{
			if ((pFilter[1] = pSearchFilters.GetAt(nFilter)))
			{
				pFilter[0]->Copy(pFilter[1]);
				if (m_pSearchFilters[pFilter[0]->GetType() - 1].Add(pFilter[0]) >= 0) continue;
			}
			delete pFilter[0];
		}
		break;
	}
	return((nFilter == nFilters) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::GetSearchFilters(CByteArray &nSearchFilters) CONST
{
	INT  nType;
	INT  nTypes;
	INT  nFilter;
	INT  nFilters;
	CByteArray  nFilterData;
	CTCAutomaticStackSearchFilter  *pFilter;

	for (nType = 0, nTypes = TCAUTOMATICSTACKSEARCHFILTER_TYPES, nSearchFilters.RemoveAll(); nType < nTypes; nType++)
	{
		for (nFilter = 0, nFilters = (INT)m_pSearchFilters[nType].GetSize(); nFilter < nFilters; nFilter++)
		{
			if ((pFilter = m_pSearchFilters[nType].GetAt(nFilter)) && pFilter->Map(nFilterData))
			{
				nSearchFilters.Append(nFilterData);
				continue;
			}
			break;
		}
		if (nFilter < nFilters) break;
	}
	return((nType == nTypes) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::SetItemTemplates(CONST CByteArray &nItemTemplates, CONST CByteArray &nComposedItemTemplates)
{
	return((m_pItemTemplates.Unmap(nItemTemplates) && m_pComposedItemTemplates.Unmap(nComposedItemTemplates)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::GetItemTemplates(CByteArray &nItemTemplates, CByteArray &nComposedItemTemplates) CONST
{
	return((m_pItemTemplates.Map(nItemTemplates) && m_pComposedItemTemplates.Map(nComposedItemTemplates)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::LogTelecommandingMode(LPCTSTR pszOriginator, UINT nMode, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nMode & TCAUTOMATICSTACK_MODE_DEFAULT; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_MASTERMANALMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_MODECHANGE));
			break;
		}
		if (nMode & TCAUTOMATICSTACK_MODE_MASTERMANUAL)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_MASTERMANALMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_MODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogTelecommandingState(LPCTSTR pszOriginator, UINT nState, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nState & TCAUTOMATICSTACK_STATE_DEFAULT; )
		{
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_RESUMED));
			break;
		}
		if (nState & TCAUTOMATICSTACK_STATE_SUSPENDED)
		{
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_SUSPENDED));
		}
		if (nState & TCAUTOMATICSTACK_STATE_STOPPED)
		{
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_STOPPED));
		}
		if (nState & TCAUTOMATICSTACK_STATE_DISABLED)
		{
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_STATECHANGE));
			cEntry.SetActivity(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLED));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogTelecommandingChecks(LPCTSTR pszOriginator, UINT nFlags, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); nFlags == ~(TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PTV_DISABLE); )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PTVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			break;
		}
		if (nFlags == ~(TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_PEV_DISABLE))
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PEVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
		}
		if (nFlags == ~(TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE | TCAUTOMATICSTACK_CHECKS_CEV_DISABLE))
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_CEVCHECKS));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
		}
		if (cEntry.GetActivity().IsEmpty())
		{
			if (nFlags & TCAUTOMATICSTACK_CHECKS_PTV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PTVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCAUTOMATICSTACK_CHECKS_PEV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCAUTOMATICSTACK_CHECKS_CEV_OVERRIDE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_OVERRIDING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_CEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCAUTOMATICSTACK_CHECKS_PTV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PTVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCAUTOMATICSTACK_CHECKS_PEV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_PEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
			if (nFlags & TCAUTOMATICSTACK_CHECKS_CEV_DISABLE)
			{
				cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_CEVCHECKS));
				cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_CHECKSCHANGE));
			}
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogTelecommandingInterlockMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_INTERLOCKMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_INTERLOCKMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogTelecommandingReleaseWaitMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_RELEASEWAITMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_RELEASEWAITMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_RELEASEWAITMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_RELEASEWAITMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogTelecommandingAutoRejectionMode(LPCTSTR pszOriginator, BOOL bEnabled, BOOL bUser)
{
	CTCLogEntry  cEntry;
	CComputerToken  cComputerToken(pszOriginator);

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetUser((cComputerToken.IsHost()) ? ((bUser) ? GetAccountUserName() : STRING(IDS_TCAUTOMATICSTACK_LOGUSER_UNKNOWN)) : cComputerToken.GetComputerName()), cEntry.SetTime(CTime::GetCurrentTime().GetTime()); bEnabled; )
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_AUTOREJECTIONMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE));
			break;
		}
		if (!bEnabled)
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_AUTOREJECTIONMODE));
			cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE));
		}
		return((lstrlen(pszOriginator) > 0) ? LogActivity(&cEntry) : TRUE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogResetInterlocks(CONST CTCInterlocks &pInterlocks)
{
	INT  nInterlock;
	INT  nInterlocks;
	CString  szScope;
	CString  szStage;
	CString  szActivity;
	CString  szDescription;
	CTCInterlock  *pInterlock;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (nInterlock = 0, nInterlocks = (INT)pInterlocks.GetSize(); nInterlock < nInterlocks; nInterlock++)
		{
			if ((pInterlock = (CTCInterlock *)pInterlocks.GetAt(nInterlock)) != (CTCInterlock *)NULL)
			{
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPEGLOBAL) : EMPTYSTRING;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPELOCAL) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPELOCALNOWAIT) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPESUBSYSTEM) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPESUBSYSTEMNOWAIT) : szScope;
				szScope = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSCOPECOMMANDS) : szScope;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGERECEPTION) : EMPTYSTRING;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGETRANSMISSION) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGEACCEPTANCE) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGESTART) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGEPROGRESS) : szStage;
				szStage = (pInterlock->GetStage() == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCKSTAGECOMPLETION) : szStage;
				szActivity = CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_RESETTING)) + SPACE + STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_INTERLOCK);
				szDescription.Format(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_INTERLOCK), (LPCTSTR)szScope, (LPCTSTR)szStage);
				cEntry.SetName(pInterlock->GetName());
				cEntry.SetDescription(szDescription);
				cEntry.SetActivity(szActivity);
				cEntry.SetUser(GetAccountUserName());
				cEntry.SetTime(CTime::GetCurrentTime().GetTime());
				LogActivity(&cEntry);
				continue;
			}
			break;
		}
		return((nInterlock == nInterlocks) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogCheckSubSystems(CONST CUIntArray &nSubSystemsID, CONST CByteArray &bSubSystemsStatus)
{
	INT  nSubSystem;
	INT  nSubSystems;
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (nSubSystem = 0, nSubSystems = (INT)nSubSystemsID.GetSize(), cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_SUBSYSTEMSCHANGE)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); nSubSystem < nSubSystems; nSubSystem++)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_SUBSYSTEM), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(nSubSystemsID.GetAt(nSubSystem)), (bSubSystemsStatus.GetAt(nSubSystem)) ? STRING(IDS_TCAUTOMATICSTACK_LOGSUBSYSTEMSTATUS_ENABLED) : STRING(IDS_TCAUTOMATICSTACK_LOGSUBSYSTEMSTATUS_DISABLED));
			cEntry.SetActivity(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_CHANGING) + CString(SPACE) + szActivity);
			LogActivity(&cEntry);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogListOptions(INT nArguments, BOOL bAll)
{
	CString  szActivity;
	CTCLogEntry  cEntry;
	CStringTools  cStringTools;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_ARGUMENTLISTOPTIONSCHANGE)), szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ARGUMENTS), (LPCTSTR)cStringTools.ConvertIntToString(nArguments), (bAll) ? STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_FIXEDARGUMENTS) : STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_VARIABLEARGUMENTS)); nArguments < 0; )
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ARGUMENTS), STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ALLARGUMENTS), (bAll) ? STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_FIXEDARGUMENTS) : STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_VARIABLEARGUMENTS));
			break;
		}
		cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_LISTING)) + SPACE + szActivity);
		cEntry.SetTime(CTime::GetCurrentTime().GetTime());
		cEntry.SetUser(GetAccountUserName());
		return LogActivity(&cEntry);
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogListUpdateChecks(INT nCount)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_UPDATECHECKSCOUNTCHANGE)); nCount >= 0; )
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_UPDATECHECKS), nCount);
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_UPDATING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogMiscellaneousOptions(UINT nOptions)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_MISCELLANEOUSOPTIONSCHANGE)); nOptions & (TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT | TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT); )
		{
			szActivity = ((nOptions & (TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT | TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT)) == (TCAUTOMATICSTACK_OPTION_ALWAYSALLOWEXIT | TCAUTOMATICSTACK_OPTION_UNDISPATCHONEXIT)) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ALWAYSALLOWEXITOPTION)) + STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_UNDISPATCHONEXITOPTION)) : STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ALWAYSALLOWEXITOPTION);
			break;
		}
		for (; !nOptions; )
		{
			szActivity = STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_NOMISCELLANEOUSOPTIONS);
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity((nOptions) ? (CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING)) + SPACE + szActivity) : (CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING)) + SPACE + szActivity));
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogDefaultReleaseTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_DEFAULTRELEASETIMEWINDOWCHANGE)); tTimeWindow > 0; )
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_DEFAULTRELEASETIMEWINDOW), tTimeWindow.GetTotalSeconds());
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_CHANGING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogDispatchTimeWindow(CONST CTimeSpan &tTimeWindow)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_DISPATCHTIMEWINDOWCHANGE)); tTimeWindow > 0; )
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_DISPATCHTIMEWINDOW), tTimeWindow.GetTotalSeconds());
			break;
		}
		if (!szActivity.IsEmpty())
		{
			cEntry.SetActivity(CString(STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_CHANGING)) + SPACE + szActivity);
			cEntry.SetTime(CTime::GetCurrentTime().GetTime());
			cEntry.SetUser(GetAccountUserName());
			return LogActivity(&cEntry);
		}
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogUserPermissions(UINT nPermissions, UINT nChangedPermissions)
{
	CString  szActivity;
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_USERPERMISSIONSCHANGE)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS; )
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_CHECKS));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGECHECKS) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
			break;
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_FLAGS));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEFLAGS) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_RELEASETIME));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGERELEASETIME) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_INTERLOCKS));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEINTERLOCKS) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_EXECUTIONTIME));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEEXECUTIONTIME) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_PARAMETERVALUES));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_CHANGEPARAMETERVALUES) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		if (nChangedPermissions & TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES)
		{
			szActivity.Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_USERPERMISSION), STRING(IDS_TCAUTOMATICSTACK_LOGUSERPERMISSION_TEMPLATES));
			szActivity = (nPermissions & TCAUTOMATICSTACK_USERPERMISSION_USETEMPLATES) ? (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) + CString(SPACE) + szActivity) : (STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING) + CString(SPACE) + szActivity);
			cEntry.SetActivity(szActivity);
			LogActivity(&cEntry);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::LogAlerts(CONST CUIntArray &nTypes, CONST CUIntArray &nActions)
{
	INT  nEntry;
	INT  nEntries;
	CString  szActivity[2];
	CTCLogEntry  cEntry;

	if (IsInitialized())
	{
		for (nEntry = 0, nEntries = (INT)nTypes.GetSize(), cEntry.SetName(STRING(IDS_TCAUTOMATICSTACK_LOGOBJECT_SOURCE)), cEntry.SetDescription(STRING(IDS_TCAUTOMATICSTACK_LOGDESCRIPTION_ALERTOPTIONSCHANGE)), cEntry.SetTime(CTime::GetCurrentTime().GetTime()), cEntry.SetUser(GetAccountUserName()); nEntry < nEntries; nEntry++)
		{
			szActivity[0] = (nActions.GetAt(nEntry) > 0 && nActions.GetAt(nEntry) != (UINT)-1) ? STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_ENABLING) : ((!nActions.GetAt(nEntry)) ? STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_CHANGING) : STRING(IDS_TCAUTOMATICSTACK_LOGACTIVITY_DISABLING));
			szActivity[1].Format(STRING(IDS_TCAUTOMATICSTACK_LOGOPERATION_ALERTTYPE), (nTypes.GetAt(nEntry) == TCAUTOMATICSTACK_ALERTTYPE_TELECOMMANDRELEASEFAILURE) ? STRING(IDS_TCAUTOMATICSTACK_LOGALERTTYPE_TELECOMMANDRELEASEFAILURE) : STRING(IDS_TCAUTOMATICSTACK_LOGALERTTYPE_INTERLOCKFAILURE));
			cEntry.SetActivity(szActivity[0] + SPACE + szActivity[1]);
			LogActivity(&cEntry);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::SetContents(CONST CByteArray &nContentsInfo)
{
	return((nContentsInfo.GetSize() > 0) ? m_cSavedStack.Unmap(nContentsInfo) : TRUE);
}

BOOL CTCAutomaticStackWnd::GetContents(CByteArray &nContentsInfo) CONST
{
	CTCSavedStack  cSavedStack;

	return((GetTelecommands(cSavedStack)) ? cSavedStack.Map(nContentsInfo) : FALSE);
}

BOOL CTCAutomaticStackWnd::SetPrintJobs(CONST CByteArray &nPrintInfo)
{
	CTCAutomaticStackPrintJobs  pPrintJobs;

	return((pPrintJobs.Unmap(nPrintInfo)) ? SetPrintJobs(pPrintJobs) : FALSE);
}

BOOL CTCAutomaticStackWnd::GetPrintJobs(CByteArray &nPrintInfo) CONST
{
	CTCAutomaticStackPrintJobs  pPrintJobs;

	return((GetPrintJobs(pPrintJobs)) ? pPrintJobs.Map(nPrintInfo) : FALSE);
}

BOOL CTCAutomaticStackWnd::GetPrintProperties(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CStringArray &szNormalStackScheduledColumns, CStringArray &szNormalStackScheduledContents, CTextViewAttributes &pNormalStackScheduledAttributes, LOGFONT *pNormalStackScheduledTitleFont, LOGFONT *pNormalStackScheduledItemsFont, CStringArray &szNormalStackHistoricalColumns, CStringArray &szNormalStackHistoricalContents, CTextViewAttributes &pNormalStackHistoricalAttributes, LOGFONT *pNormalStackHistoricalTitleFont, LOGFONT *pNormalStackHistoricalItemsFont, CStringArray &szTimeTaggedStackScheduledColumns, CStringArray &szTimeTaggedStackScheduledContents, CTextViewAttributes &pTimeTaggedStackScheduledAttributes, LOGFONT *pTimeTaggedStackScheduledTitleFont, LOGFONT *pTimeTaggedStackScheduledItemsFont, CStringArray &szTimeTaggedStackHistoricalColumns, CStringArray &szTimeTaggedStackHistoricalContents, CTextViewAttributes &pTimeTaggedStackHistoricalAttributes, LOGFONT *pTimeTaggedStackHistoricalTitleFont, LOGFONT *pTimeTaggedStackHistoricalItemsFont, CPtrArray &pSymbols, CUIntArray &nSymbolIDs) CONST
{
	return m_wndView.GetPrintProperties(pJobInfo, szNormalStackScheduledColumns, szNormalStackScheduledContents, pNormalStackScheduledAttributes, pNormalStackScheduledTitleFont, pNormalStackScheduledItemsFont, szNormalStackHistoricalColumns, szNormalStackHistoricalContents, pNormalStackHistoricalAttributes, pNormalStackHistoricalTitleFont, pNormalStackHistoricalItemsFont, szTimeTaggedStackScheduledColumns, szTimeTaggedStackScheduledContents, pTimeTaggedStackScheduledAttributes, pTimeTaggedStackScheduledTitleFont, pTimeTaggedStackScheduledItemsFont, szTimeTaggedStackHistoricalColumns, szTimeTaggedStackHistoricalContents, pTimeTaggedStackHistoricalAttributes, pTimeTaggedStackHistoricalTitleFont, pTimeTaggedStackHistoricalItemsFont, pSymbols, nSymbolIDs);
}

BOOL CTCAutomaticStackWnd::StartPrintJob(CDC &cDC)
{
	DOCINFO  sJobInfo;
	CString  szJobTitle;

	for (sJobInfo.fwType = 0, sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.lpszDocName = (LPTSTR)EMPTYSTRING, sJobInfo.lpszOutput = (LPCTSTR)NULL, sJobInfo.lpszDatatype = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTJOB_SIMPLETITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetAccountSpacecraftName(), STRING(IDS_DISPLAY_TITLE_TCAUTOMATICSTACK)); szJobTitle.GetLength() >= 0; )
	{
		sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle;
		break;
	}
	return((cDC.StartDoc(&sJobInfo) >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::PrintJob(CDC &cDC, CONST CTCAutomaticStackPrintJobInfo *pJobInfo, LPCTSTR pszPrinterName, INT nFromPage, INT nToPage, CONST RECT &rtMargin, BOOL bMetric, CONST CStringArray &szNormalStackScheduledColumns, CONST CStringArray &szNormalStackScheduledContents, CONST CTextViewAttributes &pNormalStackScheduledAttributes, CONST LOGFONT *pNormalStackScheduledTitleFont, CONST LOGFONT *pNormalStackScheduledItemsFont, CONST CStringArray &szNormalStackHistoricalColumns, CONST CStringArray &szNormalStackHistoricalContents, CONST CTextViewAttributes &pNormalStackHistoricalAttributes, CONST LOGFONT *pNormalStackHistoricalTitleFont, CONST LOGFONT *pNormalStackHistoricalItemsFont, CONST CStringArray &szTimeTaggedStackScheduledColumns, CONST CStringArray &szTimeTaggedStackScheduledContents, CONST CTextViewAttributes &pTimeTaggedStackScheduledAttributes, CONST LOGFONT *pTimeTaggedStackScheduledTitleFont, CONST LOGFONT *pTimeTaggedStackScheduledItemsFont, CONST CStringArray &szTimeTaggedStackHistoricalColumns, CONST CStringArray &szTimeTaggedStackHistoricalContents, CONST CTextViewAttributes &pTimeTaggedStackHistoricalAttributes, CONST LOGFONT *pTimeTaggedStackHistoricalTitleFont, CONST LOGFONT *pTimeTaggedStackHistoricalItemsFont, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nPos;
	INT  nPane;
	INT  nPanes;
	INT  nPage;
	INT  nPages;
	INT  nLine;
	INT  nLines;
	INT  nColumn;
	INT  nColumns;
	INT  nFont;
	INT  nFonts;
	INT  nSpacing;
	INT  nHeight[2];
	BOOL  bOverlap;
	BOOL  bOutput;
	UINT  nFormat;
	CRgn  rgnArea;
	CRect  rArea;
	CRect  rCalc;
	CRect  rClip;
	CRect  rItem;
	CFont  *pOldFont;
	CFont  cFont[TCAUTOMATICSTACK_PRINTFONTS];
	LOGFONT  sLogFont[4][2];
	CSize  sizeSymbol;
	CString  szColumn;
	COLORREF  nColor;
	COLORREF  nOldColor;
	CTimeKey  tPrint;
	CPtrArray  pFonts;
	CUIntArray  nTabs;
	TEXTMETRIC  tmFont;
	CStringArray  szColumns[4];
	CStringArray  szContents[4];
	CStringArray  szColumnsText;
	CTextViewAttribute  *pAttribute;
	CTextViewAttributes  pAttributes[4];

	for (nPage = nPages = 0; (!nPages || nPage <= nPages) && (nPages > 0 || (nPages = (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rArea) != ERROR && rgnArea.CreateRectRgnIndirect(rArea) && CalcPrintDocTitleFont(cDC, rArea, cFont[TCAUTOMATICSTACK_PRINTFONT_TITLE]) && CalcPrintDocDetailsFont(cDC, rArea, cFont[TCAUTOMATICSTACK_PRINTFONT_DETAILS]) && CalcPrintDocCommentsFont(cDC, rArea, cFont[TCAUTOMATICSTACK_PRINTFONT_COMMENTS]) && CalcPrintDocNoticeFonts(cDC, rArea, cFont[TCAUTOMATICSTACK_PRINTFONT_NOTICE], cFont[TCAUTOMATICSTACK_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rArea, cFont[TCAUTOMATICSTACK_PRINTFONT_FOOTER])) ? nPages : -1) == 0); )
	{
		for (nFont = 0, nFonts = (!nPages) ? (INT)(sizeof(cFont) / sizeof(cFont[0])) : 0; nFont < nFonts; nFont++)
		{
			pFonts.SetAtGrow(nFont, &cFont[nFont]);
			continue;
		}
		for (nPane = 0, nPanes = TCAUTOMATICSTACK_PAGES*TCAUTOMATICSTACK_PANES, szColumns[0].Copy(szNormalStackScheduledColumns), szColumns[1].Copy(szNormalStackHistoricalColumns), szColumns[2].Copy(szTimeTaggedStackScheduledColumns), szColumns[3].Copy(szTimeTaggedStackHistoricalColumns), szContents[0].Copy(szNormalStackScheduledContents), szContents[1].Copy(szNormalStackHistoricalContents), szContents[2].Copy(szTimeTaggedStackScheduledContents), szContents[3].Copy(szTimeTaggedStackHistoricalContents), pAttributes[0].Copy(&pNormalStackScheduledAttributes), pAttributes[1].Copy(&pNormalStackHistoricalAttributes), pAttributes[2].Copy(&pTimeTaggedStackScheduledAttributes), pAttributes[3].Copy(&pTimeTaggedStackHistoricalAttributes), CopyMemory(&sLogFont[0][0], pNormalStackScheduledTitleFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[0][1], pNormalStackScheduledItemsFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[1][0], pNormalStackHistoricalTitleFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[1][1], pNormalStackHistoricalItemsFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[2][0], pTimeTaggedStackScheduledTitleFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[2][1], pTimeTaggedStackScheduledItemsFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[3][0], pTimeTaggedStackHistoricalTitleFont, sizeof(LOGFONT)), CopyMemory(&sLogFont[3][1], pTimeTaggedStackHistoricalItemsFont, sizeof(LOGFONT)), bOverlap = FALSE; nPane < nPanes; nPane++, cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE].DeleteObject(), cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMS].DeleteObject())
		{
			for (nLine = 0, nLines = (szColumns[nPane].GetSize() > 0 && szContents[nPane].GetSize() > 0) ? ((CalcPrintDocListItemsFonts(cDC, rArea, szColumns[nPane], szContents[nPane], &sLogFont[nPane][0], &sLogFont[nPane][1], cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE], cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMS]) && CalcPrintDocTitleWidth(cDC, rArea, szColumns[nPane], szContents[nPane], &cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE], &cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMS], nTabs) == szColumns[nPane].GetSize()) ? (INT)szContents[nPane].GetSize() : -1) : 0, pFonts.SetAt(TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE, &cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE]), pFonts.SetAt(TCAUTOMATICSTACK_PRINTFONT_LISTITEMS, &cFont[TCAUTOMATICSTACK_PRINTFONT_LISTITEMS]), nSpacing = 0, rCalc.SetRectEmpty(), rClip.SetRectEmpty(), bOutput = TRUE; nPages >= 0 && nLine < nLines; nLine++, bOutput = TRUE)
			{
				for (nColumn = 0, nColumns = (INT)szColumns[nPane].GetSize(), ExtractPrintDocText(szContents[nPane].GetAt(nLine), szColumnsText), nHeight[0] = nHeight[1] = 0; nPages >= 0 && nColumn < nColumns; nColumn++, nHeight[1] = 0)
				{
					if (rClip.Height() > 0)
					{
						if ((pOldFont = cDC.SelectObject((CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_LISTITEMS))))
						{
							if ((nSpacing = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmHeight / 10, 1) : -1) >= 0)
							{
								for (rCalc.SetRect(rCalc.left, (!nColumn) ? (rCalc.top + nSpacing) : rCalc.top, rCalc.right, (!nColumn) ? (rCalc.top + nSpacing + tmFont.tmHeight*((rClip.bottom - (rCalc.top + nSpacing)) / tmFont.tmHeight)) : (rCalc.top + tmFont.tmHeight*((rClip.bottom - rCalc.top) / tmFont.tmHeight))), nFormat = DT_LEFT | DT_NOPREFIX | DT_WORDBREAK, nColor = cDC.GetTextColor(); (pAttribute = pAttributes[nPane].GetAt(nLine)); )
								{
									pAttribute->GetColumnFormat(nColumn, nFormat);
									pAttribute->GetColumnColor(nColumn, nColor);
									break;
								}
								for (szColumn = (!szColumnsText.GetAt(nColumn).IsEmpty()) ? (((nPos = (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)) ? szColumnsText.GetAt(nColumn).Find(CTCAutomaticStackPageTextView::GetSymbolDelimiter()) : -1) >= 0) ? (szColumnsText.GetAt(nColumn).Left(nPos)) : (szColumnsText.GetAt(nColumn) + SPACE)) : EMPTYSTRING, nFormat = (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage && nPage <= nToPage))) ? nFormat : (nFormat | DT_CALCRECT), sizeSymbol.cx = sizeSymbol.cy = tmFont.tmHeight, nOldColor = cDC.SetTextColor((cDC.GetDeviceCaps(NUMCOLORS) > 2) ? nColor : cDC.GetTextColor()), nHeight[1] = (szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) && szColumns[nPane].GetAt(nColumn) != STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT)) ? cDC.DrawText(szColumn, (rItem = CRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.bottom)), nFormat) : sizeSymbol.cy; szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER); )
								{
									DrawPrintDocSymbol(cDC, ((nFormat & DT_CALCRECT) != DT_CALCRECT  &&  rItem.top + sizeSymbol.cy <= rCalc.bottom) ? (rItem = CRect(rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2, rItem.top, rItem.left + cDC.GetTextExtent(szColumn).cx + sizeSymbol.cx / 2 + sizeSymbol.cx, rItem.top + sizeSymbol.cy)) : CRect(0, 0, 0, 0), (szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_INFORMATION)) >= 0) ? IDP_TCAUTOMATICSTACKINFORMATION : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_WARNING)) >= 0) ? IDP_TCAUTOMATICSTACKWARNING : ((szColumnsText.GetAt(nColumn).Find(STRING(IDS_TCAUTOMATICSTACK_LIST_ALERT_ERROR)) >= 0) ? IDP_TCAUTOMATICSTACKERROR : -1)), pSymbols, nSymbolIDs);
									break;
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS))
								{
									for (rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, (nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1) + sizeSymbol.cx) : (rCalc.left + sizeSymbol.cx), rCalc.top + sizeSymbol.cy); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCK)) >= 0) ? IDP_TCAUTOMATICSTACKINTERLOCK : -1, pSymbols, nSymbolIDs);
										DrawPrintDocSymbol(cDC, rItem + CPoint(3 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKIDLE)) >= 0) ? IDP_TCAUTOMATICSTACKINTERLOCKIDLE : ((szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKPENDING)) >= 0) ? IDP_TCAUTOMATICSTACKINTERLOCKPENDING : ((szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKSUCCESS)) >= 0) ? IDP_TCAUTOMATICSTACKINTERLOCKSUCCESS : ((szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_INTERLOCKFAILURE)) >= 0) ? IDP_TCAUTOMATICSTACKINTERLOCKFAILURE : -1))), pSymbols, nSymbolIDs);
										DrawPrintDocSymbol(cDC, rItem + CPoint(6 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_GROUPED)) >= 0) ? IDP_TCAUTOMATICSTACKGROUPED : -1, pSymbols, nSymbolIDs);
										DrawPrintDocSymbol(cDC, rItem + CPoint(9 * rItem.Width() / 2, 0), (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_FLAGS_BLOCKED)) >= 0) ? IDP_TCAUTOMATICSTACKBLOCKED : -1, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS))
								{
									for (nID = (szColumn.IsEmpty()) ? IDP_TCAUTOMATICSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_ON)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_OFF)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVCHECKS_DISABLED)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT))
								{
									for (nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_GO)) >= 0) ? IDP_TCAUTOMATICSTACKPTVGO : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_WAIT)) >= 0) ? IDP_TCAUTOMATICSTACKPTVWAIT : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PTVRESULT_FAIL)) >= 0) ? IDP_TCAUTOMATICSTACKPTVFAIL : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS))
								{
									for (nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_NONE)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_ON)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_OFF)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVCHECKS_DISABLED)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT))
								{
									for (nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_GO)) >= 0) ? IDP_TCAUTOMATICSTACKPEVGO : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_PEVRESULT_NOGO)) >= 0) ? IDP_TCAUTOMATICSTACKPEVNOGO : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS))
								{
									for (nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_NONE))) ? IDP_TCAUTOMATICSTACKCHECKSNONE : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_ON)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSON : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_OFF)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSOFF : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVCHECKS_DISABLED)) >= 0) ? IDP_TCAUTOMATICSTACKCHECKSDISABLED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								if (szColumns[nPane].GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT))
								{
									for (nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_IDLE)) >= 0) ? IDP_TCAUTOMATICSTACKCEVIDLE : -1, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PENDING)) >= 0) ? IDP_TCAUTOMATICSTACKCEVPENDING : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_PASSED)) >= 0) ? IDP_TCAUTOMATICSTACKCEVPASSED : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_FAILED)) >= 0) ? IDP_TCAUTOMATICSTACKCEVFAILED : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNKNOWN)) >= 0) ? IDP_TCAUTOMATICSTACKCEVUNKNOWN : nID, nID = (szColumn.Find(STRING(IDS_TCAUTOMATICSTACK_LIST_CEVRESULT_UNVERIFIED)) >= 0) ? IDP_TCAUTOMATICSTACKCEVUNVERIFIED : nID, rItem.SetRect((nColumn > 0) ? (rCalc.left + nTabs.GetAt(nColumn - 1)) : rCalc.left, rCalc.top, rCalc.left + nTabs.GetAt(nColumn), rCalc.top + sizeSymbol.cy), rItem.DeflateRect((rItem.Width() - rItem.Height()) / 2, 0); (nFormat & DT_CALCRECT) != DT_CALCRECT && rItem.bottom <= rCalc.bottom; )
									{
										DrawPrintDocSymbol(cDC, rItem, nID, pSymbols, nSymbolIDs);
										break;
									}
								}
								nHeight[0] = max(max(nHeight[0], sizeSymbol.cy), nHeight[1]);
								cDC.SetTextColor(nOldColor);
								cDC.SelectObject(pOldFont);
							}
							else
							{
								cDC.SelectObject(pOldFont);
								break;
							}
						}
						else break;
					}
					if (((rCalc.top + nHeight[1] > rCalc.bottom || bOverlap) && nColumn == nColumns - 1) || !rClip.Height())
					{
						if (nPages > 0 && (nPage == nPages || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage == nToPage)))
						{
							nPages = nPage;
							nLines = nLine;
							nColumns = nColumn;
							break;
						}
						if (bOutput && (!nPages || ((!nPage || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage || nPage > nToPage)) || cDC.EndPage() >= 0) && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage && (nPage < nFromPage - 1 || nPage >= nToPage)) || (((((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage) && nPage > 0) || (nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage != nFromPage - 1)) || StartPrintJob(cDC)) && cDC.StartPage() >= 0)))))
						{
							if (cDC.SelectClipRgn(&rgnArea) != ERROR  &&  DrawPrintDocPage(cDC, pJobInfo, tPrint, pszPrinterName, rtMargin, bMetric, (nPane / 2 == 0) ? STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_NORMALSTACKSUBTITLE) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_TIMETAGGEDSTACKSUBTITLE), (nPane % 2 == 0) ? STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_SCHEDULEDPANESUBTITLE) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_HISTORICALPANESUBTITLE), szColumns[nPane], pFonts, nTabs, nPages, (nPages > 0 && (nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || (nPage >= nFromPage - 1 && nPage < nToPage))) ? (nPage + 1) : 0, rClip) && cDC.IntersectClipRect(rClip) != ERROR)
							{
								rCalc.SetRect(rClip.left, rClip.top - rCalc.Height() - nSpacing, rClip.right, rClip.bottom);
								bOverlap = FALSE;
								bOutput = FALSE;
								nColumn = -1;
								nPage++;
								continue;
							}
						}
						break;
					}
					bOverlap = (rCalc.top + nHeight[1] > rCalc.bottom) ? TRUE : bOverlap;
				}
				if (nLine < nLines  &&  nColumn == nColumns)
				{
					rCalc.DeflateRect(0, nHeight[0], 0, 0);
					continue;
				}
				break;
			}
			if (nLine == nLines) continue;
			break;
		}
		if (nPages >= 0)
		{
			if (nPane == nPanes  &&  !nPages)
			{
				nPages = nPage;
				nPage -= nPage;
				if ((nFromPage <= 0 || nToPage <= 0 || nFromPage > nToPage || nPages >= nFromPage) && nPages > 0) continue;
				nPages = nPage = 0;
			}
			if (nPane < nPanes)
			{
				if (nPages > 0) cDC.AbortDoc();
				nPages = -1;
				break;
			}
		}
		break;
	}
	return(((!nPages || (nPages > 0 && ((nFromPage > 0 && nToPage > 0 && nFromPage <= nToPage  &&  nPage < nFromPage) || (cDC.EndPage() >= 0 && EndPrintJob(cDC))))) && nPage == nPages) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::EndPrintJob(CDC &cDC)
{
	return((cDC.EndDoc() >= 0) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::DrawPrintDocPage(CDC &cDC, CONST CTCAutomaticStackPrintJobInfo *pJobInfo, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, CONST RECT &rtMargin, BOOL bMetric, LPCTSTR pszPage, LPCTSTR pszPane, CONST CStringArray &szColumns, CONST CPtrArray &pFonts, CONST CUIntArray &nTabs, INT nPages, INT nPage, LPRECT prClip)
{
	return((CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(prClip) != ERROR  &&  DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_TITLE), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocDetails(cDC, prClip, GetPrintDocDetails(pJobInfo, pszPage, pszPane), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_DETAILS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocComments(cDC, prClip, GetPrintDocComments(pJobInfo), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_COMMENTS), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocListItemsTitle(cDC, prClip, szColumns, (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_LISTITEMSTITLE), nTabs, (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_LOGO), (nPage <= 0) ? TRUE : FALSE) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPages, nPage), (CFont *)pFonts.GetAt(TCAUTOMATICSTACK_PRINTFONT_FOOTER), (nPage <= 0) ? TRUE : FALSE)) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocDetails(CDC &cDC, LPRECT prClip, LPCTSTR pszDetails, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszDetails, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszDetails, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocComments(CDC &cDC, LPRECT prClip, LPCTSTR pszComments, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszComments, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		cDC.DrawText(pszComments, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_WORDBREAK);
		prClip->top += 2 * cDC.GetTextExtent(SPACE).cy;
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocListItemsTitle(CDC &cDC, LPRECT prClip, CONST CStringArray &szColumns, CFont *pFont, CONST CUIntArray &nTabs, BOOL bCalc)
{
	CSize  rCalc;
	CFont  *pOldFont;
	CString  szItems;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		szItems = GetPrintDocListItemsTitle(szColumns);
		rCalc = (!bCalc) ? cDC.TabbedTextOut(prClip->left, prClip->top + cDC.GetTextExtent(szItems, szItems.GetLength()).cy, szItems, (INT)nTabs.GetSize(), (LPINT)nTabs.GetData(), prClip->left) : CSize(nTabs.GetAt(nTabs.GetSize() - 1), cDC.GetTextExtent(szItems, szItems.GetLength()).cy);
		prClip->top += 2 * rCalc.cy;
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocSymbol(CDC &cDC, LPRECT prClip, UINT nSymbolID, CONST CPtrArray &pSymbols, CONST CUIntArray &nSymbolIDs)
{
	INT  nID;
	INT  nIDs;
	CImage  *pSymbol;

	for (nID = 0, nIDs = (nSymbolID != (UINT)-1) ? (INT)nSymbolIDs.GetSize() : -1; nID < nIDs; nID++)
	{
		if (nSymbolIDs.GetAt(nID) == nSymbolID) break;
		continue;
	}
	if ((pSymbol = (nID < nIDs) ? (CImage *)pSymbols.GetAt(nID) : (CImage *)NULL) && prClip->right - prClip->left > 0 && prClip->bottom - prClip->top > 0)
	{
		pSymbol->Draw(cDC.GetSafeHdc(), prClip->left, prClip->top, prClip->right - prClip->left, prClip->bottom - prClip->top);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocNotice(CDC &cDC, LPRECT prClip, LPCTSTR pszNotice, CFont *pFont, CFont *pLogoFont, BOOL bCalc)
{
	INT  nPos;
	CFont  *pOldFont;
	CSize  sizeNotice[3];
	CString  szNotice[3];
	CString  szCopyrightNotice;
	CVersionInfo  cVersionInfo;

	for (szCopyrightNotice = pszNotice, sizeNotice[0].cx = sizeNotice[0].cy = 0, sizeNotice[1].cx = sizeNotice[1].cy = 0; (pOldFont = cDC.SelectObject(pFont)); )
	{
		szNotice[0] = ((nPos = szCopyrightNotice.Find((szNotice[2] = cVersionInfo.QueryCompanyName()))) >= 0) ? szCopyrightNotice.Left(nPos) : szCopyrightNotice;
		szNotice[1] = (nPos >= 0) ? szCopyrightNotice.Mid(nPos + szNotice[2].GetLength()) : EMPTYSTRING;
		sizeNotice[0] = cDC.GetTextExtent(szNotice[0]);
		sizeNotice[1] = cDC.GetTextExtent(szNotice[1]);
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pLogoFont)))
	{
		sizeNotice[2] = cDC.GetTextExtent(szNotice[2]);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left, prClip->bottom - sizeNotice[0].cy, (!bCalc) ? (LPCTSTR)szNotice[0] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0) ? cDC.SelectObject(pLogoFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx, prClip->bottom - sizeNotice[2].cy, (!bCalc) ? (LPCTSTR)szNotice[2] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if ((pOldFont = (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[1].cx > 0 && sizeNotice[1].cy > 0) ? cDC.SelectObject(pFont) : (CFont *)NULL))
	{
		cDC.TextOut(prClip->left + sizeNotice[0].cx + sizeNotice[2].cx, prClip->bottom - sizeNotice[1].cy, (!bCalc) ? (LPCTSTR)szNotice[1] : EMPTYSTRING);
		cDC.SelectObject(pOldFont);
	}
	if (sizeNotice[0].cx > 0 && sizeNotice[0].cy > 0 && sizeNotice[2].cx > 0 && sizeNotice[2].cy > 0)
	{
		prClip->bottom -= max(sizeNotice[0].cy, sizeNotice[2].cy);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCAutomaticStackWnd::DrawPrintDocFooter(CDC &cDC, LPRECT prClip, LPCTSTR pszFooter, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszFooter, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszFooter, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_LEFT | DT_BOTTOM | DT_NOPREFIX | DT_SINGLELINE);
		prClip->bottom -= 3 * rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCAutomaticStackWnd::GetPrintDocTitle() CONST
{
	CString  szTitle;

	szTitle.Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAccountSpacecraftName());
	return szTitle;
}

CString CTCAutomaticStackWnd::GetPrintDocDetails(CONST CTCAutomaticStackPrintJobInfo *pJobInfo, LPCTSTR pszPage, LPCTSTR pszPane) CONST
{
	INT  nDigits;
	UINT  nRange[2];
	CString  szDetails;
	CString  szStatus[2];
	CString  szRange[2];
	CTimeKey  tRange[2];
	CStringTools  cStringTools;

	pJobInfo->GetPrintRange(nRange[0], nRange[1]);
	pJobInfo->GetPrintRange(tRange[0], tRange[1]);
	nDigits = max(cStringTools.ConvertUIntToString(nRange[1]).GetLength(), 3);
	szStatus[0] = (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_ONSTACKITEMS) ? STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_ONSTACKSTATUS) : EMPTYSTRING;
	szStatus[0] += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_DISPATCHEDITEMS) ? ((!szStatus[0].IsEmpty()) ? (CString(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_DISPATCHEDSTATUS)) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_DISPATCHEDSTATUS)) : EMPTYSTRING;
	szStatus[0] += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_RELEASEDITEMS) ? ((!szStatus[0].IsEmpty()) ? (CString(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_RELEASEDSTATUS)) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_RELEASEDSTATUS)) : EMPTYSTRING;
	szStatus[0] += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_NOTRELEASEDITEMS) ? ((!szStatus[0].IsEmpty()) ? (CString(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_NOTRELEASEDSTATUS)) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_NOTRELEASEDSTATUS)) : EMPTYSTRING;
	szStatus[0] += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_FAILEDRELEASEITEMS) ? ((!szStatus[0].IsEmpty()) ? (CString(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_STATUSSEPARATOR)) + STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_FAILEDRELEASESTATUS)) : STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_FAILEDRELEASESTATUS)) : EMPTYSTRING;
	szRange[0].Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_ITEMRANGESUBTITLE), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[0], nDigits), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nRange[1], nDigits));
	szRange[1].Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_TIMERANGESUBTITLE), (LPCTSTR)tRange[0].FormatGmt(), (LPCTSTR)tRange[1].FormatGmt());
	szStatus[1].Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_STATUSSUBTITLE), (LPCTSTR)szStatus[0]);
	szDetails.Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_SUBTITLE), pszPage, pszPane);
	szDetails += CString(CR) + CString(EOL) + szStatus[1];
	szDetails += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_ITEMRANGE) ? (CString(CR) + CString(EOL) + szRange[0]) : EMPTYSTRING;
	szDetails += (pJobInfo->GetPrintMode() & TCAUTOMATICSTACK_PRINT_TIMERANGE) ? (CString(CR) + CString(EOL) + szRange[1]) : EMPTYSTRING;
	return szDetails;
}

CString CTCAutomaticStackWnd::GetPrintDocComments(CONST CTCAutomaticStackPrintJobInfo *pJobInfo) CONST
{
	return pJobInfo->GetComments();
}

CString CTCAutomaticStackWnd::GetPrintDocListItemsTitle(CONST CStringArray &szColumns) CONST
{
	INT  nColumn;
	INT  nColumns;
	CString  szItems;

	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		szItems += (nColumn > 0) ? CString(TAB) : EMPTYSTRING;
		szItems += szColumns.GetAt(nColumn);
	}
	return szItems;
}

CString CTCAutomaticStackWnd::GetPrintDocNotice() CONST
{
	CVersionInfo  cVersionInfo;

	return cVersionInfo.QueryComments();
}

CString CTCAutomaticStackWnd::GetPrintDocFooter(CONST CTimeKey &tTime, LPCTSTR pszPrinterName, INT nPages, INT nPage) CONST
{
	CString  szFooter;

	szFooter.Format(STRING(IDS_TCAUTOMATICSTACK_PRINTDOCUMENT_FOOTER), (LPCTSTR)tTime.Format(IDS_TIMEKEY_DATEFORMAT), (LPCTSTR)tTime.Format(IDS_TIMEKEY_TIMEFORMAT), pszPrinterName, nPage, nPages);
	return szFooter;
}

INT CTCAutomaticStackWnd::ExtractPrintDocText(LPCTSTR pszText, CStringArray &szColumnsText) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szText;

	for (nPos[0] = 0, nLength = lstrlen(pszText), szColumnsText.RemoveAll(); nPos[0] <= nLength; nPos[0] += ++nPos[1])
	{
		if ((nPos[1] = (INT)_tcscspn((szText = pszText + nPos[0]), CString(CTextView::GetColumnDelimiter()))) < nLength - nPos[0])
		{
			szColumnsText.Add((nPos[1] > 0) ? szText.Left(nPos[1]) : EMPTYSTRING);
			continue;
		}
		szColumnsText.Add(szText);
		break;
	}
	return((INT)szColumnsText.GetSize());
}

BOOL CTCAutomaticStackWnd::CalcPrintDocTitleFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 48, (INT)((-5.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCAutomaticStackWnd::CalcPrintDocDetailsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCAutomaticStackWnd::CalcPrintDocCommentsFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 76, (INT)((-3.3*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_NORMAL, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

BOOL CTCAutomaticStackWnd::CalcPrintDocListItemsFonts(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CONST LOGFONT *pTitleFont, CONST LOGFONT *pItemsFont, CFont &cTitleFont, CFont &cItemsFont) CONST
{
	INT  nWidth;
	INT  nHeight;
	CFont  cFont[2];
	CUIntArray  nTabs;

	for (nHeight = max(-(rArea.right - rArea.left) / 64, (INT)((-4.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))); nHeight < 0; nHeight++)
	{
		if (cFont[0].CreateFont(nHeight, 0, pTitleFont->lfEscapement, pTitleFont->lfOrientation, FW_BOLD, pTitleFont->lfItalic, pTitleFont->lfUnderline, pTitleFont->lfStrikeOut, pTitleFont->lfCharSet, pTitleFont->lfOutPrecision, pTitleFont->lfClipPrecision, pTitleFont->lfQuality, pTitleFont->lfPitchAndFamily, pTitleFont->lfFaceName))
		{
			if (cFont[1].CreateFont((4 * nHeight) / 5, 0, pItemsFont->lfEscapement, pItemsFont->lfOrientation, pItemsFont->lfWeight, pItemsFont->lfItalic, pItemsFont->lfUnderline, pItemsFont->lfStrikeOut, pItemsFont->lfCharSet, pItemsFont->lfOutPrecision, pItemsFont->lfClipPrecision, pItemsFont->lfQuality, pItemsFont->lfPitchAndFamily, pItemsFont->lfFaceName))
			{
				if (CalcPrintDocTitleWidth(cDC, rArea, szColumns, szContents, &cFont[0], &cFont[1], nTabs) > 0)
				{
					if ((nWidth = nTabs.GetAt(nTabs.GetSize() - 1)) > rArea.right - rArea.left)
					{
						nHeight = (nHeight*(rArea.right - rArea.left)) / nWidth - 1;
						cFont[0].DeleteObject();
						cFont[1].DeleteObject();
						continue;
					}
					cTitleFont.Attach(cFont[0].Detach());
					cItemsFont.Attach(cFont[1].Detach());
					break;
				}
				cFont[1].DeleteObject();
			}
			cFont[0].DeleteObject();
		}
	}
	return((cTitleFont.GetSafeHandle() && cItemsFont.GetSafeHandle()) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::CalcPrintDocNoticeFonts(CDC &cDC, CONST RECT &rArea, CFont &cFont, CFont &cLogoFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL) && cLogoFont.CreateFont(max(-(rArea.right - rArea.left) / 96, (INT)((-2.6*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, STRING(IDS_FONTFACE_COMPANYLOGO));
}

BOOL CTCAutomaticStackWnd::CalcPrintDocFooterFont(CDC &cDC, CONST RECT &rArea, CFont &cFont) CONST
{
	return cFont.CreateFont(max(-(rArea.right - rArea.left) / 80, (INT)((-3.0*(double)cDC.GetDeviceCaps(HORZRES)) / (double)cDC.GetDeviceCaps(HORZSIZE))), 0, 0, 0, FW_BOLD, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_DONTCARE, (LPCTSTR)NULL);
}

INT CTCAutomaticStackWnd::CalcPrintDocTitleWidth(CDC &cDC, LPCTSTR pszColumn, CFont *pTitleFont) CONST
{
	INT  nWidth;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pTitleFont)))
	{
		nWidth = cDC.GetTextExtent(pszColumn, lstrlen(pszColumn)).cx;
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}
INT CTCAutomaticStackWnd::CalcPrintDocTitleWidth(CDC &cDC, CONST RECT &rArea, CONST CStringArray &szColumns, CONST CStringArray &szContents, CFont *pTitleFont, CFont *pItemsFont, CUIntArray &nTabs) CONST
{
	INT  nIndent;
	INT  nColumn;
	INT  nColumns;
	INT  nWidth[2];
	CSize  sizeSymbol;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;
	CStringArray  szLines;

	for (nIndent = 0, sizeSymbol.cx = sizeSymbol.cy = 0, nTabs.RemoveAll(); (pOldFont = cDC.SelectObject(pTitleFont)); )
	{
		nIndent = (cDC.GetTextMetrics(&tmFont)) ? max(tmFont.tmAveCharWidth, nIndent) : nIndent;
		cDC.SelectObject(pOldFont);
		break;
	}
	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		if (cDC.GetTextMetrics(&tmFont))
		{
			sizeSymbol.cx = tmFont.tmHeight;
			sizeSymbol.cy = tmFont.tmHeight;
			nIndent = max(tmFont.tmAveCharWidth, nIndent);
		}
		cDC.SelectObject(pOldFont);
	}
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), szLines.Copy(szContents); nColumn < nColumns; nColumn++)
	{
		for (nWidth[0] = CalcPrintDocTitleWidth(cDC, szColumns.GetAt(nColumn), pTitleFont), nWidth[1] = CalcPrintDocColumnWidth(cDC, rArea, szColumns.GetAt(nColumn), szLines, pItemsFont); szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER); )
		{
			nWidth[1] += 3 * sizeSymbol.cx / 2;
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_ARGUMENTS); )
		{
			nWidth[1] = min(3 * nWidth[0], nWidth[1]);
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_FLAGS); )
		{
			nWidth[1] = (sizeSymbol.cx > 0) ? (11 * sizeSymbol.cx / 2) : nWidth[1];
			break;
		}
		for (; szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PTVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_PEVRESULT) || szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVCHECKS) || szColumns.GetAt(nColumn) == STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_CEVRESULT); )
		{
			nWidth[1] = sizeSymbol.cx;
			break;
		}
		nTabs.Add((nTabs.GetSize() > 0) ? (2 * nIndent + nTabs.GetAt(nTabs.GetSize() - 1) + max(nWidth[0], nWidth[1])) : (2 * nIndent + max(nWidth[0], nWidth[1])));
	}
	if (nTabs.GetSize() > 0)
	{
		nTabs.SetAt(nTabs.GetSize() - 1, nTabs.GetAt(nTabs.GetSize() - 1) - nIndent);
		return((INT)nTabs.GetSize());
	}
	return 0;
}

INT CTCAutomaticStackWnd::CalcPrintDocColumnWidth(CDC &cDC, CONST RECT &rArea, LPCTSTR pszColumn, CStringArray &szContents, CFont *pItemsFont) CONST
{
	INT  nPos;
	INT  nLine;
	INT  nLines;
	INT  nWidth;
	CRect  rColumn;
	CFont  *pOldFont;
	CString  szLine;

	if ((pOldFont = cDC.SelectObject(pItemsFont)))
	{
		for (nLine = 0, nLines = (INT)szContents.GetSize(), nWidth = 0; nLine < nLines; nLine++)
		{
			if ((nPos = szContents.GetAt(nLine).Find(CTextView::GetColumnDelimiter())) >= 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = (!lstrcmp(pszColumn, STRING(IDS_TCAUTOMATICSTACK_TITLEITEM_NUMBER)) && szContents.GetAt(nLine).Left(nPos).Find(CTCAutomaticStackPageTextView::GetSymbolDelimiter()) >= 0) ? szContents.GetAt(nLine).Left(nPos).Left(szContents.GetAt(nLine).Left(nPos).Find(CTCAutomaticStackPageTextView::GetSymbolDelimiter())) : szContents.GetAt(nLine).Left(nPos))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, szContents.GetAt(nLine).Mid(nPos + 1));
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
			if (szContents.GetAt(nLine).GetLength() > 0)
			{
				for (rColumn.SetRect(0, 0, cDC.GetTextExtent((szLine = szContents.GetAt(nLine))).cx, 0); rColumn.Width() > rArea.right - rArea.left; )
				{
					cDC.DrawText(szLine, (rColumn = CRect(0, 0, rArea.right - rArea.left, 0)), DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_CALCRECT);
					break;
				}
				szContents.SetAt(nLine, EMPTYSTRING);
				nWidth = max(rColumn.Width(), nWidth);
				continue;
			}
		}
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}

BOOL CTCAutomaticStackWnd::CalcPrintDocRect(CDC &cDC, CONST RECT &rtMargin, BOOL bMetric) CONST
{
	CRect  rClip;

	rClip.SetRect(0, 0, cDC.GetDeviceCaps(HORZRES), cDC.GetDeviceCaps(VERTRES));
	rClip.DeflateRect((bMetric) ? (rtMargin.left*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.left*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.top*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.top*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000, (bMetric) ? (rtMargin.right*cDC.GetDeviceCaps(HORZRES)) / (100 * cDC.GetDeviceCaps(HORZSIZE)) : (rtMargin.right*cDC.GetDeviceCaps(LOGPIXELSX)) / 1000, (bMetric) ? (rtMargin.bottom*cDC.GetDeviceCaps(VERTRES)) / (100 * cDC.GetDeviceCaps(VERTSIZE)) : (rtMargin.bottom*cDC.GetDeviceCaps(LOGPIXELSY)) / 1000);
	return((cDC.IntersectClipRect(rClip) != ERROR) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::SetLayoutInfo(CONST RECT &rPropertiesToolBar, CONST RECT &rOperationsToolBar, CONST CUIntArray &nNormalScheduledPaneColumns, CONST CUIntArray &nNormalScheduledPaneWidths, CONST SIZE &sizeNormalScheduledPane, CONST CUIntArray &nNormalHistoricalPaneColumns, CONST CUIntArray &nNormalHistoricalPaneWidths, CONST SIZE &sizeNormalHistoricalPane, CONST CUIntArray &nTimeTaggedScheduledPaneColumns, CONST CUIntArray &nTimeTaggedScheduledPaneWidths, CONST SIZE &sizeTimeTaggedScheduledPane, CONST CUIntArray &nTimeTaggedHistoricalPaneColumns, CONST CUIntArray &nTimeTaggedHistoricalPaneWidths, CONST SIZE &sizeTimeTaggedHistoricalPane, CONST LOGFONT *pNormalScheduledPaneTitleFont, CONST LOGFONT *pNormalScheduledPaneItemsFont, CONST LOGFONT *pNormalHistoricalPaneTitleFont, CONST LOGFONT *pNormalHistoricalPaneItemsFont, CONST LOGFONT *pTimeTaggedScheduledPaneTitleFont, CONST LOGFONT *pTimeTaggedScheduledPaneItemsFont, CONST LOGFONT *pTimeTaggedHistoricalPaneTitleFont, CONST LOGFONT *pTimeTaggedHistoricalPaneItemsFont, INT nPage, CONST SCROLLINFO *pNormalScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pNormalScheduledPaneVertScrollInfo, CONST SCROLLINFO *pNormalHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pNormalHistoricalPaneVertScrollInfo, CONST SCROLLINFO *pTimeTaggedScheduledPaneHorzScrollInfo, CONST SCROLLINFO *pTimeTaggedScheduledPaneVertScrollInfo, CONST SCROLLINFO *pTimeTaggedHistoricalPaneHorzScrollInfo, CONST SCROLLINFO *pTimeTaggedHistoricalPaneVertScrollInfo)
{
	CPane  *pPane;
	CRect  rToolBar[2];
	CDockSite  *pDockSite;
	CDockingPanesRow  *pPanesRow[2];

	if ((pDockSite = GetDockingManager()->FindDockSite(CBRS_ALIGN_TOP, TRUE)))
	{
		for (rToolBar[0] = rPropertiesToolBar, rToolBar[1] = rOperationsToolBar, ScreenToClient(&rToolBar[0]), ScreenToClient(&rToolBar[1]); rPropertiesToolBar.top != rOperationsToolBar.top && pDockSite->GetDockSiteRowsList().GetCount() == 1; )
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? pDockSite->AddRow(pDockSite->GetDockSiteRowsList().GetTailPosition(), (rPropertiesToolBar.top > rOperationsToolBar.top) ? (rPropertiesToolBar.bottom - rPropertiesToolBar.top) : (rOperationsToolBar.bottom - rOperationsToolBar.top)) : (CDockingPanesRow *)NULL))
			{
				pPanesRow[0]->RemovePane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
				pPanesRow[1]->AddPane(&m_wndToolBar[rPropertiesToolBar.top < rOperationsToolBar.top], DM_RECT, &rToolBar[rPropertiesToolBar.top < rOperationsToolBar.top]);
			}
			break;
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top  &&  pDockSite->GetDockSiteRowsList().GetCount() > 1)
		{
			if ((pPanesRow[1] = ((pPanesRow[0] = (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetHeadPosition()))) ? (CDockingPanesRow *)pDockSite->GetDockSiteRowsList().GetAt(pDockSite->GetDockSiteRowsList().GetTailPosition()) : (CDockingPanesRow *)NULL))
			{
				if ((pPane = (CPane *)pPanesRow[1]->GetPaneList().GetAt(pPanesRow[1]->GetPaneList().GetHeadPosition())))
				{
					pPanesRow[1]->RemovePane(pPane);
					pPanesRow[0]->AddPane(pPane, DM_RECT, &rToolBar[pPane->GetSafeHwnd() == m_wndToolBar[1].GetSafeHwnd()]);
				}
			}
		}
		if (rPropertiesToolBar.top == rOperationsToolBar.top) DockPaneLeftOf(&m_wndToolBar[rPropertiesToolBar.left > rOperationsToolBar.left], &m_wndToolBar[rPropertiesToolBar.left < rOperationsToolBar.left]);
		m_wndToolBar[0].CWnd::MoveWindow(rToolBar[0]);
		m_wndToolBar[1].CWnd::MoveWindow(rToolBar[1]);
	}
	return m_wndView.SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nNormalScheduledPaneColumns, nNormalScheduledPaneWidths, sizeNormalScheduledPane) && m_wndView.SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nNormalHistoricalPaneColumns, nNormalHistoricalPaneWidths, sizeNormalHistoricalPane) && m_wndView.SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nTimeTaggedScheduledPaneColumns, nTimeTaggedScheduledPaneWidths, sizeTimeTaggedScheduledPane) && m_wndView.SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nTimeTaggedHistoricalPaneColumns, nTimeTaggedHistoricalPaneWidths, sizeTimeTaggedHistoricalPane) && m_wndView.SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, pNormalScheduledPaneTitleFont) && m_wndView.SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, pNormalScheduledPaneItemsFont) && m_wndView.SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, pNormalHistoricalPaneTitleFont) && m_wndView.SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, pNormalHistoricalPaneItemsFont) && m_wndView.SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, pTimeTaggedScheduledPaneTitleFont) && m_wndView.SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, pTimeTaggedScheduledPaneItemsFont) && m_wndView.SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, pTimeTaggedHistoricalPaneTitleFont) && m_wndView.SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, pTimeTaggedHistoricalPaneItemsFont) && m_wndView.SetLayoutInfo(nPage, pNormalScheduledPaneHorzScrollInfo, pNormalScheduledPaneVertScrollInfo, pNormalHistoricalPaneHorzScrollInfo, pNormalHistoricalPaneVertScrollInfo, pTimeTaggedScheduledPaneHorzScrollInfo, pTimeTaggedScheduledPaneVertScrollInfo, pTimeTaggedHistoricalPaneHorzScrollInfo, pTimeTaggedHistoricalPaneVertScrollInfo);
}

BOOL CTCAutomaticStackWnd::GetLayoutInfo(RECT &rPropertiesToolBar, RECT &rOperationsToolBar, CUIntArray &nNormalScheduledPaneColumns, CUIntArray &nNormalScheduledPaneWidths, CSize &sizeNormalScheduledPane, CUIntArray &nNormalHistoricalPaneColumns, CUIntArray &nNormalHistoricalPaneWidths, CSize &sizeNormalHistoricalPane, CUIntArray &nTimeTaggedScheduledPaneColumns, CUIntArray &nTimeTaggedScheduledPaneWidths, CSize &sizeTimeTaggedScheduledPane, CUIntArray &nTimeTaggedHistoricalPaneColumns, CUIntArray &nTimeTaggedHistoricalPaneWidths, CSize &sizeTimeTaggedHistoricalPane, LOGFONT *pNormalScheduledPaneTitleFont, LOGFONT *pNormalScheduledPaneItemsFont, LOGFONT *pNormalHistoricalPaneTitleFont, LOGFONT *pNormalHistoricalPaneItemsFont, LOGFONT *pTimeTaggedScheduledPaneTitleFont, LOGFONT *pTimeTaggedScheduledPaneItemsFont, LOGFONT *pTimeTaggedHistoricalPaneTitleFont, LOGFONT *pTimeTaggedHistoricalPaneItemsFont, INT &nPage, SCROLLINFO *pNormalScheduledPaneHorzScrollInfo, SCROLLINFO *pNormalScheduledPaneVertScrollInfo, SCROLLINFO *pNormalHistoricalPaneHorzScrollInfo, SCROLLINFO *pNormalHistoricalPaneVertScrollInfo, SCROLLINFO *pTimeTaggedScheduledPaneHorzScrollInfo, SCROLLINFO *pTimeTaggedScheduledPaneVertScrollInfo, SCROLLINFO *pTimeTaggedHistoricalPaneHorzScrollInfo, SCROLLINFO *pTimeTaggedHistoricalPaneVertScrollInfo) CONST
{
	CRect  rToolBar[2];

	m_wndToolBar[0].GetVirtualRect(rToolBar[0]);
	m_wndToolBar[1].GetVirtualRect(rToolBar[1]);
	m_wndToolBar[0].GetWindowRect(&rPropertiesToolBar);
	m_wndToolBar[1].GetWindowRect(&rOperationsToolBar);
	SetRect(&rPropertiesToolBar, rPropertiesToolBar.left, rPropertiesToolBar.top, rPropertiesToolBar.left + rToolBar[0].Width(), rPropertiesToolBar.top + rToolBar[0].Height());
	SetRect(&rOperationsToolBar, rOperationsToolBar.left, rOperationsToolBar.top, rOperationsToolBar.left + rToolBar[1].Width(), rOperationsToolBar.top + rToolBar[1].Height());
	return m_wndView.GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nNormalScheduledPaneColumns, nNormalScheduledPaneWidths, sizeNormalScheduledPane) && m_wndView.GetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nNormalHistoricalPaneColumns, nNormalHistoricalPaneWidths, sizeNormalHistoricalPane) && m_wndView.GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nTimeTaggedScheduledPaneColumns, nTimeTaggedScheduledPaneWidths, sizeTimeTaggedScheduledPane) && m_wndView.GetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nTimeTaggedHistoricalPaneColumns, nTimeTaggedHistoricalPaneWidths, sizeTimeTaggedHistoricalPane) && m_wndView.GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, pNormalScheduledPaneTitleFont) && m_wndView.GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, pNormalScheduledPaneItemsFont) && m_wndView.GetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, pNormalHistoricalPaneTitleFont) && m_wndView.GetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, pNormalHistoricalPaneItemsFont) && m_wndView.GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, pTimeTaggedScheduledPaneTitleFont) && m_wndView.GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, pTimeTaggedScheduledPaneItemsFont) && m_wndView.GetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, pTimeTaggedHistoricalPaneTitleFont) && m_wndView.GetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, pTimeTaggedHistoricalPaneItemsFont) && m_wndView.GetLayoutInfo(nPage, pNormalScheduledPaneHorzScrollInfo, pNormalScheduledPaneVertScrollInfo, pNormalHistoricalPaneHorzScrollInfo, pNormalHistoricalPaneVertScrollInfo, pTimeTaggedScheduledPaneHorzScrollInfo, pTimeTaggedScheduledPaneVertScrollInfo, pTimeTaggedHistoricalPaneHorzScrollInfo, pTimeTaggedHistoricalPaneVertScrollInfo);
}

void CTCAutomaticStackWnd::RecalcLayout(CDisplayToolBar *pToolBar)
{
	if (IsWindow(m_wndView.GetSafeHwnd()))
	{
		m_wndView.RecalcLayout();
		return;
	}
}
void CTCAutomaticStackWnd::RecalcLayout(BOOL bNotify)
{
	CDisplayWnd::RecalcLayout(bNotify);
}

BOOL CTCAutomaticStackWnd::Lock()
{
	return((GetTCService()->Lock() && CDisplayWnd::Lock()) ? TRUE : FALSE);
}

BOOL CTCAutomaticStackWnd::Unlock()
{
	return((CDisplayWnd::Unlock() && GetTCService()->Unlock()) ? TRUE : FALSE);
}

BEGIN_MESSAGE_MAP(CTCAutomaticStackWnd, CDisplayWnd)
	//{{AFX_MSG_MAP(CTCAutomaticStackWnd)
	ON_WM_CREATE()
	ON_WM_GETMINMAXINFO()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	ON_COMMAND(IDM_TCAUTOMATICSTACKSETTINGS, OnSettings)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSAVE, OnSave)
	ON_COMMAND(IDM_TCAUTOMATICSTACKOPEN, OnOpen)
	ON_COMMAND(IDM_TCAUTOMATICSTACKPROPERTIES, OnProperties)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSELECTALL, OnSelectAll)
	ON_COMMAND(IDM_TCAUTOMATICSTACKCUT, OnCut)
	ON_COMMAND(IDM_TCAUTOMATICSTACKCOPY, OnCopy)
	ON_COMMAND(IDM_TCAUTOMATICSTACKPASTE, OnPaste)
	ON_COMMAND(IDM_TCAUTOMATICSTACKDELETE, OnDelete)
	ON_COMMAND(IDM_TCAUTOMATICSTACKFULLVIEWMODE, OnFullViewMode)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSTART, OnStart)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSUSPEND, OnSuspend)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSTOP, OnStop)
	ON_COMMAND(IDM_TCAUTOMATICSTACKACKNOWLEDGE, OnAcknowledge)
	ON_COMMAND(IDM_TCAUTOMATICSTACKRESETINTERLOCKS, OnResetInterlocks)
	ON_COMMAND(IDM_TCAUTOMATICSTACKINTERLOCKCHECKS, OnInterlockChecks)
	ON_COMMAND(IDM_TCAUTOMATICSTACKSUBSYSTEMCHECKS, OnSubSystemChecks)
	ON_COMMAND(IDM_TCAUTOMATICSTACKRELEASEWAITMODE, OnReleaseWaitMode)
	ON_COMMAND(IDM_TCAUTOMATICSTACKAUTOREJECTIONMODE, OnAutoRejectionMode)
	ON_COMMAND(IDM_TCAUTOMATICSTACKPRINT, OnPrint)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSETTINGS, OnUpdateSettings)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSAVE, OnUpdateSave)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKOPEN, OnUpdateOpen)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKPROPERTIES, OnUpdateProperties)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSELECTALL, OnUpdateSelectAll)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKCUT, OnUpdateCut)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKCOPY, OnUpdateCopy)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKPASTE, OnUpdatePaste)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKDELETE, OnUpdateDelete)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKFULLVIEWMODE, OnUpdateFullViewMode)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSTART, OnUpdateStart)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSUSPEND, OnUpdateSuspend)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSTOP, OnUpdateStop)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKACKNOWLEDGE, OnUpdateAcknowledge)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKRESETINTERLOCKS, OnUpdateResetInterlocks)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKINTERLOCKCHECKS, OnUpdateInterlockChecks)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKSUBSYSTEMCHECKS, OnUpdateSubSystemChecks)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKRELEASEWAITMODE, OnUpdateReleaseWaitMode)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKAUTOREJECTIONMODE, OnUpdateAutoRejectionMode)
	ON_UPDATE_COMMAND_UI(IDM_TCAUTOMATICSTACKPRINT, OnUpdatePrint)
	ON_UPDATE_COMMAND_UI(ID_TCAUTOMATICSTACK_STATUSBAR_MESSAGEPANE, OnUpdateStatusBarMessagePane)
	ON_UPDATE_COMMAND_UI(ID_TCAUTOMATICSTACK_STATUSBAR_UPLINKPANE, OnUpdateStatusBarUplinkPane)
	ON_UPDATE_COMMAND_UI(ID_TCAUTOMATICSTACK_STATUSBAR_PEVPANE, OnUpdateStatusBarPEVPane)
	ON_UPDATE_COMMAND_UI(ID_TCAUTOMATICSTACK_STATUSBAR_CEVPANE, OnUpdateStatusBarCEVPane)
	ON_UPDATE_COMMAND_UI(ID_TCAUTOMATICSTACK_STATUSBAR_STATEPANE, OnUpdateStatusBarStatePane)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCAutomaticStackWnd message handlers

int CTCAutomaticStackWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CDisplayWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (EnableDocking(CBRS_ALIGN_TOP), m_bEnableFloatingBars = TRUE; CreateToolBars() && CreateStatusBar() && CreateView() && LoadAccelTable(MAKEINTRESOURCE(IDR_TCAUTOMATICSTACKFRAME)); )
		{
			UpdateBars();
			return 0;
		}
	}
	return -1;
}

void CTCAutomaticStackWnd::OnGetMinMaxInfo(MINMAXINFO *lpMMI)
{
	CRect  rView;
	CRect  rStatusBar;

	for (rView.SetRectEmpty(); IsWindow(m_wndView.GetSafeHwnd()); )
	{
		m_wndView.GetWindowRect(rView);
		ScreenToClient(rView);
		rView.SetRect(rView.left, rView.top, rView.left + m_wndView.GetTrackSize().cx, rView.top + m_wndView.GetTrackSize().cy);
		break;
	}
	for (rStatusBar.SetRectEmpty(); IsWindow(m_wndStatusBar.GetSafeHwnd()); )
	{
		m_wndStatusBar.GetWindowRect(rStatusBar);
		break;
	}
	lpMMI->ptMinTrackSize.x = max(lpMMI->ptMinTrackSize.x, 2 * GetSystemMetrics(SM_CXFRAME) + rView.Width());
	lpMMI->ptMinTrackSize.y = max(lpMMI->ptMinTrackSize.y, 2 * (GetSystemMetrics(SM_CYFRAME) + GetSystemMetrics(SM_CYEDGE)) + GetSystemMetrics(SM_CYCAPTION) + rView.top + rView.Height() + rStatusBar.Height());
	CDisplayWnd::OnGetMinMaxInfo(lpMMI);
}

void CTCAutomaticStackWnd::OnSize(UINT nType, int cx, int cy)
{
	CDisplayWnd::OnSize(nType, cx, cy);
	m_wndView.RecalcLayout();
}

BOOL CTCAutomaticStackWnd::OnEraseBkgnd(CDC *pDC)
{
	CRect  rView;
	CRect  rPage[3];

	if (!IsInitialized())
	{
		m_wndView.UpdateWindow();
		m_wndToolBar[0].UpdateWindow();
		m_wndToolBar[1].UpdateWindow();
		m_wndStatusBar.UpdateWindow();
	}
	for (GetClientRect(rView), m_wndView.GetItemRect(0, rPage[0]), m_wndView.GetItemRect(m_wndView.GetCurSel(), rPage[1]), m_wndView.GetItemRect(m_wndView.GetItemCount() - 1, rPage[2]), m_wndView.ClientToScreen(rPage[0]), m_wndView.ClientToScreen(rPage[1]), m_wndView.ClientToScreen(rPage[2]), ScreenToClient(rPage[0]), ScreenToClient(rPage[1]), ScreenToClient(rPage[2]), rPage[0].InflateRect((!m_wndView.GetCurSel()) ? m_wndView.GetMargins().cx : 0, 0, 0, 0), rPage[1].InflateRect(0, m_wndView.GetMargins().cy); m_wndView.GetCurSel() != m_wndView.GetItemCount() - 1; )
	{
		rPage[2].DeflateRect(0, 0, m_wndView.GetMargins().cx, 0);
		break;
	}
	rView.SetRect(rView.left, rView.top, rView.right, rPage[0].bottom);
	pDC->ExcludeClipRect(rPage[0].left, rPage[0].top, rPage[2].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[2].bottom);
	pDC->ExcludeClipRect(rPage[1].left, rPage[1].top, rPage[1].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[1].bottom);
	pDC->FillSolidRect(rView, GetSysColor(COLOR_BTNFACE));
	return TRUE;
}

void CTCAutomaticStackWnd::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(pOldWnd->GetSafeHwnd()) && IsChild(pOldWnd))
	{
		GetParent()->SetFocus();
		return;
	}
	if (GetTelecommandCount() >= 0)
	{
		m_wndView.SetCurTelecommand(TCAUTOMATICSTACK_PANE_SCHEDULED, max(GetCurTelecommand(), 0));
		m_wndView.SetFocus();
		return;
	}
	CDisplayWnd::OnSetFocus(pOldWnd);
}

BOOL CTCAutomaticStackWnd::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMTTDISPINFO  *pNotifyInfo = (NMTTDISPINFO *)lParam;

	if (pNotifyInfo->hdr.code == TTN_GETDISPINFO)
	{
		if (pNotifyInfo->hdr.idFrom >= 0 && pNotifyInfo->hdr.idFrom <= 1)
		{
			pNotifyInfo->lParam = (LPARAM)NULL;
			pNotifyInfo->hinst = (HINSTANCE)NULL;
			pNotifyInfo->uFlags = TTF_DI_SETITEM;
			pNotifyInfo->lpszText = (pNotifyInfo->hdr.idFrom == 0) ? (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_PAGE_NORMAL_TOOLTIP) : (LPTSTR)STRING(IDS_TCAUTOMATICSTACK_PAGE_TIMETAGGED_TOOLTIP);
			return TRUE;
		}
		if (m_wndToolBar[0].CommandToIndex((UINT)pNotifyInfo->hdr.idFrom) < 0 || m_wndToolBar[1].CommandToIndex((UINT)pNotifyInfo->hdr.idFrom) < 0) return TRUE;
	}
	return CDisplayWnd::OnNotify(wParam, lParam, pResult);
}

BOOL CTCAutomaticStackWnd::OnCloseSettingsDialog(UINT nCode)
{
	INT  nArguments;
	INT  nCheckCount;
	UINT  nFilterMode;
	UINT  nFilterSortMode;
	UINT  nFilterCount;
	UINT  nCheckFlags;
	UINT  nOptions[2];
	UINT  nLogPolicy;
	UINT  nLogCount;
	BOOL  bLogEvent;
	BOOL  bToolTips;
	BOOL  bStateFlag;
	BOOL  bModeFlags[4];
	BOOL  bAllArguments;
	CString  szAudition;
	CString  szNotification;
	CString  szFilterName;
	CString  szFilterSequence;
	CString  szComputer[2][2];
	CString  szLogFileName[2];
	LOGFONT  fntTitle[2][2];
	LOGFONT  fntItems[2][2];
	COLORREF  nColor[2][2];
	CUIntArray  nColumns[2][2];
	CUIntArray  nFilterSubSystems;
	DWORDLONG  dwLogRetention;
	CTimeSpan  tLogRetention;
	CTimeSpan  tTimeWindow[2];
	CTimeSpan  tTimePeriod;
	CTCAutomaticStackPrintJobs  pJobs;

	if (nCode == IDOK)
	{
		if (m_dlgSettings.IsLayoutModified())
		{
			m_dlgSettings.GetToolTipMode(bToolTips);
			m_dlgSettings.GetColumns(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[0][0]);
			m_dlgSettings.GetColumns(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[0][1]);
			m_dlgSettings.GetColumns(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[1][0]);
			m_dlgSettings.GetColumns(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[1][1]);
			m_dlgSettings.GetTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntTitle[0][0]);
			m_dlgSettings.GetTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntTitle[0][1]);
			m_dlgSettings.GetTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntTitle[1][0]);
			m_dlgSettings.GetTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntTitle[1][1]);
			m_dlgSettings.GetItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntItems[0][0]);
			m_dlgSettings.GetItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntItems[0][1]);
			m_dlgSettings.GetItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntItems[1][0]);
			m_dlgSettings.GetItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntItems[1][1]);
			m_dlgSettings.GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[0][0]);
			m_dlgSettings.GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[0][1]);
			m_dlgSettings.GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[1][0]);
			m_dlgSettings.GetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[1][1]);
			if (!SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[0][0]) || !SetLayout(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[0][1]) || !SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColumns[1][0]) || !SetLayout(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColumns[1][1]) || !SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntTitle[0][0]) || !SetListTitleFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntTitle[0][1]) || !SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntTitle[1][0]) || !SetListTitleFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntTitle[1][1]) || !SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntItems[0][0]) || !SetListItemsFont(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntItems[0][1]) || !SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, &fntItems[1][0]) || !SetListItemsFont(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, &fntItems[1][1]) || !SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[0][0]) || !SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_NORMAL | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[0][1]) || !SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_SCHEDULED, nColor[1][0]) || !SetGridBackgroundColor(TCAUTOMATICSTACK_PAGE_TIMETAGGED | TCAUTOMATICSTACK_PANE_HISTORICAL, nColor[1][1]) || !EnableToolTipMode(bToolTips)) return FALSE;
		}
		if (m_dlgSettings.IsOperationsModified())
		{
			m_dlgSettings.GetListOptions(nArguments, bAllArguments);
			m_dlgSettings.GetListCheckOptions(nCheckFlags, nCheckCount);
			m_dlgSettings.GetMiscellaneousOptions(nOptions[0]);
			m_dlgSettings.GetDefaultReleaseTimeWindow(tTimeWindow[0]);
			m_dlgSettings.GetDispatchTimeWindow(tTimeWindow[1]);
			m_dlgSettings.GetMasterManualModeFlag(bModeFlags[0]);
			m_dlgSettings.GetInterlockModeFlag(bModeFlags[1]);
			m_dlgSettings.GetReleaseWaitModeFlag(bModeFlags[2]);
			m_dlgSettings.GetAutoRejectionModeFlag(bModeFlags[3]);
			m_dlgSettings.GetDisabledStateFlag(bStateFlag);
			if (!SetTelecommandingMode((bModeFlags[0]) ? TCAUTOMATICSTACK_MODE_MASTERMANUAL : TCAUTOMATICSTACK_MODE_DEFAULT) || !SetTelecommandingState((bStateFlag) ? (GetTelecommandingState() | TCAUTOMATICSTACK_STATE_DISABLED) : (GetTelecommandingState() & ~TCAUTOMATICSTACK_STATE_DISABLED)) || !SetTelecommandingChecks(nCheckFlags) || !EnableTelecommandingInterlockMode(bModeFlags[1]) || !EnableTelecommandingReleaseWaitMode(bModeFlags[2]) || !EnableTelecommandingAutoRejectionMode(bModeFlags[3]) || !SetListOptions(nArguments, bAllArguments) || !SetListUpdateChecks(nCheckCount) || !SetMiscellaneousOptions(nOptions[0]) || !SetDefaultReleaseTimeWindow(tTimeWindow[0]) || !SetDispatchTimeWindow(tTimeWindow[1])) return FALSE;
		}
		if (m_dlgSettings.IsFilteringModified())
		{
			m_dlgSettings.GetFilterMode(nFilterMode);
			m_dlgSettings.GetFilterTelecommandName(szFilterName);
			m_dlgSettings.GetFilterTelecommandSequence(szFilterSequence);
			m_dlgSettings.GetFilterTelecommandSubSystems(nFilterSubSystems);
			m_dlgSettings.GetFilterLimitation(nFilterCount);
			m_dlgSettings.GetFilterSortMode(nFilterSortMode);
			if (!SetFilterMode(nFilterMode) || !SetFilterTelecommandName(szFilterName) || !SetFilterTelecommandSequence(szFilterSequence) || !SetFilterTelecommandSubSystems(nFilterSubSystems) || !SetFilterLimitation(nFilterCount) || !SetFilterSortMode(nFilterSortMode)) return FALSE;
		}
		if (m_dlgSettings.IsPlanningModified())
		{
			m_dlgSettings.GetPlanningOptions(szComputer[0][0], szComputer[0][1], nOptions[0], tTimePeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[1]);
			if (!SetPlanningOptions(szComputer[0][0], szComputer[0][1], nOptions[0], tTimePeriod, szAudition, szNotification, szComputer[1][0], szComputer[1][1], nOptions[1])) return FALSE;
		}
		if (m_dlgSettings.IsLoggingModified())
		{
			m_dlgSettings.GetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent);
			if (!SetLoggingOptions(nLogPolicy, szLogFileName[0], dwLogRetention, tLogRetention, szLogFileName[1], nLogCount, bLogEvent)) return FALSE;
		}
		if (m_dlgSettings.IsPrintingModified())
		{
			m_dlgSettings.GetPrintJobs(pJobs);
			if (!SetPrintJobs(pJobs)) return FALSE;
		}
		UpdateContents(m_dlgSettings.IsFilteringModified());
		UpdateAllPanes();
	}
	return TRUE;
}

void CTCAutomaticStackWnd::OnSettings()
{
	ReportEvent((m_dlgSettings.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCAutomaticStackWnd::OnSave()
{
	CTCAutomaticStackItems  pItems;
	CHourglassCursor  cCursor;

	EnumSelectedTelecommands(0, pItems);
	ReportEvent((m_dlgSaveStacks.Create(this, pItems) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCAutomaticStackWnd::OnOpen()
{
	CHourglassCursor  cCursor;

	ReportEvent((m_dlgLoadStacks.Create(this) <= 0) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

void CTCAutomaticStackWnd::OnProperties()
{
	CHourglassCursor  cCursor;

	ShowTelecommandProperties();
}

void CTCAutomaticStackWnd::OnSelectAll()
{
	CHourglassCursor  cCursor;

	DoSelectAllTelecommands();
}

void CTCAutomaticStackWnd::OnCut()
{
	CHourglassCursor  cCursor;

	DoCutTelecommand();
}

void CTCAutomaticStackWnd::OnCopy()
{
	CHourglassCursor  cCursor;

	DoCopyTelecommand();
}

void CTCAutomaticStackWnd::OnPaste()
{
	CHourglassCursor  cCursor;

	DoPasteTelecommand();
}

void CTCAutomaticStackWnd::OnDelete()
{
	CHourglassCursor  cCursor;

	DoDeleteTelecommand();
}

void CTCAutomaticStackWnd::OnFullViewMode()
{
	CHourglassCursor  cCursor;

	EnableFullViewMode(!IsFullViewModeEnabled());
}

void CTCAutomaticStackWnd::OnStart()
{
	CHourglassCursor  cCursor;

	DoCommandingState();
}

void CTCAutomaticStackWnd::OnSuspend()
{
	CHourglassCursor  cCursor;

	DoSuspendedState();
}

void CTCAutomaticStackWnd::OnStop()
{
	CHourglassCursor  cCursor;

	DoStoppedState();
}

void CTCAutomaticStackWnd::OnAcknowledge()
{
	CHourglassCursor  cCursor;

	DoAcknowledgeTelecommand();
}

void CTCAutomaticStackWnd::OnResetInterlocks()
{
	CHourglassCursor  cCursor;

	DoResetInterlocks();
}

void CTCAutomaticStackWnd::OnInterlockChecks()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingInterlockMode(!IsTelecommandingInterlockModeEnabled());
}

void CTCAutomaticStackWnd::OnSubSystemChecks()
{
	CHourglassCursor  cCursor;

	DoCheckSubSystems();
}

void CTCAutomaticStackWnd::OnReleaseWaitMode()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingReleaseWaitMode(!IsTelecommandingReleaseWaitModeEnabled());
}

void CTCAutomaticStackWnd::OnAutoRejectionMode()
{
	CHourglassCursor  cCursor;

	EnableTelecommandingAutoRejectionMode(!IsTelecommandingAutoRejectionModeEnabled());
}

void CTCAutomaticStackWnd::OnPrint()
{
	CHourglassCursor  cCursor;

	ReportEvent((!Print()) ? SYSTEM_WARNING_DISPLAY_PRINT_FAILURE : SYSTEM_NOERROR);
}

void CTCAutomaticStackWnd::OnUpdateSettings(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsWindow(m_dlgSettings.GetSafeHwnd()));
}

void CTCAutomaticStackWnd::OnUpdateSave(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && (GetTelecommandingState() & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED)) && HasSelectedTelecommands(TCAUTOMATICSTACK_PANE_SCHEDULED, TCAUTOMATICSTACKITEM_STATUS_ONSTACK) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgSaveStacks.GetSafeHwnd()));
}

void CTCAutomaticStackWnd::OnUpdateOpen(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && (GetTelecommandingState() & (TCAUTOMATICSTACK_STATE_SUSPENDED | TCAUTOMATICSTACK_STATE_STOPPED)) && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgLoadStacks.GetSafeHwnd()));
}

void CTCAutomaticStackWnd::OnUpdateProperties(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanShowTelecommandProperties());
	pCmdUI->SetCheck(IsShowingTelecommandProperties());
}

void CTCAutomaticStackWnd::OnUpdateSelectAll(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanSelectAllTelecommands() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdateCut(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCutTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdateCopy(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCopyTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdatePaste(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanPasteTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdateDelete(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanDeleteTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdateFullViewMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsFullViewModeEnabled());
}

void CTCAutomaticStackWnd::OnUpdateStart(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCommandingState() && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
}

void CTCAutomaticStackWnd::OnUpdateSuspend(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanSuspendedState() && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
}

void CTCAutomaticStackWnd::OnUpdateStop(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanStoppedState() && CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE));
}

void CTCAutomaticStackWnd::OnUpdateAcknowledge(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanAcknowledgeTelecommand() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
}

void CTCAutomaticStackWnd::OnUpdateResetInterlocks(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanResetInterlocks() && (CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TCAUTOMATICSTACK_CRITICALCHANGE)));
	pCmdUI->SetCheck(IsWindow(m_dlgInterlocks.GetSafeHwnd()));
}

void CTCAutomaticStackWnd::OnUpdateInterlockChecks(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingInterlockModeEnabled());
}

void CTCAutomaticStackWnd::OnUpdateSubSystemChecks(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized() && CanCheckSubSystems());
	pCmdUI->SetCheck(IsWindow(m_dlgSubSystems.GetSafeHwnd()));
}

void CTCAutomaticStackWnd::OnUpdateReleaseWaitMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingReleaseWaitModeEnabled());
}

void CTCAutomaticStackWnd::OnUpdateAutoRejectionMode(CCmdUI *pCmdUI)
{
	pCmdUI->Enable(IsInitialized());
	pCmdUI->SetCheck(IsTelecommandingAutoRejectionModeEnabled());
}

void CTCAutomaticStackWnd::OnUpdatePrint(CCmdUI *pCmdUI)
{
	pCmdUI->Enable((IsInitialized() && IsDefaultPrinterAvailable() && CanPrint()) ? TRUE : FALSE);
}

void CTCAutomaticStackWnd::OnUpdateStatusBarMessagePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCAutomaticStackWnd::OnUpdateStatusBarUplinkPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCAutomaticStackWnd::OnUpdateStatusBarPEVPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCAutomaticStackWnd::OnUpdateStatusBarCEVPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCAutomaticStackWnd::OnUpdateStatusBarStatePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}
